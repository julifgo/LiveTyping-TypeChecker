

----STARTUP---- (18 September 2024 18:27:19) as C:\Users\juli_\Tesis\TO_UPLOAD\windows64\CuisUniversity-6169.image!


----End fileIn of C:\Users\juli_\Tesis\TO_UPLOAD\windows64\LiveTypingGenerics.pck.st----!

----End fileIn of C:\Users\juli_\Tesis\TO_UPLOAD\windows64\LiveTypingTypeChecker.pck.st----!

!testRun: #FlowGraphCreationTest #test01onVarToVarAssigmentAssignorFlowsToAssignee stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #FlowGraphCreationTest #test02ThereIsAlwaysANodeForReturnValue stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #FlowGraphCreationTest #test03onAssigmentToAssigmentAllVarsAreLinked stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #FlowGraphCreationTest #test04onVarReturnItFlowsToReturnNode stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #FlowGraphCreationTest #test05CanTrackAMethodThroughMessageSends stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #FlowGraphCreationTest #test06TrackedMethodIsLinkedToVarsOnAssigment stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #FlowGraphCreationTest #test07CanTrackMultipleMethodThroughMessageSends stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #FlowGraphCreationTest #test08TrackedMethodsAreLinkedToVarsOnAssigment stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #FlowGraphCreationTest #test09InstVarsAreAlwaysAddedToGraph stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #FlowGraphCreationTest #test10WhenVarIsConnectedToReturnValueItsNeighborsAreAlsoConnected stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test01CanAddAGenericType stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test02GenericsDoesNotRepeat stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test03GenericsCannotBeAlteredFromOuterScope stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test04CanSaveASelectorForAGeneric stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test05TracedMethodsCanBeRecovered stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test06TracedMethodsCantBeModifiedExternally stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test07ATracedMethodCanBeDeleted stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test08AGenericCanBeDeleted stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test09CanSaveAGetterSelectorForAGeneric stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test10GetterSelectorsCantBeModifiedExternally stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test11CanStoreAndRetrieveTracedMethodRefs stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test12CanStoreAndRetrieveMultipleTracedMethodRefs stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test13AnalysisCanBeInitializedRecursively stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test14RecursiveAnalysisHasRecursiveTracedMethods stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test15GraphsAreDeletedWhenAllAnalysisFinish stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test16CanStoreGenericTypeConstructors stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test17SaveASelectorForAGenericWithMultipleParams stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #GAStorageTest #test18AGetterMethodCanBeDeleted stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #InferenceTest #test01GenericClassesAreReplacedByGenericTypeInstances stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #InferenceTest #test02GenericClassesAreMergedWithTheirGenericTypes stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #InferenceTest #test03LiteralCollectionOneLiteralElement stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #InferenceTest #test04LiteralCollectionLiteralElementsOfDifferentType stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #InferenceTest #test05LiteralCollectionElementsFromVariable stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #InferenceTest #test06LiteralCollectionElementsFromMethodCall stamp: 'JFGO 9/18/2024 18:38:05'!
PASSED!

!testRun: #InferenceTest #test07LiteralCollectionElementsFromMethodCallWithArgumentsTypesFromContext stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test08LiteralCollectionElementsFromRecursiveMethod stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test09LiteralCollectionFlowingInMultipleVariables stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test10LiteralCollectionFlowingInMultipleVariablesArgumentInMethod stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test11LiteralCollectionFlowingInMultipleVariablesEachReceivingMessages stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test12LiteralCollectionFlowingInMultipleVariablesEachReceivingMessagesBeforeAndAfterAssigment stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test13LiteralCollectionFlowingInMultipleVariablesArgumentInMultipleMethod stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test14LiteralCollectionFlowingInMultipleVariablesMultipleArgumentsInMethod stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test15LiteralCollectionFlowingToNonSelfMethod stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test16LiteralCollectionFlowingToSuperMethod stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test17GenericTypeReturningParameterFromGetter stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test18MethodReturningGenericType stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test19InstanceVariableUsedOnlyWithinCurrentClass stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test20InstanceVariableExposedByGetterAssignToVariable stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test21InstanceVariableExposedByMultipleGettersAssignToVariable stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test22InstanceVariableMessageSendsToGetters stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test23InstanceVariableGettersUsedAsArguments stamp: 'JFGO 9/18/2024 18:38:06'!
PASSED!

!testRun: #InferenceTest #test24InstanceVariableFlowingToOtherVariables stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test25CollectionContainingAnotherCollection stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test26CollectionContainingMultipleCollections stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test27CollectionAssignedFromMethodCallAndNotUsedAfter stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test28ReturnResultOfMethodCall stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test29MethodCallOnMultipleClassesWithSameProtocol stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test30MethodCallInsideGenericClasses stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test31CascadeMessageSends stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test32ArgumentCollectsInfoFromCalls stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test33ArgumentCollectsInfoFromCallsAndCurrentMethod stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test34GenericTypeConstructorFromArguments stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test35GenericTypeConstructorFromArgumentParameters stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test36TraceReturnValueWhenMethodReturnsArgument stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test37AddingFromOtherCollectionParameters stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test38CollectionFromLiteralNode stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test39CollectionWithMultipleParameters stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test40GetterForGenericWithMultipleParameters stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test41ArgumentCollectsInfoFromCallsWithMultipleParameters stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test42ArgumentCollectsInfoFromCallsAndCurrentMethodWithMultipleParameters stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test43ReturnTypeOfSetterMethodIsLastArgument stamp: 'JFGO 9/18/2024 18:38:07'!
PASSED!

!testRun: #InferenceTest #test44CollectionIsDetectedWhenReturnedFromMethodAndAssignedToVariable stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #InferenceTest #test45ArgumentCollectsInfoCurrentMethodWithNoCallers stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test001SameType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test002DifferentType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test003SameHierarchy stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test004CommonSupertypeIsObject stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test005SameGeneric stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test006SameGenericDifferentOrder stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test007GenericsHandleSystemTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test008NestedGenerics stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test009GenericSupertypeWithSameGenerics stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test010GenericSupertypeWithCommonGenerics stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test011FixedAgainstGenericType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test012FixedAgainstGenericTypeInList stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test013GenericAgainstFixedTypeInList stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test014NestedGenerics stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test015NestedGenericsWithDifferentDepth stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test016EmptyTypeAgainstSelf stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test017EmptyTypeAgainstFixedType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test018EmptyTypeAgainstGenericType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test019UnionTypeCollectsTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test020UnionTypeAgainstSelf stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test021UnionTypeAgainstInnerElement stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test022ConvertionAccordingToReceiver stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test023ConvertionToArray stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test024EnumeratingClassTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test025EnumeratingLiveTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #LiveTypeTests #test026EnumeratingLiveAndClassTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test001EmptyRawTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test002AllClasses stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test003AnEmptyCollectionsContentType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test004ClassesAndCollectionsContentType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test005ACollectionsContentTypeWithTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test006SeveralCollectionsContentTypesWithTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test007CreateFixedType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test008CreateEmptyType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test009CreateGenericType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test010CreateGenericNestedType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test011CreateGenericNonEmptyType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test012CreateGenericMultipleNestedType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test001TooltipForEmptyCollection stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test002TooltipForSingleItemCollection stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test003TooltipForTwoItemsWhenSupertypeIsObject stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test004TooltipForTwoItemsWithCommonSupertype stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test005TooltipForVariableWithCollectionAndSomeOtherType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test006TooltipForMergedCollections stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test007TooltipForSameCollectionsWithSameTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test008TooltipForSameCollectionsWithCommonSuperTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test009TooltipForSameCollectionsWithNoSuperTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test010TooltipForCommonSuperCollectionsWithCommonSuperTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test011TooltipForNestedCollections stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test012TooltipForCommonSuperCollectionsWithNoSuperTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test013TooltipForCommonSuperCollectionsRepeatedWithNoSuperTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test014TooltipForCommonSuperCollectionsWithEmptyCollections stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test015TooltipForCommonSuperCollectionsWithAnEmptyCollection stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test016TooltipForCommonSuperCollectionsAndNoCollection stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test017TooltipForCommonSuperTypeAndNoCommonType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test018TooltipForCommonSuperCollectionsAndNoCollection stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test019TooltipForNestedCollectionsOneOfThemEmpty stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test020TooltipForNestedCollectionsBothSameTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test021TooltipForNestedCollectionsEachNoCommonInnerType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test022TooltipForNestedCommonSuperCollectionsNoCommonInnerType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test023TooltipForNestedNoCommonSupertype stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test024TooltipForNestedRepeatedTypeDifferentInners stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test025TooltipForNestedCommonTypesAndIntruder stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test026TooltipForNestedCommontTypesWithTwoLevelIntruder stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test027TooltipForAwfullyComplexInnerCollections stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test028TooltipOnlyOneType stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test029TooltipCommonSuperTypeSingleClasses stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test030TooltipNoTypes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test031TooltipNoCommonSuperTypeSingleClasses stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TooltipTests #test032TooltipForCollectionWithTwoParameters stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeFlowGraphTest #test01IsCreatedEmpty stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeFlowGraphTest #test02AddingANodeIncreasesTheirCount stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeFlowGraphTest #test03AddingAnEdgeIncreasesTheirCount stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeFlowGraphTest #test04CannotLinkInexistantNodes stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeFlowGraphTest #test05CanAccessNodesButCantDirectlyAddToResult stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeFlowGraphTest #test06CheckingConnectionOnAssociatedUndirectedGraph stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeNodeTests #test001Empty stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeNodeTests #test002Fixed stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeNodeTests #test003GenericSingleValue stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeNodeTests #test004MultipleFixed stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeNodeTests #test005GenericMultipleValues stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeNodeTests #test006MultipleFixedWithNoCommonSupertype stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeNodeTests #test007MultipleGenerics stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeNodeTests #test008GenericEmptyValue stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeNodeTests #test009MultipleGenericsEmptyValue stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #TypeNodeTests #test010EmptyAndFixed stamp: 'JFGO 9/18/2024 18:38:08'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test04AlertsDetectIfNone stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test05AlertsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test07ErrorsDetectIfNone stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test10WarningsDetectIfNone stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test15HasErrorsOrWarnings stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 9/18/2024 18:38:12'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/18/2024 18:38:13'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/18/2024 18:38:13'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/18/2024 18:38:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/18/2024 18:38:22'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/18/2024 18:39:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:39:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:39:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/18/2024 18:39:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/18/2024 18:39:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/18/2024 18:39:31'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/18/2024 18:39:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/18/2024 18:39:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:39:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:39:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:39:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/18/2024 18:39:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/18/2024 18:39:32'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/18/2024 18:39:32'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538568!
test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining
	
	self withMessageName: #conjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538196!
test22LiteralEqualsToObjectIfTrueReturnsLiteralType
	| blockToTestString |
	
	blockToTestString:= '[ v1 + 10. ]'.
	
	self withMessageName: #typeCastLiteralEqualsToObjectIfTrue 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538138!
test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes
	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastEqualsToLiteralIfFalse 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
		self assert: types includes: SmallInteger.
	].


	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537960!
test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext
	
	| assertionBlock selector |
	"Ensure that class symbol don't exist already as precondition"
	
	self assert: (Smalltalk classNamed: #DONTCREATETHISCLASSPLEASE) equals: nil.
	
	assertionBlock:= [:types | 
		self assert:types size equals: 3.
		self assert: types includes: SmallInteger.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].
	
	selector := #typeCastObjectClassNameEqualsUnexistentClassSymbol .
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: assertionBlock.

	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: assertionBlock.


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538342!
test33ObjectEqualsToNilCastToNil
	
	
	self withMessageName: #typeCastEqualsNil
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 subclasses. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: UndefinedObject.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537729!
test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

	| blockToTestString selector |

	blockToTestString:= '[
	v2 month.
	v1 asFloat. ]'.

	selector:=#typeCastIfTrueIfFalseNestedManyVariables.
	
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert: types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	self withMessageName: selector
	calculateTypesOfNode: 'v2' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert: types size equals: 1.	
		self assert: types includes: Date.
	].

! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538597!
test47ManyDisjunctionCollectsEachOneAndRejectsRemaining
	
	self withMessageName: #manyDisjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 4.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
		self assert: types includes: Array.
		self assert: types includes: Set.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538517!
test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll
	
	"ifTrue Branch"
	self withMessageName: #isIsMessageDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: Integer.
		
	].
	
	"ifFalse Branch"
	self withMessageName: #isIsMessageDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537768!
test08TypeCastAppliesCorrectlyToMessageNodeSelector

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalse 
	calculateTypesOfNode: '{v1 isEmpty}' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: False.
		self assert: types includes: True.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537683!
test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalseIfTrue 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].
! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538367!
test35NilEqualsToObjectCastToNil
	
	
	self withMessageName: #typeCastNilEqualsObject
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 subclasses. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: UndefinedObject.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537800!
test10TypeCastDistinctIfTrueReturnsAllTypesButRejected

	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastDistinctIfTrue
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538102!
withMessageName: aMethodSelector calculateTypesOfNode: aVariableNodeName withinBlockWithCode: aStringBlockNode asserting: anAssertionBlock
	| compiledMethod blockToTest types variableNode methodNode |

	compiledMethod := self withPerformingCompiledMethodName: aMethodSelector.
	methodNode := compiledMethod methodNode.
	
	blockToTest := self blockNodeWithSourceCode: aStringBlockNode on: methodNode.
	variableNode := methodNode variableNodeNamed: aVariableNodeName.

	types := compiledMethod typesOfVariableNamed: variableNode withNode: methodNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	anAssertionBlock value: types.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537652!
test02TypeCastIfFalseReturnsAllTypesButRejected
	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalse 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538272!
test27IsKindOfRejectingSupertypeExcludeAllSubtypes
	
	
	self withMessageName: #isKindOfRejectForSupertype
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].

	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538300!
test18BranchesAsMessageArgumentAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastWithBranchAsMessageArgument 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538081!
blockNodeWithSourceCode: blockNodeCodeString on: aMethodNode

	|  nodeEncoder sourceRanges blockToTest  |

	blockToTest:=nil.
	
	nodeEncoder := aMethodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: aMethodNode sourceText.
	sourceRanges associationsDo: [ :nodeAtRange |
			(nodeAtRange key class = BlockNode and: [nodeAtRange key printSourceCode = blockNodeCodeString])ifTrue: [
					blockToTest:= nodeAtRange key.
				]
			].

	blockToTest notNil ifTrue: [^blockToTest].
	self failWith: 'Block node not found'.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537817!
test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition

	| blockToTestString |

	blockToTestString:= '[ instance1 isEmpty. ]'.
	
	self withMessageName: #typeCastDistinctLiteralFirstThenObject 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: OrderedCollection.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538489!
test29IsIsTypeMessageWhenRejectingTypeShouldFilter
	
	
	self withMessageName: #isIsMessageReject
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538285!
test17BranchesAsMessageReceiverAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[
	v1 factorial.
	self. ]'.
	
	self withMessageName: #typeCastWithBranchAsMessageReceiver 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538238!
test25IsKindOfForChildTypesFixesType
	
	
	self withMessageName: #isKindOfCastForChildType
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 first. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].

	self withMessageName: #isKindOfCastForChildType
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: OrderedCollection
	].
	


	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538582!
test46NegatedConjunctionAllowsAllPreviousTypes
	
	self withMessageName: #conjunctionNegated
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: Array.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538474!
test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType
	
	
	self withMessageName: #isIsMessageCastWithSubclasses
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: Array.
		self assert: types includes: OrderedCollection.
	].

	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537834!
test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType

	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastNegatedIfFalse
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	].

! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538462!
test28IsIsTypeMessageCastType
	
	
	self withMessageName: #isIsMessageCast
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: Integer.
	].

	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538555!
test44NegatedDisjunctionRejectsCastedTypes
	
	self withMessageName: #disjunctionNegated
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538330!
test32IsNilMessageIfTrueCastToNil
	
	self withMessageName: #isNilMessageCast
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 _ Array new. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: UndefinedObject.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538502!
test30IsIsTypeMessageOnDIfferentVariableShouldntFilter
	
	
	self withMessageName: #isIsMessageOnADifferentVariable
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: '[ instance1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].
! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538450!
test41IfNotNilKeepsPreviousTypes
	
	self withMessageName: #ifNotNilMessageRejects
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: Array.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538058!
test16_7TypeCastObjectClassDistinctSymbolCastCorrectly

	| selector |
	selector := #typeCastObjectClassNameDistinctClassSymbol .
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537668!
test03TypeCastIfFalseNestedReturnsAllTypesButRejected

	| blockToTestString |

	blockToTestString:= '[ v1 not. ]'.
	
	self withMessageName: #typeCastIfFalseNested 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: True.
	].! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537881!
test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition

	| blockToTestString |

	blockToTestString:= '[ instance1 isEmpty. ]'.
	
	self withMessageName: #typeCastDistinctNegatedLiteralFirstThenObject 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538438!
test40IfNilMessageCastToNil
	
	self withMessageName: #ifNilMessageCast
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 _ Array new. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: UndefinedObject.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538157!
test20ObjectEqualsToLiteralIfTrueReturnsLiteralType
	
	self withMessageName: #typeCastEqualsToLiteralIfTrue 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 10. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538170!
test21ObjectDistinctToLiteralCastCorrectlyBothBranches
	
	| messageSelector |
	messageSelector:=#typeCastDistinctToLiteral .
	"ifFalse branch"	
	self withMessageName: messageSelector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 10. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrueBranch"
	self withMessageName: messageSelector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 5. ]' 
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: SmallInteger.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537866!
test14TypeCastDistinctNegatedIfTrueReturnsCastedType

	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastDistinctNegatedIfTrue
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538354!
test34ObjectEqualsToNilIfFalseRejectsNilType
	
	
	self withMessageName: #typeCastEqualsNilIfFalse
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: Array.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538425!
test39NotNilMessageIfFalseCastToNil
	
	
	self withMessageName: #notNilMessageReject
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 _ Array new. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: UndefinedObject.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537898!
test16TypeCastManyNegationsCastCorrectly

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastManyNegations 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538035!
test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly

	| selector |
	selector := #typeCastClassNameDistinctObjectClassName .
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538630!
test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside
	
	self withMessageName: #conjunctionOnlyOnOneSideContext
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538413!
test38notNilMessageIfTrueRejectsNil
	
	self withMessageName: #notNilMessageCast
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: Array.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538212!
test23LiteralDistinctToObjectCastCorrectlyBothBranches
	
	| messageSelector |
	messageSelector :=#typeCastLiteralDistinctToObject.
	"ifFalse branch"	
	self withMessageName: messageSelector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 10. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrueBranch"
	self withMessageName: messageSelector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 5. ]' 
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: SmallInteger.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538258!
test26IsKindOfCastingSupertypeKeepsSubtypes
	
	
	self withMessageName: #isKindOfCastForSupertype
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isSequenceable. ]'
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: Array.
		self assert: types includes: OrderedCollection.
	].

	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538614!
test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining
	
	self withMessageName: #manyConjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: OrderedCollection.
		self assert: types includes: Array.
		self assert: types includes: Set.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538401!
test37IsNilMessageIfFalseRejectsNil
	
	self withMessageName: #isNilMessageReject
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: Array.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537753!
test07TypeCastAppliesCorrectlyToParseNodeClass

	| blockToTestString |

	blockToTestString:= '[ v1 class. ]'.
	
	self withMessageName: #typeCastForParseNodeClass 
	calculateTypesOfNode: '{v1 class}' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: Date class.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537914!
test16_1TypeCastObjectClassNameCastCorrectly

	| selector |
	selector := #typeCastObjectClassNameEqualsClassName .
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538012!
test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly

	| selector |
	selector := #typeCastClassSymbolEqualsObjectClassName .
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538127!
withPerformingCompiledMethodName: aMethodSelector

	| compiledMethod |

	compiledMethod := TypesWithContextAppliersTestMethods >> aMethodSelector.
	TypesWithContextAppliersTestMethods new perform: aMethodSelector.
	^compiledMethod.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537784!
test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition

	| blockToTestString |

	blockToTestString:= '[ instance1 isEmpty. ]'.
	
	self withMessageName: #typeCastLiteralFirstThenObject 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538380!
test36ObjectDistinctToNilCastOnFalseRejectsOnTrue
	
	
	self withMessageName: #typeCastDistinctNil
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 subclasses. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: UndefinedObject.
	].

	self withMessageName: #typeCastDistinctNil
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: Array.
		self assert: types includes: OrderedCollection.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537637!
test01TypeCastIfTrueCorrectlyAppliesCastedType
	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastIfTrue 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	].

	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538540!
test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining
	
	self withMessageName: #disjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537937!
test16_2TypeCastObjectClassSymbolCastCorrectly

	| selector |
	selector := #typeCastObjectClassNameEqualsClassSymbol .
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537989!
test16_4TypeCastClassNameToObjectClassNameCastCorrectly

	| selector |
	selector := #typeCastClassNameEqualsObjectClassName .
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50538315!
test24WhenConditionIsNotCastingPreservePreviousTypes
	
	
	self withMessageName: #branchWithNoEfectOverVariables
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]'
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: SmallInteger.
		self assert: types includes: Date.
	].
	


	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537849!
test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition

	| blockToTestString |

	blockToTestString:= '[ instance1 isEmpty. ]'.
	
	self withMessageName: #typeCastNegatedLiteralFirstThenObject 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: OrderedCollection.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50537700!
test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

	| blockToTestString selector |
	
	selector:=#typeCastIfTrueIfFalseManyVariables .
	
	"ifFalse branch"
	blockToTestString:= '[ v2 year. ]'.
	self withMessageName: selector
	calculateTypesOfNode: 'v2' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: Date.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrue branch"
	blockToTestString:= '[ v2 month. ]'.
	self withMessageName: selector
	calculateTypesOfNode: 'v2' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: Date.
		self assert: types includes: SmallInteger.
	].
! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540576!
typeCastIfTrueIfFalseManyVariables
	|v1 v2 |
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v2 := 5.
	v2 := Date today.
	v1 class = SmallInteger ifTrue: [v2 month] ifFalse: [v2 year].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540887!
notNilMessageReject
	
	| v1 |
	v1 := nil.
	v1 notNil ifFalse:[ v1 := Array new.].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540513!
typeCastForParseNodeClass

	|v1|
	v1 := Date today.
	v1 := 5.
	
	v1 class = SmallInteger ifFalse: [v1 class.].
			! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540696!
typeCastLiteralDistinctToObject
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	5 ~~ v1 ifTrue:[v1 + 5.] ifFalse:[v1 + 10.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540458!
typeCastClassNameEqualsObjectClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	SmallInteger name = v1 class name ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540688!
typeCastEqualsToLiteralIfTrue
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 = 5 ifTrue:[v1 + 10.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540788!
manyConjunctionCastDifferentTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1 := Array new.
v1 := Set new.
v1:= 1.
v1:= Date today.

((v1 class = Date) not and: [(v1 class = SmallInteger) not] and: [(v1 class = String) not]) ifTrue:[ v1 isEmpty.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540903!
typeCastEqualsNil
	| v1 |
	v1 := Array new.
	v1 := nil.
	v1 = nil ifTrue:[ v1 subclasses. ]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540680!
typeCastEqualsToLiteralIfFalse
	|v1|
	v1 := 6.
	v1:= OrderedCollection new.
	v1 := 'true'.
	
	v1 = 5 ifFalse:[v1 isEmpty.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540406!
branchWithNoEfectOverVariables
	|v1|
	v1:= Date today.
	v1 := 14.
	v1 > 1 ifTrue: [v1 factorial.].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540598!
typeCastLiteralFirstThenObject
	
	instance1:= OrderedCollection new.
	instance1 := 'true'.
	
	String = instance1 class ifTrue: [instance1 isEmpty].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540547!
typeCastIfFalseNested

	|v1|
	v1:= OrderedCollection new.
	v1 := Date today.
	v1 := 5.
	v1 := true.
	
	v1 class = SmallInteger ifFalse: [
		v1 class = OrderedCollection ifFalse: 		[
				v1 class = Date ifFalse:[
					v1 not.
				].
			].
		].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540643!
typeCastObjectClassNameEqualsClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class name = SmallInteger name ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540829!
isIsMessageDifferentTypes
	|v1|
	v1 := OrderedCollection new.
	v1 := 'test'.	
	
	v1 isInteger ifTrue:[v1 factorial.] ifFalse: [v1 isEmpty.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540704!
typeCastLiteralEqualsToObjectIfTrue 
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	5 == v1 ifTrue:[v1 + 10.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540468!
typeCastClassSymbolEqualsObjectClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	#SmallInteger = v1 class name ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540417!
someMessageWithArgs: anArg1! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540559!
typeCastIfTrue
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	
	v1 class = SmallInteger ifTrue: [v1 factorial].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540486!
typeCastDistinctLiteralFirstThenObject
	
	instance1:= OrderedCollection new.
	instance1 := 'test'.
	
	String ~= instance1 class ifTrue: [instance1 isEmpty].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540538!
typeCastIfFalseIfTrueEquivalentToIssue
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	
	v1 class = String ifFalse: [v1 isEmpty] ifTrue: [v1 isEmpty] .! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540814!
isIsMessageCast
	|v1|
	v1:= Array new.
	v1 := OrderedCollection new.
	
	v1 isInteger ifTrue:[v1 factorial.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540662!
typeCastObjectClassNameEqualsUnexistentClassSymbol
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	
	v1 class name = #DONTCREATETHISCLASSPLEASE ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540586!
typeCastIfTrueIfFalseNestedManyVariables
	|v1 v2 |
	
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	
	v2 := 5.
	v2 := Date today.
	
	v1 class = SmallInteger ifTrue: [
		v2 class = SmallInteger ifFalse: [v2 month.	v1 asFloat.]
	].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540894!
typeCastDistinctNil
	| v1 |
	v1 := nil.
	v1 := Array new.
	v1 := OrderedCollection new.
	
	v1 ~= nil ifTrue:[ v1 isEmpty. ] ifFalse: [v1 subclasses. ]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540748!
conjunctionNegated

	| v1 |
	v1:= OrderedCollection new.
	v1:= 'some string'.
	v1:= Array new.

	(v1 class = OrderedCollection and: [v1 isString]) not ifTrue:[ v1 isEmpty.]
! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540529!
typeCastIfFalseIfTrue
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifFalse: [v1 isEmpty] ifTrue: [v1 factorial] .! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540880!
notNilMessageCast
	
	| v1 |
	v1 := nil.
	v1 := Array new.
	
	v1 notNil ifTrue:[ v1 isEmpty.].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540860!
ifNotNilMessageRejects
	
	| v1 |
	v1 := Array new.
	v1 ifNotNil:[ v1 isEmpty. ].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540478!
typeCastDistinctIfTrue
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 class ~~SmallInteger ifTrue:[v1 isEmpty.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540854!
ifNilMessageCast
	
	| v1 |
	v1 := nil.
	v1 ifNil:[ v1 := Array new.].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50540430!
typeCastWithBranchAsMessageReceiver
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	(v1 class = SmallInteger ifTrue: [v1 factorial.self.] ifFalse:[self.]) someMessage.! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540712!
isKindOfCastForChildType
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	
	(v1 isKindOf: String) ifTrue:[v1 first.] ifFalse:[v1 isEmpty.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540421!
typeCastWithBranchAsMessageArgument
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	self someMessageWithArgs: (v1 class = SmallInteger ifTrue: [v1 factorial.])! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540413!
someMessage! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540847!
isIsMessageReject
	|v1|
	
	v1 := 5.	
	v1 := 'test'.
	
	v1 isString ifFalse: [v1 factorial.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540873!
isNilMessageReject
	
	| v1 |
	v1 := nil.
	v1 := Array new.
	
	v1 isNil ifFalse:[ v1 isEmpty.].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540448!
typeCastClassNameDistinctObjectClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	SmallInteger name ~= v1 class name ifFalse: [v1 factorial] ifTrue:[v1 isEmpty]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540917!
typeCastNilEqualsObject
	| v1 |
	v1 := Array new.
	v1 := nil.
	nil = v1 ifTrue:[ v1 subclasses. ]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540653!
typeCastObjectClassNameEqualsClassSymbol
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class name = #SmallInteger ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540495!
typeCastDistinctNegatedIfTrue
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	(v1 class ~~SmallInteger) not ifTrue:[v1 factorial.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540504!
typeCastDistinctNegatedLiteralFirstThenObject
	
	instance1:= OrderedCollection new.
	instance1 := 'true'.
	
	(String ~= instance1 class) not ifTrue: [instance1 isEmpty].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540867!
isNilMessageCast
	
	| v1 |
	v1 := nil.
	v1 isNil ifTrue:[ v1 := Array new.].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540720!
isKindOfCastForSupertype
	|v1|
	v1:= OrderedCollection new.
	v1 := Array new.
	
	(v1 isKindOf: SequenceableCollection) ifTrue:[v1 isSequenceable.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540633!
typeCastObjectClassNameDistinctClassSymbol
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class name ~~ #SmallInteger ifFalse: [v1 factorial] ifTrue:[v1 isEmpty]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540521!
typeCastIfFalse
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 class = SmallInteger ifFalse:[v1 isEmpty.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540778!
disjunctionNegated

	| v1 |
	v1:= OrderedCollection new.
	v1:= 'some string'.
	v1:= 1.

	(v1 class = OrderedCollection or: [v1 isString]) not ifTrue:[ v1 factorial.]
! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540440!
typeCastClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifTrue: [v1 factorial].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540821!
isIsMessageCastWithSubclasses
	|v1|
	v1:= Array new.
	v1 := 5.	
	v1 := OrderedCollection new.
	
	v1 isCollection ifTrue:[v1 isEmpty.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540768!
disjunctionCastDifferentTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1:= 1.

(v1 class = String or: [v1 class = OrderedCollection]) ifTrue:[ v1 isEmpty.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540910!
typeCastEqualsNilIfFalse
	| v1 |
	v1 := nil.
	v1 := Array new.
	
	v1 = nil ifFalse:[ v1 isEmpty. ]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540616!
typeCastNegatedIfFalse
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	(v1 class == SmallInteger) not ifFalse: [v1 factorial].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540624!
typeCastNegatedLiteralFirstThenObject
	
	instance1:= OrderedCollection new.
	instance1 := 'true'.
	
	(String = instance1 class) not ifTrue: [instance1 isEmpty].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540801!
manyDisjunctionCastDifferentTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1 := Array new.
v1 := Set new.
v1:= 1.
v1:= Date today.

(v1 class = String or: [v1 class = OrderedCollection] or: [v1 class = Array] or: [v1 class = Set]) ifTrue:[ v1 isEmpty.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540729!
isKindOfRejectForSupertype
	|v1|
	v1:= OrderedCollection new.
	v1 := Array new.
	v1 := 5.
	
	(v1 isKindOf: SequenceableCollection) ifFalse:[v1 factorial.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540567!
typeCastIfTrueIfFalse
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifTrue: [v1 factorial] ifFalse: [v1 isEmpty].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540758!
conjunctionOnlyOnOneSideContext

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1:= 1.

(true and: [v1 class = SmallInteger]) ifTrue:[ v1 factorial.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540607!
typeCastManyNegations
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	(v1 class == SmallInteger) not not not ifTrue: [v1 isEmpty].! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540738!
conjunctionCastDifferentTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1:= 1.

(v1 isCollection and: [v1 class = String]) ifTrue:[ v1 isEmpty.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540837!
isIsMessageOnADifferentVariable
	|v1|
	instance1 := OrderedCollection new.
	instance1 := 'test'.
	v1 := 'test'.
	v1 := 5.	
	
	
	v1 isInteger ifTrue: [instance1 isEmpty.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:40:02' prior: 50540672!
typeCastDistinctToLiteral
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 ~= 5 ifTrue:[v1 + 5.] ifFalse:[v1 + 10.]! !

!testRun: #ManyMethodsTypeCheckerDragonTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 9/18/2024 18:40:12'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test04AlertsDetectIfNone stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test05AlertsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test07ErrorsDetectIfNone stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test10WarningsDetectIfNone stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test15HasErrorsOrWarnings stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/18/2024 18:40:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/18/2024 18:40:14'!
PASSED!
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538810!
errorsAndWarningsAsMethodReferencesWithProblems: showProblems
	
	| list |
	
	list := OrderedCollection new.
	self sortedTypeCheckers do: [ :aTypeChecker | 
		(aTypeChecker hasErrorsOrWarnings or: [ showProblems and: [ aTypeChecker hasAlerts ]])
			ifTrue: [
				list add: aTypeChecker methodReference .
				list addAll: (aTypeChecker errorsAndWarningsAsMethodReferencesWithProblems: showProblems prefixing: '  ') ]].
				
	^list! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538786 overrides: 50538729!
errorsDetect: aCondition ifNone: noneBlock

	| errors |
	
	typeCheckers do: [ :typeChecker |
		errors := typeChecker errorsDetect: aCondition ifNone: [ nil ].
		errors ifNotNil: [ ^errors ]].
	
	^noneBlock value! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538863 overrides: 50538760!
hasNoErrorsAndWarnings
	
	^typeCheckers allSatisfy: [ :aTypeChecker | aTypeChecker hasNoErrorsAndWarnings ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538827!
errorsAsMethodReferences
	
	| list |
	
	list := OrderedCollection new.
	self sortedTypeCheckers do: [ :aTypeChecker | 
		aTypeChecker hasErrors ifTrue: [
			list add: aTypeChecker method.
			list addAll: (aTypeChecker errorsAsMethodReferencesPrefixing: '  ')
			"list addAll: aTypeChecker errorsAsMethodReferences"]].
			
	^list! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538947 overrides: 50538713!
warningsIsEmpty
	
	^typeCheckers allSatisfy: [ :aTypeChecker | aTypeChecker warningsIsEmpty ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538882 overrides: 50538691!
alerts

	^typeCheckers 
		inject: OrderedCollection new
		into: [ :problems :typeChecker |
			problems addAll: typeChecker alerts.
			problems ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538909 overrides: 50538747!
hasAlerts
	
	^typeCheckers anySatisfy: [ :aTypeChecker | aTypeChecker hasAlerts ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538916 overrides: 50538743!
value
	
	typeCheckers := methodsToCheck collect: [:aMethod | | methodTypeChecker | 
		methodTypeChecker := aMethod typeCheck. 
		self changed: aMethod. "To trigger Observers..."
		methodTypeChecker].
	
	^self! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538936 overrides: 50538708!
warningsDetect: aCondition ifNone: noneBlock

	| warning |
	
	typeCheckers do: [ :typeChecker |
		warning := typeChecker warningsDetect: aCondition ifNone: [ nil ].
		warning ifNotNil: [ ^warning ]].
	
	^noneBlock value! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538797 overrides: 50538734!
errorsIsEmpty
	
	^typeCheckers allSatisfy: [ :aTypeChecker | aTypeChecker errorsIsEmpty ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538841!
sortedTypeCheckers
	
	^typeCheckers sorted: [ :leftTypeChecker :rightTypeChecker | leftTypeChecker methodReference <= rightTypeChecker methodReference ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538774 overrides: 50538725!
errorsAndWarnings
	
	| list |
	
	list := self sortedTypeCheckers
		inject: OrderedCollection new 
		into: [ :aList :aTypeChecker | 
			aList add: aTypeChecker methodReference.
			aList addAll: aTypeChecker errorsAndWarnings.
			aList ].
			
	^list! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538870!
methodSelector
	
	^typeCheckers anyOne methodSelector ! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538891 overrides: 50538695!
alertsDetect: aCondition ifNone: noneBlock
	
	| alert |
	
	typeCheckers do: [ :typeChecker |
		alert := typeChecker alertsDetect: aCondition ifNone: [ nil ].
		alert ifNotNil: [ ^alert ]].
	
	^noneBlock value! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538766 overrides: 50538721!
errors
	
	^typeCheckers 
		inject: OrderedCollection new
		into: [ :errors :typeChecker |
			errors addAll: typeChecker errors.
			errors ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538954 overrides: 50538717!
warningsSize
	
	^typeCheckers sum: [ :typeChecker | typeChecker warningsSize ] ifEmpty: [ 0 ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538875!
methodsToCheck
	"It's needed by the progressive bar runner.... "
	^methodsToCheck copy.! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538856 overrides: 50538755!
hasErrorsOrWarnings
	
	^typeCheckers anySatisfy: [ :aTypeChecker | aTypeChecker hasErrorsOrWarnings ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538960!
initializeForAll: aMethodsCollectionToCheck 

	methodsToCheck := aMethodsCollectionToCheck collect: [ :aMethod | aMethod asMethodReference ].
	! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538850 overrides: 50538751!
hasErrors
	
	^typeCheckers anySatisfy: [ :aTypeChecker | aTypeChecker hasErrors ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538927 overrides: 50538704!
warnings
	
	^typeCheckers 
		inject: OrderedCollection new
		into: [ :warnings :typeChecker |
			warnings addAll: typeChecker warnings.
			warnings ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538902 overrides: 50538700!
alertsSize
	
	^typeCheckers sum: [ :aTypeChecker | aTypeChecker alertsSize ] ifEmpty: [ 0 ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538804 overrides: 50538738!
errorsSize
	
	^typeCheckers sum: [ :typeChecker | typeChecker errorsSize ] ifEmpty: [ 0 ]! !
!ManyMethodsTypeCheckerDragon class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538994!
forClass: aClass 
	
	^self forAll: aClass theNonMetaClass methodDictionary values, aClass theMetaClass methodDictionary values! !
!ManyMethodsTypeCheckerDragon class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538985!
forAllClasses: classes

	| methods |
	
	methods := OrderedCollection new.
	classes do: [ :aClass | self addMethodsOf: aClass to: methods ].
	
	^self forAll: methods! !
!ManyMethodsTypeCheckerDragon class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538969!
addMethodsOf: aClass to: methods
 
	methods 
		addAll: aClass theNonMetaClass methodDictionary values;
		addAll: aClass theMetaClass methodDictionary values! !
!ManyMethodsTypeCheckerDragon class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538978!
forAll: aMethodsCollectionToCheck

	^self new initializeForAll: aMethodsCollectionToCheck ! !
!MethodNotAnnotatingTypesIssue methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538665!
sourceCodeRange
	^#()! !
!MethodNotAnnotatingTypesIssue methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538660!
compiledMethod
	^methodReference  .! !
!MethodNotAnnotatingTypesIssue methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538643!
initializeFor: aMethodReference 
	methodReference := aMethodReference. ! !
!MethodNotAnnotatingTypesIssue methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538649!
problemDescription
	^ 'Method is not annotating types'.! !
!MethodNotAnnotatingTypesIssue methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538655!
problemTypeIdentifierString

	^ 'Alert'! !
!MethodNotAnnotatingTypesIssue class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50538670!
for: aCompiledMethod 
	^self new initializeFor: aCompiledMethod. ! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539107!
method
	^compiledMethod .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539147!
errorsAndWarningsAsMethodReferencesWithProblems: showProblems
	
	^self errorsAndWarningsAsMethodReferencesWithProblems: showProblems prefixing: ''! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539111!
methodClass
	
	^compiledMethod methodClass .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539045 overrides: 50538747!
hasAlerts
	^self alerts size > 0.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539072!
hasWarnings
	^self warnings size > 0.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539195 overrides: 50538743!
value
	self typeCheck.
	^self.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539035 overrides: 50538734!
errorsIsEmpty
	^self errors isEmpty .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539121!
methodSelector
	
	^compiledMethod selector .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539155!
errorsAndWarningsAsMethodReferencesWithProblems: showProblems prefixing: aPrefix
	| listToShow |
	
	listToShow := self addMethodReferencesOf: self errors prefixing: aPrefix to: OrderedCollection new.
	self addMethodReferencesOf: self warnings prefixing: aPrefix to: listToShow.
	showProblems ifTrue: [ self addMethodReferencesOf: self alerts prefixing: aPrefix to: listToShow ].
	
	^listToShow! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539010 overrides: 50538695!
alertsDetect: aCondition ifNone: noneBlock

	^self alerts detect: aCondition ifNone: noneBlock .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539133!
addMethodReferencesOf: aTypeCheckingResultsIssueCollection prefixing: aPrefix to: methodReferencesCollection 
	aTypeCheckingResultsIssueCollection do: [ :aTypeCheckingIssue |
		methodReferencesCollection add: (TypeCheckingDragonIssueToMethodReferenceAdapter of: aTypeCheckingIssue prefixing: aPrefix) ].
	
	^methodReferencesCollection ! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539050 overrides: 50538751!
hasErrors
	^self errors size > 0.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539080 overrides: 50538704!
warnings
	^issues select: [:issue | issue isKindOf: TypeCheckingDragonWarning.]! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539017 overrides: 50538700!
alertsSize
	^self alerts size.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539066 overrides: 50538760!
hasNoErrorsAndWarnings
	
	^self errors isEmpty and: [ self warnings isEmpty ]! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539180!
typeCheckWhenDisabledTyping
	issues add: (MethodNotAnnotatingTypesIssue for: compiledMethod).
	^self.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539028 overrides: 50538729!
errorsDetect: aCondition ifNone: noneBlock

	^self errors detect: aCondition ifNone: noneBlock .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:10' prior: 50539093 overrides: 50538713!
warningsIsEmpty
	^self warnings isEmpty .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539002 overrides: 50538691!
alerts
	^issues select: [:issue | (issue isKindOf: TypeCheckingDragonIncompleteInformation) or: [issue isKindOf: MethodNotAnnotatingTypesIssue ].]! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539086 overrides: 50538708!
warningsDetect: aCondition ifNone: noneBlock

	^self warnings detect: aCondition ifNone: noneBlock .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539098 overrides: 50538717!
warningsSize
	^self warnings size! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539116!
methodReference
	
	^compiledMethod asMethodReference .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539126!
initializeFor: aCompiledMethod 
	compiledMethod := aCompiledMethod.
	issues := OrderedCollection new.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539171!
typeCheck
	compiledMethod isPrimitive ifTrue: [^self].
	compiledMethod isAnnotatingTypes 
		ifTrue: [self typeCheckWhenEnabledTyping] 
		ifFalse: [ self typeCheckWhenDisabledTyping]! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539022 overrides: 50538721!
errors
	^issues select: [:issue | issue isKindOf: TypeCheckingDragonError.]! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539076!
issues
	^issues.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539187!
typeCheckWhenEnabledTyping
	(TypeCheckerDragonMethodVisitor for: compiledMethod collectingAlerts: issues) accept.
	^self.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539102!
classAndSelector
	
	^compiledMethod classAndSelector .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539055 overrides: 50538755!
hasErrorsOrWarnings
	
	^self errors notEmpty or: [ self warnings notEmpty ]! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539061!
hasIssues
	^issues size > 0.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539040 overrides: 50538738!
errorsSize
	^self errors size.! !
!MethodTypeCheckerDragon class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539200!
for: aCompiledMethod   
	^self new initializeFor: aCompiledMethod ! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538760!
hasNoErrorsAndWarnings
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538729!
errorsDetect: aCondition ifNone: aNoneBlock
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538713!
warningsIsEmpty
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538691!
alerts
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538708!
warningsDetect: aCondition ifNone: aNoneBlock
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538717!
warningsSize
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538743 overrides: 16914075!
value
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538734!
errorsIsEmpty
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538747!
hasAlerts
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538725!
errorsAndWarnings
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538695!
alertsDetect: aCondition ifNone: noneBlock
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538721!
errors
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538755!
hasErrorsOrWarnings
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538751!
hasErrors
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538675!
showResultsWith: aLabelTrail

	| showProblems |

	showProblems := self hasAlerts and: [ self confirm: 'Type checking has generated alerts.\Do you want to see them' withNewLines ].
	(showProblems not and: [ self hasNoErrorsAndWarnings ]) ifTrue: [  ^self inform: 'There are no type errors or warnings' ].
		
	TypeCheckerDragonResultWindow openFor: self labelTrail: aLabelTrail showingProblems: showProblems ! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538704!
warnings
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538700!
alertsSize
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50538738!
errorsSize
	
	self subclassResponsibility! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536843!
visitMessageNodeArguments: aMessageNode
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		contextApplier updateFor: aMessageNode visiting: argumentBlock 	ifUpdated: 	[:newContext | 
				contextApplier:= newContext. 
				argumentBlock accept: self.
				self restorePreviousContext .
			] 
			ifNotUpdated:[ argumentBlock accept: self.				].
	].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536792!
checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType 
	
	| implementorsFinder |
	
	implementorsFinder := AllActualLocalImplementors of: aMessageNode selectorSymbol forAll: receiverLiveType.
	implementorsFinder liveTypeValue.
	
	implementorsFinder notImplementedIsEmpty ifFalse: [  
		issues add: (TypeCheckingDragonError forNotImplementedTypes: implementorsFinder notImplemented on: compiledMethod for: methodNode by: aMessageNode)].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536816 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=contextApplier receiverLiveTypesFor: aMessageNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation on: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	self visitMessageNodeArguments:aMessageNode.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536810 overrides: 16919312!
visitBlockNode: aBlockNode
	super visitBlockNode: aBlockNode.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536771!
initializeFor: aCompiledMethod collectingIssues: anIssuesCollection
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	issues := anIssuesCollection .
	contextApplier := GeneralContextApplier new.
	! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536782!
accept
	self visitMethodNode: methodNode.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536858!
addWarning: anIncompleteTypeInfoError node: aMessageNode

	
	issues add: (TypeCheckingDragonWarning on: compiledMethod for: methodNode by: aMessageNode reason: anIncompleteTypeInfoError reasonDescription )
! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536787!
restorePreviousContext
	contextApplier := contextApplier previous.! !
!TypeCheckerDragonMethodVisitor class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536868!
for: aCompiledMethod collectingAlerts: anAlertCollection  
	^self new initializeFor: aCompiledMethod collectingIssues: anAlertCollection .! !
!TypeCheckerDragonResultSet methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536740 overrides: 16898594!
messageSendsRangesOf: aSelector

	^ selectedMessage 
		ifNil: [ #() ]
		ifNotNil: [ selectedMessage sourceCodeRange ]
! !
!TypeCheckerDragonResultSet methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536722!
calculateList

	messageList := methodTypeChecker errorsAndWarningsAsMethodReferencesWithProblems: showProblems.
	self reformulateList.
	! !
!TypeCheckerDragonResultSet methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536730 overrides: 16898507!
contents: aString notifying: aRequestor 

	| result |

	result := super contents: aString notifying: aRequestor.
	methodTypeChecker := methodTypeChecker value.
	self calculateList.
	
	^result 
! !
!TypeCheckerDragonResultSet methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536747!
initializeFor: aMethodTypeChecker showingProblems: showingProblems 
	
	methodTypeChecker := aMethodTypeChecker.
	showProblems := showingProblems.
	self calculateList.
	
	"It does not matter the methodSelector, it is just a symbol that flags that ranges should be look for selecting - Hernan"
	self autoHighlightString: methodTypeChecker methodSelector allOccurrences: false! !
!TypeCheckerDragonResultSet class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536763!
for: aMethodTypeChecker showingProblems: showingProblems 
	
	^self new initializeFor: aMethodTypeChecker showingProblems: showingProblems 
! !
!TypeCheckerDragonResultWindow methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536955 overrides: 16799654!
messageListMenu

	| aMenu |
	
	aMenu _ MenuMorph new defaultTarget: self.
	aMenu addTitle: 'Errors & Warnings'.
	aMenu
		addItemsFromDictionaries: `{
			{
				#label 			-> 		'remove'.
				#object 			-> 		#model.
				#selector 		-> 		#removeMessageFromBrowserKeepingLabel.
				#icon 			-> 		#listRemoveIcon
			} asDictionary.
		}`.
		
	^ aMenu! !
!TypeCheckerDragonResultWindow class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50536970!
openFor: aTypeChecker labelTrail: aLabelTrail showingProblems: showingProblems 

	| window model |
	
	model := TypeCheckerDragonResultSet for: aTypeChecker showingProblems: showingProblems.
	window := super open: model label: 'Type checking result for ', aLabelTrail.
	model messageListIndex: 1.
	
	^window
	! !
!TypeCheckingDragonError methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539319 overrides: 50539275!
selector
	^messageNode selector.! !
!TypeCheckingDragonError methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539314 overrides: 50539270!
receiver
	^messageNode receiver.! !
!TypeCheckingDragonError methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539324!
notImplementedTypes
	
	^notImplemented collect: [:aNotImplemented | aNotImplemented actualClass ]! !
!TypeCheckingDragonError methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539302!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode notImplementedTypes: notImplementedTypes  .
	methodReference := aCompiledMethod asMethodReference .
	methodNode := aMethodNode.
	messageNode := aMessageNode.
	notImplemented:= notImplementedTypes.! !
!TypeCheckingDragonError methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539331 overrides: 50539260!
problemDescription
	^ self selector identifierPrintString, ' not implemented in ', self notImplementedTypes asCommaStringAnd  .! !
!TypeCheckingDragonError methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539339 overrides: 50539265!
problemTypeIdentifierString

	^ 'Error'! !
!TypeCheckingDragonError class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539344!
forNotImplementedTypes: notImplementedTypes on: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode notImplementedTypes: notImplementedTypes.! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539361 overrides: 50539275!
selector
	^messageNode selector.! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539355 overrides: 50539270!
receiver
	^messageNode receiver.! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539378!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: description  
	methodReference := aCompiledMethod asMethodReference .
	methodNode := aMethodNode.
	messageNode := aMessageNode.
	problemDescription := description.! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539367 overrides: 50539260!
problemDescription
	^problemDescription .! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539373 overrides: 50539265!
problemTypeIdentifierString

	^ 'Alert'! !
!TypeCheckingDragonIncompleteInformation class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539390!
on: aMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aMethod for: aMethodNode by: aMessageNode description: 'No type information on receiver collected'.! !
!TypeCheckingDragonIssueToMethodReferenceAdapter methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539207!
actualClass
	
	^typeCheckingProblem method actualClass! !
!TypeCheckingDragonIssueToMethodReferenceAdapter methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539231!
initializeOf: aTypeCheckingProblem prefixing: aHeader

	typeCheckingProblem := aTypeCheckingProblem.
	prefix := aHeader ! !
!TypeCheckingDragonIssueToMethodReferenceAdapter methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539219!
sourceCodeRange
	
	^typeCheckingProblem sourceCodeRange ! !
!TypeCheckingDragonIssueToMethodReferenceAdapter methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539225 overrides: 16914685!
displayStringOrText

	^prefix, typeCheckingProblem displayStringOrText! !
!TypeCheckingDragonIssueToMethodReferenceAdapter methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539213!
methodSymbol
	
	^typeCheckingProblem method methodSymbol ! !
!TypeCheckingDragonIssueToMethodReferenceAdapter class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539246!
of: aTypeCheckingProblem prefixing: aHeader

	^self new initializeOf: aTypeCheckingProblem prefixing: aHeader

! !
!TypeCheckingDragonIssueToMethodReferenceAdapter class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539239!
of: aTypeCheckingProblem

	^self of: aTypeCheckingProblem prefixing: ''! !
!TypeCheckingDragonWarning methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539416 overrides: 50539275!
selector
	^messageNode selector.! !
!TypeCheckingDragonWarning methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539411 overrides: 50539270!
receiver
	^messageNode receiver.! !
!TypeCheckingDragonWarning methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539399!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode reason: aReasonDescription 
	methodReference := aCompiledMethod asMethodReference .
	methodNode := aMethodNode.
	messageNode := aMessageNode.
	reason := aReasonDescription.! !
!TypeCheckingDragonWarning methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539421 overrides: 50539260!
problemDescription
	^reason .! !
!TypeCheckingDragonWarning methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539426 overrides: 50539265!
problemTypeIdentifierString

	^ 'Warning'! !
!TypeCheckingDragonWarning class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539431!
on: aCompiledMethod for: aMethodNode by: aMessageNode reason: aReasonDescription
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode reason: (self canNotDeduceReceiverTypeDueToDescription: aReasonDescription )! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539291!
method
	^methodReference.! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539275!
selector
	self subclassResponsibility .! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539270!
receiver
	self subclassResponsibility .! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539280!
sourceCodeRange
	
	^Array with: (methodNode rangeForNode: messageNode ifAbsent: [^#()])! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539286!
compiledMethod
	^methodReference compiledMethod .! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539254 overrides: 16914685!
displayStringOrText

	^ self problemTypeIdentifierString, ': ', self problemDescription! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539260!
problemDescription
	self subclassResponsibility .! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539265!
problemTypeIdentifierString

	self subclassResponsibility .! !
!TypeCheckingResultsIssues class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:11' prior: 50539295!
canNotDeduceReceiverTypeDueToDescription: aReason
 
	^'Can not deduce receiver''s type because: ', aReason ! !
!CastingRejectingContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539968!
liveTypesCastingObjectFor: aParseNode in:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	self subclassResponsibility .
	
! !
!CastingRejectingContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539920 overrides: 50539588!
previous
	^previousContext.! !
!CastingRejectingContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539947 overrides: 50539570!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	(self shouldApplyTo:aParseNode) ifTrue:[
		self shouldFilter 
			ifTrue: [^self liveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
			ifFalse: [  ^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ].
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !
!CastingRejectingContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539976!
liveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	self subclassResponsibility .
	
! !
!CastingRejectingContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539935!
initializeToApply: aType on: anObjectToApply shouldFilterType: shouldFilter withPreviousContext: anotherContextApplier
	type := aType.
	objectToApply := anObjectToApply.
	typeShouldFilter:= shouldFilter.
	previousContext := anotherContextApplier .
	! !
!CastingRejectingContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539930!
shouldFilter
	^typeShouldFilter .! !
!CastingRejectingContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539925 overrides: 50539914!
shouldApplyTo:aParseNode
	self subclassResponsibility .! !
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50536900!
visitMessageNodeArguments:aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		contextApplier updateFor: aMessageNode visiting: argumentBlock 
			ifUpdated: 	[:newContext | 
				contextApplier:= newContext. 
				argumentBlock accept: self.
				self restorePreviousContext .
				] 
			ifNotUpdated:[ argumentBlock accept: self.				].
	].! !
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50536891 overrides: 16919345!
visitMessageNode: aMessageNode
	aMessageNode receiver accept:self.
	aMessageNode arguments  size > 0 ifTrue:[
		self visitMessageNodeArguments:aMessageNode.
	].
	! !
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50536931!
types
	self visitMethodNode: methodNode .
	^types.! !
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50536876 overrides: 16919312!
visitBlockNode: aBlockNode
	
	(aBlockNode = blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons .
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	
	! !
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50536936!
restorePreviousContext
	contextApplier := contextApplier previous.! !
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50536915!
initializeFor: aCompiledMethod with: aMethodNode on: aParseNode within: aBlockNode addingIncompleteTypeInfoTo: aIncompleteTypeInfoReasonsList
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := aMethodNode.
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.
	incompleteTypeInfoReasons := aIncompleteTypeInfoReasonsList.! !
!ContextAppliersMethodVisitor class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50536942!
for: aCompiledMethod with: aMethodNode on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons   
	^self new initializeFor: aCompiledMethod with: aMethodNode on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons ! !
!EqualsClassTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539985 overrides: 50545997!
liveTypesCastingObjectFor: aParseNode in:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^FixedType for: type.
	
! !
!EqualsClassTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539994 overrides: 50546033!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes liveType |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	(self isParseNodeClassMessageSend: aParseNode) ifTrue: [liveType := FixedType for: type class.] ifFalse:[liveType := FixedType for: type.].
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = liveType typeName].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !
!EqualsClassTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540016!
isParseNodeClassMessageSend: aParseNode
	^aParseNode isMessageNode and: [ aParseNode isClassMessageSend ] and: [self shouldApplyTo: aParseNode receiver] .

! !
!EqualsClassTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540025 overrides: 50546060!
shouldApplyTo:aParseNode
		
	^(aParseNode isVariableNode and: [(objectToApply = aParseNode)]) 
	or: [	self isParseNodeClassMessageSend: aParseNode].

! !
!EqualsClassTypeContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540034!
to: aType on: anObjectToCast shouldFilterType: shouldFilter withPreviousContext: anotherContextApplier 
	^self new initializeToApply: aType on: anObjectToCast shouldFilterType: shouldFilter withPreviousContext: anotherContextApplier.! !
!EqualsToLiteralContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540217!
liveTypesCastingObjectFor: aParseNode in:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo

	^FixedType for: type.! !
!EqualsToLiteralContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540242 overrides: 50539588!
previous
	^previousContext.! !
!EqualsToLiteralContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540225 overrides: 50539570!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	((self shouldApplyTo:aParseNode) and: [self isEquals]) ifTrue:[
		^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo 
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !
!EqualsToLiteralContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540258!
initializeToApply: aType on: anObjectToApply shouldFilterType: shouldFilter withPreviousContext: anotherContextApplier
	type := aType.
	objectToApply := anObjectToApply.
	typeShouldFilter:= shouldFilter.
	previousContext := anotherContextApplier .
	! !
!EqualsToLiteralContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540253!
shouldFilter
	^typeShouldFilter .! !
!EqualsToLiteralContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540212!
isEquals
	^self shouldFilter not.
! !
!EqualsToLiteralContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540247 overrides: 50539914!
shouldApplyTo:aParseNode
		
	^(aParseNode isVariableNode and: [(objectToApply = aParseNode)]) 

! !
!EqualsToLiteralContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540270!
to: aType on: anObjectToCast shouldFilterType: shouldFilter withPreviousContext: anotherContextApplier 
	^self new initializeToApply: aType on: anObjectToCast shouldFilterType: shouldFilter withPreviousContext: anotherContextApplier.! !
!GeneralContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540290 overrides: 50539588!
previous
	"There's no more general context than this. Nothing to restore"
	^self.! !
!GeneralContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540281 overrides: 50539570!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	^ aParseNode typesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !
!GeneralContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540296 overrides: 50539914!
shouldApplyTo:aParseNode
	^true.! !
!IsKindOfTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540060 overrides: 50546149!
liveTypesCastingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	

	| originalTypes |
	
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	originalTypes classTypesDo: [:anOriginalClassType | (subclassesForCastingType includes: anOriginalClassType) ifTrue:[ newTypes add: anOriginalClassType]].
	
	^RawToLiveTypesAdapter new adapt: newTypes.
	
! !
!IsKindOfTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540079 overrides: 50546158!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	| originalTypes |
	
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	originalTypes classTypesDo: [:anOriginalClassType | (subclassesForCastingType includes: anOriginalClassType) ifFalse:[ newTypes add: anOriginalClassType]].
	^RawToLiveTypesAdapter new adapt: newTypes.
	
! !
!IsKindOfTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540045 overrides: 50546042!
initializeToApply: aType on: anObjectToApply shouldFilterType: shouldFilter withPreviousContext: anotherContextApplier
	super initializeToApply: aType on: anObjectToApply shouldFilterType: shouldFilter withPreviousContext: anotherContextApplier.
	subclassesForCastingType := type withAllSubclasses. 
	newTypes := OrderedCollection new.! !
!IsTypeMessageContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540123!
is: aType subclassOfAny: implementors
	^implementors anySatisfy:[:anImplementorType | anImplementorType withAllSubclasses anySatisfy: [:aSubclass | aSubclass = aType ]. ].
		
	! !
!IsTypeMessageContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540133 overrides: 50545997!
liveTypesCastingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| implementors subclassesTypes originalTypes |
	
	implementors := self implementorsReturningTrue.
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	subclassesTypes := originalTypes select: [:aType | self is: aType subclassOfAny: implementors.].
	subclassesTypes isEmpty ifTrue:[
		^RawToLiveTypesAdapter new adapt: implementors .
	] ifFalse:[
		^RawToLiveTypesAdapter new adapt: subclassesTypes .
	].
		
	! !
!IsTypeMessageContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540177!
originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalRawTypes originalTypes |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	originalRawTypes := OrderedCollection new.
	originalTypes liveTypesDo: [:aLiveType | originalRawTypes add: aLiveType liveClass].
	^originalRawTypes.
		
	! !
!IsTypeMessageContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540109!
implementorsReturningTrue
	| implementors |
	implementors := Smalltalk allImplementorsOf: messageSelector .
	implementors := implementors select: [:aMethodReference | aMethodReference compiledMethod isReturnSpecialTrue ]. 
	implementors := implementors collect: [:aMethodReference | aMethodReference actualClass].
	
	^implementors.
		
	! !
!IsTypeMessageContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540156 overrides: 50546033!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | (aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [result add: aType]. result.].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!IsTypeMessageContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540097!
initializeWith: aMessageSelector on: anObjectToCast isRejecting: shouldFilter withPreviousContext: anotherContextApplier
	messageSelector := aMessageSelector .
	previousContext := anotherContextApplier .
	typeShouldFilter := shouldFilter .
	objectToApply:= anObjectToCast.! !
!IsTypeMessageContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540194 overrides: 50546060!
shouldApplyTo:aParseNode
		
	^(aParseNode isVariableNode and: [(objectToApply = aParseNode)]) ! !
!IsTypeMessageContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540201!
with: aMessageSelector on: anObjectToCast isRejecting: shouldFilter withPreviousContext: anotherContextApplier 
	
	^self new initializeWith: aMessageSelector on: anObjectToCast isRejecting: shouldFilter withPreviousContext: anotherContextApplier .! !
!LogicalContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540357!
rawTypesWith: previousTypes and:currentTypes
		
	| types |
	(self shouldIntersect) ifTrue:[
		types := previousTypes intersection: currentTypes.
	] ifFalse:[
		types := previousTypes union: currentTypes.
	].
	
	^types .! !
!LogicalContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540368!
shouldIntersect

	^ (shouldReject not and:[selector = #and:]) or: (shouldReject and: [selector = #or:])! !
!LogicalContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540305!
initializeForSelector: aLogicalSelector withAppliers: aContextApplierCollection withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	contextApplierCollection := aContextApplierCollection .
	previousContext := aPreviousContextApplier .
	shouldReject:= isRejecting .
	selector:= aLogicalSelector .
	! !
!LogicalContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540301 overrides: 50539588!
previous
	^previousContext.! !
!LogicalContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540319 overrides: 50539570!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| types |
	
	types:=self rawTypesOver: contextApplierCollection first for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	2 to: contextApplierCollection size do: [:index | | currentTypes | 
		currentTypes := self rawTypesOver: (contextApplierCollection at: index) for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		types:= self rawTypesWith: types and: currentTypes .
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !
!LogicalContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540341!
rawTypesOver: aContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	| liveTypes rawTypes |
	rawTypes := OrderedCollection new.
	liveTypes := aContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	liveTypes liveTypesDo: [:aLiveType | rawTypes add: aLiveType liveClass].
	
	^rawTypes.! !
!LogicalContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540388!
forSelector: logicalSelector withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aPreviousContextApplier isRejecting: isRejecting  
	
	| contextAppliers |
	contextAppliers := OrderedCollection with: leftContextApplier with: rightContextApplier .
	^self new initializeForSelector: logicalSelector withAppliers: contextAppliers withPreviousContext: aPreviousContextApplier rejecting: isRejecting .! !
!LogicalContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50540375!
forSelector: logicalSelector withContextAppliers: aContextApplierCollection withPreviousContext: aPreviousContextApplier isRejecting: isRejecting  
	
	
	
	^self new initializeForSelector: logicalSelector withAppliers: aContextApplierCollection withPreviousContext: aPreviousContextApplier rejecting: isRejecting .! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539577!
receiverLiveTypesFor: aMessageNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^self liveTypesFor: aMessageNode receiverOrCascadeReceiver in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539833!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	condition isMessageNode ifFalse:[
		^GeneralContextApplier new.
	].

	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	(condition isOr or: [condition isAnd]) ifTrue:[ 
		^self contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	(condition isManyOr or: [condition isManyAnd ]) ifTrue:[
		^self contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
	].	
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539821!
contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition

	^IsTypeMessageContextApplier 
		with: condition selectorSymbol 
		on: condition receiver 
		isRejecting: blockIsOnRejectingCondition 
		withPreviousContext: self.! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539768!
contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| leftContextApplier rightContextApplier |
	leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
	condition isOr ifTrue:[ 
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.	
	].
	
	condition isAnd ifTrue:[ 
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
	].
	^LogicalContextApplier forSelector: condition selectorSymbol withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
	! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539898!
is: aBlockNode asRejectingArgumentIn: aMessageNode

	| blockIsRejectingCondition |
	blockIsRejectingCondition := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	blockIsRejectingCondition := blockIsRejectingCondition or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	^blockIsRejectingCondition .
	
	


! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539588!
previous
	self subclassResponsibility .! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539570!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	self subclassResponsibility .! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539639!
contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition

	| objectToCast typeToApplyOnCast shouldFilterType |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	condition isObjectClassNameComparedToClassName ifTrue: [
		typeToApplyOnCast:= condition arguments first receiver key value.
		objectToCast:= condition receiver receiver receiver
	] ifFalse:[
		typeToApplyOnCast:= condition receiver receiver key value.
		objectToCast:= condition arguments first receiver receiver.
	].
	
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: shouldFilterType
		withPreviousContext: self.
		
		
		! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539796!
contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| contextAppliers selector |
	contextAppliers := OrderedCollection new.
	contextAppliers add: (self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition).
	condition arguments do: [:argument | 
		contextAppliers add: (self contextFor: argument statements first withBlockRejecting: blockIsOnRejectingCondition).
	].
	
	condition isManyOr ifTrue:[ selector:= #or:] ifFalse:[ selector:=#and:	].
	
	
	^LogicalContextApplier forSelector: selector  withContextAppliers: contextAppliers withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
	! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539593!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ 
		newContext := self buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aMessageNode isIfNil ifTrue: [ 
		newContext := self buildContextForIfNilMessagesWith: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539717!
contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	
	condition isObjectComparedToLiteral ifTrue: [
		typeToApplyOnCast:= condition arguments first literalValue class.
		objectToCast:= condition receiver.
	] ifFalse:[
		typeToApplyOnCast:= condition receiver literalValue class.
		objectToCast:= condition arguments first.
	].
	
		
	^EqualsToLiteralContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: shouldFilterType
		withPreviousContext: self.! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539625!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| blockIsRejectingCondition condition |
	
	blockIsRejectingCondition := self is: aBlockNode asRejectingArgumentIn: aMessageNode .
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	^self contextFor: condition withBlockRejecting: blockIsRejectingCondition .


! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50539665!
contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition

	| objectToCast typeToApplyOnCast shouldFilterType |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	condition isObjectClassNameComparedToClassSymbol ifTrue: [
		typeToApplyOnCast:= (Smalltalk classNamed: condition arguments first key).
		objectToCast:= condition receiver receiver receiver.
	] ifFalse:[
		typeToApplyOnCast:= (Smalltalk classNamed: condition receiver key value).
		objectToCast:= condition arguments first receiver receiver.
	].
	
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: shouldFilterType
		withPreviousContext: self.! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:34' prior: 50539615!
buildContextForIfNilMessagesWith: aMessageNode over: aBlockNode
	
	^EqualsClassTypeContextApplier 
		to: UndefinedObject
		on: aMessageNode receiver
		shouldFilterType: false
		withPreviousContext: self.


! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:34' prior: 50539742!
contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition 
		
	| shouldFilterType objectToCast |
	
	condition isNotNil ifTrue:[
		^EqualsClassTypeContextApplier 
			to: UndefinedObject
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	condition isFirstArgumentNil ifTrue: [
		objectToCast:= condition receiver.
	] ifFalse:[
		objectToCast:= condition arguments first.
	].
	
	^EqualsClassTypeContextApplier 
		to: UndefinedObject
		on: objectToCast
		shouldFilterType: shouldFilterType
		withPreviousContext: self.! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:34' prior: 50539692!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	
	condition isObjectClassComparedToClass ifTrue: [
		typeToApplyOnCast:= condition arguments first key value.
		objectToCast:= condition receiver receiver.
	] ifFalse:[
		typeToApplyOnCast:= condition receiver key value.
		objectToCast:= condition arguments first receiver.
	].
	
		
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: shouldFilterType
		withPreviousContext: self.
	
	

! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:34' prior: 50539914!
shouldApplyTo:aParseNode
	self subclassResponsibility .! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 9/18/2024 18:41:46' prior: 50546097 overrides: 16919312!
visitBlockNode: aBlockNode
	
	(aBlockNode = blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons .
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
		^self.
	].
	super visitBlockNode: aBlockNode.
	
	! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537187!
test14ErrorsCollectsAllTypeCheckersErrors

	| typeChecker |
	
	typeChecker := ManyMethodsTypeCheckerDragon forAll: { ManyTypeCheckerDragonTestMethods >> #methodWithTypeError }.
	typeChecker value.
	
	self assert: typeChecker errors notEmpty ! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537037!
test03MethodsWithoutTypeAnnotationsLogsAProblem

	| typeChecker methodToCheck  |
	
	methodToCheck := ManyTypeCheckerDragonTestMethods >> #methodNotAnnotatingTypes.
	typeChecker := ManyMethodsTypeCheckerDragon forAll: { methodToCheck }.
	methodToCheck removeProperties.
	
	typeChecker value.
	
	self assert: 1 equals: typeChecker alertsSize.
	self assert: typeChecker errorsIsEmpty.
	self assert: typeChecker warningsIsEmpty.
! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537054!
test04AlertsDetectIfNone

	| typeCheckProblem typeChecker |
	
	typeChecker := ManyMethodsTypeCheckerDragon forAll: { ManyTypeCheckerDragonTestMethods >> #methodWithReceiverWithNoTypes }.
	typeChecker := typeChecker value.
	
	self assert: 1 equals: typeChecker alertsSize.
	
	typeCheckProblem := typeChecker alertsDetect: [ :aTypeCheckProblem | true ] ifNone: [ self fail ].
	self assert: typeCheckProblem receiver isTemp.	
	self assert: #date equals: typeCheckProblem selector key.
! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537013!
test02ClassesCanBeTypeChecked

	| typeChecker typeCheckers |
	
	typeChecker := MethodTypeCheckerDragonTest typeCheck.
	
	typeChecker value.
	
	typeCheckers := MethodTypeCheckerDragonTest selectors collect: [ :aSelector |  (MethodTypeCheckerDragonTest >> aSelector) typeCheck].
	typeCheckers := typeCheckers, (MethodTypeCheckerDragonTest class selectors collect: [ :aSelector | (MethodTypeCheckerDragonTest >> aSelector) typeCheck ]).
	
	self assert: typeChecker errors size equals: (typeCheckers sum: [ :aTypeCheker | aTypeCheker errors size ]).
	self assert: typeChecker warnings size equals: (typeCheckers sum: [ :aTypeCheker | aTypeCheker warnings size ]).
! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537111!
test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound

	| typeChecker |
	
	typeChecker := ManyMethodsTypeCheckerDragon forAll: { ManyTypeCheckerDragonTestMethods >> #methodWithoutTypeErrors }.
	typeChecker value.
	
	typeChecker errorsDetect: [ :aTypeCheckProblem | true ] ifNone: [ ^self ].
	
	self fail

	! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50536983!
test01ManyMethodsCanBeTypeChecked

	| methodWithManyTypeErrorsTypeChecker methodWithTypeErrorTypeChecker typeChecker |
	
	typeChecker := ManyMethodsTypeCheckerDragon forAll: { ManyTypeCheckerDragonTestMethods >> #methodWithTypeError. ManyTypeCheckerDragonTestMethods >> #methodWithManyTypeErrors }.
	
	typeChecker value.
	
	methodWithTypeErrorTypeChecker := (ManyTypeCheckerDragonTestMethods >> #methodWithTypeError) typeCheck.
	methodWithManyTypeErrorsTypeChecker := (ManyTypeCheckerDragonTestMethods >> #methodWithManyTypeErrors) typeCheck.
	
	self assert: typeChecker errorsSize equals: methodWithTypeErrorTypeChecker errors size + methodWithManyTypeErrorsTypeChecker errors size.
	self assert: typeChecker warningsSize equals: methodWithTypeErrorTypeChecker warnings size + methodWithManyTypeErrorsTypeChecker warnings size.
! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537073!
test05AlertsDetectIfNoneValuesIfNoneWhenNoProblemFound

	| typeChecker |
	
	typeChecker := ManyMethodsTypeCheckerDragon forAll: { ManyTypeCheckerDragonTestMethods >> #methodWithoutTypeErrors }.
	typeChecker value.
	
	typeChecker alertsDetect: [ :aTypeCheckProblem | true ] ifNone: [ ^self ].
	
	self fail! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537086!
test06WarningsCollectsAllTypeCheckersWarnings

	| typeChecker |
	
	typeChecker := ManyMethodsTypeCheckerDragon forAll: { ManyTypeCheckerDragonTestMethods >> #methodWithWarningForError }.
	typeChecker value.
	
	self assert: typeChecker warnings notEmpty! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537124!
test09ProblemsCollectsTypeCheckersProblems

	| typeChecker |
	
	typeChecker := ManyMethodsTypeCheckerDragon forAll: { ManyTypeCheckerDragonTestMethods >> #methodWithReceiverWithNoTypes }.
	typeChecker := typeChecker value.
	
	self assert: typeChecker alerts notEmpty
! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537136!
test10WarningsDetectIfNone

	| typeChecker typeWarning |
	
	typeChecker := ManyMethodsTypeCheckerDragon forAll: { ManyTypeCheckerDragonTestMethods >> #methodWithWarningForError. }.
	typeChecker value.
	
	typeWarning := typeChecker warningsDetect: [ :aTypeWarning | true ] ifNone: [ self fail ].
	self assert: typeWarning receiver isMessageNode.	
	self assert: #first equals: typeWarning selector key.
! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537165!
test12HasErrorsReturnsTrueIfATypeCheckerHasErrors

	| typeChecker |
	
	typeChecker := ManyMethodsTypeCheckerDragon forAll: { ManyTypeCheckerDragonTestMethods >> #methodWithTypeError }.
	typeChecker value.
	
	self assert: typeChecker hasErrors ! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537176!
test13HasErrorsReturnsFalseWhenNoErrorFound

	| typeChecker |
	
	typeChecker := ManyMethodsTypeCheckerDragon forAll: { ManyTypeCheckerDragonTestMethods >> #methodWithoutTypeErrors }.
	typeChecker value.
	
	self deny: typeChecker hasErrors ! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537198!
test15HasErrorsOrWarnings

	| typeChecker |
	
	typeChecker := ManyMethodsTypeCheckerDragon forAll: { ManyTypeCheckerDragonTestMethods >> #methodWithTypeError }.
	typeChecker value.
	
	self assert: typeChecker hasErrorsOrWarnings ! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537097!
test07ErrorsDetectIfNone

	| typeChecker error |
	
	typeChecker := ManyMethodsTypeCheckerDragon forAll: { ManyTypeCheckerDragonTestMethods >> #methodWithManyTypeErrors }.
	typeChecker value.
	
	error := typeChecker errorsDetect: [ :anError | true ] ifNone: [ self fail ].
	self assert: #date equals: error selector key ! !
!ManyMethodsTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537152!
test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound

	| typeChecker |
	
	typeChecker := ManyMethodsTypeCheckerDragon forAll: { ManyTypeCheckerDragonTestMethods >> #methodWithoutTypeErrors }.
	typeChecker value.
	
	typeChecker warningsDetect: [ :aTypeCheckProblem | true ] ifNone: [ ^self ].
	
	self fail

	! !
!ManyTypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539470!
methodWithWarningForError
	
	1 date first! !
!ManyTypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539448!
methodWithTypeError
	
	1 date! !
!ManyTypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539458!
methodNotAnnotatingTypes
	
	'something' size! !
!ManyTypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539463!
methodWithReceiverWithNoTypes
	
	| temp1 |
	
	false ifTrue: [ 
		temp1 := 1.
		temp1 date ].
	
	! !
!ManyTypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539453!
methodWithoutTypeErrors
	
	1 + 1! !
!ManyTypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539442!
methodWithManyTypeErrors

	1 date.
	'hello' factorial! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537209 overrides: 16975661!
setUp
	"Ensure that always this method initializes with live typing enabled. See test01 and test02"
	(TypeCheckerDragonTestMethods >> #methodTypedCorrectlyEnableTyping) initializeTypeInformation.
	
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537277!
typeCheckOn: aCompiledMethod andAssert: anAssertionBlock
		
	| typeChecker |
	typeChecker := aCompiledMethod typeCheck.
	anAssertionBlock value: typeChecker value: aCompiledMethod.
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537521!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert
	
	self typeCheckWithSelector: #methodWithReceiverWithNoTypes andAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasAlerts .
				
		alert := typeChecker alerts anyOne .
		self assert: alert problemDescription equals: 'No type information on receiver collected'.	
		self assert: alert compiledMethod equals: methodChecked.
		self assert: alert receiver key equals: 'nilVariableWithNoType'.
		self assert: alert selector key equals: #size.
	]. 
	
	
	
	
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537573!
test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts
	"This is because the object is able to respond to the message even if it is for throwing an exception"
	
	self typeCheckWithSelector: #methodInstanceNotIndexable andAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	]. 
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537387!
test02MethodThatDontCheckTypesGeneratesIssue

	| methodToCheck |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodTypedCorrectlyEnableTyping.
	methodToCheck removeProperties .
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker :methodChecked |  
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		self assert: (typeChecker issues anyOne isKindOf: MethodNotAnnotatingTypesIssue ).
		self assert: typeChecker issues anyOne compiledMethod equals: methodToCheck .
	]. 
	
	
	
	
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537286!
typeCheckWithSelector: aSelector andAssert: anAssertionBlock
		
	| methodToCheck|
	methodToCheck := TypeCheckerDragonTestMethods >> aSelector.
	self typeCheckOn:  methodToCheck andAssert: anAssertionBlock.
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537297!
test13TypeCastIfTrueCorrectlyAppliesCastedType
	self performMethodWithClass: TypesWithContextAppliersTestMethods andSelector: #typeCastIfTrue typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537254!
performMethodWithClass: aClass andSelector: aSelector typeCheckAndAssert: anAssertionBlock
	
	| methodToCheck |
	methodToCheck := aClass >> aSelector.
	aClass new perform: aSelector.
	
	self typeCheckOn: methodToCheck andAssert: anAssertionBlock .
	
! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537418!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	| methodSelector |
	methodSelector := #methodWithMessageNotUnderstood.
	self typeCheckWithSelector:  methodSelector andAssert: [:typeChecker :methodChecked| | error | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		error:= typeChecker issues anyOne.
		self assert: error problemDescription equals: '#not not implemented in String' .
		self assert: (error isKindOf: TypeCheckingDragonError ).
		self assert: error compiledMethod equals: methodChecked .
		self assert: error receiver key equals: 'false'.
		self assert: error selector key equals: #not.
		self assert: error notImplementedTypes includes: String.
	]. 
	
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537265!
performMethodWithSelector: aSelector typeCheckAndAssert: anAssertionBlock
	
	| methodToCheck |
	methodToCheck := TypeCheckerDragonTestMethods >> aSelector.
	TypeCheckerDragonTestMethods new perform: aSelector.
	
	self typeCheckOn: methodToCheck andAssert: anAssertionBlock .
	
! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537219!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado"
	"Ademas, al momento de esta version de typeChecker, no hay LiveTyping sobre bloques, por eso se genera la alerta"
	"Una vez implementado, habra que agregar tests adicionales para chequeo de tipos dentro de bloques usando la informacion de generics"
		
	
	self performMethodWithSelector: #methodWithCollectionWithNoTypeError typeCheckAndAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasAlerts .
				
		alert := typeChecker alerts anyOne .
		self assert: alert problemDescription equals: 'No type information on receiver collected'.	
		self assert: alert compiledMethod equals: methodChecked.
		self assert: alert receiver key equals: 'item'.
		self assert: alert selector key equals: #factorial.
	]. 
	
! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537308!
test14TypeCastIfFalseReturnsAllTypesButRejected
	self performMethodWithClass: TypesWithContextAppliersTestMethods andSelector: #typeCastIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537338!
test16TypeCastNestedRejectionsRejectsEachLevelCastedType

	self performMethodWithClass: TypesWithContextAppliersTestMethods andSelector: #typeCastIfFalseNested typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].

	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537445!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error warning |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		self assert:  error problemDescription equals: '#not not implemented in String' .	
		self assert: error compiledMethod equals: methodChecked .
		self assert: error receiver key equals: 'false'.
		self assert: error selector key equals: #not.
		self assert: error notImplementedTypes includes: String.
		warning := typeChecker warnings anyOne .
		self assert: (TypeCheckingResultsIssues canNotDeduceReceiverTypeDueToDescription: '#not not implemented in String') equals: warning problemDescription .	
		self assert: warning compiledMethod equals: methodChecked .
		self assert: warning selector key equals: #not.
		
	]. 
	
	
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537481!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker :methodChecked | | warning error |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		self assert:  error problemDescription equals: '#not not implemented in String' .	
		self assert: error compiledMethod equals: methodChecked .
		self assert: error receiver key equals: 'false'.
		self assert: error selector key equals: #not.
		self assert: error notImplementedTypes includes: String.
		warning := typeChecker warnings anyOne .
		self assert: (TypeCheckingResultsIssues canNotDeduceReceiverTypeDueToDescription: '#not not implemented in String') equals: warning problemDescription .	
		self assert: (warning compiledMethod) equals: methodChecked .
		self assert: (warning receiver receiver key) equals: 'false'.
		self assert: (warning receiver selector key) equals: #not.
		self assert: (warning selector key) equals: #factorial.
	]. 
	
	
	
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537587!
test10MessageSentToMethodWithNoReturnTypeGeneratesIssue
	
		
	self typeCheckWithSelector: #methodWithMessageWithNoReturnTypes andAssert: [:typeChecker :methodChecked | | warning | 
		self assert: typeChecker hasWarnings .
		self assert: typeChecker warnings size equals: 1.
		warning := typeChecker warnings anyOne .
		self assert: warning compiledMethod equals: methodChecked .
		self assert: warning receiver selector key equals: #methodSumsNumber:anotherNumber:.
		self assert: warning selector key equals: #factorial.
		
	]. 
	
	
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537608!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	self performMethodWithSelector: #methodWithVariableWithManyTypes typeCheckAndAssert: [:typeChecker :methodChecked | | error | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasErrors.
		error := typeChecker errors anyOne.
		self assert: error compiledMethod equals: methodChecked .
		self assert: error receiver key equals: 'v1'.
		self assert: error selector key equals: #factorial.
		self assert: error problemDescription equals: '#factorial not implemented in OrderedCollection and String'.
		self assert: error notImplementedTypes size equals: 2.
		self assert: error notImplementedTypes includes: String.
		self assert: error notImplementedTypes includes: OrderedCollection.
	]. 
	
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537350!
test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable

	self performMethodWithClass: TypesWithContextAppliersTestMethods andSelector: #typeCastIfTrueIfFalseNestedManyVariables typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].

	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537544!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	self typeCheckWithSelector: #methodWithMessageArgumentToResolve andAssert: [:typeChecker :methodChecked | | secondError firstError | 
		self assert: 2 equals: typeChecker issues size.
		self assert: 2 equals: typeChecker errors size.
		firstError := typeChecker errors first .
		self assert: firstError compiledMethod equals: methodChecked .
		self assert: firstError receiver key equals: '10'.
		self assert: firstError selector key equals: #factorial.
		
		secondError := typeChecker errors second .
		self assert: secondError compiledMethod equals: methodChecked .
		self assert: secondError receiver key equals: '5'.
		self assert: secondError selector key equals: #factorial.
		
	]. 
	
	
	
	
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537320!
test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType

	self performMethodWithClass: TypesWithContextAppliersTestMethods andSelector: #typeCastIfTrueIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	self performMethodWithClass: TypesWithContextAppliersTestMethods andSelector: #typeCastIfFalseIfTrue typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537364!
test01MethodTypedCorrectlyDoesNotGenerateIssues
		
	self typeCheckWithSelector: #methodTypedCorrectlyEnableTyping andAssert: [:typeChecker :methodChecked| 
		self deny: typeChecker hasIssues.
		self assert: typeChecker method equals: methodChecked .
		self assert: typeChecker methodClass equals: TypeCheckerDragonTestMethods .
		self assert: typeChecker methodReference equals: methodChecked asMethodReference .
		self assert: typeChecker methodSelector equals: methodChecked selector .
		self assert: typeChecker classAndSelector equals: methodChecked classAndSelector .
	]. 
	
	
! !
!MethodTypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50537408!
test03PrimitiveMethodsDontCheckTypes
	
	self typeCheckWithSelector: #emptyMethodPrimitive andAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	]. 
! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539499!
methodWithManyMessageNotUnderstood
	"The first message that visitor evaluates is factorial which is not understood by receiver that has also type problems" 
	"The inner not message in the receiver it has a type problem, so this should force implement object recursion for receiver."
	'false' not factorial.! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539475!
emptyMethodPrimitive! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539543!
methodWithMessageWithNoReturnTypes
	(self methodSumsNumber: 1 anotherNumber: 1) factorial.
	! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539484!
methodSumsNumber: aNumber anotherNumber: anotherNumber 
	
	anotherNumber + aNumber.! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539479!
methodInstanceNotIndexable
	15 size.! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539550!
methodWithReceiverWithNoTypes
	nilVariableWithNoType size.! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539537!
methodWithMessageNotUnderstoodAssignedToVariable
	| v1 |
	v1:= 'false' not.! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539532!
methodWithMessageNotUnderstood
	'false' not.! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539512!
methodWithMessageArgumentToResolve
	self methodSumsNumber: ('10' factorial) anotherNumber: ('5' factorial).
	! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539556!
methodWithVariableWithManyTypes
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 factorial.! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539519!
methodWithMessageNestedNotUnderstoodOnReceiver
	"The first message that visitor evaluates is the outer not sent to ('false' not) which is perfectly defined." 
	"The inner not message in the receiver it has a type problem, so this should force implement object recursion for receiver."
	'false' not not.! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539563!
methodWithCollectionWithNoTypeError
	| col |
	col:= OrderedCollection with: 1.
	col do:[:item | item factorial].! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:41:58' prior: 50539490!
methodTypedCorrectlyEnableTyping
	"Actually, by default type checking will be enabled. Disable it manually from outside. Method name is for declarativity purposes"
	1 + 1.! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50544932!
errorsAndWarningsAsMethodReferencesWithProblems: showProblems
	
	| list |
	
	list := OrderedCollection new.
	self sortedTypeCheckers do: [ :aTypeChecker | 
		(aTypeChecker hasErrorsOrWarnings or: [ showProblems and: [ aTypeChecker hasAlerts ]])
			ifTrue: [
				list add: aTypeChecker methodReference .
				list addAll: (aTypeChecker errorsAndWarningsAsMethodReferencesWithProblems: showProblems prefixing: '  ') ]].
				
	^list! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50544950 overrides: 50545446!
errorsDetect: aCondition ifNone: noneBlock

	| errors |
	
	typeCheckers do: [ :typeChecker |
		errors := typeChecker errorsDetect: aCondition ifNone: [ nil ].
		errors ifNotNil: [ ^errors ]].
	
	^noneBlock value! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50544961 overrides: 50545441!
hasNoErrorsAndWarnings
	
	^typeCheckers allSatisfy: [ :aTypeChecker | aTypeChecker hasNoErrorsAndWarnings ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50544969!
errorsAsMethodReferences
	
	| list |
	
	list := OrderedCollection new.
	self sortedTypeCheckers do: [ :aTypeChecker | 
		aTypeChecker hasErrors ifTrue: [
			list add: aTypeChecker method.
			list addAll: (aTypeChecker errorsAsMethodReferencesPrefixing: '  ')
			"list addAll: aTypeChecker errorsAsMethodReferences"]].
			
	^list! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50544984 overrides: 50545452!
warningsIsEmpty
	
	^typeCheckers allSatisfy: [ :aTypeChecker | aTypeChecker warningsIsEmpty ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50544992 overrides: 50545457!
alerts

	^typeCheckers 
		inject: OrderedCollection new
		into: [ :problems :typeChecker |
			problems addAll: typeChecker alerts.
			problems ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545001 overrides: 50545484!
hasAlerts
	
	^typeCheckers anySatisfy: [ :aTypeChecker | aTypeChecker hasAlerts ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545008 overrides: 50545474!
value
	
	typeCheckers := methodsToCheck collect: [:aMethod | | methodTypeChecker | 
		methodTypeChecker := aMethod typeCheck. 
		self changed: aMethod. "To trigger Observers..."
		methodTypeChecker].
	
	^self! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545019 overrides: 50545462!
warningsDetect: aCondition ifNone: noneBlock

	| warning |
	
	typeCheckers do: [ :typeChecker |
		warning := typeChecker warningsDetect: aCondition ifNone: [ nil ].
		warning ifNotNil: [ ^warning ]].
	
	^noneBlock value! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545031 overrides: 50545479!
errorsIsEmpty
	
	^typeCheckers allSatisfy: [ :aTypeChecker | aTypeChecker errorsIsEmpty ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545038!
sortedTypeCheckers
	
	^typeCheckers sorted: [ :leftTypeChecker :rightTypeChecker | leftTypeChecker methodReference <= rightTypeChecker methodReference ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545048 overrides: 50545489!
errorsAndWarnings
	
	| list |
	
	list := self sortedTypeCheckers
		inject: OrderedCollection new 
		into: [ :aList :aTypeChecker | 
			aList add: aTypeChecker methodReference.
			aList addAll: aTypeChecker errorsAndWarnings.
			aList ].
			
	^list! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545060!
methodSelector
	
	^typeCheckers anyOne methodSelector ! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545066 overrides: 50545494!
alertsDetect: aCondition ifNone: noneBlock
	
	| alert |
	
	typeCheckers do: [ :typeChecker |
		alert := typeChecker alertsDetect: aCondition ifNone: [ nil ].
		alert ifNotNil: [ ^alert ]].
	
	^noneBlock value! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545077 overrides: 50545500!
errors
	
	^typeCheckers 
		inject: OrderedCollection new
		into: [ :errors :typeChecker |
			errors addAll: typeChecker errors.
			errors ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545086 overrides: 50545468!
warningsSize
	
	^typeCheckers sum: [ :typeChecker | typeChecker warningsSize ] ifEmpty: [ 0 ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545093!
methodsToCheck
	"It's needed by the progressive bar runner.... "
	^methodsToCheck copy.! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545101 overrides: 50545505!
hasErrorsOrWarnings
	
	^typeCheckers anySatisfy: [ :aTypeChecker | aTypeChecker hasErrorsOrWarnings ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545108!
initializeForAll: aMethodsCollectionToCheck 

	methodsToCheck := aMethodsCollectionToCheck collect: [ :aMethod | aMethod asMethodReference ].
	! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545117 overrides: 50545510!
hasErrors
	
	^typeCheckers anySatisfy: [ :aTypeChecker | aTypeChecker hasErrors ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545124 overrides: 50545532!
warnings
	
	^typeCheckers 
		inject: OrderedCollection new
		into: [ :warnings :typeChecker |
			warnings addAll: typeChecker warnings.
			warnings ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545133 overrides: 50545537!
alertsSize
	
	^typeCheckers sum: [ :aTypeChecker | aTypeChecker alertsSize ] ifEmpty: [ 0 ]! !
!ManyMethodsTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545141 overrides: 50545542!
errorsSize
	
	^typeCheckers sum: [ :typeChecker | typeChecker errorsSize ] ifEmpty: [ 0 ]! !
!ManyMethodsTypeCheckerDragon class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545148!
forClass: aClass 
	
	^self forAll: aClass theNonMetaClass methodDictionary values, aClass theMetaClass methodDictionary values! !
!ManyMethodsTypeCheckerDragon class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545156!
forAllClasses: classes

	| methods |
	
	methods := OrderedCollection new.
	classes do: [ :aClass | self addMethodsOf: aClass to: methods ].
	
	^self forAll: methods! !
!ManyMethodsTypeCheckerDragon class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545165!
addMethodsOf: aClass to: methods
 
	methods 
		addAll: aClass theNonMetaClass methodDictionary values;
		addAll: aClass theMetaClass methodDictionary values! !
!ManyMethodsTypeCheckerDragon class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545174!
forAll: aMethodsCollectionToCheck

	^self new initializeForAll: aMethodsCollectionToCheck ! !
!MethodNotAnnotatingTypesIssue methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545181!
sourceCodeRange
	^#()! !
!MethodNotAnnotatingTypesIssue methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545186!
compiledMethod
	^methodReference  .! !
!MethodNotAnnotatingTypesIssue methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545191!
initializeFor: aMethodReference 
	methodReference := aMethodReference. ! !
!MethodNotAnnotatingTypesIssue methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545197!
problemDescription
	^ 'Method is not annotating types'.! !
!MethodNotAnnotatingTypesIssue methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545203!
problemTypeIdentifierString

	^ 'Alert'! !
!MethodNotAnnotatingTypesIssue class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545209!
for: aCompiledMethod 
	^self new initializeFor: aCompiledMethod. ! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545215!
method
	^compiledMethod .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545220!
errorsAndWarningsAsMethodReferencesWithProblems: showProblems
	
	^self errorsAndWarningsAsMethodReferencesWithProblems: showProblems prefixing: ''! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545229!
methodClass
	
	^compiledMethod methodClass .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545235 overrides: 50545484!
hasAlerts
	^self alerts size > 0.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545240!
hasWarnings
	^self warnings size > 0.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545246 overrides: 50545474!
value
	self typeCheck.
	^self.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545252 overrides: 50545479!
errorsIsEmpty
	^self errors isEmpty .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545257!
methodSelector
	
	^compiledMethod selector .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545262!
errorsAndWarningsAsMethodReferencesWithProblems: showProblems prefixing: aPrefix
	| listToShow |
	
	listToShow := self addMethodReferencesOf: self errors prefixing: aPrefix to: OrderedCollection new.
	self addMethodReferencesOf: self warnings prefixing: aPrefix to: listToShow.
	showProblems ifTrue: [ self addMethodReferencesOf: self alerts prefixing: aPrefix to: listToShow ].
	
	^listToShow! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545279 overrides: 50545494!
alertsDetect: aCondition ifNone: noneBlock

	^self alerts detect: aCondition ifNone: noneBlock .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545286!
addMethodReferencesOf: aTypeCheckingResultsIssueCollection prefixing: aPrefix to: methodReferencesCollection 
	aTypeCheckingResultsIssueCollection do: [ :aTypeCheckingIssue |
		methodReferencesCollection add: (TypeCheckingDragonIssueToMethodReferenceAdapter of: aTypeCheckingIssue prefixing: aPrefix) ].
	
	^methodReferencesCollection ! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545301 overrides: 50545510!
hasErrors
	^self errors size > 0.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545307 overrides: 50545532!
warnings
	^issues select: [:issue | issue isKindOf: TypeCheckingDragonWarning.]! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545314 overrides: 50545537!
alertsSize
	^self alerts size.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545320 overrides: 50545441!
hasNoErrorsAndWarnings
	
	^self errors isEmpty and: [ self warnings isEmpty ]! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545326!
typeCheckWhenDisabledTyping
	issues add: (MethodNotAnnotatingTypesIssue for: compiledMethod).
	^self.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545334 overrides: 50545446!
errorsDetect: aCondition ifNone: noneBlock

	^self errors detect: aCondition ifNone: noneBlock .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545342 overrides: 50545452!
warningsIsEmpty
	^self warnings isEmpty .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545348 overrides: 50545457!
alerts
	^issues select: [:issue | (issue isKindOf: TypeCheckingDragonIncompleteInformation) or: [issue isKindOf: MethodNotAnnotatingTypesIssue ].]! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545357 overrides: 50545462!
warningsDetect: aCondition ifNone: noneBlock

	^self warnings detect: aCondition ifNone: noneBlock .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545365 overrides: 50545468!
warningsSize
	^self warnings size! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545370!
methodReference
	
	^compiledMethod asMethodReference .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545376!
initializeFor: aCompiledMethod 
	compiledMethod := aCompiledMethod.
	issues := OrderedCollection new.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545383!
typeCheck
	compiledMethod isPrimitive ifTrue: [^self].
	compiledMethod isAnnotatingTypes 
		ifTrue: [self typeCheckWhenEnabledTyping] 
		ifFalse: [ self typeCheckWhenDisabledTyping]! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545393 overrides: 50545500!
errors
	^issues select: [:issue | issue isKindOf: TypeCheckingDragonError.]! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545399!
issues
	^issues.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545404!
typeCheckWhenEnabledTyping
	(TypeCheckerDragonMethodVisitor for: compiledMethod collectingAlerts: issues) accept.
	^self.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545412!
classAndSelector
	
	^compiledMethod classAndSelector .! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545418 overrides: 50545505!
hasErrorsOrWarnings
	
	^self errors notEmpty or: [ self warnings notEmpty ]! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545424!
hasIssues
	^issues size > 0.! !
!MethodTypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545430 overrides: 50545542!
errorsSize
	^self errors size.! !
!MethodTypeCheckerDragon class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545435!
for: aCompiledMethod   
	^self new initializeFor: aCompiledMethod ! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545441!
hasNoErrorsAndWarnings
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545446!
errorsDetect: aCondition ifNone: aNoneBlock
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545452!
warningsIsEmpty
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545457!
alerts
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545462!
warningsDetect: aCondition ifNone: aNoneBlock
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545468!
warningsSize
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545474 overrides: 16914075!
value
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545479!
errorsIsEmpty
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545484!
hasAlerts
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545489!
errorsAndWarnings
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545494!
alertsDetect: aCondition ifNone: noneBlock
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545500!
errors
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545505!
hasErrorsOrWarnings
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545510!
hasErrors
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545515!
showResultsWith: aLabelTrail

	| showProblems |

	showProblems := self hasAlerts and: [ self confirm: 'Type checking has generated alerts.\Do you want to see them' withNewLines ].
	(showProblems not and: [ self hasNoErrorsAndWarnings ]) ifTrue: [  ^self inform: 'There are no type errors or warnings' ].
		
	TypeCheckerDragonResultWindow openFor: self labelTrail: aLabelTrail showingProblems: showProblems ! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545532!
warnings
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545537!
alertsSize
	
	self subclassResponsibility! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545542!
errorsSize
	
	self subclassResponsibility! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545548!
visitMessageNodeArguments: aMessageNode
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		contextApplier updateFor: aMessageNode visiting: argumentBlock 	ifUpdated: 	[:newContext | 
				contextApplier:= newContext. 
				argumentBlock accept: self.
				self restorePreviousContext .
			] 
			ifNotUpdated:[ argumentBlock accept: self.				].
	].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545564!
checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType 
	
	| implementorsFinder |
	
	implementorsFinder := AllActualLocalImplementors of: aMessageNode selectorSymbol forAll: receiverLiveType.
	implementorsFinder liveTypeValue.
	
	implementorsFinder notImplementedIsEmpty ifFalse: [  
		issues add: (TypeCheckingDragonError forNotImplementedTypes: implementorsFinder notImplemented on: compiledMethod for: methodNode by: aMessageNode)].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545583 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=contextApplier receiverLiveTypesFor: aMessageNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation on: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	self visitMessageNodeArguments:aMessageNode.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545611 overrides: 16919312!
visitBlockNode: aBlockNode
	super visitBlockNode: aBlockNode.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545617!
initializeFor: aCompiledMethod collectingIssues: anIssuesCollection
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	issues := anIssuesCollection .
	contextApplier := GeneralContextApplier new.
	! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545628!
accept
	self visitMethodNode: methodNode.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545634!
addWarning: anIncompleteTypeInfoError node: aMessageNode

	
	issues add: (TypeCheckingDragonWarning on: compiledMethod for: methodNode by: aMessageNode reason: anIncompleteTypeInfoError reasonDescription )
! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545645!
restorePreviousContext
	contextApplier := contextApplier previous.! !
!TypeCheckerDragonMethodVisitor class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545651!
for: aCompiledMethod collectingAlerts: anAlertCollection  
	^self new initializeFor: aCompiledMethod collectingIssues: anAlertCollection .! !
!TypeCheckerDragonResultSet methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545660 overrides: 16898594!
messageSendsRangesOf: aSelector

	^ selectedMessage 
		ifNil: [ #() ]
		ifNotNil: [ selectedMessage sourceCodeRange ]
! !
!TypeCheckerDragonResultSet methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545668!
calculateList

	messageList := methodTypeChecker errorsAndWarningsAsMethodReferencesWithProblems: showProblems.
	self reformulateList.
	! !
!TypeCheckerDragonResultSet methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545677 overrides: 16898507!
contents: aString notifying: aRequestor 

	| result |

	result := super contents: aString notifying: aRequestor.
	methodTypeChecker := methodTypeChecker value.
	self calculateList.
	
	^result 
! !
!TypeCheckerDragonResultSet methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545687!
initializeFor: aMethodTypeChecker showingProblems: showingProblems 
	
	methodTypeChecker := aMethodTypeChecker.
	showProblems := showingProblems.
	self calculateList.
	
	"It does not matter the methodSelector, it is just a symbol that flags that ranges should be look for selecting - Hernan"
	self autoHighlightString: methodTypeChecker methodSelector allOccurrences: false! !
!TypeCheckerDragonResultSet class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545703!
for: aMethodTypeChecker showingProblems: showingProblems 
	
	^self new initializeFor: aMethodTypeChecker showingProblems: showingProblems 
! !
!TypeCheckerDragonResultWindow methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545712 overrides: 16799654!
messageListMenu

	| aMenu |
	
	aMenu _ MenuMorph new defaultTarget: self.
	aMenu addTitle: 'Errors & Warnings'.
	aMenu
		addItemsFromDictionaries: `{
			{
				#label 			-> 		'remove'.
				#object 			-> 		#model.
				#selector 		-> 		#removeMessageFromBrowserKeepingLabel.
				#icon 			-> 		#listRemoveIcon
			} asDictionary.
		}`.
		
	^ aMenu! !
!TypeCheckerDragonResultWindow class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545727!
openFor: aTypeChecker labelTrail: aLabelTrail showingProblems: showingProblems 

	| window model |
	
	model := TypeCheckerDragonResultSet for: aTypeChecker showingProblems: showingProblems.
	window := super open: model label: 'Type checking result for ', aLabelTrail.
	model messageListIndex: 1.
	
	^window
	! !
!TypeCheckingDragonError methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545741 overrides: 50545947!
selector
	^messageNode selector.! !
!TypeCheckingDragonError methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545747 overrides: 50545952!
receiver
	^messageNode receiver.! !
!TypeCheckingDragonError methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545752!
notImplementedTypes
	
	^notImplemented collect: [:aNotImplemented | aNotImplemented actualClass ]! !
!TypeCheckingDragonError methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545759!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode notImplementedTypes: notImplementedTypes  .
	methodReference := aCompiledMethod asMethodReference .
	methodNode := aMethodNode.
	messageNode := aMessageNode.
	notImplemented:= notImplementedTypes.! !
!TypeCheckingDragonError methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545772 overrides: 50545977!
problemDescription
	^ self selector identifierPrintString, ' not implemented in ', self notImplementedTypes asCommaStringAnd  .! !
!TypeCheckingDragonError methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545781 overrides: 50545983!
problemTypeIdentifierString

	^ 'Error'! !
!TypeCheckingDragonError class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545786!
forNotImplementedTypes: notImplementedTypes on: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode notImplementedTypes: notImplementedTypes.! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545798 overrides: 50545947!
selector
	^messageNode selector.! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545804 overrides: 50545952!
receiver
	^messageNode receiver.! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545810!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: description  
	methodReference := aCompiledMethod asMethodReference .
	methodNode := aMethodNode.
	messageNode := aMessageNode.
	problemDescription := description.! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545823 overrides: 50545977!
problemDescription
	^problemDescription .! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545829 overrides: 50545983!
problemTypeIdentifierString

	^ 'Alert'! !
!TypeCheckingDragonIncompleteInformation class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545835!
on: aMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aMethod for: aMethodNode by: aMessageNode description: 'No type information on receiver collected'.! !
!TypeCheckingDragonIssueToMethodReferenceAdapter methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545845!
actualClass
	
	^typeCheckingProblem method actualClass! !
!TypeCheckingDragonIssueToMethodReferenceAdapter methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545851!
initializeOf: aTypeCheckingProblem prefixing: aHeader

	typeCheckingProblem := aTypeCheckingProblem.
	prefix := aHeader ! !
!TypeCheckingDragonIssueToMethodReferenceAdapter methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545860!
sourceCodeRange
	
	^typeCheckingProblem sourceCodeRange ! !
!TypeCheckingDragonIssueToMethodReferenceAdapter methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545867 overrides: 16914685!
displayStringOrText

	^prefix, typeCheckingProblem displayStringOrText! !
!TypeCheckingDragonIssueToMethodReferenceAdapter methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545874!
methodSymbol
	
	^typeCheckingProblem method methodSymbol ! !
!TypeCheckingDragonIssueToMethodReferenceAdapter class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545881!
of: aTypeCheckingProblem prefixing: aHeader

	^self new initializeOf: aTypeCheckingProblem prefixing: aHeader

! !
!TypeCheckingDragonIssueToMethodReferenceAdapter class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545889!
of: aTypeCheckingProblem

	^self of: aTypeCheckingProblem prefixing: ''! !
!TypeCheckingDragonWarning methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545896 overrides: 50545947!
selector
	^messageNode selector.! !
!TypeCheckingDragonWarning methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545902 overrides: 50545952!
receiver
	^messageNode receiver.! !
!TypeCheckingDragonWarning methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545907!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode reason: aReasonDescription 
	methodReference := aCompiledMethod asMethodReference .
	methodNode := aMethodNode.
	messageNode := aMessageNode.
	reason := aReasonDescription.! !
!TypeCheckingDragonWarning methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545919 overrides: 50545977!
problemDescription
	^reason .! !
!TypeCheckingDragonWarning methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545925 overrides: 50545983!
problemTypeIdentifierString

	^ 'Warning'! !
!TypeCheckingDragonWarning class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545931!
on: aCompiledMethod for: aMethodNode by: aMessageNode reason: aReasonDescription
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode reason: (self canNotDeduceReceiverTypeDueToDescription: aReasonDescription )! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545942!
method
	^methodReference.! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545947!
selector
	self subclassResponsibility .! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545952!
receiver
	self subclassResponsibility .! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545957!
sourceCodeRange
	
	^Array with: (methodNode rangeForNode: messageNode ifAbsent: [^#()])! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545964!
compiledMethod
	^methodReference compiledMethod .! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545970 overrides: 16914685!
displayStringOrText

	^ self problemTypeIdentifierString, ': ', self problemDescription! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545977!
problemDescription
	self subclassResponsibility .! !
!TypeCheckingResultsIssues methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545983!
problemTypeIdentifierString

	self subclassResponsibility .! !
!TypeCheckingResultsIssues class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:09' prior: 50545989!
canNotDeduceReceiverTypeDueToDescription: aReason
 
	^'Can not deduce receiver''s type because: ', aReason ! !
!ProgressiveManyMethodTypeCheckRunner methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:36' prior: 50540996!
registerTypeCheckedAction
		
	typeChecker when: #changed: send: #methodChecked to: self! !
!ProgressiveManyMethodTypeCheckRunner methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:36' prior: 50540932 overrides: 16914075!
value

	Utilities authorInitials.
	methodsStream := ReadStream on: typeChecker methodsToCheck .
	methodsStream atEnd
		ifTrue: [ self informNoMethodToCheck ]
	 	ifFalse:[ self createProgressBarAndRun ]! !
!ProgressiveManyMethodTypeCheckRunner methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:36' prior: 50540924!
initializeFor: aTypeChecker showingResultsWith: aResultsName

	typeChecker := aTypeChecker.
	showingResultsName := aResultsName .
	! !
!ProgressiveManyMethodTypeCheckRunner methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:36' prior: 50541021!
unregisterTypeCheckerAction
	
	typeChecker releaseActionMap ! !
!ProgressiveManyMethodTypeCheckRunner methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:36' prior: 50540948!
createProgressBar
		
	
	progressBar := ProgressMorph label: 'Methods Type Checker'.
	self calculateTestRunIncrement.
	self updateProgressBarSubLabel.
	! !
!ProgressiveManyMethodTypeCheckRunner methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:36' prior: 50540957!
updateDoneIncrement 

 	progressBar incrDone: testRunIncrement 
	! !
!ProgressiveManyMethodTypeCheckRunner methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:36' prior: 50540963!
updateProgressBarSubLabel
	
	methodsStream atEnd ifFalse: [
		progressBar subLabel: methodsStream next printString, ' (', methodsStream position printString, '/', methodsStream size printString, ')' ].! !
!ProgressiveManyMethodTypeCheckRunner methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:36' prior: 50540942!
calculateTestRunIncrement
	
	testRunIncrement := 1/methodsStream size! !
!ProgressiveManyMethodTypeCheckRunner methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:36' prior: 50540979!
createProgressBarAndRun

	self createProgressBar.
	[ self typeCheckShowingProgress ]
		forkAt: Processor userSchedulingPriority
		named: 'ProgressiveManyMethodTypeCheckRunner'.! !
!ProgressiveManyMethodTypeCheckRunner methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:36' prior: 50541003!
typeCheckMethods
		
	typeChecker value.	
	typeChecker showResultsWith: showingResultsName.
	! !
!ProgressiveManyMethodTypeCheckRunner methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:36' prior: 50540989!
methodChecked
	
	self updateProgressBarSubLabel.
	self updateDoneIncrement 
	
		! !
!ProgressiveManyMethodTypeCheckRunner methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:36' prior: 50540973!
informNoMethodToCheck
		
	 PopUpMenu inform: 'No method to type check'! !
!ProgressiveManyMethodTypeCheckRunner methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:36' prior: 50541010!
typeCheckShowingProgress

	[
		self registerTypeCheckedAction. 
		progressBar openInWorld.
		self typeCheckMethods ] ensure: [
			self unregisterTypeCheckerAction.
			UISupervisor whenUIinSafeState: [progressBar dismissMorph] ].! !
!ProgressiveManyMethodTypeCheckRunner class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/18/2024 18:42:36' prior: 50541027!
for: aTypeChecker showingResultsWith: aResultsName

	^self new initializeFor: aTypeChecker showingResultsWith: aResultsName .! !

!testRun: #ManyMethodsTypeCheckerDragonTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test04AlertsDetectIfNone stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test05AlertsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test07ErrorsDetectIfNone stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test10WarningsDetectIfNone stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test15HasErrorsOrWarnings stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:42:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/18/2024 18:42:49'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 9/18/2024 18:52:59' prior: 50546701!
is: aBlockNode asRejectingArgumentIn: aMessageNode

	| blockIsRejectingCondition |
	blockIsRejectingCondition := aMessageNode selectorSymbol = #ifFalse: or: [aMessageNode selectorSymbol = #ifTrue:ifFalse:].
	blockIsRejectingCondition := blockIsRejectingCondition and: [aBlockNode = aMessageNode arguments second].
	^blockIsRejectingCondition .
	
	


! !

!testRun: #ManyMethodsTypeCheckerDragonTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 9/18/2024 18:53:41'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 9/18/2024 18:53:41'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 9/18/2024 18:53:41'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test04AlertsDetectIfNone stamp: 'JFGO 9/18/2024 18:53:41'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test05AlertsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/18/2024 18:53:41'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 9/18/2024 18:53:41'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test07ErrorsDetectIfNone stamp: 'JFGO 9/18/2024 18:53:41'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test10WarningsDetectIfNone stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test15HasErrorsOrWarnings stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/18/2024 18:53:42'!
PASSED!
Morphic view for MessageSet models. See category 'GUI building'.!

----QUIT----(18 September 2024 18:55:59) CuisUniversity-6169.image priorSource: 6245038!

----STARTUP---- (23 September 2024 15:33:06) as C:\Users\juli_\Tesis\TO_UPLOAD\windows64\CuisUniversity-6169.image!


!classDefinition: #ContextAppliersMethodVisitor category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 9/23/2024 15:33:59'!
ParseNodeVisitor subclass: #ContextAppliersMethodVisitor
	instanceVariableNames: 'compiledMethod parseNode contextBlockNode methodNode types contextApplier incompleteTypeInfoReasons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/23/2024 15:33:59' prior: 50546937 overrides: 16919312!
visitBlockNode: aBlockNode
	
	(aBlockNode = contextBlockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons .
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
		^self.
	].
	super visitBlockNode: aBlockNode.
	
	! !
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/23/2024 15:33:59' prior: 50546118!
initializeFor: aCompiledMethod with: aMethodNode on: aParseNode within: aBlockNode addingIncompleteTypeInfoTo: aIncompleteTypeInfoReasonsList
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	contextBlockNode := aBlockNode.
	methodNode := aMethodNode.
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.
	incompleteTypeInfoReasons := aIncompleteTypeInfoReasonsList.! !
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 9/23/2024 15:34:32' prior: 50549734!
initializeFor: aCompiledMethod with: aMethodNode on: aParseNode within: aBlockNode addingIncompleteTypeInfoTo: anIncompleteTypeInfoReasonsList
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	contextBlockNode := aBlockNode.
	methodNode := aMethodNode.
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.
	incompleteTypeInfoReasons := anIncompleteTypeInfoReasonsList.! !

----SNAPSHOT----(23 September 2024 15:35:11) CuisUniversity-6169.image priorSource: 6977490!
Morphic view for MessageSet models. See category 'GUI building'.!

----QUIT----(23 September 2024 17:10:26) CuisUniversity-6169.image priorSource: 6979704!

----STARTUP---- (25 September 2024 17:52:44) as C:\Users\juli_\Tesis\TO_UPLOAD\windows64\CuisUniversity-6169.image!

!TypeContextAppliers methodsFor: 'updating / restoration' stamp: 'JFGO 9/25/2024 17:54:28'!
shouldUpdateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ 
		newContext := self buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aMessageNode isIfNil ifTrue: [ 
		newContext := self buildContextForIfNilMessagesWith: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 9/25/2024 17:54:28' prior: 50546066!
visitMessageNodeArguments:aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		contextApplier shouldUpdateFor: aMessageNode visiting: argumentBlock 
			ifUpdated: 	[:newContext | 
				contextApplier:= newContext. 
				argumentBlock accept: self.
				self restorePreviousContext .
				] 
			ifNotUpdated:[ argumentBlock accept: self.				].
	].! !

!methodRemoval: TypeContextAppliers #updateFor:visiting:ifUpdated:ifNotUpdated: stamp: 'JFGO 9/25/2024 17:54:28'!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ 
		newContext := self buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aMessageNode isIfNil ifTrue: [ 
		newContext := self buildContextForIfNilMessagesWith: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.!

!testRun: #ManyMethodsTypeCheckerDragonTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #ManyMethodsTypeCheckerDragonTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test04AlertsDetectIfNone stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #ManyMethodsTypeCheckerDragonTest #test05AlertsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #ManyMethodsTypeCheckerDragonTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test07ErrorsDetectIfNone stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #ManyMethodsTypeCheckerDragonTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #ManyMethodsTypeCheckerDragonTest #test10WarningsDetectIfNone stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #ManyMethodsTypeCheckerDragonTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #ManyMethodsTypeCheckerDragonTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test15HasErrorsOrWarnings stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #MethodTypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #MethodTypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #MethodTypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #MethodTypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #MethodTypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #MethodTypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #MethodTypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #MethodTypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 9/25/2024 17:54:32'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/25/2024 17:54:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/25/2024 17:54:33'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 9/25/2024 17:54:37'!
ERROR!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 9/25/2024 17:54:48' prior: 50548372!
visitMessageNodeArguments: aMessageNode
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		contextApplier shouldUpdateFor: aMessageNode visiting: argumentBlock 	ifUpdated: 	[:newContext | 
				contextApplier:= newContext. 
				argumentBlock accept: self.
				self restorePreviousContext .
			] 
			ifNotUpdated:[ argumentBlock accept: self.				].
	].! !

!testRun: #ManyMethodsTypeCheckerDragonTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test04AlertsDetectIfNone stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test05AlertsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test07ErrorsDetectIfNone stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test10WarningsDetectIfNone stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test15HasErrorsOrWarnings stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/25/2024 17:54:57'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/25/2024 17:54:58'!
PASSED!
Morphic view for MessageSet models. See category 'GUI building'.!

----SNAPSHOT----(25 September 2024 17:56:57) CuisUniversity-6169.image priorSource: 6979798!

----QUIT----(25 September 2024 19:42:23) CuisUniversity-6169.image priorSource: 7006340!

----STARTUP---- (26 September 2024 18:07:25) as C:\Users\juli_\Tesis\TO_UPLOAD\windows64\CuisUniversity-6169.image!

!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 9/26/2024 18:08:45'!
shouldFilterTypeFor: condition knowing:blockIsOnRejectingCondition

	^blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.	
		
		! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 9/26/2024 18:09:20' prior: 50546730!
contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition

	| objectToCast typeToApplyOnCast shouldFilterType |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	condition isObjectClassNameComparedToClassName ifTrue: [
		typeToApplyOnCast:= condition arguments first receiver key value.
		objectToCast:= condition receiver receiver receiver
	] ifFalse:[
		typeToApplyOnCast:= condition receiver receiver key value.
		objectToCast:= condition arguments first receiver receiver.
	].
	
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: (self shouldFilterTypeFor: condition knowing: blockIsOnRejectingCondition )
		withPreviousContext: self.
		
		
		! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 9/26/2024 18:09:45' prior: 50550617!
contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition

	| objectToCast typeToApplyOnCast |
	
	condition isObjectClassNameComparedToClassName ifTrue: [
		typeToApplyOnCast:= condition arguments first receiver key value.
		objectToCast:= condition receiver receiver receiver
	] ifFalse:[
		typeToApplyOnCast:= condition receiver receiver key value.
		objectToCast:= condition arguments first receiver receiver.
	].
	
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: (self shouldFilterTypeFor: condition knowing: blockIsOnRejectingCondition )
		withPreviousContext: self.
		
		
		! !

!testRun: #ManyMethodsTypeCheckerDragonTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test04AlertsDetectIfNone stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test05AlertsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test07ErrorsDetectIfNone stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test10WarningsDetectIfNone stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test15HasErrorsOrWarnings stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/26/2024 18:09:51'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/26/2024 18:09:52'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 9/26/2024 18:10:40' prior: 50546843!
contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition

	| objectToCast typeToApplyOnCast |
	
	condition isObjectClassNameComparedToClassSymbol ifTrue: [
		typeToApplyOnCast:= (Smalltalk classNamed: condition arguments first key).
		objectToCast:= condition receiver receiver receiver.
	] ifFalse:[
		typeToApplyOnCast:= (Smalltalk classNamed: condition receiver key value).
		objectToCast:= condition arguments first receiver receiver.
	].
	
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: (self shouldFilterTypeFor: condition knowing: blockIsOnRejectingCondition )
		withPreviousContext: self.! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/26/2024 18:10:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/26/2024 18:10:48'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 9/26/2024 18:11:02' prior: 50546906!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| typeToApplyOnCast objectToCast |
	
	
	condition isObjectClassComparedToClass ifTrue: [
		typeToApplyOnCast:= condition arguments first key value.
		objectToCast:= condition receiver receiver.
	] ifFalse:[
		typeToApplyOnCast:= condition receiver key value.
		objectToCast:= condition arguments first receiver.
	].
	
		
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: (self shouldFilterTypeFor: condition knowing: blockIsOnRejectingCondition )
		withPreviousContext: self.
	
	

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 9/26/2024 18:11:13' prior: 50551306!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| typeToApplyOnCast objectToCast |
		
	condition isObjectClassComparedToClass ifTrue: [
		typeToApplyOnCast:= condition arguments first key value.
		objectToCast:= condition receiver receiver.
	] ifFalse:[
		typeToApplyOnCast:= condition receiver key value.
		objectToCast:= condition arguments first receiver.
	].
	
		
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: (self shouldFilterTypeFor: condition knowing: blockIsOnRejectingCondition )
		withPreviousContext: self.
	
	

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 9/26/2024 18:11:34' prior: 50546803!
contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition
	
	| typeToApplyOnCast objectToCast |
	
	
	condition isObjectComparedToLiteral ifTrue: [
		typeToApplyOnCast:= condition arguments first literalValue class.
		objectToCast:= condition receiver.
	] ifFalse:[
		typeToApplyOnCast:= condition receiver literalValue class.
		objectToCast:= condition arguments first.
	].
	
		
	^EqualsToLiteralContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: (self shouldFilterTypeFor: condition knowing: blockIsOnRejectingCondition )
		withPreviousContext: self.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 9/26/2024 18:11:38' prior: 50551354!
contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition
	
	| typeToApplyOnCast objectToCast |
	
	
	condition isObjectComparedToLiteral ifTrue: [
		typeToApplyOnCast:= condition arguments first literalValue class.
		objectToCast:= condition receiver.
	] ifFalse:[
		typeToApplyOnCast:= condition receiver literalValue class.
		objectToCast:= condition arguments first.
	].
	
		
	^EqualsToLiteralContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: (self shouldFilterTypeFor: condition knowing: blockIsOnRejectingCondition )
		withPreviousContext: self.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 9/26/2024 18:12:03' prior: 50546880!
contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition 
		
	| objectToCast |
	
	condition isNotNil ifTrue:[
		^EqualsClassTypeContextApplier 
			to: UndefinedObject
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	
	condition isFirstArgumentNil ifTrue: [
		objectToCast:= condition receiver.
	] ifFalse:[
		objectToCast:= condition arguments first.
	].
	
	^EqualsClassTypeContextApplier 
		to: UndefinedObject
		on: objectToCast
		shouldFilterType: (self shouldFilterTypeFor: condition knowing: blockIsOnRejectingCondition )
		withPreviousContext: self.! !

!testRun: #ManyMethodsTypeCheckerDragonTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test04AlertsDetectIfNone stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test05AlertsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test07ErrorsDetectIfNone stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test10WarningsDetectIfNone stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test15HasErrorsOrWarnings stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/26/2024 18:12:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/26/2024 18:12:23'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 9/26/2024 18:41:23' prior: 50546596!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	"condition isMessageNode ifFalse:[
		^GeneralContextApplier new.
	]."

	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	(condition isOr or: [condition isAnd]) ifTrue:[ 
		^self contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	(condition isManyOr or: [condition isManyAnd ]) ifTrue:[
		^self contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
	].	
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/26/2024 18:41:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/26/2024 18:41:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/26/2024 18:41:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/26/2024 18:41:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/26/2024 18:41:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/26/2024 18:41:26'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/26/2024 18:41:26'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 9/26/2024 18:42:30' prior: 50551797!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	condition isMessageNode ifFalse:[
		^GeneralContextApplier new.
	].

	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	(condition isOr or: [condition isAnd]) ifTrue:[ 
		^self contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	(condition isManyOr or: [condition isManyAnd ]) ifTrue:[
		^self contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
	].	
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16784011 overrides: 16918533!
printOn: aStream indent: level 
	variable printOn: aStream indent: level.
	aStream nextPutAll: ' _ '.
	value printOn: aStream indent: level! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16783929!
emitCodeForValue: stack encoder: encoder

	variable emitCodeForLoad: stack forValue: true encoder: encoder.
	value emitCodeForValue: stack encoder: encoder.
	pc := encoder methodStreamPosition + 1. "debug pc is first byte of the store, i.e. the next byte".
	variable emitCodeForStore: stack encoder: encoder! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16784065 overrides: 16918635!
isAssignmentToTemporary

	^ self isAssignmentNode and: [ variable isTemp ]! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 50534712 overrides: 50534683!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	
	^value basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons ! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16784042 overrides: 16918601!
expandRanges: sourceRanges basedOn: allSourceRanges using: sourceCode

	^ self consolidateAsCollection: (self
		expandRange: (sourceRanges isInterval ifTrue: [ sourceRanges ] ifFalse: [ sourceRanges first ])
		basedOn: (allSourceRanges at: variable))! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16784070 overrides: 16918652!
isComplex
	^ value isComplex! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 50506306 overrides: 50506165!
typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons castingWith: aTypeCastApplier 

	^value typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons castingWith: aTypeCastApplier 
! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16783987 overrides: 16914075!
value
	^ value! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16784074 overrides: 16918815!
referencesSelf

	^variable referencesSelf or: [value referencesSelf]! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16783975!
variable
	^variable! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16783958!
analyseTempsWithin: scopeBlock "<BlockNode>"  rootNode: rootNode "<MethodNode>" assignmentPools: assignmentPools "<Dictionary>"
	"N.B.  since assigment happens _after_ the value is evaluated the value is sent the message _first_."
	value analyseTempsWithin: scopeBlock rootNode: rootNode assignmentPools: assignmentPools.
	variable beingAssignedToAnalyseTempsWithin: scopeBlock rootNode: rootNode assignmentPools: assignmentPools! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16784025 overrides: 16918563!
printWithClosureAnalysisOn: aStream indent: level 
	variable printWithClosureAnalysisOn: aStream indent: level.
	aStream nextPutAll: ' _ '.
	value printWithClosureAnalysisOn: aStream indent: level! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16784018 overrides: 16918539!
printOn: aStream indent: level precedence: p

	aStream nextPut: $(.
	self printOn: aStream indent: level.
	aStream nextPut: $)! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16783950!
sizeCodeForValue: encoder

	^(variable sizeCodeForLoad: encoder forValue: true)
	+ (value sizeCodeForValue: encoder)
	+ (variable sizeCodeForStore: encoder)! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16784079 overrides: 16918818!
referencesSuper

	^variable referencesSuper or: [value referencesSuper]! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16784061 overrides: 16918632!
isAssignmentNode
	^true! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16784053 overrides: 16918625!
equivalentTo: aParseNode

	^ aParseNode isAssignmentNode
		and: [ self variable equivalentTo: aParseNode variable ]
		and: [ self value equivalentTo: aParseNode value ]! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16784034 overrides: 16918570!
printWithClosureAnalysisOn: aStream indent: level precedence: p

	aStream nextPut: $(.
	self printWithClosureAnalysisOn: aStream indent: level.
	aStream nextPut: $)! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16783916 overrides: 16918424!
emitCodeForEffect: stack encoder: encoder

	variable emitCodeForLoad: stack forValue: false encoder: encoder.
	value emitCodeForValue: stack encoder: encoder.
	pc := encoder methodStreamPosition + 1. "debug pc is first byte of the store, i.e. the next byte".
	variable emitCodeForStorePop: stack encoder: encoder! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16783991!
variable: aVariable value: expression from: encoder

	"Case of remote temp vars"
	(aVariable isMemberOf: MessageAsTempNode) ifTrue: [ ^aVariable store: expression from: encoder].
	
	variable := aVariable.
	value := expression.
	
	^self
	
! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 50534722 overrides: 50534690!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  storingGenericsInfoIn: aStorage
	
	^value liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  storingGenericsInfoIn: aStorage! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16783979 overrides: 16918822!
toDoIncrement: var
	var = variable ifFalse: [^ nil].
	(value isMemberOf: MessageNode) 
		ifTrue: [^ value toDoIncrement: var]
		ifFalse: [^ nil]! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16784089!
variable: aVariable value: expression 
	variable := aVariable.
	value := expression! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16784084 overrides: 16918831!
accept: aVisitor
	^aVisitor visitAssignmentNode: self! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16784001!
variable: aVariable value: expression from: encoder sourceRange: range

	| realNode |
	
	realNode := self variable: aVariable value: expression from: encoder.
	encoder noteSourceRange: range forNode: realNode.
	
	^realNode! !
!AssignmentNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16783942 overrides: 16918466!
sizeCodeForEffect: encoder

	^(variable sizeCodeForLoad: encoder forValue: false)
	+ (value sizeCodeForValue: encoder)
	+ (variable sizeCodeForStorePop: encoder)! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785954 overrides: 16918533!
printOn: aStream indent: level

	aStream nextPut: $`.
	expression printOn: aStream indent: level.
	aStream nextPut: $`.! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785967!
emitCodeForValue: aParseStack encoder: anEncoder

	^self literalNode emitCodeForValue: aParseStack encoder: anEncoder ! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 50534733 overrides: 50534683!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	
	"This for sure will compile the source code... it would be better to get the literal from the compiled method
	but theres is no way to map from here to the compiled method literals. To do it I would need to generate 
	the code wich means to compile the source code anyway.
	It could also happen that the compiled method does not exist yet...
	Compiling the source code could signal an exception - Hernan"
	^self literalNode basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785876!
evaluateBacktickSourceCode

	^[[[Compiler evaluate: sourceCode ]
		on: SyntaxErrorNotification
		do: [ :ex | parser notify: 'Can not compile: ', ex errorMessage at: range first ]]
		on: UndeclaredVariableReference
		do: [ :ex | parser notify: 'Can not compile: Variable ''', ex varName, ''' is not declared' at: range first ]]
		on: Error
		do: [ :ex | parser notify: 'Can not evaluate code: ', ex description at: range first ].! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785961!
analyseTempsWithin: scopeBlock rootNode: rootNode assignmentPools: assignmentPools

	^self! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 50534756 overrides: 50534690!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage
	
	^self literalNode liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785853!
addSymbolsOfExpressionToParser

	expression nodesDo: [ :aNode |
		aNode isMessageNode ifTrue: [ parser addToSentInLiterals: aNode selector key ].
		aNode isLiteralNode ifTrue: [ (aNode literalValue isSymbol and: [ aNode literalValue ~= Scanner doItSelector ])
			ifTrue: [ parser addToSentInLiterals: aNode literalValue ]]]! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785900!
literalNode

	"The literalNode is initialize if really needed. There are situations when only the method node of a compiled method is needed
	and therefore the literal generated for the backtick is not necessary.
	The literal is needed when compiling the source code and sadly, when debugging because the debugger needs to regenerate
	the code for the temp bindings and the relationship between the bytecodes and the source ranges of the nodes.

	If some message of the backtick source code has changed since the time the method was compiled, the resulting literal
	could be different to the one generated when the method was originally compiled.
	The change could include signaling an exception. That could happen while debuggin. That would mean that the backtick
	code is not compliant with what currently should happen, so although it is a bothering solution, it is the more correct one
	since it shows the difference - Hernan"

	literalNode ifNil: [ self initializeLiteralNode ].
	^literalNode! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785939!
visitExpressionWith: aVisitor

	expression accept: aVisitor! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785944!
visitLiteralWith: aVisitor

	"Remember that creating the literal can signal an exception if the message sent in the expression
	has changed since the method was compiled - Hernan"
	self literalNode accept: aVisitor ! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785974!
sizeCodeForValue: anEncoder

	^self literalNode sizeCodeForValue: anEncoder ! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785979!
expression

	^expression! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785866!
initializeExpression: anExpression source: aSourceCode parser: aParser range: aRange

	expression := anExpression.
	sourceCode := aSourceCode.
	parser := aParser.
	range := aRange.

	self addSymbolsOfExpressionToParser.! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785934 overrides: 16918831!
accept: aVisitor

	^ aVisitor visitBacktickNode: self.
	! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785989 overrides: 16918639!
isBacktickNode

	^true! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785983 overrides: 16918625!
equivalentTo: aParseNode

	^ aParseNode isBacktickNode
		and: [ expression equivalentTo: aParseNode expression ]! !
!BacktickNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785892!
initializeLiteralNode

	| backtickValue |

	backtickValue := self evaluateBacktickSourceCode.
	literalNode := parser encoder encodeLiteral: backtickValue range: range

! !
!BacktickNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16786032!
canNotReferencePseudoVarInsideBacktickErrorDescriptionFor: pseudoVariable

	^ 'Can not reference ', pseudoVariable, ' inside backtick'! !
!BacktickNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16786011!
assertNodesIn: anExpression canBeReferencedInsideBacktickUsing: aParser startingAt: aPosition

	^ anExpression nodesDo: [ :aNode |
		(self canNotBeReferencedInsideBacktick: aNode) ifTrue: [
			aParser
				notify: (self canNotReferencePseudoVarInsideBacktickErrorDescriptionFor: aNode key)
				at: aPosition ]]! !
!BacktickNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16786024!
canNotBeReferencedInsideBacktick: aNode

	^ aNode isSelfPseudoVariable
		or: [ aNode isSuperPseudoVariable
		or: [ aNode isThisContextPseudoVariable ]]! !
!BacktickNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16785999!
expression: anExpression source: aSourceCode parser: aParser range: aRange

	self assertNodesIn: anExpression canBeReferencedInsideBacktickUsing: aParser startingAt: aRange first.

	^self new initializeExpression: anExpression source: aSourceCode parser: aParser range: aRange ! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795036!
sizeCodeForClosureValue: encoder
	"Compute the size for the creation of the block and its code."
	"If we have the closure bytecodes constructClosureCreationNode: will note
	 the copied values in the copiedValues inst var and answer #pushCopiedValues."
	closureCreationNode := self constructClosureCreationNode: encoder.
	"Remember size of body for emit time so we know the size of the jump around it."
	size := self sizeCodeForEvaluatedClosureValue: encoder.
	^encoder supportsClosureOpcodes
		ifTrue:
			[(copiedValues inject: 0 into: [:sum :node| sum + (node sizeCodeForValue: encoder)])
			 + (encoder sizePushClosureCopyNumCopiedValues: copiedValues size numArgs: arguments size jumpSize: size)
			 + size]
		ifFalse:
			["closureCreationSupportNode is send closureCopy:copiedValues:"
			(closureCreationNode sizeCodeForValue: encoder)
			 + (encoder sizeJumpLong: size)
			 + size]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795244 overrides: 16918533!
printOn: aStream indent: level
	| separateLines |
	aStream nextPut: $[.
	self
		printArgumentsOn: aStream
		indent: level.
	separateLines := (self
		printTemporaries: temporaries
		on: aStream
		doPrior: [ aStream space ]) or: [arguments notNil and: [arguments notEmpty] ].
	(Preferences at: #prettyPrintRectangularBlocks)
		ifTrue: [
			"If args+temps > 0 and statements > 1 (or just one complex statement),
			put all statements on separate lines"
			separateLines
				ifTrue: [
					(statements size > 1 or: [
						statements size = 1 and: [ statements first isComplex ]])
							ifTrue: [ aStream newLineTab: (1 max: level) ]
							ifFalse: [ aStream space ] ]
				ifFalse: [
					(statements size = 1 and: [ statements first isComplex not ])
						ifTrue: [ aStream space ]]]
		ifFalse: [
			self isComplex
				ifTrue: [ aStream newLineTab: (1 max: level) ]
				ifFalse: [ aStream space ] ].
	((self printStatementsOn: aStream indent: level) > 0 and: [ aStream peekLast ~= $] ])
		ifTrue: [ aStream space ].
	aStream nextPut: $]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794416 overrides: 16824059!
arguments
	^arguments ifNil: [#()]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794521 overrides: 16824085!
temporariesDeclaration: aTemporariesDeclarationNode
	"RNG: after removing all the usages of the temporaries inst var, the last line can be removed"

	temporariesDeclaration := aTemporariesDeclarationNode.
	self temporaries: aTemporariesDeclarationNode allDeclaredVariableNodes! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794804!
deoptimize
	optimized := false.
	optimizedMessageNode := nil! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 50534827 overrides: 50534683!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	
	^`{ BlockClosure }`! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794809!
emitCodeForClosureValue: stack encoder: encoder
	"if not supportsClosureOpcodes closureCreationSupportNode is the
	 node for thisContext closureCopy: numArgs [ copiedValues: { values } ]"
	encoder supportsClosureOpcodes
		ifTrue:
			[copiedValues do:
				[:copiedValue| copiedValue emitCodeForValue: stack encoder: encoder].
			 closureCreationNode pc: encoder methodStreamPosition + 1.
			 encoder
				genPushClosureCopyNumCopiedValues: copiedValues size
				numArgs: arguments size
				jumpSize: size.
			 stack
				pop: copiedValues size;
				push: 1]
		ifFalse:
			[closureCreationNode emitCodeForValue: stack encoder: encoder.
			 encoder genJumpLong: size]. "Force a two byte jump."
	"Emit the body of the block"
	self emitCodeForEvaluatedClosureValue: stack encoder: encoder! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794411!
addArgument: aTempVariableNode
	temporaries := temporaries copyWith: aTempVariableNode! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795509 overrides: 16918815!
referencesSelf

	^self statements anySatisfy: [:aParseNode | aParseNode referencesSelf]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794890!
nilReadBeforeWrittenTemps
	| visitor readBeforeWritten |
	self accept: (visitor := OptimizedBlockLocalTempReadBeforeWrittenVisitor new).
	readBeforeWritten := visitor readBeforeWritten.
	temporaries reverseDo:
		[:temp|
		((readBeforeWritten includes: temp)
		 and: [temp isRemote not]) ifTrue:
			[statements addFirst: (AssignmentNode new variable: temp value: NodeNil)]]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795008!
remoteTempNodeName
	"Answer a useful name for a RemoteTempVectorNode in the receiver."
	| prefix scope extent |
	prefix := actualScopeIfOptimized ifNil: ['<'] ifNotNil: [ '<...'].
	scope := self.
	[extent := scope blockExtent.
	 extent == nil
	 and: [scope actualScope ~~ scope]] whileTrue:
		[scope := scope actualScope].
	^extent
		ifNil: [prefix, '?-?>']
		ifNotNil:
			[prefix, extent first printString, '-',
				(extent last isZero
					ifTrue: ['?']
					ifFalse: [extent last printString]), '>']! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794480!
startOfLastStatement
	^startOfLastStatement! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795176!
arguments: argNodes statements: statementsCollection returns: returnBool from: encoder
	"Compile."
	arguments := argNodes.
	statements := statementsCollection size > 0
		ifTrue: [ statementsCollection ]
		ifFalse: [ Array with: NodeNil ].
	optimized := false.
	returns := returnBool! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795494!
isQuick
	^ statements size = 1
		and: [statements first isVariableReference
				or: [statements first isSpecialConstant]]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795235!
printArgumentsOn: aStream indent: level
	(arguments isNil or: [arguments isEmpty]) ifTrue: [^ self].
	aStream space.
	arguments do:
		[ :arg | aStream nextPut: $:; nextPutAll: arg key; space ].
	aStream nextPut: $|! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794538!
tempsMark: anInteger
	"Index of the end of the temporaries declarations in the containing MethodNode sourceText"
	tempsMark := anInteger! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795158!
sizeCodeForValue: encoder
	^self sizeCodeForClosureValue: encoder! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795381 overrides: 16918563!
printWithClosureAnalysisOn: aStream indent: level
	aStream nextPut: $[; space.
	blockExtent ifNotNil: [aStream print: blockExtent].
	self printWithClosureAnalysisArgumentsOn: aStream indent: level.
	self printWithClosureAnalysisTemporariesOn: aStream indent: level.
	self printWithClosureAnalysisStatementsOn: aStream indent: level.
	aStream space; nextPut: $]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794549!
actualScope
	"Answer the actual scope for the receiver.  If this is an unoptimized block then it is its
	 actual scope, but if this is an optimized block then the actual scope is some outer block."
	^actualScopeIfOptimized ifNil: [self]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795487!
isJustCaseError

	^ statements size = 1 and:
		[statements first
			isMessage: #caseError
			receiver: [:r | r==NodeSelf]
			arguments: nil]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 50384642 overrides: 50384637!
sendsMessageToSelf: aSelector

	^ self statements anySatisfy: [ :statementNode | statementNode sendsMessageToSelf: aSelector ]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795163!
statementsDo: aBlock

	statements do: aBlock! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794457!
returnLast
	self returns
		ifFalse: 
			[returns := true.
			statements at: statements size put: statements last asReturnNode]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794773!
computeCopiedValues: rootNode
	| referencedValues |
	referencedValues := rootNode referencedValuesWithinBlockExtent: blockExtent.
	^(referencedValues reject: [:temp| temp isDefinedWithinBlockExtent: blockExtent])
		asArray sort: ParseNode tempSortBlock! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795188!
noteSourceRangeStart: start end: end encoder: encoder
	"Note two source ranges for this node.  One is for the debugger
	 and is of the last expression, the result of the block.  One is for
	 source analysis and is for the entire block."
	encoder
		noteSourceRange: (start to: end)
		forNode: self closureCreationNode.
	startOfLastStatement
		ifNil:
			[encoder
				noteSourceRange: (start to: end)
				forNode: self]
		ifNotNil:
			[encoder
				noteSourceRange: (startOfLastStatement to: end - 1)
				forNode: self]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794427!
closureCreationNode
	closureCreationNode ifNil:
		[closureCreationNode := LeafNode new
									key: #closureCreationNode
									code: nil].
	^closureCreationNode! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795520!
returns
	^returns or: [statements last isReturningIf]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795481 overrides: 16918675!
isJust: node 
	returns ifTrue: [^false].
	^statements size = 1 and: [statements first == node]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794532!
tempsMark
	"Index of the end of the temporaries declarations in the containing MethodNode sourceText"
	^tempsMark! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794621!
analyseArguments: methodArguments temporaries: methodTemporaries rootNode: rootNode "<MethodNode>" "^<Sequence of: <TempVarNade>>"
	"Top level entry-point for analysing temps within the hierarchy of blocks in the receiver's method.
	 Answer the (possibly modified) sequence of temp vars.
	 Need to hoist temps out of macro-optimized blocks into their actual blocks.
	 Need to note reads and writes to temps from blocks other than their actual blocks to determine
	 whether blocks can be local (simple slots within a block/method context) or remote (slots in
	 indirection vectors that are shared between contexts by sharing indirection vectors).

	 The algorithm is based on numbering temporary reads and writes and block extents.
	 The index used for numbering starts at zero and is incremented on every block entry
	 and block exit.  So the following
		| a b blk r1 r2 t |
		a := 1. b := 2. t := 0.
		blk := [ | s | s := a + b. t := t + s].
		r1 := blk value.
		b := -100.
		r2 := blk value.
		r1 -> r2 -> t
	is numbered as
		method block 0 to: 6:
		| a b blk r1 r2 t |
		a w@1 := 1. b w@1 := 2. t w@1 := 0.
		blk w@5 := [entry@2 | s |
					 t  w@3 := t r@3 + a r@3 + b r@3
					] exit@4.
		r1 w@5 := blk r@5 value.
		b w@5 := nil.
		r2 w@5 := blk r@5 value.
		r1 r@5 -> r2 r@5 -> t r@5
	So:
		b and blk cannot be copied because for both there exists a write @5 that follows a
			read @4 within block 2 through 4
		t must be remote because there exists a write @3 within block (2 to: 4)
	Complications are introduced by optimized blocks.  In the following temp is written to
	after it is closed over by [ temp ] since the inlined block is executed more than once.
		| temp coll |
		coll := OrderedCollection new.
		1 to: 5 do: [ :index | 
			temp := index. 
			coll add: [ temp ] ].
		self assert: (coll collect: [:ea| ea value]) asArray = #(5 5 5 5 5)
	In the following i is local to the block and must be initialized each time around the loop
	but if the block is inlined it must be declared at method level.
		| col |
		col := OrderedCollection new.
		1 to: 3 do: [ :each | | i | i := each. col add: [ i ]. i := i + 1 ].
		self assert: (col collect: [ :each | each value ]) asArray = #(2 3 4)"
	self assert: (arguments isEmpty or: [arguments hasEqualElements: methodArguments]).
	arguments := methodArguments asArray. "won't change"
	self assert: (temporaries isNil or: [temporaries isEmpty or: [temporaries hasEqualElements: methodTemporaries]]).
	temporaries := OrderedCollection withAll: methodTemporaries.

	self assert: optimized not. "the top-level block should not be optimized."
	self analyseTempsWithin: self rootNode: rootNode assignmentPools: Dictionary new.

	"The top-level block needs to reindex temporaries since analysis may have rearranged them.
	 This happens when temps are made remote and/or a remote node is added."
	temporaries withIndexDo:
		[:temp :offsetPlusOne| temp index: arguments size + offsetPlusOne - 1].

	"Answer the (possibly modified) sequence of temps."
	^temporaries asArray! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794509 overrides: 16824076!
temporaries: aCollectionOfTemporaries
	"Collection of TempVariableNodes"
	"RNG: deprecated, try to use #temporariesDeclaration: instead"
	
	temporaries := aCollectionOfTemporaries! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 50534834 overrides: 50534690!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage
	
	^`FixedType for: BlockClosure`! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794420 overrides: 16824063!
arguments: argNodes 
	"decompile"

	arguments := argNodes! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794578!
addRemoteTemp: aTempVariableNode rootNode: rootNode "<MethodNode>"
	"Add aTempVariableNode to my actualScope's sequence of
	 remote temps.  If I am an optimized block then the actual
	 scope is my actualScopeIfOptimized, otherwise it is myself."
	remoteTempNode == nil ifTrue:
		[remoteTempNode := RemoteTempVectorNode new
								name: self remoteTempNodeName
								index: arguments size + temporaries size
								type: LdTempType
								scope: 0.
		 actualScopeIfOptimized
			ifNil:
				[self addTempNode: remoteTempNode.
				 remoteTempNode definingScope: self]
			ifNotNil: [actualScopeIfOptimized addHoistedTemps: { remoteTempNode }]].
	remoteTempNode addRemoteTemp: aTempVariableNode encoder: rootNode encoder.
	"use remove:ifAbsent: because the deferred analysis for optimized
	 loops can result in the temp has already been hoised into the root."
	self removeTempNode: aTempVariableNode ifAbsent: [
		self actualScope removeTempNode: aTempVariableNode ifAbsent: [self shouldNotHappen ]].
	^remoteTempNode! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794967!
reindexingLocalsDo: aBlock encoder: encoderOrNil
	"Evaluate aBlock wih arguments, temporaries and copiedValues reindexed for
	 their positions within the receiver's block, restoring the correct indices afterwards.
	 If encoder is not nil remember the temps for this block's extent."
	| tempIndices result tempsToReindex |
	self assert: copiedValues notNil.
	tempsToReindex := arguments asArray, copiedValues, temporaries.
	tempIndices := tempsToReindex collect: [:temp| temp index].
	tempsToReindex withIndexDo:
		[:temp :newIndex| temp index: newIndex - 1. self assert: temp index + 1 = newIndex].
	encoderOrNil ifNotNil:
		[encoderOrNil noteBlockExtent: blockExtent hasLocals: tempsToReindex].
	result := aBlock ensure:
				["Horribly pragmatic hack.  The copiedValues will have completely
				  unrelated indices within the closure method and sub-method.
				  Avoiding the effort of rebinding temps in the inner scope simply
				  update the indices to their correct ones during the generation of
				  the closure method and restore the indices immedately there-after."
				 tempsToReindex with: tempIndices do:
					[:temp :oldIndex| temp index: oldIndex. self assert: temp index = oldIndex]].
	^result! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795131!
sizeCodeExceptLast: encoder
	| codeSize statement |
	codeSize := 0.
	1 to: statements size - 1 do: [ :i |
		 statement := statements at: i.
		 codeSize := codeSize + (statement sizeCodeForEffect: encoder)].
	^codeSize! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794495 overrides: 16824072!
temporaries
	"Collection of TempVariableNodes"
	
	"RNG: implementation can be changed after adopting the use of temporariesDeclaration inst var.
	After that, the implementation for this message can be changed to:
	^ temporariesDeclaration allDeclaredVariableNodes
	
	Or we can analyze the senders and change the way we request the temporaries"
	
	^temporaries ifNil: [#()]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16794484!
startOfLastStatement: anInteger
	"Note the source index of the start of the last full statement.  The
	 last full statement is the value answered by a block and hence the
	 expression the debugger should display as the value of the block."
	startOfLastStatement := anInteger! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:52' prior: 16795207!
statements: statementsCollection returns: returnBool 
	"Decompile."

	| returnLast |
	returnLast := returnBool.
	returns := false.
	statements := 
		(statementsCollection size > 1 
			and: [(statementsCollection at: statementsCollection size - 1) 
					isReturningIf])
				ifTrue: 
					[returnLast := false.
					statementsCollection allButLast]
				ifFalse: [statementsCollection size = 0
						ifTrue: [Array with: NodeNil]
						ifFalse: [statementsCollection]].
	arguments := #().
	temporaries := #().
	optimized := false.
	returnLast ifTrue: [self returnLast]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794905!
noteOptimizedIn: anOptimizedMessageNode
	optimized := true.
	optimizedMessageNode := anOptimizedMessageNode! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795125!
emitCodeForValue: stack encoder: encoder

	^self emitCodeForClosureValue: stack encoder: encoder! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794613!
addTempNode: aTempVariableNode
	"Utilities for when we want to add some temporaries."
	
	self makeTemporariesRemovable.
	^temporaries add: aTempVariableNode! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795324!
printTemporaries: tempSequence on: aStream doPrior: aBlock
	"Print any in-scope temporaries.  If there are any evaluate aBlock
	 prior to printing.  Answer whether any temporaries were printed."
	| tempStream seen |
	tempSequence ifNil:
		[^false].
	tempStream := String writeStream.
	"This is for the decompiler which canmot work out which optimized block a particular temp is
	 local to and hence may produce diplicates as in
		expr ifTrue: [| aTemp | ...] ifFalse: [| aTemp | ...]"
	seen := Set new.
	tempSequence do:
		[:tempNode |
		tempNode isIndirectTempVector
			ifTrue:
				[tempNode remoteTemps do:
					[:tempVariableNode|
					 (tempVariableNode scope >= 0
					  and: [(seen includes: tempNode key) not]) ifTrue:
						[tempStream space; nextPutAll: (seen add: tempVariableNode key)]]]
			ifFalse:
				[(tempNode scope >= -1
				  and: ["This is for the decompiler which may create a block arg when converting
						a while into a to:do: but won't remove it form temporaries"
					   tempNode isBlockArg not
				  and: [(seen includes: tempNode key) not]]) ifTrue:
					[tempStream space; nextPutAll: (seen add: tempNode key)]]].
	tempStream position = 0 ifTrue:
		[^false].
	aBlock value.
	aStream nextPut: $|; nextPutAll: tempStream contents; space; nextPut: $|.
	^true! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795395!
printWithClosureAnalysisStatementsOn: aStream indent: levelOrZero
	| len shown thisStatement level |
	level := 1 max: levelOrZero.
	comment ifNotNil: [
		self printCommentOn: aStream indent: level.
		aStream newLineTab: level].
	len := shown := statements size.
	(levelOrZero = 0 "top level" and: [statements last isReturnSelf])
		ifTrue: [shown := 1 max: shown - 1]
		ifFalse: [(len = 1 and: [((statements at: 1) == NodeNil) & (arguments size = 0)])
					ifTrue: [shown := shown - 1]].
	1 to: shown do: 
		[:i | 
		thisStatement := statements at: i.
		thisStatement printWithClosureAnalysisOn: aStream indent: level.
		i < shown ifTrue: [aStream nextPut: $.; newLineTab: level].
		(thisStatement comment notNil and: [thisStatement comment size > 0])
			ifTrue: [
				i = shown ifTrue: [aStream newLineTab: level].
				thisStatement printCommentOn: aStream indent: level.
				i < shown ifTrue: [aStream newLineTab: level]]]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794424 overrides: 16824068!
block
	^ self! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795279!
printStatementsOn: aStream indent: levelOrZero
	| len shown thisStatement level |
	level := 1 max: levelOrZero.
	comment ifNotNil: [
		self printCommentOn: aStream indent: level.
		aStream newLineTab: level].
	statements isNil ifTrue: [^0].
	len := shown := statements size.
	(levelOrZero = 0 "top level" and: [statements last isReturnSelf])
		ifTrue: [ shown := 1 max: shown - 1]
		ifFalse: ["should a trailing nil be printed or not? Not if it is an implicit result."
				(arguments size = 0
				and: [ len >= 1
				and: [ (statements at: len) == NodeNil
				and: [ len = 1
					or: [ len > 1
						and: [(statements at: len - 1) isMessageNode
						and: [(statements at: len - 1) isNilIf ]]]]]])
					ifTrue: [ shown := shown - 1 ]].
	1 to: shown do: 
		[ :i |
		thisStatement := statements at: i.
		thisStatement printOn: aStream indent: level.
		i < shown ifTrue: [ aStream nextPut: $.; newLineTab: level ].
		"Add a final period. This helps when pretty-diffing a method and a version of it that adds stuff after the end."
		(i = shown and: [ levelOrZero = 0 ]) ifTrue: [ aStream nextPut: $. ].
		(thisStatement comment notNil and: [ thisStatement comment size > 0 ])
			ifTrue: [
				i = shown ifTrue: [ aStream newLineTab: level ].
				thisStatement printCommentOn: aStream indent: level.
				i < shown ifTrue: [ aStream newLineTab: level ]]].
	^shown! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795114!
emitCodeForEvaluatedValue: stack encoder: encoder
	| position |
	position := stack position.
	self emitCodeExceptLast: stack encoder: encoder.
	statements last emitCodeForBlockValue: stack encoder: encoder.
	self assert: stack position - 1 = position! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795471 overrides: 16918652!
isComplex
	(statements isNil or: [arguments isNil or: [temporaries isNil]]) ifTrue: [^false].
	^ statements size > 1 or:
		[ (statements size = 1 and: [ statements first isComplex ]) or:
			[ arguments size > 0 or: [ temporaries notEmpty ] ] ]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794439!
nArgsSlot
	"Private for the Encoder to use in bindArg"
	^nArgsNode! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795141!
sizeCodeForEvaluatedEffect: encoder

	^self returns
		ifTrue: [self sizeCodeForEvaluatedValue: encoder]
		ifFalse: [(self sizeCodeExceptLast: encoder)
				+ (statements last sizeCodeForEffect: encoder)]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795442 overrides: 16918601!
expandRanges: sourceRanges basedOn: allSourceRanges using: sourceCode
	"the closure creation node already contains the source ranges including the [ ] and arguments declaration"

	^ self consolidateAsCollection: (allSourceRanges at: closureCreationNode)! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794769!
blockExtent "^<Interval>"
	^blockExtent! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795367!
printWithClosureAnalysisArgumentsOn: aStream indent: level
	arguments size = 0 ifTrue: [^self].
	arguments do: [ :tempNode |
		aStream space; nextPut: $:.
		tempNode printDefinitionForClosureAnalysisOn: aStream].
	aStream nextPut: $|; space.
	"If >0 args and >1 statement, put all statements on separate lines"
	statements size > 1 ifTrue: [
		aStream newLineTab: level]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794718!
analyseTempsWithin: scopeBlock "<BlockNode>" rootNode: rootNode "<MethodNode>" assignmentPools: assignmentPools "<Dictionary>"
	| effectiveScope blockStart |
	effectiveScope := optimized
						ifTrue: [actualScopeIfOptimized := scopeBlock]
						ifFalse: [self].

	arguments ifNotNil:
		[arguments do: [:temp| temp definingScope: self]].
	temporaries ifNotNil:
		[temporaries do: [:temp| temp definingScope: self]].

	optimized ifFalse: "if optimized this isn't an actual scope"
		[rootNode noteBlockEntry:
			[:entryNumber|
			 blockExtent := (blockStart := entryNumber) to: 0]].

	"Need to enumerate a copy because closure analysis can add a statement
	 via ifHasRemoteTempNodeEnsureInitializationStatementExists:."
	statements copy do:
		[:statement|
		 statement analyseTempsWithin: effectiveScope rootNode: rootNode assignmentPools: assignmentPools].

	optimized
		ifTrue: "if optimized loop need to add nils for any temps read before written"
			[optimizedMessageNode isOptimizedLoop ifTrue:
				[self nilReadBeforeWrittenTemps]]
		ifFalse: "if optimized this isn't an actual scope"
			[rootNode noteBlockExit:
				[:exitNumber|
				 blockExtent := blockStart to: exitNumber]].

	"Now that the analysis is done move any temps that need to be moved."
	self postNumberingProcessTempsWithin: effectiveScope rootNode: rootNode.

	"This is simply a nicety for compiler developers..."
	temporaries do:
		[:temp|
		(temp isIndirectTempVector and: [temp name includes: $?]) ifTrue:
			[temp name: temp definingScope remoteTempNodeName]]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795468 overrides: 16918642!
isBlockNode
	^true! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795027!
removeTempNode: aTempVariableNode ifAbsent: aBlock
	"Utilities for when we want to remove some temporaries."
	
	self makeTemporariesRemovable.
	^temporaries remove: aTempVariableNode ifAbsent: aBlock
	! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794912 overrides: 16918399!
optimizedBlockHoistTempsInto: scopeBlock "<BlockNode>"
	"This is a No-op for all nodes except non-optimized BlockNodes."
	"Let's assume the special > 0 guard in MessageNode>>analyseTempsWithin:forValue:encoder: is correct.
	 Then we can simply hoist our temps up."
	self assert: (arguments isNil or: [arguments size <= 1]).
	(arguments notNil and: [arguments notEmpty]) ifTrue:
		[scopeBlock addHoistedTemps: arguments.
		arguments := #()].
	temporaries notEmpty ifTrue:
		[scopeBlock addHoistedTemps: temporaries.
		temporaries := #()]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794854!
ifHasRemoteTempNodeEnsureInitializationStatementExists: rootNode
	"If a remoteTempNode has been added ensure a statement exists to initialize it."
	remoteTempNode ~~ nil ifTrue:
		[(statements notEmpty
		  and: [statements first isAssignmentNode
		  and: [statements first variable isTemp
		  and: [statements first variable isIndirectTempVector]]])
			ifTrue: "If this is a decompiled tree, or if a temporary has been added later in
					the analysis then there already is a temp vector initialization node."
				[(statements first variable ~~ remoteTempNode) ifTrue:
					[statements first variable become: remoteTempNode].
				 statements first value numElements: remoteTempNode remoteTemps size]
			ifFalse:
				[statements addFirst: (remoteTempNode nodeToInitialize: rootNode encoder)]].! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795514 overrides: 16918818!
referencesSuper

	^self statements anySatisfy: [:aParseNode | aParseNode referencesSuper]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795168!
statements
	^statements! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794545!
code
	^statements first code! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795453 overrides: 16918625!
equivalentTo: aParseNode

	^ aParseNode isBlockNode
		and: [ self hasEquivalentArgumentsWith: aParseNode ]
		and: [ self hasEquivalentTemporariesDeclarationWith: aParseNode ]
		and: [ self hasEquivalentStatementsWith: aParseNode ]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795151!
sizeCodeForEvaluatedValue: encoder

	^(self sizeCodeExceptLast: encoder)
		+ (statements last sizeCodeForBlockValue: encoder)! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794444!
nArgsSlot: anInteger
	"Private for the Encoder to use in bindArg"
	nArgsNode := anInteger! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794454!
optimized
	^optimized! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795086!
emitCodeExceptLast: stack encoder: encoder
	| position nextToLast statement |
	position := stack position.
	nextToLast := statements size - 1.
	1 to: nextToLast do: [ :i |
		statement := statements at: i.
		statement emitCodeForEffect: stack encoder: encoder.
		self assert: stack position = position].! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794450!
numberOfArguments
	^arguments size! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794837!
emitCodeForEvaluatedClosureValue: stack encoder: encoder
	| position |
	position := stack position.
	stack position: arguments size + temporaries size + copiedValues size.
	encoder genPushNClosureTemps: temporaries size.
	self
		reindexingLocalsDo: [self emitCodeForEvaluatedValue: stack encoder: encoder]
		encoder: encoder.
	self returns ifFalse:
		[encoder genReturnTopToCaller.
		 pc := encoder methodStreamPosition].
	stack position: position! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795501 overrides: 16918809!
printsInNewLine
	"Used for pretty printing to determine whether to start a new line"

	(Preferences at: #prettyPrintRectangularBlocks) ifFalse: [ ^false ].
	^super printsInNewLine! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795067!
sizeCodeForEvaluatedClosureValue: encoder
	"The closure value primitives push the arguments and the copied values.
	 The compiler guarantees that any copied values come before all local temps.
	 So on closure activation we only need to push nils for the remaining temporaries."
	^(encoder sizePushNClosureTemps: temporaries size)
	+ (self
		reindexingLocalsDo: [self sizeCodeForEvaluatedValue: encoder]
		encoder: nil "don't store temps yet")
	+ (self returns ifTrue: [0] ifFalse: [encoder sizeReturnTopToCaller])! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794784!
constructClosureCreationNode: encoder
	copiedValues := self computeCopiedValues: encoder rootNode.
	encoder supportsClosureOpcodes ifTrue:
		[^self closureCreationNode].
	"Without the bytecode we can still get by."
	^MessageNode new
		receiver: (encoder encodeVariable: 'thisContext')
		selector: #closureCopy:copiedValues:
		arguments: (Array
						with: (encoder encodeLiteral: arguments size)
						with: (copiedValues isEmpty
								ifTrue: [NodeNil]
								ifFalse: [BraceNode new elements: copiedValues]))
		precedence: 3
		from: encoder! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794517 overrides: 16824081!
temporariesDeclaration

	^ temporariesDeclaration! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794932!
postNumberingProcessTempsWithin: scopeBlock "<BlockNode>" rootNode: rootNode "<MethodNode>"
	"A temp can be local (and copied) if it is not written to after it is captured.
	 A temp cannot be local if it is written to remotely.
	 Need to enumerate a copy of the temporaries because any temps becoming remote
	 will be removed from temporaries in analyseClosure: (and a single remote temp node
	 will get added)"
	temporaries copy do:
		[:each|
		each isIndirectTempVector ifFalse:
			[each analyseClosure: rootNode]].

	"If this is an optimized node we need to hoist temporaries up into the relevant block scope."
	optimized ifTrue:
		[self optimizedBlockHoistTempsInto: scopeBlock].

	"Now we may have added a remoteTempNode.  So we need a statement to initialize it."
	self ifHasRemoteTempNodeEnsureInitializationStatementExists: rootNode.

	"Now add all arguments and locals to the pool so that copiedValues can be computed during sizing."
	rootNode
		addLocalsToPool: arguments;
		addLocalsToPool: temporaries! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795426!
printWithClosureAnalysisTemporariesOn: aStream indent: level

	(temporaries == nil or: [temporaries size = 0]) ifFalse: [
		aStream nextPut: $|.
		temporaries do: [ :tempNode |
			aStream space.
			tempNode printDefinitionForClosureAnalysisOn: aStream].
		aStream nextPutAll: ' | '.
		"If >0 args and >1 statement, put all statements on separate lines"
		statements size > 1 ifTrue: [aStream newLineTab: level]]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795227 overrides: 16824090!
decompileString 
	"Answer a string description of the parse tree whose root is the receiver."

	^ String streamContents: [:strm | self printOn: strm indent: 0]
! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794464!
returnNilIfNoOther

	self returns
		ifFalse: 
			[statements last == NodeNil ifFalse: [statements add: NodeNil].
			self returnLast]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795099!
emitCodeForEvaluatedEffect: stack encoder: encoder
	| position |
	position := stack position.
	self returns
		ifTrue: 
			[self emitCodeForEvaluatedValue: stack encoder: encoder.
			stack pop: 1]
		ifFalse: 
			[self emitCodeExceptLast: stack encoder: encoder.
			statements last emitCodeForEffect: stack encoder: encoder].
	self assert: stack position = position! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794560!
addHoistedTemps: additionalTemporaries "<SequenceableCollection>"
	additionalTemporaries do:
		[:temp|
		temp definingScope ifNil:
			[temp definingScope: self]].
	temporaries := (temporaries isNil or: [temporaries isEmpty])
					ifTrue: [additionalTemporaries copy]
					ifFalse:
						[temporaries last isIndirectTempVector
							ifTrue: [temporaries allButLast, additionalTemporaries, { temporaries last }]
							ifFalse: [temporaries, additionalTemporaries]]! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794471!
returnSelfIfNoOther: encoder

	self returns ifTrue:[^self].
	statements last == NodeSelf ifFalse: [
		statements := statements copyWith: (encoder encodeVariable: 'self').
	].
	self returnLast.
! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795524 overrides: 16918831!
accept: aVisitor
	^aVisitor visitBlockNode: self! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795172!
statements: val
	statements := val! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794435!
firstArgument
	^ arguments first! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795463!
hasArgumentOrTemporaryNamed: aName

	^ self hasLocallyArgumentOrTemporaryNamed: aName! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16794882!
makeTemporariesRemovable
	"Utilities for when we want to remove some temporaries."
	
	temporaries isArray ifTrue:
		[temporaries := temporaries asOrderedCollection].! !
!BlockNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795528!
hasEquivalentStatementsWith: aBlockNode

	statements size ~= aBlockNode statements size ifTrue: [ ^ false ].

	statements with: aBlockNode statements do: [ :myStatement :otherBlockNodeStatement |
		(myStatement equivalentTo: otherBlockNodeStatement) ifFalse: [ ^ false ] ].
	^ true! !
!BlockNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795545!
statements: statements returns: returns
	^ self new statements: statements returns: returns! !
!BlockNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50384649!
empty

	^ self statements: #() returns: false! !
!BlockNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16795551!
withJust: aNode
	^ self new statements: (Array with: aNode) returns: false! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797120 overrides: 16918533!
printOn: aStream indent: level
	| isComplex useLevel |
	useLevel := level.
	isComplex := elements anySatisfy: [ :ea |
		ea isComplex ].
	isComplex ifTrue: [ useLevel := useLevel + 1 ].
	aStream nextPut: ${.
	1
		to: elements size
		do: [ :i |
			isComplex ifTrue: [ aStream newLineTab: (1 max: useLevel) ].
			(elements at: i)
				printOn: aStream
				indent: useLevel.
			i < elements size ifTrue: [ aStream nextPutAll: '. ' ]].
	isComplex ifTrue: [ aStream newLineTab: (1 max: level) ].
	aStream nextPut: $}.! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16796989!
emitCodeForValue: stack encoder: encoder

	(encoder supportsClosureOpcodes
		"Hack; we have no way of knowing how much stack space is available"
	 and: [elements size <= self maxElementsForConsArray]) ifTrue:
		[ self elementsDo: [:node| node emitCodeForValue: stack encoder: encoder].
		 encoder genPushConsArray: elements size.
		 stack
			pop: elements size;
			push: 1.
		 ^self].
	^emitNode emitCodeForValue: stack encoder: encoder! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797086!
elements: collection sourceLocations: locations
	"Compile."

	elements := collection.
	sourceLocations := locations! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50534768 overrides: 50534683!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	
	^{ Array }
	"elements 
		inject: Set new
		addingAll: [ :aParseNode | aParseNode typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons ]"! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797181 overrides: 16918652!
isComplex
	^ true.! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797184!
numElements

	^ elements size! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16796982!
maxElementsForConsArray
	"Hack; we have no way of knowing how much stack space is available during sizing"
	^8! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16796967!
analyseTempsWithin: scopeBlock "<BlockNode>" rootNode: rootNode "<MethodNode>" assignmentPools: assignmentPools "<Dictionary>"

	self elementsDo: [ :node |
		node analyseTempsWithin: scopeBlock rootNode: rootNode assignmentPools: assignmentPools ]! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16796978!
elements
	^elements! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797139 overrides: 16918563!
printWithClosureAnalysisOn: aStream indent: level

	aStream nextPut: ${.
	1 to: elements size do: 
		[:i | (elements at: i) printWithClosureAnalysisOn: aStream indent: level.
		i < elements size ifTrue: [aStream nextPutAll: '. ']].
	aStream nextPut: $}! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797006!
sizeCodeForValue: encoder

	(encoder supportsClosureOpcodes
		"Hack; we have no way of knowing how much stack space is available"
	 and: [elements size <= self maxElementsForConsArray]) ifTrue:
		[^(elements inject: 0 into: [:sum :node| sum + (node sizeCodeForValue: encoder)])
		  + (encoder sizePushConsArray: elements size)].
	emitNode := elements size <= 4
		ifTrue: ["Short form: Array braceWith: a with: b ... "
				MessageNode new
					receiver: (encoder encodeVariable: #Array)
					selector: (self selectorForShortForm: elements size)
					arguments: elements precedence: 3 from: encoder]
		ifFalse: ["Long form: (Array braceStream: N) nextPut: a; nextPut: b; ...; braceArray"
				CascadeNode new
					receiver: (MessageNode new
								receiver: (encoder encodeVariable: #Array)
								selector: #braceStream:
								arguments: (Array with: (encoder encodeLiteral: elements size))
								precedence: 3 from: encoder)
					messages: ((elements collect: [:elt | MessageNode new receiver: nil
														selector: #nextPut:
														arguments: (Array with: elt)
														precedence: 3 from: encoder])
								copyWith: (MessageNode new receiver: nil
														selector: #braceArray
														arguments: (Array new)
														precedence: 1 from: encoder))].
	^emitNode sizeCodeForValue: encoder! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797150!
blockAssociationCheck: encoder
	"If all elements are MessageNodes of the form [block]->[block], and there is at
	 least one element, answer true.
	 Otherwise, notify encoder of an error."

	elements size = 0
		ifTrue: [^encoder notify: 'At least one case required'].
	elements with: sourceLocations do:
			[:x :loc |
			(x 	isMessage: #->
				receiver:
					[:rcvr |
					rcvr isBlockNode and: [rcvr numberOfArguments = 0]]
				arguments:
					[:arg |
					arg isBlockNode and: [arg numberOfArguments = 0]])
			  ifFalse:
				[^encoder notify: 'Association between 0-argument blocks required' at: loc]].
	^true! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797051!
casesForwardDo: aBlock
	"For each case in forward order, evaluate aBlock with three arguments:
	 the key block, the value block, and whether it is the last case."

	| numCases case |
	1 to: (numCases := elements size) do:
		[:i |
		case := elements at: i.
		aBlock value: case receiver value: case arguments first value: i=numCases]! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797172 overrides: 16918625!
equivalentTo: aParseNode

	^ aParseNode isBraceNode and: [ self hasEquivalentElementsTo: aParseNode ]! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797081!
elements: collection
	"Decompile."

	elements := collection! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16796958!
selectorForShortForm: nElements

	nElements > 4 ifTrue: [^ nil].
	^ #(braceWithNone braceWith: braceWith:with:
			braceWith:with:with: braceWith:with:with:with:) at: nElements + 1! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797064!
casesReverseDo: aBlock
	"For each case in reverse order, evaluate aBlock with three arguments:
	 the key block, the value block, and whether it is the last case."

	| numCases case |
	(numCases := elements size) to: 1 by: -1 do:
		[:i |
		case := elements at: i.
		aBlock value: case receiver value: case arguments first value: i=numCases]! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50534780 overrides: 50534690!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  storingGenericsInfoIn: aStorage
	
	aStorage initializeAnalysisForTypes: {Array}.
	elements do: [:aParseNode | 
		aStorage 
			addType:  (aParseNode liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  storingGenericsInfoIn: aStorage)
			to:  1
			for: Array.
	].
	^aStorage inferredTypes.! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797178 overrides: 16918645!
isBraceNode

	^ true! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797192!
hasEquivalentElementsTo: aBraceNode

	elements size ~= aBraceNode elements size ifTrue: [ ^ false ]. 

	elements with: aBraceNode elements do: [ :myElement :otherElement |
		(myElement equivalentTo: otherElement) ifFalse: [ ^ false ] ].
	^ true! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797092!
matchBraceStreamReceiver: receiver messages: messages

	((receiver isMessage: #braceStream: receiver: nil arguments: [:arg | arg isConstantNumber])
		and: [messages last isMessage: #braceArray receiver: nil arguments: nil])
		ifFalse: [^ nil "no match"].

	"Appears to be a long form brace construct"
	self elements: (messages allButLast collect:
		[:msg | (msg isMessage: #nextPut: receiver: nil arguments: nil)
					ifFalse: [^ nil "not a brace element"].
		msg arguments first])! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797077!
elementsDo: aBlock

	elements do: aBlock! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797188 overrides: 16918831!
accept: aVisitor
	^aVisitor visitBraceNode: self! !
!BraceNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797110!
matchBraceWithReceiver: receiver selector: selector arguments: arguments

	selector = (self selectorForShortForm: arguments size)
		ifFalse: [^ nil "no match"].

	"Appears to be a short form brace construct"
	self elements: arguments! !
!BraceNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16797208!
example
	"Test the {a. b. c} syntax."

	| x |
	x := {1. {2. 3}. 4}.
	^ {x first. x second first. x second last. x last. 5} as: Set

"BraceNode example Set (0 1 2 3 4 5 )"
! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803146 overrides: 16918533!
printOn: aStream indent: level
	self printOn: aStream indent: level precedence: 0! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803113!
emitCodeForValue: stack encoder: encoder
	receiver emitCodeForValue: stack encoder: encoder.
	1 to: messages size - 1 do: 
		[:i | 
		encoder genDup.
		stack push: 1.
		(messages at: i) emitCodeForValue: stack encoder: encoder.
		encoder genPop.
		stack pop: 1].
	messages last emitCodeForValue: stack encoder: encoder! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50534797 overrides: 50534683!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  

	| lastMessage |
	
	lastMessage := messages last.
	lastMessage receiver: receiver.
	
	^[ lastMessage basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons ]
		ensure: [ lastMessage receiver: nil ]
	! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803215!
receiver: receivingObject messages: msgs
	" Transcript show: 'abc'; cr; show: 'def' "

	receiver := receivingObject.
	messages := msgs! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803222 overrides: 16918601!
expandRanges: aSourceRange basedOn: sourceRanges using: sourceCode

	| receiverExpandedRanges expandedRangeWithReceiver |
	receiverExpandedRanges := receiver expandRanges: (sourceRanges at: receiver) basedOn: sourceRanges using: sourceCode.
	expandedRangeWithReceiver := self
		expandRange: (aSourceRange isInterval ifTrue: [ aSourceRange ] ifFalse: [ aSourceRange first ])
		basedOn: receiverExpandedRanges.
	^ super
		expandRanges: expandedRangeWithReceiver
		basedOn: expandedRangeWithReceiver
		using: sourceCode! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803211 overrides: 16918652!
isComplex
	^ true! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803139!
receiver
	^receiver! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803197!
hasEquivalentMessagesWith: aCascadeNode

	messages size ~= aCascadeNode messages size ifTrue: [ ^ false ].

	messages with: aCascadeNode messages do: [ :myMessage :otherNodeMessage |
		(myMessage equivalentTo: otherNodeMessage) ifFalse: [ ^ false ] ].
	^ true! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803102!
analyseTempsWithin: scopeBlock "<BlockNode>" rootNode: rootNode "<MethodNode>" assignmentPools: assignmentPools "<Dictionary>"
	{ receiver }, messages do:
		[:node| node analyseTempsWithin: scopeBlock rootNode: rootNode assignmentPools: assignmentPools]! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50534811 overrides: 50534690!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage

	| lastMessage |
	
	lastMessage := messages last.
	lastMessage receiver: receiver.
	
	^[ lastMessage liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage ]
		ensure: [ lastMessage receiver: nil ]
	! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803136!
messages
	^messages! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803142 overrides: 16918894!
receiverOrCascadeReceiver
	
	^receiver ! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803166 overrides: 16918563!
printWithClosureAnalysisOn: aStream indent: level
	self printWithClosureAnalysisOn: aStream indent: level precedence: 0! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803151 overrides: 16918539!
printOn: aStream indent: level precedence: p
	p > 0 ifTrue: [ aStream nextPut: $( ].
	messages first
		printReceiver: receiver
		on: aStream
		indent: level.
	1
		to: messages size
		do: [ :i | 
			aStream newLineTab: level + 1.
			(messages at: i)
				printOn: aStream
				indent: level+1.
			i < messages size ifTrue: [ aStream nextPut:$; ] ].
	p > 0 ifTrue: [ aStream nextPut: $) ]! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803126!
sizeCodeForValue: encoder
	| size |
	size := (receiver sizeCodeForValue: encoder)
			 + (messages size - 1 * (encoder sizeDup + encoder sizePop)).
	messages do: [:aMessage | size := size + (aMessage sizeCodeForValue: encoder)].
	^size! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803208 overrides: 16918648!
isCascadeNode

	^ true! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803097 overrides: 16918831!
accept: aVisitor
	^aVisitor visitCascadeNode: self! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803172 overrides: 16918570!
printWithClosureAnalysisOn: aStream indent: level precedence: p 

	p > 0 ifTrue: [aStream nextPut: $(].
	messages first printWithClosureAnalysisReceiver: receiver on: aStream indent: level.
	1 to: messages size do: 
		[:i | (messages at: i) printWithClosureAnalysisOn: aStream indent: level.
		i < messages size ifTrue: 
				[aStream nextPut: $;.
				messages first precedence >= 2 ifTrue: [aStream newLineTab: level + 1]]].
	p > 0 ifTrue: [aStream nextPut: $)]! !
!CascadeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16803189 overrides: 16918625!
equivalentTo: aParseNode

	^ aParseNode isCascadeNode
		and: [ receiver equivalentTo: aParseNode receiver ]
		and: [ self hasEquivalentMessagesWith: aParseNode ]! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824059!
arguments

	self subclassResponsibility ! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824166!
isLocalArgumentOrTemporary: aParseNode

	"Looks only in this scope - Hernan"
	^(self temporaries includes: aParseNode) or: [ self arguments includes: aParseNode ]
	! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824068!
block

	self subclassResponsibility ! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824085!
temporariesDeclaration: aTemporariesDeclarationNode

	self subclassResponsibility! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824161!
hasTemporaryVariables

	^ self temporariesDeclaration declaresAnyVariable! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824081!
temporariesDeclaration

	self subclassResponsibility! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824128!
hasLocallyArgumentOrTemporaryNamed: aVariableName

	"- hasArgumentOrTemporaryNamed: returns true if there is a temp or variable in this scope or subscopes 
	   named aVariableName
	- hasLocalName: returns true if there is a variable in the scopeTable name aVariableName. That includes 
	  temps, arguments, instance variables and pseudo-variables
	- hasLocallyArgumentOrTemporaryNamed: returns true if ony this scope defines a temp or argument 
	  named aVariableName. - Hernan" 
	
	^(self hasLocallyArgumentNamed: aVariableName)
		or: [self hasLocallyTemporaryNamed: aVariableName]! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824155!
hasNodeIn: aCollectionOfNodes named: aName

	^aCollectionOfNodes anySatisfy: [ :tempNode | tempNode isNamed: aName ]! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824076!
temporaries: aCollectionOfTemporaries

	self subclassResponsibility ! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824090!
decompileString

	self subclassResponsibility ! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824122!
hasLocallyArgumentNamed: aVariableName
		
	^self hasNodeIn: self arguments named: aVariableName! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824063!
arguments: aCollectionOfArguments

	self subclassResponsibility ! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824149!
hasLocallyTemporaryNamed: aVariableName

	^self hasNodeIn: self temporaries named: aVariableName ! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824105!
hasEquivalentTemporariesDeclarationWith: aCodeNode

	(self temporariesDeclaration isNil and: [ aCodeNode temporariesDeclaration isNil ]) ifTrue: [ ^true ].
	(self temporariesDeclaration isNil and: [ aCodeNode temporariesDeclaration notNil ]) ifTrue: [ ^false ].
	(self temporariesDeclaration notNil and: [ aCodeNode temporariesDeclaration isNil ]) ifTrue: [ ^false ].
	
	^self temporariesDeclaration equivalentTo: aCodeNode temporariesDeclaration ! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824072!
temporaries

	self subclassResponsibility ! !
!CodeNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16824094!
hasEquivalentArgumentsWith: aCodeNode

	self arguments size ~= aCodeNode arguments size ifTrue: [ ^ false ].

	self arguments with: aCodeNode arguments do: [ :myArgument :otherCodeNodeArgument |
		(myArgument equivalentTo: otherCodeNodeArgument) ifFalse: [ ^ false ] ].
	^ true! !
!InstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16883592 overrides: 16918671!
isInstanceVariableNode

	^true! !
!InstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16883564 overrides: 16997769!
emitCodeForValue: stack encoder: encoder
	stack push: 1.
	^encoder genPushInstVar: index! !
!InstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16883551 overrides: 16997756!
emitCodeForStore: stack encoder: encoder
	encoder genStoreInstVar: index! !
!InstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16883575 overrides: 16997790!
sizeCodeForStorePop: encoder
	^encoder sizeStorePopInstVar: index! !
!InstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506577 overrides: 50506497!
nodeTypePrintString

	^'inst var'! !
!InstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50534999 overrides: 50534893!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	
	^ aCompiledMethod typesOfInstanceVariableNamed: name ifAbsent: [ #() ]! !
!InstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16883557 overrides: 16997761!
emitCodeForStorePop: stack encoder: encoder
	encoder genStorePopInstVar: index.
	stack pop: 1! !
!InstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16883586!
name: varName index: varIndex
	^self name: varName index: varIndex-1 type: LdInstType! !
!InstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50535008 overrides: 50534969!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage
	
	^aCompiledMethod liveTypesOfInstanceVariableNamed: name storingGenericsInfoIn: aStorage ifAbsent: [`EmptyType new`].! !
!InstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16883581 overrides: 16997795!
sizeCodeForValue: encoder
	^encoder sizePushInstVar: index! !
!InstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16883546 overrides: 16997599!
accept: aVisitor
	^aVisitor visitInstanceVariableNode: self! !
!InstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16883570 overrides: 16997785!
sizeCodeForStore: encoder
	^encoder sizeStoreInstVar: index! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891916 overrides: 16918424!
emitCodeForEffect: stack encoder: encoder

	^self! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891921 overrides: 16918466!
sizeCodeForEffect: encoder

	^0! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891942 overrides: 16918625!
equivalentTo: aParseNode

	^ self class = aParseNode class and: [ self key = aParseNode key ]! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50534862 overrides: 50534683!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  

	^#()! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891953!
name: ignored key: object code: byte 
	key := object.
	code := byte! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891901!
sizeCodeForLoad: encoder forValue: forValue
	"Default is to do nothing.
	 Subclasses may need to override."
	^0! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891886!
emitCodeForLoad: stack forValue: forValue encoder: encoder
	"Default is to do nothing.
	 Subclasses may need to override."! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891936!
key: object index: i type: type

	key := object.
	code := (self code: i type: type).
	index := i! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891874!
analyseTempsWithin: scopeBlock "<BlockNode>" rootNode: rootNode "<MethodNode>" assignmentPools: assignmentPools "<Dictionary>"
	"This is a no-op except in TempVariableNode"
	^self! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891948!
key: object code: byte 
	key := object.
	code := byte! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891907!
code: idx type: type
	"Warning: index would be shadowed"
	idx ifNil: [
		^type negated].
	(CodeLimits at: type) > idx 
		ifTrue: [^(CodeBases at: type) + idx].
	^type * 256 + idx! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891932!
key: aKey

	key := aKey ! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506468 overrides: 50506130!
isSameAs: aParseNode

	^(super isSameAs: aParseNode) 
		or: [ (aParseNode isKindOf: self class) and: [ key = aParseNode key ]]! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891925!
sizeCodeForValue: encoder
	self subclassResponsibility! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50534869 overrides: 50534690!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: anStorage

	^`EmptyType new`.! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891893!
reserve: encoder 
	"If this is a yet unused literal of type -code, reserve it."

	code < 0 ifTrue: [code := self code: (index := encoder litIndex: key) type: 0 - code]! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891929!
key
	^key! !
!LeafNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16891883!
code
	^code! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892406 overrides: 16918678!
isLiteralNode

	^ true! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892418 overrides: 16918533!
printOn: aStream indent: level
	key isVariableBinding
		ifTrue: [
			key key isNil
				ifTrue: [
					aStream
						nextPutAll: '###';
						nextPutAll: key value soleInstance name ]
				ifFalse: [
					aStream
						nextPutAll: '##';
						nextPutAll: key key ]]
		ifFalse: [
			key isLiteral
				ifTrue: [ | isComplex |
					isComplex := false.
					key isArray ifTrue: [
						isComplex := key anySatisfy: [ :ea |
							ea isArray ]].
					"Is it complex? (i.e. array of arrays)"
					isComplex
						ifTrue: [
							aStream
								nextPut: $#;
								nextPut: $(.
							key do: [ :ea |
								aStream newLineTab: (1 max: level + 1).
								ea storeOn: aStream ].
							aStream newLineTab: (1 max: level).
							aStream nextPut: $) ]
						ifFalse: [ key storeOn: aStream ]]
				ifFalse: [
					"Need to generate code for stuff that is in a CompiledMethod literal
					but is not understood as a literal by the Compiler.
					Well, then it is because it was generated using backticks!!"
					aStream nextPut: $`.
					key storeOn: aStream.
					aStream nextPut: $` ]]! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892365!
emitCodeForValue: stack encoder: encoder
	stack push: 1.
	(encoder
		if: code
		isSpecialLiteralForPush:
			[:specialLiteral|
			 encoder genPushSpecialLiteral: specialLiteral])
		ifFalse:
			[encoder genPushLiteral: index]! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892466!
name: literal key: object index: i type: type
	"For compatibility with Encoder>>name:key:class:type:set:"
	^self key: object index: i type: type! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892398 overrides: 16918657!
isConstantCharacter
	^ key isCharacter! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506481 overrides: 50506155!
nodeTypePrintString

	^'literal'! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892402 overrides: 16918662!
isConstantNumber
	^ key isNumber! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892415!
literalValue

	^key! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892385!
eval
	"When everything in me is a constant, I can produce a value.  This is only used by the Scripting system (TilePadMorph tilesFrom:in:)"

	^ key! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50534877 overrides: 50554598!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	
	^Array with: self literalValue class! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892410 overrides: 16918754!
isSpecialConstant
	^ code between: LdTrue and: LdMinus1+3! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50534885 overrides: 50554672!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage
	
	^self literalValue asLiveType.! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892454 overrides: 16918563!
printWithClosureAnalysisOn: aStream indent: level

	key isVariableBinding
		ifTrue:
			[key key isNil
				ifTrue:
					[aStream nextPutAll: '###'; nextPutAll: key value soleInstance name]
				ifFalse:
					[aStream nextPutAll: '##'; nextPutAll: key key]]
		ifFalse:
			[key storeOn: aStream]! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892375 overrides: 50554666!
sizeCodeForValue: encoder
	self reserve: encoder.
	(encoder
		if: code
		isSpecialLiteralForPush:
			[:specialLiteral|
			 ^encoder sizePushSpecialLiteral: specialLiteral])
		ifFalse:
			[^encoder sizePushLiteral: index]! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892360 overrides: 16918831!
accept: aVisitor
	^aVisitor visitLiteralNode: self! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892473 overrides: 50554680!
reserve: encoder 
	"If this is a yet unused literal of type -code, reserve it."

	code < 0 ifTrue:
		[index := key isVariableBinding "true if sending value[:] to a special binding"
					ifTrue: [encoder sharableLitIndex: key]
					ifFalse: [encoder litIndex: key].
		 code := self code: index type: 0 - code]! !
!LiteralNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892392 overrides: 50554591!
equivalentTo: aParseNode

	^ aParseNode isLiteralNode and: [ super equivalentTo: aParseNode ]! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892553 overrides: 16997769!
emitCodeForValue: stack encoder: encoder
	^readNode
		ifNil: [stack push: 1.
			encoder genPushLiteralVar: index]
		ifNotNil: [readNode emitCodeForValue: stack encoder: encoder]! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892515 overrides: 16997756!
emitCodeForStore: stack encoder: encoder
	| exprOffset |
	writeNode ifNil: [^encoder genStoreLiteralVar: index].
	"On entry the stack has only the expression.  Push the binding,
	 duplicate the expression, send #value: and pop.
	 The various value: methods on Association ReadOnlyVariableBinding
	 etc _do not_ return the value assigned; they return the receiver.  If they
	 did we could generate much simpler code, e.g.
		encoder genPushLiteral: index.
		stack push: 1.
		writeNode emitCode: stack args: 1 encoder: encoder super: false"
	exprOffset := stack position - 1.
	encoder genPushLiteral: index.
	stack push: 1.
	encoder genPushTempLong: exprOffset.
	stack push: 1.
	writeNode
		emitCode: stack
		args: 1
		encoder: encoder
		super: false.
	stack pop: 1.
	encoder genPop! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892591 overrides: 16997790!
sizeCodeForStorePop: encoder
	self reserve: encoder.
	^(key isVariableBinding and: [key isSpecialWriteBinding])
		ifTrue: [	writeNode := encoder encodeSelector: #value:.
				^ (writeNode sizeCode: encoder args: 1 super: false)
	  			+ encoder sizePop]
		ifFalse: [encoder sizeStorePopLiteralVar: index]! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892625 overrides: 16918681!
isLiteralVariableNode

	^ true! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506591 overrides: 50506497!
nodeTypePrintString

	^'literal var'! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50535019 overrides: 50534893!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	
	^ Array with: key value class! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892562 overrides: 50554610!
sizeCodeForLoad: encoder forValue: forValue
	self reserve: encoder.
	^(key isVariableBinding and: [key isSpecialWriteBinding and: [forValue not]])
		ifTrue: [encoder sizePushLiteral: index]
		ifFalse: [0]! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892633!
isReferencingGlobal
	
	^(Smalltalk bindingOf: key name) notNil  ! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892543 overrides: 16997761!
emitCodeForStorePop: stack encoder: encoder
	writeNode ifNil:
		[stack pop: 1.
		 ^encoder genStorePopLiteralVar: index].
	writeNode
		emitCode: stack
		args: 1
		encoder: encoder
		super: false.
	stack pop: 1.
	encoder genPop! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892498 overrides: 16997812!
emitCodeForLoad: stack forValue: forValue encoder: encoder
	"If a normal literal variable (not sending value:), do nothing.
	 If for value (e.g. v := Binding := expr) do nothing; the work will be done in emitCodeForStore:encoder:.
	 If not for value then indeed load.  The rest of the work will be done in  emitCodeForStorePop:encoder:."
	(writeNode isNil or: [forValue]) ifTrue: [^self].
	encoder genPushLiteral: index.
	stack push: 1! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892629!
isReferencingBehavior
	
	^key value isBehavior! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50535027 overrides: 50534969!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  storingGenericsInfoIn: aStorage
	
	^FixedType for: key value class
	
	
	
	
! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892618 overrides: 16997603!
assignmentCheck: encoder at: location
	^(key isVariableBinding and: [key canAssign not])
		ifTrue: [location]
		ifFalse: [-1]! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892604 overrides: 16997795!
sizeCodeForValue: encoder
	self reserve: encoder.
	(key isVariableBinding and: [key isSpecialReadBinding]) 
		ifFalse:
			[^encoder sizePushLiteralVar: index].
	readNode := MessageNode new 
		receiver: (encoder encodeLiteral: key)
		selector: (encoder encodeSelector: #value)
		arguments: #()
		precedence: #value precedence.
	^readNode sizeCodeForValue: encoder! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892493 overrides: 16997599!
accept: aVisitor
	^aVisitor visitLiteralVariableNode: self! !
!LiteralVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16892572 overrides: 16997785!
sizeCodeForStore: encoder
	self reserve: encoder.
	(key isVariableBinding and: [key isSpecialWriteBinding]) ifFalse:
		[^encoder sizeStoreLiteralVar: index].
	writeNode := encoder encodeSelector: #value:.
	"On entry the stack has only the expression.  Push the binding,
	 duplicate the expression, send #value: and pop."
	^(encoder sizePushLiteral: index)
	  + (encoder sizePushTempLong: 0) "we don't know yet, hence long, sigh..."
	  + (writeNode sizeCode: encoder args: 1 super: false)
	  + encoder sizePop! !
!MaybeContextInstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16893077 overrides: 50554499!
emitCodeForValue: stack encoder: encoder
	stack push: 1.
	^encoder genPushInstVarLong: index! !
!MaybeContextInstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16893064 overrides: 50554506!
emitCodeForStore: stack encoder: encoder
	encoder genStoreInstVarLong: index! !
!MaybeContextInstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16893090 overrides: 50554513!
sizeCodeForStorePop: encoder
	^encoder sizeStorePopInstVarLong: index! !
!MaybeContextInstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16893096 overrides: 50554562!
sizeCodeForValue: encoder
	^encoder sizePushInstVarLong: index! !
!MaybeContextInstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16893084 overrides: 50554574!
sizeCodeForStore: encoder
	^encoder sizeStoreInstVarLong: index! !
!MaybeContextInstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16893057 overrides: 50554693!
code
	"Answer a bogus code to avoid creating quick methods.
	 See MethodNode>>generate:ifQuick:"
	^LoadLong! !
!MaybeContextInstanceVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16893070 overrides: 50554536!
emitCodeForStorePop: stack encoder: encoder
	encoder genStorePopInstVarLong: index.
	stack pop: 1! !
!MessageAsTempNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895203!
sizeCodeForStorePop: encoder
	"This node has the form {expr storeAt: offset inTempFrame: homeContext},
	where the expr, the block argument, is already on the stack."
	^self sizeCodeForEffect: encoder! !
!MessageAsTempNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895176!
store: expr from: encoder 
	"ctxt tempAt: n -> ctxt tempAt: n put: expr (see Assignment).
	For assigning into temps of a context being debugged."

	selector key ~= #namedTempAt: ifTrue: [^self error: 'cant transform this message'].
	
	^ MessageAsTempNode new
		receiver: receiver
		selector: #namedTempAt:put:
		arguments: (arguments copyWith: expr)
		precedence: precedence
		from: encoder! !
!MessageAsTempNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895192!
emitCodeForStorePop: stack encoder: encoder
	"This node has the form {expr storeAt: offset inTempFrame: homeContext},
	where the expr, the block argument, is already on the stack."
	^self emitCodeForEffect: stack encoder: encoder! !
!MessageAsTempNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895146!
asStorableNode: encoder
	"This node is a message masquerading as a temporary variable.
	It currently has the form {homeContext tempAt: offset}.
	We need to generate code for {expr storeAt: offset inTempFrame: homeContext},
	where the expr, the block argument, is already on the stack.
	This, in turn will get turned into {homeContext tempAt: offset put: expr}
	at runtime if nobody disturbs storeAt:inTempFrame: in Object (not clean)"
	^ MessageAsTempNode new
		receiver: nil  "suppress code generation for receiver already on stack"
		selector: #storeAt:inTempFrame:
		arguments: (arguments copyWith: receiver)
		precedence: precedence
		from: encoder! !
!MessageAsTempNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895170!
code
	"Allow synthetic temp nodes to be sorted by code"
	^ arguments first literalValue! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895678!
originalReceiver

	^ originalReceiver! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895653!
arguments
	^arguments! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506713!
isNilEqualOrIdenticalTo
	
	^self isEqualOrIdentical and: [ self isReceiverNil ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541425!
isObjectComparedToLiteral

	^ self isFirstArgumentLiteral.! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896408!
compare: myArguments with: othersArguments

	myArguments size ~= othersArguments size ifTrue: [ ^ false ].

	myArguments with: othersArguments do: [ :myArgument :otherArgument |
		(myArgument equivalentTo: otherArgument) ifFalse: [ ^ false ] ].
	^ true! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506697!
isIfWithMessageNodeAsCondition
	
	^self isAnyKindOfIf and: [ self receiverOrCascadeReceiver isMessageNode ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506814 overrides: 50506165!
typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons castingWith: aTypeCastApplier 
	
	| types sentSelector receiverTypes  |

	sentSelector := self selectorSymbol.
	receiverTypes := aTypeCastApplier receiverTypesFor: self in: aCompiledMethod addingIncompleteTypeInfoTo:  incompleteTypeInfoReasons.
	
	types := receiverTypes
		inject: Set new
		into: [ :messageReturnTypes :aReceiverType | 								
			(aReceiverType lookupSelector: sentSelector) 
				ifNil: [ incompleteTypeInfoReasons add: (
					IncompleteTypeInfoError dueToMissingImplementationOf: (MethodReference class: aReceiverType selector: sentSelector)) ]
				ifNotNil: [ :implementor | | returnTypes |
					returnTypes := implementor returnTypes.
					returnTypes isEmpty
						ifTrue: [ incompleteTypeInfoReasons add: (IncompleteTypeInfoWarning dueToNoReturnTypeOf: implementor methodReference) ]
						ifFalse: [ messageReturnTypes addAll: (returnTypes collect: [ :aType | aType asTypeFor: aReceiverType])]].
			messageReturnTypes ].
		
	^types! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895683!
receiver
	^receiver! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541298!
isComparingEqualityForClassWithObjectClass
	^self isAnyEqualityComparison and: [ self isObjectClassComparedToClass or: [self isClassComparedToObjectClass]].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895889!
printRepeatOn: aStream indent: level

	self printReceiver: receiver on: aStream indent: level.

	^self printKeywords: selector key
		arguments: (Array new)
		on: aStream indent: level! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896199!
keywordPositionAt: anIndex

	^keywordRanges at: anIndex ! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506649!
isClassMessageSend
	
	^self selectorSymbol = #class! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896350!
isUnaryMessageSend

	^self selectorSymbol isUnary ! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896304 overrides: 16918698!
isMessageNode
	^true! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896768!
emitCodeForIf: stack encoder: encoder value: forValue
	| thenExpr thenSize elseExpr elseSize |
	thenSize := sizes at: 1.
	elseSize := sizes at: 2.
	(forValue not and: [elseSize * thenSize > 0]) ifTrue:
		"Two-armed IFs forEffect share a single pop"
		[^super emitCodeForEffect: stack encoder: encoder].
	thenExpr := arguments at: 1.
	elseExpr := arguments at: 2.
	receiver emitCodeForValue: stack encoder: encoder.
	forValue
		ifTrue:  "Code all forValue as two-armed"
			[self emitCodeForBranchOn: false dist: thenSize pop: stack encoder: encoder.
			pc := encoder methodStreamPosition.
			thenExpr emitCodeForEvaluatedValue: stack encoder: encoder.
			stack pop: 1.  "then and else alternate; they don't accumulate"
			thenExpr returns not ifTrue:
				"...not ifTrue: avoids using ifFalse: alone during this compile)"
				"Elide jump over else after a return"
				[self emitCodeForJump: elseSize encoder: encoder].
			elseExpr emitCodeForEvaluatedValue: stack encoder: encoder]
		ifFalse:  "One arm is empty here (two-arms code forValue)"
			[thenSize > 0
				ifTrue:
					[self emitCodeForBranchOn: false dist: thenSize pop: stack encoder: encoder.
					pc := encoder methodStreamPosition.
					thenExpr emitCodeForEvaluatedEffect: stack encoder: encoder]
				ifFalse:
					[self emitCodeForBranchOn: true dist: elseSize pop: stack encoder: encoder.
					pc := encoder methodStreamPosition.
					elseExpr emitCodeForEvaluatedEffect: stack encoder: encoder]]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896064 overrides: 16918563!
printWithClosureAnalysisOn: aStream indent: level
	"may not need this check anymore - may be fixed by the #receiver: change"
	special ifNil: [^aStream nextPutAll: '** MessageNode with nil special **'].

	special > 0 ifTrue:
		[^self perform: self macroPrinter with: aStream with: level].

	self printWithClosureAnalysisReceiver: receiver on: aStream indent: level.
	self printWithClosureAnalysisKeywords: selector key
		 arguments: arguments
		 on: aStream
		 indent: level! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895858 overrides: 16918539!
printOn: strm indent: level precedence: outerPrecedence

	| parenthesize |
	parenthesize := precedence > outerPrecedence
		or: [outerPrecedence = 3 and: [precedence = 3 "both keywords"]].
	parenthesize
		ifTrue: [strm nextPutAll: '('.
				self printOn: strm indent: level.
				strm nextPutAll: ')']
		ifFalse: [self printOn: strm indent: level]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896671!
sizeCodeForValue: encoder
	| total |
	special > 0 
		ifTrue: 
			[encoder noteOptimizedSelector: originalSelector.
			^self perform: (MacroSizers at: special) with: encoder with: true].
	receiver == NodeSuper
		ifTrue: [selector := selector copy "only necess for splOops"].
	total := selector sizeCode: encoder args: arguments size super: receiver == NodeSuper.
	receiver == nil 
		ifFalse: [total := total + (receiver sizeCodeForValue: encoder)].
	sizes := arguments collect: 
					[:arg | | argSize | 
					argSize := arg sizeCodeForValue: encoder.
					total := total + argSize.
					argSize].
	^total! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895871!
printParenReceiver: rcvr on: aStream indent: level
					
	rcvr isBlockNode ifTrue:
		[^rcvr printOn: aStream indent: level].
	aStream nextPut: $(.
	rcvr printOn: aStream indent: level.
	aStream nextPut: $)
! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897194!
transformIfTrueIfFalse: encoder
	(Preferences at: #allowNonBooleanReceiversOfBooleanMessages) ifTrue: [
		(receiver == NodeTrue) | (receiver == NodeFalse) ifFalse: [
			^false ]].
	^(self checkBlock: (arguments at: 1) as: 'True arg' from: encoder maxArgs: 0)
	   and: [(self checkBlock: (arguments at: 2) as: 'False arg' from: encoder maxArgs: 0)
	   and: [arguments do: [:arg| arg noteOptimizedIn: self].
			true]].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897226!
transformRepeat: encoder
	"answer true if this #repeat message can be optimized"
	
	^(self checkBlock: receiver as: 'receiver' from: encoder maxArgs: 0)
	   and: [receiver noteOptimizedIn: self.
			true]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895929!
printWithClosureAnalysisCaseOn: aStream indent: level 
	"receiver caseOf: {[key]->[value]. ...} otherwise: [otherwise]"
	| braceNode otherwise extra |
	braceNode := arguments first.
	otherwise := arguments last.
	(arguments size = 1 or: [otherwise isJustCaseError]) ifTrue:
		[otherwise := nil].
	receiver
		printWithClosureAnalysisOn: aStream
		indent: level
		precedence: 3.
	aStream nextPutAll: ' caseOf: '.
	braceNode isVariableReference
		ifTrue: [braceNode printWithClosureAnalysisOn: aStream indent: level]
		ifFalse: 
			[aStream nextPutAll: '{'; newLineTab: level + 1.
			 braceNode casesForwardDo:
				[:keyNode :valueNode :last | 
				keyNode printWithClosureAnalysisOn: aStream indent: level + 1.
				aStream nextPutAll: ' -> '.
				valueNode printsInNewLine
					ifTrue: 
						[aStream newLineTab: level + 2.
						extra := 1]
					ifFalse: [extra := 0].
				valueNode printWithClosureAnalysisOn: aStream indent: level + 1 + extra.
				last ifTrue: [aStream nextPut: $}]
					ifFalse: [aStream nextPut: $.;
							 newLineTab: level + 1]]].
	otherwise ifNotNil: [
		aStream newLineTab: level + 1; nextPutAll: ' otherwise: '.
		 extra := otherwise printsInNewLine
					ifTrue: [
						aStream newLineTab: level + 2.
						1]
					ifFalse: [0].
		 otherwise printWithClosureAnalysisOn: aStream indent: level + 1 + extra]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896268!
isInfix

	^selector isInfix! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897236!
transformToDo: encoder
	" var := rcvr. L1: [var <= arg1] Bfp(L2) [block body. var := var + inc] Jmp(L1) L2: "
	| limit increment block initStmt test incStmt limitInit blockVar myRange blockRange limitIsAssignedTo |
	block := arguments last.
	"First check for valid arguments"
	(block notNil
	 and: [block isBlockNode
	 and: [block numberOfArguments = 1
	 and: [block firstArgument isVariableReference "As with debugger remote vars"]]]) ifFalse:
		[^false].
	arguments size = 3
		ifTrue: [increment := arguments at: 2.
				(increment isConstantNumber
				 and: [increment literalValue ~= 0]) ifFalse: [^false]]
		ifFalse: [increment := encoder encodeLiteral: 1].
	(limit := arguments at: 1) isVariableReference ifTrue:
		[limitIsAssignedTo := false.
		 block nodesDo:
			[:node|
			(node isAssignmentNode and: [node variable = limit]) ifTrue:
				[limitIsAssignedTo := true]].
		 limitIsAssignedTo ifTrue:
			[^false]].
	arguments size < 3 ifTrue:   "transform to full form"
		[selector := SelectorNode new key: #to:by:do: code: #macro].

	"Now generate auxiliary structures"
	myRange := encoder rawSourceRanges at: self ifAbsent: [1 to: 0].
	blockRange := encoder rawSourceRanges at: block ifAbsent: [1 to: 0].
	blockVar := block firstArgument.
	initStmt := AssignmentNode new variable: blockVar value: receiver.
	limit isVariableReference | limit isConstantNumber
		ifTrue: [limitInit := nil]
		ifFalse:  "Need to store limit in a var"
			[limit := encoder bindBlockArg: blockVar key, 'LimiT' within: block.
			 limit scope: -2.  "Already done parsing block; flag so it won't print"
			 block addArgument: limit.
			 limitInit := AssignmentNode new
							variable: limit
							value: arguments first].
	test := MessageNode new
				receiver: blockVar
				selector: (increment key > 0 ifTrue: [#<=] ifFalse: [#>=])
				arguments: {limit}
				precedence: precedence
				from: encoder
				sourceRange: (myRange first to: blockRange first).
	incStmt := AssignmentNode new
				variable: blockVar
				value: (MessageNode new
							receiver: blockVar selector: #+
							arguments: {increment}
							precedence: precedence
							from: encoder
							sourceRange: (myRange last to: (myRange last max: blockRange last)))
				from: encoder
				sourceRange: (myRange last to: (myRange last max: blockRange last)).
	arguments := {limit. increment. block. initStmt. test. incStmt. limitInit}.
	block noteOptimizedIn: self.
	^true! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896184!
keywordAndParameterPositionAt: anIndex encodedWith: anEncoder ifAbsent: aBlock

	| keywordPosition parameterLastPosition |

	keywordPosition := keywordRanges at: anIndex.
	parameterLastPosition := anIndex = arguments size
		ifTrue: [ (anEncoder rangeForNode: self ifAbsent: aBlock) last ]
		ifFalse: [ (keywordRanges at: anIndex + 1) first - 1].

	^keywordPosition first to: parameterLastPosition! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895808!
printKeywords: key arguments: args on: aStream indent: level
	| keywords indent arg kwd doCrTab |
	args size = 0 ifTrue: [
		receiver ifNotNil: [ aStream space ].
		aStream nextPutAll: key.
		^ self ].
	keywords := key keywords.
	doCrTab := args size > 1.
	1
		to: (args size min: keywords size)
		do: [ :i |
			arg := args at: i.
			kwd := keywords at: i.
			doCrTab
				ifTrue: [
					aStream newLineTab: level + 1.
					indent := 1
					"newline after big args" ]
				ifFalse: [
					receiver ifNotNil: [ aStream space ].
					indent := 0 ].
			aStream nextPutAll: kwd.
			arg printsInNewLine
				ifTrue: [
					aStream newLineTab: level + indent + 1 ]
				ifFalse: [
					aStream space ].
			arg
				printOn: aStream
				indent: level + 1 + indent
				precedence:
					(precedence = 2
						ifTrue: [ 1 ]
						ifFalse: [ precedence ]) ].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506628!
isAnd
	
	^self selectorSymbol = #and:! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506642!
isClassEqualOrIdenticalToObjectClass
	
	^self isEqualOrIdentical and: [ self isReceiverLiteralBehavior and: [ self isFirstArgumentClassMessageSend ]]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506737 overrides: 50506127!
isNotNil
	
	^self selectorSymbol = #notNil! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896956!
toDoFromWhileWithInit: initStmt
	"Return nil, or a to:do: expression equivalent to this whileTrue:"
	| variable increment limit toDoBlock body test |
	(selector key == #whileTrue:
	 and: [initStmt isAssignmentNode
	 and: [initStmt variable isTemp]]) ifFalse:
		[^nil].
	body := arguments last statements.
	variable := initStmt variable.
	increment := body last toDoIncrement: variable.
	(increment == nil
	 or: [receiver statements size ~= 1]) ifTrue:
		[^nil].
	test := receiver statements first.
	"Note: test chould really be checked that <= or >= comparison
	jibes with the sign of the (constant) increment"
	(test isMessageNode
	 and: [(limit := test toDoLimit: variable) notNil]) ifFalse:
		[^nil].
	"The block must not overwrite the limit"
	(limit isVariableNode and: [body anySatisfy: [:e | e isAssignmentNode and: [e variable = limit]]])
		ifTrue: [^nil]. 
	toDoBlock := BlockNode statements: body allButLast returns: false.
	toDoBlock arguments: (Array with: variable).
	variable scope: -1.
	variable beBlockArg.
	^MessageNode new
		receiver: initStmt value
		selector: (SelectorNode new key: #to:by:do: code: #macro)
		arguments: (Array with: limit with: increment with: toDoBlock)
		precedence: precedence! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506661!
isEqualOrIdentical
	
	^self selectorSymbol = #== or: [ self selectorSymbol = #= ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897013!
transformBoolean: encoder
	^self
		checkBlock: (arguments at: 1)
		as: 'argument'
		from: encoder
		maxArgs: 0! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506778 overrides: 50506155!
nodeTypePrintString

	^'message'! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895711!
printCaseOn: aStream indent: level 
	"receiver caseOf: {[key]->[value]. ...} otherwise: [otherwise]"
	| braceNode otherwise extra |
	braceNode := arguments first.
	otherwise := arguments last.
	(arguments size = 1 or: [otherwise isJustCaseError]) ifTrue:
		[otherwise := nil].
	receiver
		printOn: aStream
		indent: level
		precedence: 3.
	aStream nextPutAll: ' caseOf: '.
	braceNode isVariableReference
		ifTrue: [braceNode printOn: aStream indent: level]
		ifFalse: [
			aStream nextPutAll: '{'; newLineTab: level + 1.
			braceNode casesForwardDo: [ :keyNode :valueNode :last | 
				keyNode printOn: aStream indent: level + 1.
				aStream nextPutAll: ' -> '.
				valueNode printsInNewLine
					ifTrue: [
						aStream newLineTab: level + 2.
						extra := 1]
					ifFalse: [extra := 0].
				valueNode printOn: aStream indent: level + 1 + extra.
				last ifTrue: [aStream nextPut: $}]
					ifFalse: [aStream nextPut: $.;
							 newLineTab: level + 1]]].
	otherwise ifNotNil: [
		aStream newLineTab: level + 1; nextPutAll: ' otherwise: '.
		 extra := otherwise printsInNewLine
					ifTrue: [
						aStream newLineTab: level + 2.
						1]
					ifFalse: [0].
		 otherwise printOn: aStream indent: level + 1 + extra]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895984!
printWithClosureAnalysisIfNilNotNil: aStream indent: level

	self printWithClosureAnalysisReceiver: receiver ifNilReceiver on: aStream indent: level.

	(arguments first isJust: NodeNil) ifTrue:
		[^self printWithClosureAnalysisKeywords: #ifNotNil:
				arguments: { arguments second }
				on: aStream indent: level].
	(arguments second isJust: NodeNil) ifTrue:
		[^self printWithClosureAnalysisKeywords: #ifNil:
				arguments: { arguments first }
				on: aStream indent: level].
	^self printWithClosureAnalysisKeywords: #ifNil:ifNotNil:
			arguments: arguments
			on: aStream indent: level! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541280!
isComparingEqualityForClassNameWithObjectClassName
	^self isAnyEqualityComparison and: [ self isObjectClassNameComparedToClassName or: [self isClassNameComparedToObjectClassName]].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541258!
isClassComparedToObjectClass

	^ self isFirstArgumentClassMessageSend and: [self isReceiverLiteralBehavior ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541314!
isComparingEqualityToNil
	^self isAnyEqualityComparison and: [ self isFirstArgumentNil or: [self isReceiverNil ]].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541344!
isFirstArgumentLiteral
	^arguments first isLiteralNode.
		
	! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506718!
isNilNotEqualOrNotIdenticalTo
	
	^self isNotEqualOrNotIdentical and: [ self isReceiverNil ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506757!
isOr

	^self selectorSymbol = #or:! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896307!
isNilIf

	^(special between: 3 and: 4)
	   and: [(arguments first returns or: [arguments first isJust: NodeNil])
	   and: [(arguments last returns or: [arguments last isJust: NodeNil])]]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541463 overrides: 50534690!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage
	
	| messageReturnTypes sentSelector receiverTypes  |

	sentSelector := self selectorSymbol.
	receiverTypes := self receiverLiveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo:  incompleteTypeInfoReasons storingGenericsInfoIn: aStorage.
	
	messageReturnTypes := Set new.
	receiverTypes liveTypesDo: [:aReceiverType | | currentReceiverClass currentMethodRef | 								
			currentReceiverClass := aReceiverType liveClass.
			currentMethodRef := (MethodReference class: currentReceiverClass selector: sentSelector).
			(aStorage genericTypeConstructorFrom: currentMethodRef) 
				ifNil: [
					(currentReceiverClass lookupSelector: sentSelector) 
						ifNil: [ incompleteTypeInfoReasons add: (	IncompleteTypeInfoWarning dueToMissingImplementationOf: currentMethodRef ) ]
						ifNotNil: [ :implementor |
							self returnTypesOf: implementor 
								from: aReceiverType 
								receiving: sentSelector 
								in: aCompiledMethod
								addingReturnTypesTo: messageReturnTypes 
								addingIncompleteTypeInfoTo: incompleteTypeInfoReasons 
								storingGenericsInfoIn: aStorage
							].
				] 
				ifNotNil: [:aGenericTypeConstructor | 
					messageReturnTypes add: (aGenericTypeConstructor in: aCompiledMethod forArguments: self argumentsInEvaluationOrder storingGenericsInfoIn: aStorage).
				].
			
			].
		
	^RawToLiveTypesAdapter new adapt: messageReturnTypes.! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541349!
isFirstArgumentNameMessageSend
	
	^arguments first isMessageNode and: [ arguments first isNameMessageSend ].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896499!
emitCodeForToDo: stack encoder: encoder value: forValue 
	" var := rcvr. L1: [var <= arg1] Bfp(L2) [block body. var := var + inc] Jmp(L1) L2: "
	| loopSize initStmt limitInit test block incStmt blockSize |
	initStmt := arguments at: 4.
	limitInit := arguments at: 7.
	test := arguments at: 5.
	block := arguments at: 3.
	incStmt := arguments at: 6.
	blockSize := sizes at: 1.
	loopSize := sizes at: 2.
	limitInit == nil
		ifFalse: [limitInit emitCodeForEffect: stack encoder: encoder].
		
	"This will return the receiver of to:do: which is the initial value of the loop"
	forValue
		ifTrue: [initStmt emitCodeForValue: stack encoder: encoder.]
		ifFalse: [initStmt emitCodeForEffect: stack encoder: encoder].
	test emitCodeForValue: stack encoder: encoder.
	self emitCodeForBranchOn: false dist: blockSize pop: stack encoder: encoder.
	pc := encoder methodStreamPosition.
	block emitCodeForEvaluatedEffect: stack encoder: encoder.
	incStmt emitCodeForEffect: stack encoder: encoder.
	self emitCodeForJump: 0 - loopSize encoder: encoder.! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897056!
transformIfFalseIfTrue: encoder
	(Preferences at: #allowNonBooleanReceiversOfBooleanMessages) ifTrue: [
		(receiver == NodeTrue) | (receiver == NodeFalse) ifFalse: [
			^false ]].
	^(self checkBlock: (arguments at: 1) as: 'False arg' from: encoder maxArgs: 0)
	   and: [(self checkBlock: (arguments at: 2) as: 'True arg' from: encoder maxArgs: 0)
	   and: [selector := SelectorNode new key: #ifTrue:ifFalse: code: #macro.
			arguments swap: 1 with: 2.
			arguments do: [:arg| arg noteOptimizedIn: self].
			true]].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896334 overrides: 16918740!
isSelfBasicNewMessageSend
	"Answer if this ParseNode represents the 'self new'' message send."

	^ receiver isSelfPseudoVariable and: [ self selectorSymbol == #basicNew ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541265!
isClassNameComparedToObjectClassName

	^ self isFirstArgumentClassNameMessagesSend and: [self isReceiverNameMessageSend ]
! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896534!
emitCodeForValue: stack encoder: encoder
	"For #ifTrue:ifFalse: and #whileTrue: / #whileFalse: style messages, the pc is set to the jump instruction, so that mustBeBoolean exceptions can be shown correctly."
	special > 0
		ifTrue: 
			[pc := 0.
			self perform: (MacroEmitters at: special) with: stack with: encoder with: true]
		ifFalse: 
			[receiver ~~ nil ifTrue: [receiver emitCodeForValue: stack encoder: encoder].
			arguments do: [:argument | argument emitCodeForValue: stack encoder: encoder].
			pc := encoder methodStreamPosition + 1. "debug pc is first byte of the send, i.e. the next byte".
			selector
				emitCode: stack
				args: arguments size
				encoder: encoder
				super: receiver == NodeSuper]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541368!
isLiteralComparedToObject
	"Second condition is to avoid literal to literal comparison, which doesn't provide any information"
	^ self isReceiverLiteral and: [ self isFirstArgumentLiteral not ].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896161 overrides: 16918601!
expandRanges: aSourceRange basedOn: sourceRanges using: sourceCode

	| receiverExpandedRanges expandedRangeWithReceiver |
	receiverExpandedRanges := self isCascade
		ifTrue: [ aSourceRange ] "not expanded because expansion is handled in CascadeNode"
		ifFalse: [ receiver expandRanges: (self receiverSourceRangesFrom: sourceRanges) basedOn: sourceRanges using: sourceCode ].
	expandedRangeWithReceiver := self
		expandRange: (aSourceRange isInterval ifTrue: [ aSourceRange ] ifFalse: [ aSourceRange first ])
		basedOn: receiverExpandedRanges.
	^ super
		expandRanges: expandedRangeWithReceiver
		basedOn: expandedRangeWithReceiver
		using: sourceCode! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896997!
transformAnd: encoder
	(Preferences at: #allowNonBooleanReceiversOfBooleanMessages) ifTrue: [
		(receiver == NodeTrue) | (receiver == NodeFalse) ifFalse: [
			^false ]].
	(self transformBoolean: encoder)
		ifTrue: 
			[arguments := 
				Array 
					with: ((arguments at: 1) noteOptimizedIn: self)
					with: ((BlockNode withJust: NodeFalse) noteOptimizedIn: self).
			^true]
		ifFalse: 
			[^false]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896391!
checkBlock: node as: nodeName from: encoder maxArgs: maxArgs
	"Answer true if node is a BlockNode with at most maxArgs arguments.
	This check is required in order to inline some special messages.
	Notify some undue usage of these special messages."

	node isBlockNode ifFalse: [ ^false ].
	node numberOfArguments <= maxArgs ifTrue: [ ^true ].
	^encoder notify: '<- ', nodeName , ' of ' , (MacroSelectors at: special) , ' has too many arguments'! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896462!
transform: encoder
	optimizeSpecialSends == false ifTrue: [ special := 0 ].
	special = 0 ifTrue: [^false].

	(self perform: (MacroTransformers at: special) with: encoder)
		ifTrue:
			[^true]
		ifFalse:
			[special := 0. ^false]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896142!
printWithClosureAnalysisWhileOn: aStream indent: level

	self printWithClosureAnalysisReceiver: receiver on: aStream indent: level.
	(arguments isEmpty not
	 and: [arguments first isJust: NodeNil]) ifTrue:
			[selector := SelectorNode new
							key:
									(selector key == #whileTrue:
										ifTrue: [#whileTrue]
										ifFalse: [#whileFalse])
							code: #macro.
			arguments := Array new].
	self printWithClosureAnalysisKeywords: selector key arguments: arguments
		on: aStream indent: level! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541524!
returnTypesOf: implementor from: aReceiverType receiving: sentSelector in: aCompiledMethod addingReturnTypesTo: messageReturnTypes addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage

	| returnTypes |

	"generic getter case"
	((aReceiverType isGenericType) and: [aStorage getterMethodsFor: aReceiverType includes: sentSelector]) ifTrue: [
		| parameterIndex |
		parameterIndex := (aStorage getterMethodsFor: aReceiverType) at: sentSelector.
		messageReturnTypes addAll: (aReceiverType generics at: parameterIndex).
		^self.
	].
	
	"generic setter case"
	(((aStorage tracedMethodsFor: aReceiverType liveClass) includesKey: sentSelector)
		or: [(aStorage tracedMethodsFromParametersFor: aReceiverType liveClass) includesKey: sentSelector])
		ifTrue: [ | lastArgument argumentType |
		"setters need to receive the object from where the type will be set, then there's at least one argument - Adrian"
		lastArgument := self argumentsInEvaluationOrder last.
		argumentType := lastArgument 
						liveTypesIn: aCompiledMethod 
						addingIncompleteTypeInfoTo: incompleteTypeInfoReasons 
						storingGenericsInfoIn: aStorage.
						
		messageReturnTypes add: argumentType.
		^self.	
	].
	
	"general case"
	returnTypes := implementor returnLiveTypesForReceiver: aReceiverType liveClass usingStorage: aStorage.
	(returnTypes isEmpty or: [returnTypes allSatisfy:[:item | item isEmptyType]])
		ifTrue: [ incompleteTypeInfoReasons add: (IncompleteTypeInfoWarning dueToNoReturnTypeOf: implementor methodReference) ]
		ifFalse: [
			returnTypes := returnTypes collect: [ :aType | aType asTypeFor: aReceiverType liveClass].
			messageReturnTypes addAll: returnTypes.
		].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897341!
receiver: rcvr selector: selNode arguments: args precedence: p 
	"Decompile."

	self receiver: rcvr
		arguments: args
		precedence: p.
	originalSelector := selNode key.
	selNode code == #macro
		ifTrue: [self noteSpecialSelector: selNode key]
		ifFalse: [special := 0].
	selector := selNode.
	"self pvtCheckForPvtSelector: encoder"
	"We could test code being decompiled, but the compiler should've checked already. And where to send the complaint?"! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541252!
isAnyEqualityComparison
	^#(#== #= #~= #~~) includes: self selectorSymbol! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541446!
isReceiverLiteral
	^receiver isLiteralNode.
		
	! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896272!
isKeywordMessageSend

	^self selectorSymbol isKeyword! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541272!
isClassSymbolComparedToObjectClassName

	^ self isFirstArgumentClassNameMessagesSend and: [self isReceiverAClassNameSymbol ]
	
! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896107!
printWithClosureAnalysisReceiver: rcvr on: aStream indent: level
					
	rcvr ifNil: [^self].

	"Force parens around keyword receiver of kwd message"
	rcvr printWithClosureAnalysisOn: aStream indent: level precedence: precedence! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541457!
isReceiverSymbol
	^receiver isLiteralNode and:[receiver key isSymbol].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541398!
isNegated
	
	^self selectorSymbol = #not! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896487!
emitCodeForRepeat: stack encoder: encoder value: forValue 
	" L1: ... Jmp(L1)"
	| loopSize |
	loopSize := sizes at: 1.
	receiver emitCodeForEvaluatedEffect: stack encoder: encoder.
	self emitCodeForJump: 0 - loopSize encoder: encoder.
	forValue ifTrue: [encoder genPushSpecialLiteral: nil. stack push: 1]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541378!
isManyAnd

	^self selectorSymbol = #and:and: or:[self selectorSymbol = #and:and:and:]or:[self selectorSymbol = #and:and:and:and:]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506730!
isNotEqualOrNotIdenticalToNil
	
	^self isNotEqualOrNotIdentical and: [ self isFirstArgumentNil ]	
	! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541451!
isReceiverNameMessageSend
	
	^receiver isMessageNode and: [ receiver isNameMessageSend ].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541410!
isObjectClassNameComparedToClassName

	^ self isReceiverClassNameMessagesSend and: [self isFirstArgumentNameMessageSend ]
	! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897399!
receiver: rcvr selector: selName arguments: args precedence: p from: encoder sourceRange: range 
	"compile"

	encoder noteSourceRange: range forNode: self.
	^self
		receiver: rcvr
		selector: selName
		arguments: args
		precedence: p
		from: encoder! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897391!
selector: sel
	selector := sel! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896324 overrides: 16918734!
isReturningIf

	^((special between: 3 and: 4) "ifTrue:ifFalse:/ifFalse:ifTrue:"
	    or: [special between: 17 and: 18]) "ifNil:ifNotNil:/ifNotNil:ifNil:"
		and: [arguments first returns and: [arguments last returns]]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897107!
transformIfNilIfNotNil: encoder
	"vb: Changed to support one-argument ifNotNil: branch. In the 1-arg case we
	 transform the receiver to
		(var := receiver)
	 which is further transformed to
		(var := receiver) == nil ifTrue: .... ifFalse: ...
	 This does not allow the block variable to shadow an existing temp, but it's no different
	 from how to:do: is done."
	| ifNotNilArg |
	ifNotNilArg := arguments at: 2.
	((self checkBlock: (arguments at: 1) as: 'Nil arg' from: encoder maxArgs: 0)
	  and: [self checkBlock: ifNotNilArg as: 'NotNil arg' from: encoder maxArgs: 1]) ifFalse:
		[^false].

	ifNotNilArg numberOfArguments = 1 ifTrue:
		[receiver := AssignmentNode new
						variable: ifNotNilArg firstArgument
						value: receiver].

	selector := SelectorNode new key: #ifTrue:ifFalse: code: #macro.
	receiver := MessageNode new
					receiver: receiver
					selector: #==
					arguments: (Array with: NodeNil)
					precedence: 2
					from: encoder.
	arguments do: [:arg| arg noteOptimizedIn: self].
	^true! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896367 overrides: 16918822!
toDoIncrement: variable
	(receiver = variable and: [selector key = #+]) 
		ifFalse: [^ nil].
	arguments first isConstantNumber
		ifTrue: [^ arguments first]
		ifFalse: [^ nil]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895880!
printReceiver: rcvr on: aStream indent: level
					
	rcvr ifNil: [^ self].

	"Force parens around keyword receiver of kwd message"
	rcvr printOn: aStream indent: level precedence: precedence! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896276 overrides: 16918685!
isMessage
	^true! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895687!
receiver: val
	"14 feb 2001 - removed return arrow"

	receiver := val! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896867!
sizeCodeForIf: encoder value: forValue
	| thenExpr elseExpr branchSize thenSize elseSize |
	thenExpr := arguments at: 1.
	elseExpr := arguments at: 2.
	(forValue
	 or: [(thenExpr isJust: NodeNil)
	 or: [elseExpr isJust: NodeNil]]) not
			"(...not ifTrue: avoids using ifFalse: alone during this compile)"
		ifTrue:  "Two-armed IFs forEffect share a single pop"
			[^super sizeCodeForEffect: encoder].
	forValue
		ifTrue:  "Code all forValue as two-armed"
			[elseSize := elseExpr sizeCodeForEvaluatedValue: encoder.
			thenSize := (thenExpr sizeCodeForEvaluatedValue: encoder)
					+ (thenExpr returns
						ifTrue: [0]  "Elide jump over else after a return"
						ifFalse: [self sizeCode: encoder forJump: elseSize]).
			branchSize := self sizeCode: encoder forBranchOn: false dist: thenSize]
		ifFalse:  "One arm is empty here (two-arms code forValue)"
			[(elseExpr isJust: NodeNil)
				ifTrue:
					[elseSize := 0.
					thenSize := thenExpr sizeCodeForEvaluatedEffect: encoder.
					branchSize := self sizeCode: encoder forBranchOn: false dist: thenSize]
				ifFalse:
					[thenSize := 0.
					elseSize := elseExpr sizeCodeForEvaluatedEffect: encoder.
					branchSize := self sizeCode: encoder forBranchOn: true dist: elseSize]].
	sizes := Array with: thenSize with: elseSize.
	^(receiver sizeCodeForValue: encoder)
	+ branchSize + thenSize + elseSize! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896693!
sizeCodeForWhile: encoder value: forValue 
	"L1: ... Bfp(L2) ... Jmp(L1) L2: nil (nil for value only);
	justStmt, wholeLoop, justJump."
	| cond stmt stmtSize loopSize branchSize |
	cond := receiver.
	stmt := arguments at: 1.
	"We assume long backward branches are always maximal size branches."
	stmtSize := (stmt sizeCodeForEvaluatedEffect: encoder) + (encoder sizeJumpLong: -1).
	branchSize := self
					sizeCode: encoder
					forBranchOn: selector key == #whileFalse:  "Btp for whileFalse"
					dist: stmtSize.
	loopSize := (cond sizeCodeForEvaluatedValue: encoder) + branchSize + stmtSize.
	sizes := Array with: stmtSize with: loopSize.
	^loopSize + (forValue ifTrue: [encoder sizePushSpecialLiteral: nil] ifFalse: [0])! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506741!
isObjectClassEqualOrIdenticalToClass
	
	^self isEqualOrIdentical and: [ self isReceiverClassMessageSend and: [ self isFirstArgumentLiteralBehavior ]]
		
	! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896435 overrides: 16918854!
ifNilReceiver

	^receiver! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897075!
transformIfNil: encoder

	"vb: Removed the original transformBoolean: which amounds to a test we perform in each of the branches below."
	(MacroSelectors at: special) = #ifNotNil: ifTrue:
		[(self checkBlock: arguments first as: 'ifNotNil arg' from: encoder maxArgs: 1) ifFalse:
			[^false].

		"Transform 'ifNotNil: [stuff]' to 'ifNil: [nil] ifNotNil: [stuff]'.
		Slightly better code and more consistent with decompilation."
		self noteSpecialSelector: #ifNil:ifNotNil:.
		selector := SelectorNode new key: (MacroSelectors at: special) code: #macro.
		arguments := Array
						with: ((BlockNode withJust: NodeNil) noteOptimizedIn: self)
						with: (arguments first noteOptimizedIn: self).
		(self transform: encoder) ifFalse:
			[self error: 'compiler logic error'].
		^true].
	(self checkBlock: arguments first as: 'ifNil arg' from: encoder maxArgs: 0) ifFalse:
		[^false].
	arguments first noteOptimizedIn: self.
	^true! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506724!
isNotEqualOrNotIdentical
	
	^self selectorSymbol = #~~ or: [ self selectorSymbol = #~= ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506684!
isFirstArgumentNil
	
	^ arguments first isNilPseudoVariable ! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897040!
transformIfFalse: encoder
	(Preferences at: #allowNonBooleanReceiversOfBooleanMessages) ifTrue: [
		(receiver == NodeTrue) | (receiver == NodeFalse) ifFalse: [
			^false ]].
	(self transformBoolean: encoder)
		ifTrue: 
			[arguments := 
				Array 
					with: ((BlockNode withJust: NodeNil) noteOptimizedIn: self)
					with: ((arguments at: 1) noteOptimizedIn: self).
			^true]
		ifFalse:
			[^false]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895837 overrides: 16918533!
printOn: aStream indent: level
	"may not need this check anymore - may be fixed by the #receiver: change"
	special ifNil: [^aStream nextPutAll: '** MessageNode with nil special **'].

	special > 0 ifTrue:
		[^self perform: self macroPrinter with: aStream with: level].

	self printReceiver: receiver on: aStream indent: level.
	selector isForFFICall
		ifTrue:
			[aStream space.
			 selector
				printAsFFICallWithArguments: arguments
				on: aStream
				indent: 0]
		ifFalse:
			[self printKeywords: selector key
				 arguments: arguments
				 on: aStream
				 indent: level]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896117!
printWithClosureAnalysisToDoOn: aStream indent: level

	| limitNode |
	self printWithClosureAnalysisReceiver: receiver on: aStream indent: level.

	limitNode := (arguments last == nil
				or: [arguments last isAssignmentNode not])
					ifTrue: [arguments first]
					ifFalse: [arguments last value].
	(selector key = #to:by:do:
	 and: [(arguments at: 2) isConstantNumber
	 and: [(arguments at: 2) key = 1]])
		ifTrue: [self printWithClosureAnalysisKeywords: #to:do:
					arguments: (Array with: limitNode with: (arguments at: 3))
					on: aStream indent: level]
		ifFalse: [self printWithClosureAnalysisKeywords: selector key
					arguments: (Array with: limitNode) , arguments allButFirst
					on: aStream indent: level]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506773!
isReceiverNil
	
	^receiver isNilPseudoVariable 
! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895973!
printWithClosureAnalysisIfNil: aStream indent: level

	self printWithClosureAnalysisReceiver: receiver on: aStream indent: level.

	^self printWithClosureAnalysisKeywords: selector key
		arguments: (Array with: arguments first)
		on: aStream indent: level! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50535071 overrides: 50534683!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	
	| types sentSelector receiverTypes  |

	sentSelector := self selectorSymbol.
	
	receiverTypes := self receiverTypesIn: aCompiledMethod addingIncompleteTypeInfoTo:  incompleteTypeInfoReasons.
	
	types := receiverTypes
		inject: Set new
		into: [ :messageReturnTypes :aReceiverType | 								
			(aReceiverType lookupSelector: sentSelector) 
				ifNil: [ incompleteTypeInfoReasons add: (
					IncompleteTypeInfoWarning dueToMissingImplementationOf: (MethodReference class: aReceiverType selector: sentSelector)) ]
				ifNotNil: [ :implementor | | returnTypes |
					returnTypes := implementor returnTypes.
					returnTypes isEmpty
						ifTrue: [ incompleteTypeInfoReasons add: (IncompleteTypeInfoWarning dueToNoReturnTypeOf: implementor methodReference) ]
						ifFalse: [ messageReturnTypes addAll: (returnTypes collect: [ :aType | aType asTypeFor: aReceiverType])]].
			messageReturnTypes ].
		
	^types! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895779!
printIfOn: aStream indent: level 
	receiver ifNotNil: 
		[ receiver
			printOn: aStream
			indent: level
			precedence: precedence ].
	(arguments last isJust: NodeNil) ifTrue: [ ^ self
			printKeywords: #ifTrue:
			arguments: (Array with: arguments first)
			on: aStream
			indent: level ].
	(arguments last isJust: NodeFalse) ifTrue: [ ^ self
			printKeywords: #and:
			arguments: (Array with: arguments first)
			on: aStream
			indent: level ].
	(arguments first isJust: NodeNil) ifTrue: [ ^ self
			printKeywords: #ifFalse:
			arguments: (Array with: arguments last)
			on: aStream
			indent: level ].
	(arguments first isJust: NodeTrue) ifTrue: [ ^ self
			printKeywords: #or:
			arguments: (Array with: arguments last)
			on: aStream
			indent: level ].
	self
		printKeywords: #ifTrue:ifFalse:
		arguments: arguments
		on: aStream
		indent: level! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541334!
isFirstArgumentClassNameMessagesSend
	
	^arguments first isMessageNode and: [ arguments first receiver isMessageNode and: [arguments first receiver isClassMessageSend] and: [arguments first isNameMessageSend]].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896279 overrides: 16918688!
isMessage: selSymbol receiver: rcvrPred arguments: argsPred
	"Answer whether selector is selSymbol, and the predicates rcvrPred and argsPred
	 evaluate to true with respect to receiver and the list of arguments.  If selSymbol or
	 either predicate is nil, it means 'don't care'.  Note that argsPred takes numArgs
	 arguments.  All block arguments are ParseNodes."

	^(selSymbol isNil or: [selSymbol==selector key]) and:
		[(rcvrPred isNil or: [rcvrPred value: receiver]) and:
			[(argsPred isNil or: [argsPred valueWithArguments: arguments])]]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895661!
eval
	"When everything in me is a constant, I can produce a value.  This is only used by the Scripting system (TilePadMorph tilesFrom:in:)"

	| rec args |
	receiver isVariableNode ifFalse: [^ #illegal].
	rec := receiver key value.
	args := arguments collect: [:each | each eval].
	^ rec perform: selector key withArguments: args! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896037!
printWithClosureAnalysisKeywords: key arguments: args on: aStream indent: level
	| keywords indent arg kwd doCrTab |
	args size = 0 ifTrue: [aStream space; nextPutAll: key. ^self].
	keywords := key keywords.
	doCrTab := args size > 2
				or: [{receiver} , args anySatisfy:
						[:thisArg |
						thisArg isBlockNode
						or: [thisArg isMessageNode and: [thisArg precedence >= 3]]]].
	1 to: (args size min: keywords size) do:
		[:i |
		arg := args at: i.
		kwd := keywords at: i.
		doCrTab
			ifTrue: [aStream newLineTab: level+1. indent := 1] "newline after big args"
			ifFalse: [aStream space. indent := 0].
		aStream nextPutAll: kwd; space.
		arg printWithClosureAnalysisOn: aStream
			indent: level + 1 + indent
			precedence: (precedence = 2 ifTrue: [1] ifFalse: [precedence])]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506703!
isIsKindOfWithLiteralBehavior
	
	^self selectorSymbol = #isKindOf: and: [ self isFirstArgumentLiteralBehavior ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896342 overrides: 16918745!
isSelfNewMessageSend
	"Answer if this ParseNode represents the 'self new'' message send."

	^ receiver isSelfPseudoVariable and: [ self selectorSymbol == #new ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896208!
receiverSourceRangesFrom: sourceRanges
	"we can't just do #at: because sometimes what it is on the source ranges map
	is not the exact same object than the receiver or the originalReceiver
	(like when optimizations are made), so we look for an 'equivalent' one
	(at least for using as a key in the source ranges)"

	^ sourceRanges at: receiver ifAbsent: [
		| parseNodeOfReceiver |
		parseNodeOfReceiver := sourceRanges keys detect: [ :parseNode |
		(parseNode equivalentTo: receiver) or: [ parseNode equivalentTo: originalReceiver ] ].
		sourceRanges at: parseNodeOfReceiver
	]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895920!
printWhileOn: aStream indent: level
	self printReceiver: receiver on: aStream indent: level.
	self
		printKeywords: originalSelector
		arguments: originalArguments
		on: aStream indent: level! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896354 overrides: 16918815!
referencesSelf

	^self receiver referencesSelf
		or: [self arguments anySatisfy: [:argument | argument referencesSelf]]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895564!
argumentsInEvaluationOrder
	"Answer the receivers arguments in evaluation order.
	 If the receiver is a transformed to:do: node this will undo the misordering done by the transformation."
	^(special > 0
	   and: [(MacroTransformers at: special) == #transformToDo:
	   and: [arguments size >= 7]])
		"arguments are in a weid order and may be nil in a transformed to:do: loop.  sigh...
		 c.f. emitCodeForToDo:encoder:value:"
		ifTrue:
			[(arguments at: 7)	"limitInit"
				ifNil: [{	(arguments at: 4).	"initStmt"
						(arguments at: 5).	"test"
						(arguments at: 3).	"block"
						(arguments at: 6) 	"incStmt" }]
				ifNotNil: [:limitInit|
						{ limitInit.
						(arguments at: 4).	"initStmt"
						(arguments at: 5).	"test"
						(arguments at: 3).	"block"
						(arguments at: 6) 	"incStmt" }]]
		ifFalse:
			[arguments]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541403!
isObjectClassComparedToClass

	^ self isReceiverClassMessageSend and: [self isFirstArgumentLiteralBehavior ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895692 overrides: 16918894!
receiverOrCascadeReceiver
	
	"When in cascade, receiver is nil and originalReceiver is the cascade receiver - Hernan"
	
	^receiver ifNil: [ originalReceiver ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541393!
isNameMessageSend
	
	^self selectorSymbol = #name! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506666!
isEqualOrIdenticalToNil
	
	^self isEqualOrIdentical and: [ self isFirstArgumentNil ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506653!
isClassNotEqualOrNotIdenticalToObjectClass
	
	^self isNotEqualOrNotIdentical and: [ self isReceiverLiteralBehavior and: [ self isFirstArgumentClassMessageSend ]]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896817!
emitCodeForIfNil: stack encoder: encoder value: forValue

	| theNode theSize ifNotNilSelector |
	theNode := arguments first.
	theSize := sizes at: 1.
	ifNotNilSelector := #ifNotNil:.
	receiver emitCodeForValue: stack encoder: encoder.
	forValue ifTrue: [encoder genDup. stack push: 1].
	encoder genPushSpecialLiteral: nil. stack push: 1.
	equalNode emitCode: stack args: 1 encoder: encoder.
	self 
		emitCodeForBranchOn: (selector key == ifNotNilSelector)
		dist: theSize 
		pop: stack 
		encoder: encoder.
	pc := encoder methodStreamPosition.
	forValue 
		ifTrue: 
			[encoder genPop. stack pop: 1.
			theNode emitCodeForEvaluatedValue: stack encoder: encoder]	
		ifFalse: [theNode emitCodeForEvaluatedEffect: stack encoder: encoder]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506632!
isAnyKindOfIf
	
	| selectorSymbol |
	
	selectorSymbol := self selectorSymbol.
	
	^ selectorSymbol = #ifTrue:ifFalse: 
		or: [ selectorSymbol = #ifTrue: 
		or: [ selectorSymbol = #ifFalse: 
		or: [ selectorSymbol = #ifFalse:ifTrue ]]]
		! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897410!
cascadeReceiver
	"nil out rcvr (to indicate cascade) and return what it had been"

	| rcvr |
	rcvr := receiver.
	receiver := nil.
	^rcvr! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896256!
isCascade

	^receiver isNil ! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897178!
transformIfTrue: encoder
	(Preferences at: #allowNonBooleanReceiversOfBooleanMessages) ifTrue: [
		(receiver == NodeTrue) | (receiver == NodeFalse) ifFalse: [
			^false ]].
	(self transformBoolean: encoder)
		ifTrue: 
			[arguments := 
				Array 
					with: ((arguments at: 1) noteOptimizedIn: self)
					with: ((BlockNode withJust: NodeNil) noteOptimizedIn: self).
			^true]
		ifFalse: 
			[^false]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50384669 overrides: 50384637!
sendsMessageToSelf: aSelector

	^ self receiver referencesSelf and: [ self selector isNamed: aSelector ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896081 overrides: 16918570!
printWithClosureAnalysisOn: strm indent: level precedence: outerPrecedence

	| parenthesize |
	parenthesize := precedence > outerPrecedence
		or: [outerPrecedence = 3 and: [precedence = 3 "both keywords"]].
	parenthesize
		ifTrue: [strm nextPutAll: '('.
				self printWithClosureAnalysisOn: strm indent: level.
				strm nextPutAll: ')']
		ifFalse: [self printWithClosureAnalysisOn: strm indent: level]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896096!
printWithClosureAnalysisParenReceiver: rcvr on: aStream indent: level
					
	rcvr isBlockNode ifTrue:
		[^rcvr printWithClosureAnalysisOn: aStream indent: level].
	aStream nextPut: $(.
	rcvr printWithClosureAnalysisOn: aStream indent: level.
	aStream nextPut: $)! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896204!
keywordRanges

	^keywordRanges! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506761!
isReceiverClassMessageSend
	
	^receiver isMessageNode and: [ receiver isClassMessageSend ]
! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541289!
isComparingEqualityForClassSymbolWithObjectClassName
	^self isAnyEqualityComparison and: [ self isObjectClassNameComparedToClassSymbol or: [self isClassSymbolComparedToObjectClassName]].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506623 overrides: 50506121!
identifierPrintString
	
	^selector identifierPrintString ! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541362!
isIsTypeMessageWithBooleanReturning
	
	^self selectorSymbol asString beginsWith: 'is'! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897378!
receiver: aReceiver selector: aSelector arguments: args precedence: aPrecedence from: anEncoder sourceRange: aSourceRange keywordsRanges: wordsRanges
	
	keywordRanges := wordsRanges.
	
	^self receiver: aReceiver selector: aSelector arguments: args precedence: aPrecedence from: anEncoder sourceRange: aSourceRange ! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896946!
noteSpecialSelector: selectorSymbol
	"special > 0 denotes specially treated (potentially inlined) messages. "

	special := optimizeSpecialSends == false
		ifTrue: [ 0 ]
		ifFalse: [ MacroSelectors indexOf: selectorSymbol ]
! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897142!
transformIfNotNilIfNil: encoder
	"vb: Changed to support one-argument ifNotNil: branch. In the 1-arg case we
	 transform the receiver to
		(var := receiver)
	 which is further transformed to
		(var := receiver) == nil ifTrue: .... ifFalse: ...
	 This does not allow the block variable to shadow an existing temp, but it's no different
	 from how to:do: is done."
	| ifNotNilArg |
	ifNotNilArg := arguments at: 1.
	((self checkBlock: ifNotNilArg as: 'NotNil arg' from: encoder maxArgs: 1)
	  and: [self checkBlock: (arguments at: 2) as: 'Nil arg' from: encoder maxArgs: 0]) ifFalse:
		[^false].

	ifNotNilArg numberOfArguments = 1 ifTrue:
		[receiver := AssignmentNode new
						variable: ifNotNilArg firstArgument
						value: receiver].

	selector := SelectorNode new key: #ifTrue:ifFalse: code: #macro.
	receiver := MessageNode new
					receiver: receiver
					selector: #==
					arguments: (Array with: NodeNil)
					precedence: 2
					from: encoder.
	arguments swap: 1 with: 2.
	arguments do: [:arg| arg noteOptimizedIn: self].
	^true! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506709!
isIsNil
	
	^self selectorSymbol = #isNil! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896233 overrides: 16918622!
ensureCanCascade: encoder

	special > 0 ifTrue: [
		special := 0.
		receiver := originalReceiver.
		selector := encoder encodeSelector: originalSelector.
		arguments := originalArguments.
		receiver isBlockNode ifTrue: [receiver deoptimize].
		arguments do:
			[:each|
			each isBlockNode ifTrue:
				[each deoptimize]]]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895761!
printIfNilNotNil: aStream indent: level

	self printReceiver: receiver ifNilReceiver on: aStream indent: level.

	(arguments first isJust: NodeNil) ifTrue:
		[^ self printKeywords: #ifNotNil:
				arguments: { arguments second }
				on: aStream indent: level].
	(arguments second isJust: NodeNil) ifTrue:
		[^ self printKeywords: #ifNil:
				arguments: { arguments first }
				on: aStream indent: level].
	^ self printKeywords: #ifNil:ifNotNil:
			arguments: arguments
			on: aStream indent: level! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895897!
printToDoOn: aStream indent: level

	| limitNode |
	self printReceiver: receiver on: aStream indent: level.

	(arguments last == nil or: [(arguments last isMemberOf: AssignmentNode) not])
		ifTrue: [limitNode := arguments first]
		ifFalse: [limitNode := arguments last value].
	(selector key = #to:by:do:
	 and: [(arguments at: 2) isConstantNumber
	 and: [(arguments at: 2) key = 1]])
		ifTrue: [self printKeywords: #to:do:
					arguments: (Array with: limitNode with: (arguments at: 3))
					on: aStream indent: level]
		ifFalse: [self printKeywords: selector key
					arguments: (Array with: limitNode) , arguments allButFirst
					on: aStream indent: level]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506693!
isIfNotNil
	
	^self selectorSymbol = #ifNotNil:! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896640!
sizeCodeForToDo: encoder value: forValue 
	" var := rcvr. L1: [var <= arg1] Bfp(L2) [block body. var := var + inc] Jmp(L1) L2: "
	| loopSize initStmt test block incStmt blockSize initSize limitInit |
	block := arguments at: 3.
	initStmt := arguments at: 4.
	test := arguments at: 5.
	incStmt := arguments at: 6.
	limitInit := arguments at: 7.
	initSize := forValue
		ifTrue: [initStmt sizeCodeForValue: encoder.]
		ifFalse: [initStmt sizeCodeForEffect: encoder].
	limitInit == nil ifFalse:
		[initSize := initSize + (limitInit sizeCodeForEffect: encoder)].
	blockSize := (block sizeCodeForEvaluatedEffect: encoder)
			+ (incStmt sizeCodeForEffect: encoder)
			+ (encoder sizeJumpLong: -1).
	loopSize := (test sizeCodeForValue: encoder)
			+ (self sizeCode: encoder forBranchOn: false dist: blockSize)
			+ blockSize.
	sizes := Array with: blockSize with: loopSize.
	^initSize
	+ loopSize! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895657!
arguments: list
	arguments := list asArray! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541321!
isComparingToNil
	^self isComparingEqualityToNil or: [self isNotNil ].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541437!
isReceiverClassNameMessagesSend
	
	^receiver isMessageNode and: [ receiver receiver isMessageNode and: [receiver receiver isClassMessageSend] and: [receiver isNameMessageSend]].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895674!
originalArguments

	^ originalArguments! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541417!
isObjectClassNameComparedToClassSymbol

	^ self isReceiverClassNameMessagesSend and: [self isFirstArgumentAClassNameSymbol ]
	
	! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896616 overrides: 16918466!
sizeCodeForEffect: encoder

	special > 0 
		ifTrue:
			[encoder noteOptimizedSelector: originalSelector.
			^self perform: (MacroSizers at: special) with: encoder with: false].
	^super sizeCodeForEffect: encoder! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897315!
transformWhile: encoder
	(self checkBlock: receiver as: 'receiver' from: encoder maxArgs: 0) ifFalse:
		[^false].
	arguments size = 0 ifTrue:  "transform bodyless form to body form"
		[selector := SelectorNode new
						key: (special = 10 ifTrue: [#whileTrue:] ifFalse: [#whileFalse:])
						code: #macro.
		 arguments := Array with: ((BlockNode withJust: NodeNil) noteOptimizedIn: self).
		 receiver noteOptimizedIn: self.
		 ^true].
	^(self transformBoolean: encoder)
	   and: [receiver noteOptimizedIn: self.
			arguments first noteOptimizedIn: self.
			true]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896229 overrides: 16918619!
canCascade

	^receiver ~~ NodeSuper! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896318!
isOptimizedLoop
	^special > 0
	   and: [#(transformWhile: transformToDo:) includes: (MacroTransformers at: special)]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896005!
printWithClosureAnalysisIfOn: aStream indent: level

	receiver ifNotNil:
		[receiver printWithClosureAnalysisOn: aStream indent: level + 1 precedence: precedence].
	(arguments last isJust: NodeNil) ifTrue:
		[^self printWithClosureAnalysisKeywords: #ifTrue: arguments: (Array with: arguments first)
					on: aStream indent: level].
	(arguments last isJust: NodeFalse) ifTrue:
		[^self printWithClosureAnalysisKeywords: #and: arguments: (Array with: arguments first)
					on: aStream indent: level].
	(arguments first isJust: NodeNil) ifTrue:
		[^self printWithClosureAnalysisKeywords: #ifFalse: arguments: (Array with: arguments last)
					on: aStream indent: level].
	(arguments first isJust: NodeTrue) ifTrue:
		[^self printWithClosureAnalysisKeywords: #or: arguments: (Array with: arguments last)
					on: aStream indent: level].
	self printWithClosureAnalysisKeywords: #ifTrue:ifFalse: arguments: arguments
					on: aStream indent: level! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541306!
isComparingEqualityForLiteralWithObject
	^self isAnyEqualityComparison and: [ self isObjectComparedToLiteral or: [self isLiteralComparedToObject]].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895700!
selector
	^selector! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896260 overrides: 16918652!
isComplex
	^ (special
			between: 1
			and: 10)
		or: 
		[ arguments size > 1
			or: 
			[ receiver isComplex or: [ arguments anySatisfy: [ : each | each isComplex ] ] ] ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896315!
isOptimized
	^special > 0! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506671!
isFirstArgumentClassMessageSend
	
	^ arguments first isMessageNode and: [ arguments first isClassMessageSend ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897210!
transformOr: encoder
	(Preferences at: #allowNonBooleanReceiversOfBooleanMessages) ifTrue: [
		(receiver == NodeTrue) | (receiver == NodeFalse) ifFalse: [
			^false ]].
	(self transformBoolean: encoder)
		ifTrue: 
			[arguments := 
				Array 
					with: ((BlockNode withJust: NodeTrue) noteOptimizedIn: self)
					with: ((arguments at: 1) noteOptimizedIn: self).
			^true]
		ifFalse: 
			[^false]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897020!
transformCase: encoder

	| caseNode |
	caseNode := arguments first.
	(caseNode isMemberOf: BraceNode) ifFalse: [^false].
	(caseNode blockAssociationCheck: encoder) ifFalse: [^false].
	(arguments size = 1
	 or: [self checkBlock: arguments last as: 'otherwise arg' from: encoder maxArgs: 0]) ifFalse:
		[^false].
	 caseNode elementsDo:
		[:messageNode |
		messageNode receiver noteOptimizedIn: self.
		messageNode arguments first noteOptimizedIn: self].
	 arguments size = 2 ifTrue:
		[arguments last noteOptimizedIn: self].
	 ^true! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541356!
isFirstArgumentSymbol
	^arguments first isLiteralNode and:[arguments first key isSymbol].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541514!
receiverLiveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo 
	^self receiverOrCascadeReceiver typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo. ! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895593!
analyseTempsWithin: scopeBlock "<BlockNode>" rootNode: rootNode "<MethodNode>" assignmentPools: assignmentPools "<Dictionary>"
	"Assignments within optimized loops are tricky.  Because a loop repeats a
	 write to a temporary in an optimized loop effectively occurs after the loop.
	 To handle this collect the set of temps assigned to in optimized loops and
	 add extra writes after traversing the optimized loop constituents."
	| writtenToTemps |
	self isOptimizedLoop ifTrue:
		[{ receiver }, arguments do:
			[:node|
			(node notNil and: [node isBlockNode and: [node optimized]]) ifTrue:
				[assignmentPools at: node put: Set new]]].
	"receiver is nil in cascades"
	receiver == nil ifFalse:
		[receiver analyseTempsWithin: scopeBlock rootNode: rootNode assignmentPools: assignmentPools].
	arguments do:
		[:node|
		node == nil ifFalse: "last argument of optimized to:do: can be nil"
			[node analyseTempsWithin: scopeBlock rootNode: rootNode assignmentPools: assignmentPools]].
	"Add assignments representing subsequent iterations
	 and redo the closure analysis for the written-to temps."
	self isOptimizedLoop ifTrue:
		[writtenToTemps := Set new.
		 { receiver }, arguments do:
			[:node|
			(node notNil and: [node isBlockNode and: [node optimized]]) ifTrue:
				[(assignmentPools removeKey: node) do:
					[:temp|
					temp isBlockArg ifFalse: "ignore added assignments to to:do: loop args"
						[writtenToTemps add: temp.
						 temp addWriteWithin: node at: rootNode locationCounter]]]].
		 writtenToTemps isEmpty ifFalse:
			[(writtenToTemps asSortedCollection: ParseNode tempSortBlock) do:
				[:each| each analyseClosure: rootNode].
			 (writtenToTemps collect: [:each| each definingScope]) do:
				[:blockNode|
				blockNode ifHasRemoteTempNodeEnsureInitializationStatementExists: rootNode]]]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506749!
isObjectClassNotEqualOrNotIdenticalToClass
	
	^self isNotEqualOrNotIdentical and: [ self isReceiverClassMessageSend and: [ self isFirstArgumentLiteralBehavior ]]
		
	! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895752!
printIfNil: aStream indent: level

	self printReceiver: receiver on: aStream indent: level.

	^self printKeywords: selector key
		arguments: (Array with: arguments first)
		on: aStream indent: level! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506792!
receiverTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons castingWith: aTypeCastApplier 
	
	^self receiverOrCascadeReceiver typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons castingWith: aTypeCastApplier ! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895703!
macroPrinter

	special > 0 ifTrue: [^MacroPrinters at: special].
	^nil
! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541327!
isFirstArgumentAClassNameSymbol
	^self isFirstArgumentSymbol and:[ (Smalltalk classNamed: arguments first key value) ~= nil ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896360 overrides: 16918818!
referencesSuper

	^self receiver referencesSuper
		or: [self arguments anySatisfy: [:argument | argument referencesSuper]]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506767!
isReceiverLiteralBehavior
	
	^receiver isLiteralVariableNode and: [ receiver isReferencingBehavior ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896246 overrides: 16918625!
equivalentTo: aParseNode

	^ aParseNode isMessageNode
		and: [ self hasEquivalentReceiverWith: aParseNode ]
		and: [ self selector equivalentTo: aParseNode selector ]
		and: [ self hasEquivalentArgumentsWith: aParseNode ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50535118!
receiverTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons 
	
	^self receiverOrCascadeReceiver basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895708!
precedence
	^precedence! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896472 overrides: 16918424!
emitCodeForEffect: stack encoder: encoder
	"For #ifTrue:ifFalse: and #whileTrue: / #whileFalse: style messages, the pc is set to the jump instruction, so that mustBeBoolean exceptions can be shown correctly."
	special > 0
		ifTrue: 
			[pc := 0.
			self perform: (MacroEmitters at: special) with: stack with: encoder with: false]
		ifFalse: 
			[super emitCodeForEffect: stack encoder: encoder]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896382!
receiver: rcvr arguments: args precedence: p

	receiver := rcvr.
	originalReceiver := rcvr copy.
	arguments := args asArray.
	originalArguments := arguments copy.
	sizes := Array new: arguments size.
	precedence := p! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896913!
sizeCodeForIfNil: encoder value: forValue

	| theNode theSize theSelector |
	equalNode := encoder encodeSelector: #==.
	sizes := Array new: 1.
	theNode := arguments first.
	theSelector := #ifNotNil:.
	forValue
		ifTrue:
			[sizes at: 1 put: (theSize := (encoder sizePop + (theNode sizeCodeForEvaluatedValue: encoder))).
			 ^(receiver sizeCodeForValue: encoder)
			 + encoder sizeDup
			 + (encoder sizePushSpecialLiteral: nil)
			 + (equalNode sizeCode: encoder args: 1 super: false)
			 + (self 
					sizeCode: encoder forBranchOn: selector key == theSelector 
					dist: theSize)
			 + theSize]
		ifFalse:
			[sizes at: 1 put: (theSize := (theNode sizeCodeForEvaluatedEffect: encoder)).
			 ^(receiver sizeCodeForValue: encoder)
				+ (encoder sizePushSpecialLiteral: nil)
				+ (equalNode sizeCode: encoder args: 1 super: false)
				+ (self 
					sizeCode: encoder
					forBranchOn: selector key == theSelector 
					dist: theSize)
				+ theSize]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896719!
emitCodeForCase: stack encoder: encoder value: forValue

	| braceNode sizeStream allReturn |
	forValue ifFalse:
		[^super emitCodeForEffect: stack encoder: encoder].
	braceNode := arguments first.
	sizeStream := ReadStream on: sizes.
	receiver emitCodeForValue: stack encoder: encoder.
	"There must be at least one branch around the otherwise/caseError
	  so the decompiler can identify the end of the otherwise/caseError."
	allReturn := true. "assume every case ends with a return"
	braceNode casesForwardDo:
		[:keyNode :valueNode :last | | thenSize elseSize |
		thenSize := sizeStream next.
		elseSize := sizeStream next.
		last ifFalse: [encoder genDup. stack push: 1].
		keyNode emitCodeForEvaluatedValue: stack encoder: encoder.
		equalNode emitCode: stack args: 1 encoder: encoder.
		self emitCodeForBranchOn: false dist: thenSize pop: stack encoder: encoder.
		last ifFalse: [encoder genPop. stack pop: 1].
		valueNode emitCodeForEvaluatedValue: stack encoder: encoder.
		last ifTrue: [stack pop: 1].
		valueNode returns ifFalse:
			[self emitCodeForJump: elseSize encoder: encoder.
			 allReturn := false].
		(last and: [allReturn]) ifTrue:
			[self emitCodeForJump: elseSize encoder: encoder]].
	arguments size = 2
		ifTrue:
			[arguments last emitCodeForEvaluatedValue: stack encoder: encoder] "otherwise: [...]"
		ifFalse:
			[NodeSelf emitCodeForValue: stack encoder: encoder.
			caseErrorNode emitCode: stack args: 0 encoder: encoder]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896299 overrides: 16918694!
isMessageNamed: aSelector

	^aSelector == self selectorSymbol ! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896625!
sizeCodeForRepeat: encoder value: forValue 
	"L1: ... Jmp(L1) nil (nil for value only);"
	| loopSize |
	"We assume long backward branches are always maximal size branches."
	loopSize := (receiver sizeCodeForEvaluatedEffect: encoder) + (encoder sizeJumpLong: -1).
	sizes := Array with: loopSize.
	^loopSize + (forValue ifTrue: [encoder sizePushSpecialLiteral: nil] ifFalse: [0])! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897395!
selectorSymbol

	^selector key! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896428!
hasEquivalentReceiverWith: aMessageNode

	^ self receiverOrCascadeReceiver equivalentTo: aMessageNode receiverOrCascadeReceiver ! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506689!
isIfNil
	
	^self selectorSymbol = #ifNil:! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541386!
isManyOr

	^self selectorSymbol = #or:or: or:[self selectorSymbol = #or:or:or:]or:[self selectorSymbol = #or:or:or:or:]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506677!
isFirstArgumentLiteralBehavior
	
	^arguments first isLiteralVariableNode and: [ arguments first isReferencingBehavior ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50535106!
receiverLiveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage
	
	^self receiverOrCascadeReceiver liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage.! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896375!
toDoLimit: variable
	(receiver = variable and: [selector key = #<= or: [selector key = #>=]]) 
		ifTrue: [^ arguments first]
		ifFalse: [^ nil]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897358!
receiver: rcvr selector: aSelector arguments: args precedence: p from: encoder 
	"Compile."

	self receiver: rcvr
		arguments: args
		precedence: p.
	originalSelector := aSelector.
	self noteSpecialSelector: aSelector.
	(self transform: encoder)
		ifTrue: 
			[selector isNil ifTrue:
				[selector := SelectorNode new 
								key: (MacroSelectors at: special)
								code: #macro]]
		ifFalse: 
			[selector := encoder encodeSelector: aSelector.
			rcvr == NodeSuper ifTrue: [encoder noteSuper]].
	self pvtCheckForPvtSelector: encoder! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897336!
optimizeSpecialSends: aBoolean
	optimizeSpecialSends := aBoolean! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16895560 overrides: 16918831!
accept: aVisitor
	^aVisitor visitMessageNode: self! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896843!
emitCodeForWhile: stack encoder: encoder value: forValue 
	"L1: ... Bfp(L2)|Btp(L2) ... Jmp(L1) L2: "
	| cond stmt stmtSize loopSize |
	cond := receiver.
	stmt := arguments at: 1.
	stmtSize := sizes at: 1.
	loopSize := sizes at: 2.
	cond emitCodeForEvaluatedValue: stack encoder: encoder.
	self emitCodeForBranchOn: (selector key == #whileFalse:)  "Bfp for whileTrue"
					dist: stmtSize pop: stack encoder: encoder.   "Btp for whileFalse"
	pc := encoder methodStreamPosition.
	stmt emitCodeForEvaluatedEffect: stack encoder: encoder.
	self emitCodeForJump: 0 - loopSize encoder: encoder.
	forValue ifTrue: [encoder genPushSpecialLiteral: nil. stack push: 1]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896559!
sizeCodeForCase: encoder value: forValue

	| braceNode sizeIndex elseSize allReturn |
	forValue not ifTrue:
		[^super sizeCodeForEffect: encoder].
	equalNode := encoder encodeSelector: #=.
	braceNode := arguments first.
	sizes := Array new: 2 * braceNode numElements.
	sizeIndex := sizes size.
	elseSize := arguments size = 2
		ifTrue:
			[arguments last sizeCodeForEvaluatedValue: encoder] "otherwise: [...]"
		ifFalse:
			[caseErrorNode := encoder encodeSelector: #caseError.
			 (NodeSelf sizeCodeForValue: encoder)
			 + (caseErrorNode sizeCode: encoder args: 0 super: false)]. "self caseError"
	"There must be at least one branch around the otherwise/caseError
	  so the decompiler can identify the end of the otherwise/caseError."
	allReturn := true. "assume every case ends with a return"
	braceNode casesForwardDo:
		[:keyNode :valueNode :last |
		valueNode returns ifFalse: [allReturn := false]].
	braceNode casesReverseDo:
		[:keyNode :valueNode :last | | thenSize |
		sizes at: sizeIndex put: elseSize.
		thenSize := valueNode sizeCodeForEvaluatedValue: encoder.
		last ifFalse: [thenSize := thenSize + encoder sizePop].
		valueNode returns ifFalse: [thenSize := thenSize + (self sizeCode: encoder forJump: elseSize)].
		(last and: [allReturn]) ifTrue: [thenSize := thenSize + (self sizeCode: encoder forJump: elseSize)].
		sizes at: sizeIndex-1 put: thenSize.
		last ifFalse: [elseSize := elseSize + encoder sizeDup].
		elseSize := elseSize
					+ (keyNode sizeCodeForEvaluatedValue: encoder)
					+ (equalNode sizeCode: encoder args: 1 super: false)
					+ (self sizeCode: encoder forBranchOn: false dist: thenSize)
					+ thenSize.
		sizeIndex := sizeIndex - 2].
	^(receiver sizeCodeForValue: encoder) + elseSize! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896419!
hasEquivalentArgumentsWith: aMessageNode

	^ self isCascade
		ifTrue: [ self compare: originalArguments with: aMessageNode originalArguments ]
		ifFalse: [ self compare: arguments with: aMessageNode arguments ]! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16896439!
pvtCheckForPvtSelector: encoder
	"If the code being compiled is trying to send a private message (e.g. 'pvtCheckForPvtSelector:') to anyone other than self, then complain to encoder."

	selector isInitializePvtSelector ifTrue: [
		(receiver isSelfNewMessageSend or: [receiver isSelfBasicNewMessageSend]) ifFalse: [
			encoder notify: 'Private instance initialization messages may only be sent to ''self new'' or "self basicNew" (by class instance creation methods)']].
	selector isPvtSelector ifTrue: [
		(receiver isSelfPseudoVariable or: [ receiver isSuperPseudoVariable ]) ifFalse: [
			encoder notify: 'Private messages may only be sent to self or super']].! !
!MessageNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541430!
isReceiverAClassNameSymbol
	^self isReceiverSymbol and:[ (Smalltalk classNamed: receiver key) ~= nil ]! !
!MessageNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897529 overrides: 16918993!
initialize
	"
	MessageNode initialize
	"
	self initClassCachedState! !
!MessageNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897450 overrides: 16918959!
initClassCachedState
	"
	MessageNode initialize
	"
	MacroSelectors := 
		#(	ifTrue: ifFalse: ifTrue:ifFalse: ifFalse:ifTrue:
			and: or:
			whileFalse: whileTrue: whileFalse whileTrue
			to:do: to:by:do:
			caseOf: caseOf:otherwise:
			ifNil: ifNotNil:  ifNil:ifNotNil: ifNotNil:ifNil:
			repeat ).
	MacroTransformers := 
		#(	transformIfTrue: transformIfFalse: transformIfTrueIfFalse: transformIfFalseIfTrue:
			transformAnd: transformOr:
			transformWhile: transformWhile: transformWhile: transformWhile:
			transformToDo: transformToDo:
			transformCase: transformCase:
			transformIfNil: transformIfNil:  transformIfNilIfNotNil: transformIfNotNilIfNil:
			transformRepeat: ).
	MacroEmitters := 
		#(	emitCodeForIf:encoder:value: emitCodeForIf:encoder:value:
			emitCodeForIf:encoder:value: emitCodeForIf:encoder:value:
			emitCodeForIf:encoder:value: emitCodeForIf:encoder:value:
			emitCodeForWhile:encoder:value: emitCodeForWhile:encoder:value:
			emitCodeForWhile:encoder:value: emitCodeForWhile:encoder:value:
			emitCodeForToDo:encoder:value: emitCodeForToDo:encoder:value:
			emitCodeForCase:encoder:value: emitCodeForCase:encoder:value:
			emitCodeForIfNil:encoder:value: emitCodeForIfNil:encoder:value:
			emitCodeForIf:encoder:value: emitCodeForIf:encoder:value:
			emitCodeForRepeat:encoder:value:).
	MacroSizers := 
		#(	sizeCodeForIf:value: sizeCodeForIf:value: sizeCodeForIf:value: sizeCodeForIf:value:
			sizeCodeForIf:value: sizeCodeForIf:value:
			sizeCodeForWhile:value: sizeCodeForWhile:value: sizeCodeForWhile:value: sizeCodeForWhile:value:
			sizeCodeForToDo:value: sizeCodeForToDo:value:
			sizeCodeForCase:value: sizeCodeForCase:value:
			sizeCodeForIfNil:value: sizeCodeForIfNil:value: sizeCodeForIf:value: sizeCodeForIf:value:
			sizeCodeForRepeat:value:).
	MacroPrinters := 
		#(	printIfOn:indent: printIfOn:indent: printIfOn:indent: printIfOn:indent:
			printIfOn:indent: printIfOn:indent:
			printWhileOn:indent: printWhileOn:indent: printWhileOn:indent: printWhileOn:indent:
			printToDoOn:indent: printToDoOn:indent:
			printCaseOn:indent: printCaseOn:indent:
			printIfNil:indent: printIfNil:indent: printIfNilNotNil:indent: printIfNilNotNil:indent:
			printRepeatOn:indent:).
	Preferences
		name: #allowNonBooleanReceiversOfBooleanMessages
		description: 'If set, do not optimize boolean selectors, allowing, for example, new Boolean classes.'
		category: #programming type: Boolean value: false! !
!MessageNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897534 overrides: 16918999!
releaseClassCachedState

	MacroSelectors := nil.
	MacroTransformers := nil.
	MacroEmitters := nil.
	MacroSizers := nil.
	MacroPrinters := nil! !
!MessageNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897437!
enableNonBooleanReceiversOfBooleanMessages
	"
	Evaluate this to allow alternative Boolean classes.
	Boolean messages will be actual method sends.

	MessageNode enableNonBooleanReceiversOfBooleanMessages
	"
	Preferences at: #allowNonBooleanReceiversOfBooleanMessages put: true.
	Compiler recompileAll! !
!MessageNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897542 overrides: 16919011!
new
	MacroSelectors ifNil: [ self initClassCachedState ].
	^super new! !
!MessageNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16897423!
disableNonBooleanReceiversOfBooleanMessages
	"
	Evaluate this to disallow alternative Boolean classes.
	Boolean messages will be optimized by the Compiler, by assuming receiver is a Boolean.

	MessageNode disableNonBooleanReceiversOfBooleanMessages
	"
	Preferences at: #allowNonBooleanReceiversOfBooleanMessages put: false.
	Compiler recompileAll! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901923!
withParseNodeIncluding: aPosition do: aBlock ifAbsent: anAbsentBlock

	| nodeAndPosition |

	nodeAndPosition :=self parseNodeIncluding: aPosition ifAbsent: [ ^ anAbsentBlock value ].
	^aBlock value: nodeAndPosition key.! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541201!
parseBlockNodeWhenBranchIsIn: aPosition ifAbsent: aBlockClosure 
	
	self completeSourceRanges ."Load complete source ranges to detect block nodes properly. Julian"
	^encoder parseBlockNodeWhenBranchIsIn: aPosition ifAbsent: aBlockClosure .
! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901033 overrides: 50554362!
arguments
	"For transformations etc, not used in compilation"
	^arguments! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901136 overrides: 50554381!
temporariesDeclaration: aTemporariesDeclarationNode
	"RNG: after removing all the usages of the temporaries inst var, the last line can be removed"

	temporariesDeclaration := aTemporariesDeclarationNode.
	self temporaries: aTemporariesDeclarationNode allDeclaredVariableNodes! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901048!
numberOfStatements

	^ block statements size! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901869!
selectorLastPosition

	"If #DoIt selector, returns 0 - Hernan"

	^self selector isUnary
		ifTrue: [ selectorKeywordsRanges ifNil: [ 0 ] ifNotNil: [ selectorKeywordsRanges last last ]]
		ifFalse: [
			(encoder 
				rangeForNode: arguments last
				ifAbsent: [ self shouldNotHappenBecause: 'arguments are part of the encoder'  ]) first last ]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901492!
methodClass

	^ encoder classEncoding! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901052!
primitiveErrorVariableName
	"Answer the primitive error code temp name, or nil if none."
	(primitive isInteger and: [primitive > 0]) ifTrue:
		[properties pragmas do:
			[:pragma| | kwds ecIndex |
			((kwds := pragma keyword keywords) first = 'primitive:'
			and: [(ecIndex := kwds indexOf: 'error:') > 0]) ifTrue:
				[^pragma argumentAt: ecIndex]]].
	^nil

	"(Parser new parse: (MethodNode sourceCodeAt: #primitiveErrorVariableName) class: Parser) primitiveErrorVariableName"

	"(Parser new parse: 'foo <primitive: 111 error: ''foo''> self primitiveFailed' class: Object) primitiveErrorVariableName"

	"(Parser new parse: 'foo <primitive: 111 error: foo> self primitiveFailed' class: Object) primitiveErrorVariableName"

	"(Parser new parse: 'foo <primitive: 111> self primitiveFailed' class: Object) primitiveErrorVariableName"

	"(Parser new parse: 'foo <primitive: ''foo'' error: foo module: ''bar''> self primitiveFailed' class: Object) primitiveErrorVariableName"

	"(Parser new parse: 'foo <primitive: ''foo'' module: ''bar'' error: foo> self primitiveFailed' class: Object) primitiveErrorVariableName"

	"(Parser new parse: 'foo <primitive: 111 error: foo> self primitiveFailed' class: Object) generate"! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16902107!
selector: selOrFalse arguments: args precedence: p temporariesDeclaration: tempsDeclaration block: blk encoder: anEncoder primitive: prim properties: propDict selectorKeywordsRanges: range
	"RNG: this is the preferred initializer (with temporariesDeclaration) as opposed to the one with 'temporaries' that is going to be deprecated"

	selectorKeywordsRanges := range.

	^ self selector: selOrFalse arguments: args precedence: p temporariesDeclaration: tempsDeclaration block: blk encoder: anEncoder primitive: prim properties: propDict! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901502 overrides: 16918526!
printOn: aStream

	self 
		printSelectorAndArgumentsOn: aStream;
		printCommentOn: aStream;
		printTemporariesOn: aStream;
		ifPrimitivePrintOn: aStream;
		printPropertiesOn: aStream;
		printPragmasOn: aStream.
		
	aStream newLineTab: 1.
	block printStatementsOn: aStream indent: 0! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16902131!
allParseNodesWithin: aSourceCodeInterval satisfy: aCondition

	self completeSourceRangesDo: [ :parseNode :sourceRanges |
		(aCondition value: parseNode) ifTrue: [
			(sourceRanges anySatisfy: [ :sourceRange | aSourceCodeInterval rangeIncludes: sourceRange first ])
				ifTrue: [ ^ false ] ] ].
	^ true! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506432!
topBlockTempsMap
	
	self blockExtentsToTempsMap associationsDo: [ :anAssociation | anAssociation key first = 0 ifTrue: [ ^anAssociation value ]].
	
	self error: 'Should not happen, there is always a topContext'! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901762!
parseNodeIncluding: aPosition ifAbsent: aBlockClosure 
	
	^encoder parseNodeIncluding: aPosition ifAbsent: aBlockClosure 
! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901792!
positionsForLiteralVariableNode: aName ifAbsent: aBlock

	^encoder positionsForLiteralVariableNode: aName ifAbsent: aBlock! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901166!
preenLocalIfNotNilArg
	"Try and spot a (var := expr) ifNil: [...] ifNotNil: [...] where var is only used in the ifNotNil: block
	 and convert it to expr ifNil: [...] ifNotNil: [:var| ...].  Deal both with the pretty-print case where
	 the block already declares the variable and the decompile case where it does not."

	| varsToHide |
	varsToHide := Set new.
	self nodesDo:
		[:node| | variable |
		(node isMessageNode
		and: [node macroPrinter == #printIfNilNotNil:indent:
		and: [node receiver isMessageNode
		and: [node receiver selector key == #==
		and: [node receiver receiver isAssignmentNode
		and: [(variable := node receiver receiver variable) isTemp
		and: [variable isRemote not
		and: [variable isOnlySubnodeOf: node in: self]]]]]]]) ifTrue:
			[node arguments last arguments isEmpty
				ifTrue: [node arguments last arguments: { variable }.
						varsToHide add: variable]
				ifFalse: [self assert: node arguments last arguments asArray =  { variable }].
			 node receiver receiver: node receiver receiver value]].
	varsToHide notEmpty ifTrue:
		[self nodesDo:
			[:node|
			((node == self or: [node isBlockNode])
			and: [node temporaries anySatisfy: [:temp| varsToHide includes: temp]]) ifTrue:
				[node temporaries: (node temporaries reject: [:temp| varsToHide includes: temp])]]]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901645!
sourceText

	^ sourceText ifNil: [self printString]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901214!
generate
	"The receiver is the root of a parse tree. Answer a CompiledMethod."

	^self generate: #(0 0 0 0)! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901255!
generate: trailer using: aCompiledMethodClass ifQuick: methodBlock
	| v |
	(primitive = 0 and: [arguments size = 0 and: [block isQuick]])
		ifFalse: [^ self].
	v := block code.
	v < 0
		ifTrue: [^ self].
	v = LdSelf
		ifTrue: [^ methodBlock value: (aCompiledMethodClass toReturnSelfTrailerBytes: trailer)].
	(v between: LdTrue and: LdMinus1 + 3)
		ifTrue: [^ methodBlock value: (aCompiledMethodClass toReturnConstant: v - LdSelf trailerBytes: trailer)].
	v < ((CodeBases at: LdInstType) + (CodeLimits at: LdInstType))
		ifTrue: [^ methodBlock value: (aCompiledMethodClass toReturnField: v trailerBytes: trailer)].
	v // 256 = 1
		ifTrue: [^ methodBlock value: (aCompiledMethodClass toReturnField: v \\ 256 trailerBytes: trailer)]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16902085!
selector: selOrFalse arguments: args precedence: p temporariesDeclaration: tempsDeclaration block: blk encoder: anEncoder primitive: prim properties: propDict
	"Initialize the receiver with respect to the arguments given."
	"RNG: this is the preferred initializer (with temporariesDeclaration) as opposed to the one with 'temporaries' that is going to be deprecated"

	encoder := anEncoder.
	selectorOrFalse := selOrFalse.
	precedence := p.
	arguments := args.
	temporariesDeclaration := tempsDeclaration.
	temporaries := tempsDeclaration allDeclaredVariableNodes.
	block := blk.
	primitive := prim.
	properties := propDict.! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901833!
rawSourceRanges

	^self rawSourceRangesAndMethodDo: [:rawSourceRanges :method| rawSourceRanges]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506428 overrides: 50506155!
nodeTypePrintString
	
	^'method'! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901973!
hasGeneratedMethod
	^encoder hasGeneratedMethod! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901239!
generate: trailer using: aCompiledMethodClass
	"The receiver is the root of a parse tree. Answer an instance of aCompiledMethodClass.
	 The argument, trailer, is arbitrary but is typically the reference to the source code
	 that is stored with every CompiledMethod."

	^ Smalltalk isSpur 
		ifTrue: [ self generateSpur: trailer using: aCompiledMethodClass ]
		ifFalse: [ self generatePreSpur: trailer using: aCompiledMethodClass ]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901898!
singleCompleteSourceRangeOf: requestedParseNode ifPresent: sourceRangePresentBlock ifAbsent: sourceRangeAbsentBlock
	"Finds the source range associated with the requested parse node.
	If it is present, evaluates sourceRangePresentBlock with the result.
	Otherwise, it evaluates sourceRangeAbsentBlock.
	Raises an error if the requested parse node has multiple source ranges"
	| sourceRanges |

	sourceRanges := self
		completeSourceRangesOf: requestedParseNode
		ifAbsent: [^sourceRangeAbsentBlock value].

	^sourceRanges size > 1
		ifTrue: [self error: 'there are multiple source ranges for the parse node: ' , requestedParseNode printString ]
		ifFalse: [sourceRangePresentBlock value: sourceRanges anyOne].! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901639!
selectorAndArgumentsAsString
	
	^String streamContents: [ :aStream | self printSelectorAndArgumentsOn: aStream ]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16902008!
noteBlockExit: aBlock
	"Evaluate aBlock with the numbering for the block exit."
	aBlock value: locationCounter + 1.
	locationCounter := locationCounter + 2! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901028!
argumentNames

	^arguments collect: [ :anArgumentNode | anArgumentNode name ]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901455!
properties
	^properties! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901730!
messageSendSelectorKeywordPositionsOf: aSelector ifAbsent: aBlock

	^encoder messageSendSelectorKeywordPositionsOf: aSelector ifAbsent: aBlock! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901123 overrides: 50554427!
temporaries: aCollectionOfTemporaries
	"For transformations etc, not used in compilation"
	"RNG: deprecated in favor of #temporariesDeclaration:"

	temporaries := aCollectionOfTemporaries! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901786!
positionsForLiteralNode: aName ifAbsent: aBlock

	^encoder positionsForLiteralNode: aName ifAbsent: aBlock
! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901153!
preen
	"Preen for pretty-printing and/or decompilation.
	 i.e. post-process to cover up for inadequacies in both algorithms.
	 Currently one case, hiding the assignment to the arg of an inlined block arg to ifNotNil:,
		(var := expr) ifNil: [...] ifNotNil: [...]    =>    expr ifNil: [...] ifNotNil: [:var| ...]."

	self preenLocalIfNotNilArg! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901666!
completeSourceRanges
	"Returns the 'expanded' version of the source ranges, for instance in message sends it also includes the receiver, and if there are parentheses they are included in the source range as well. Right now used for refactorings."

	^ encoder completeSourceRangesBasedOn: self sourceText! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901686!
completeSourceRangesOf: requestedParseNode ifAbsent: emptySourceRangesBlock
	"Returns the source ranges associated with the requested parse node."

	| completeSourceRanges |

	completeSourceRanges := Set new.

	"There may be more than one equivalent key in the complete source ranges map
	if more than one block declare a temporary variable with the same name - Fernando"
	self completeSourceRangesDo: [:parseNode :sourceRanges |
		(parseNode equivalentTo: requestedParseNode) ifTrue: [completeSourceRanges addAll: sourceRanges]].

	^completeSourceRanges ifEmpty: emptySourceRangesBlock 
	! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50534853 overrides: 50534690!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage
 
	^aCompiledMethod returnLiveTypes: aStorage! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901978!
addLocalsToPool: locals "<Set of: TempVariableNode>"
	localsPool isNil ifTrue:
		[localsPool := IdentitySet new].
	localsPool addAll: locals! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901524!
printPrimitiveOn: aStream
	"Print the primitive on aStream"
	| primDecl |
	primitive = 0 ifTrue:
		[^self].
	primitive = 120 ifTrue: "External call spec"
		[^aStream print: encoder literals first].
	aStream nextPutAll: '<primitive: '.
	primitive = 117
		ifTrue:
			[primDecl := encoder literals at: 1.
			 (primDecl at: 2) asPlainString printOn: aStream.
			 (primDecl at: 1) ifNotNil:
				[:moduleName|
				aStream nextPutAll:' module: '.
				moduleName asPlainString printOn: aStream]]
		ifFalse:
			[aStream print: primitive].
	self primitiveErrorVariableName ifNotNil:
		[:primitiveErrorVariableName|
		 aStream nextPutAll: ' error: '; nextPutAll: primitiveErrorVariableName].
	aStream nextPut: $>.
	((Smalltalk classNamed: #StackInterpreter) ifNil: [Smalltalk classNamed: #Interpreter]) ifNotNil:
		[:interpreterClass|
		 aStream nextPutAll: ' "', ((interpreterClass primitiveTable) at: primitive + 1), '" ']! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901828!
rangeForNode: node ifAbsent: aBlock

	^encoder rangeForNode: node ifAbsent: aBlock! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901109 overrides: 50554476!
temporaries
	"For transformations etc, not used in compilation"

	"RNG: implementation can be changed after adopting the use of temporariesDeclaration inst var.
	After that, the implementation for this message can be changed to:
	^ temporariesDeclaration allDeclaredVariableNodes
	
	Or we can analyze the senders and change the way we request the temporaries"
	
	^temporaries! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901799!
positionsForTemporaryVariable: aName ifAbsent: aBlock

	^encoder positionsForTemporaryVariable: aName ifAbsent: aBlock! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16902048!
selector: selOrFalse arguments: args precedence: p temporaries: temps block: blk encoder: anEncoder primitive: prim properties: propDict
	"Initialize the receiver with respect to the arguments given."
	"RNG: its external use is deprecated, in favor of any of the methods that receives a temporariesDeclaration instead of the collection of temporaries"

	encoder := anEncoder.
	selectorOrFalse := selOrFalse.
	precedence := p.
	arguments := args.
	temporaries := temps.
	block := blk.
	primitive := prim.
	properties := propDict.! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901737!
nextPositionAfterAddPositionTo: symbolPositions of: symbolString startingAt: insidePosition

	| symbolStartPosition nextPosition |

	symbolStartPosition := sourceText indexOfSubCollection: symbolString startingAt: insidePosition.

	symbolStartPosition = 0
		ifTrue: [ nextPosition := SmallInteger maxVal ]
		ifFalse: [
			nextPosition := symbolStartPosition + symbolString size.
			(sourceText at: nextPosition) tokenish ifFalse: [ symbolPositions add: (symbolStartPosition to: nextPosition - 1) ]].

	^nextPosition

	! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50430518!
rawSourceRangesAndMethodNodeDo: aBinaryBlock

	"Evaluate aBinaryBlock with the methodNode and rawSourceRanges generated from the receiver.
	
	This method is similar to #rawSourceRangesAndMethodDo: except that it:
	* provides the MethodNode instead of the CompiledMethod
	* ensures that the same parse nodes instances are used for both the raw source ranges keys and the method node children.
	
	If #rawSourceRangesAndMethodDo: was used instead, the method node will have to be recreated from the returned compiled method and that will cause
	its parse nodes to be different objects (have different identity) that the ones used for the raw souce ranges keys."
	
	| methodNode |
	methodNode := encoder classEncoding parserClass new
					encoderClass: encoder class;
					parse: (sourceText "If no source, use decompile string as source to map from"
							ifNil: [self decompileString]
							ifNotNil: [sourceText])
					class: self methodClass.

	^ aBinaryBlock
		value: methodNode encoder rawSourceRanges
		value: methodNode! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16902025 overrides: 50554376!
block
	^ block! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901367!
generateSpur: trailer using: aCompiledMethodClass
	"The receiver is the root of a parse tree. Answer an instance of aCompiledMethodClass.
	 The argument, trailer, is arbitrary but is typically the reference to the source code
	 that is stored with every CompiledMethod."

	| primErrNode blkSize nLits locals literals stack header method |
	self generate: trailer
		using: aCompiledMethodClass
		ifQuick:
			[:m |
			 encoder noteBlockExtent: (0 to: 2) hasLocals: arguments.
			 m	literalAt: 2 put: encoder associationForClass;
				properties: properties.
			 ^m].
	primErrNode := self primitiveErrorVariableName ifNotNil:
						[encoder fixTemp: self primitiveErrorVariableName].
	self ensureClosureAnalysisDone.
	encoder rootNode: self. "this is for BlockNode>>sizeCodeForClosureValue:"
	blkSize := (block sizeCodeForEvaluatedValue: encoder)
				+ (primitive > 0
					ifTrue: [encoder sizeCallPrimitive: primitive]
					ifFalse: [0])
				+ (primErrNode
					ifNil: [0]
					ifNotNil:
						[primErrNode
							index: arguments size + temporaries size;
							sizeCodeForStore: encoder "The VM relies on storeIntoTemp: (129)"]).
	locals := arguments, temporaries, (primErrNode ifNil: [#()] ifNotNil: [{primErrNode}]).
	encoder noteBlockExtent: block blockExtent hasLocals: locals.
	header := encoder computeMethodHeaderForNumArgs: arguments size
					numTemps: locals size
					numLits: (nLits := (literals := encoder allLiterals) size)
					primitive: primitive.
	method := aCompiledMethodClass
					createMethod: blkSize
					trailer: trailer
					header: header.
	1 to: nLits do: [:lit | method literalAt: lit put: (literals at: lit)].
	encoder streamToMethod: method.
	stack := ParseStack new init.
	primitive > 0 ifTrue:
		[encoder genCallPrimitive: primitive.
		 primErrNode ifNotNil:
			[primErrNode emitCodeForStore: stack encoder: encoder]].
	stack position: method numTemps.
	[block emitCodeForEvaluatedValue: stack encoder: encoder]
		on: Error "If an attempt is made to write too much code the method will be asked"
		do: [:ex|  "to grow, and the grow attempt will fail in CompiledMethod class>>#new:"
			ex signalerContext sender method = (CompiledMethod class>>#new:)
				ifTrue: [^self error: 'Compiler code size discrepancy']
				ifFalse: [ex pass]].
	stack position ~= (method numTemps + 1) ifTrue:
		[^self error: 'Compiler stack discrepancy'].
	encoder methodStreamPosition ~= (method size - trailer size) ifTrue:
		[^self error: 'Compiler code size discrepancy'].
	method needsFrameSize: stack size - method numTemps.
	method properties: properties.
	^method! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901281!
generatePreSpur: trailer using: aCompiledMethodClass
	"The receiver is the root of a parse tree. Answer an instance of aCompiledMethodClass.
	 The argument, trailer, is arbitrary but is typically the reference to the source code
	 that is stored with every CompiledMethod."

	| primErrNode blkSize nLits literals stack method |
	self generate: trailer 
		using: aCompiledMethodClass
		ifQuick:
			[:m |
			 encoder noteBlockExtent: (0 to: 2) hasLocals: arguments.
			 m	literalAt: 2 put: encoder associationForClass;
				properties: properties.
			 ^m].
	primErrNode := self primitiveErrorVariableName ifNotNil:
						[encoder fixTemp: self primitiveErrorVariableName].
	encoder supportsClosureOpcodes ifTrue:
		[self ensureClosureAnalysisDone.
		 encoder rootNode: self. "this is for BlockNode>>sizeCodeForClosureValue:"].
	blkSize := (block sizeCodeForEvaluatedValue: encoder)
				+ (primErrNode
					ifNil: [0]
					ifNotNil:
						[primErrNode
							index: arguments size + temporaries size;
							sizeCodeForStore: encoder "The VM relies on storeIntoTemp: (129)"]).
	method := aCompiledMethodClass
				newBytes: blkSize
				trailerBytes: trailer 
				nArgs: arguments size
				nTemps: (encoder supportsClosureOpcodes
							ifTrue: [| locals |
									locals := arguments,
											  temporaries,
											  (primErrNode
												ifNil: [#()]
												ifNotNil: [{primErrNode}]).
									encoder
										noteBlockExtent: block blockExtent
										hasLocals: locals.
									locals size]
							ifFalse: [encoder maxTemp])
				nStack: 0
				nLits: (nLits := (literals := encoder allLiterals) size)
				primitive: primitive.
	nLits > 255 ifTrue:
		[^self error: 'Too many literals referenced'].
	1 to: nLits do: [:lit | method literalAt: lit put: (literals at: lit)].
	encoder streamToMethod: method.
	stack := ParseStack new init.
	primErrNode ifNotNil: [primErrNode emitCodeForStore: stack encoder: encoder].
	stack position: method numTemps.
	[block emitCodeForEvaluatedValue: stack encoder: encoder]
		on: Error "If an attempt is made to write too much code the method will be asked"
		do: [:ex|  "to grow, and the grow attempt will fail in CompiledMethod class>>#new:"
			ex signalerContext sender method = (CompiledMethod class>>#new:)
				ifTrue: [^self error: 'Compiler code size discrepancy']
				ifFalse: [ex pass]].
	stack position ~= (method numTemps + 1) ifTrue:
		[^self error: 'Compiler stack discrepancy'].
	encoder methodStreamPosition ~= (method size - trailer size) ifTrue:
		[^self error: 'Compiler code size discrepancy'].
	method needsFrameSize: stack size - method numTemps.
	method properties: properties.
	^method! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16902168!
hasLocalNamed: aName

	"See #hasLocallyArgumentOrTemporaryNamed: comment - Hernan" 

	^ encoder hasLocalNamed: aName ! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901572!
printSelectorAndArgumentsOn: aStream

	| selectorNode |
	
	selectorNode := self selectorNode.
	precedence = 1
		ifTrue:
			[selectorNode isForFFICall
				ifTrue: [selectorNode
							printAsFFICallWithArguments: arguments
							on: aStream
							indent: 0]
				ifFalse: [aStream nextPutAll: selectorNode key]]
		ifFalse:
			[selectorNode key keywords withIndexDo:
				[:kwd :i | | arg |
				arg := arguments at: i.
				i = 1 ifFalse: [ aStream space ].
				aStream nextPutAll: kwd; space; nextPutAll: arg key ]].
! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16902143!
anyParseNodeWithin: aSourceCodeInterval satisfy: aCondition

	self completeSourceRangesDo: [ :parseNode :sourceRanges |
		(aCondition value: parseNode) ifTrue: [
			(sourceRanges anySatisfy: [ :sourceRange | aSourceCodeInterval rangeIncludes: sourceRange first ])
				ifTrue: [ ^ true ] ] ].
	^ false! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541225!
withParseNodeAndBlockNodeIncluding: aPosition do: aBlock ifBlockNodeAbsent: anAbsentBlockNodeBlock ifParseNodeAbsent: anAbsentParseNodeBlock

	| nodeAndPosition blockNodeContext |

	nodeAndPosition :=self parseNodeIncluding: aPosition ifAbsent: [ ^ anAbsentParseNodeBlock value ].
	blockNodeContext := self parseBlockNodeWhenBranchIsIn: aPosition ifAbsent: [^anAbsentBlockNodeBlock value:  nodeAndPosition key].
	^aBlock value: nodeAndPosition key value: blockNodeContext .! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901105!
tempNodes

	^encoder tempNodes! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901756!
parameterDefinitionPositionAt: anIndex

	^encoder parameterDefinitionPositionFor: (arguments at: anIndex)! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901597 overrides: 16918555!
printWithClosureAnalysisOn: aStream 
	self ensureClosureAnalysisDone.
	precedence = 1
		ifTrue: 
			[(self selector includesSubString: '()/')
				ifTrue: [aStream nextPutAll: (self selector copyUpTo: $)).
						arguments
							do: [:arg| aStream nextPutAll: arg key]
							separatedBy: [aStream nextPutAll: ', '].
						aStream nextPut: $)]
				ifFalse: [aStream nextPutAll: self selector]]  "no node for method selector"
		ifFalse: 
			[self selector keywords with: arguments do: 
				[:kwd :arg | 
				aStream nextPutAll: kwd; space.
				arg printDefinitionForClosureAnalysisOn: aStream.
				aStream space]].
	comment == nil ifFalse: [
			aStream newLineTab: 1.
			 self printCommentOn: aStream indent: 1].
	temporaries size > 0 ifTrue: [
			aStream newLineTab: 1; nextPut: $|.
			temporaries do: [:temp | 
				aStream space.
				temp printDefinitionForClosureAnalysisOn: aStream].
			aStream space; nextPut: $|].
	primitive > 0 ifTrue:
		[(primitive between: 255 and: 519) ifFalse:  "Dont decompile quick prims  e.g, ^ self or ^instVar"
			[aStream newLineTab: 1.
			 self printPrimitiveOn: aStream]].
	self printPropertiesOn: aStream.
	self printPragmasOn: aStream.
	aStream newLineTab: 1.
	block printWithClosureAnalysisStatementsOn: aStream indent: 0! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901210!
encoder
	^ encoder! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901093!
removeProperty: aSymbol
	properties := properties copyWithout: (Association
											key: aSymbol
											value: (properties propertyValueAt: aSymbol))! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50541212!
variableNodeNamed: aVariableName

	|  variableNode  sourceRanges |

	variableNode:=nil.
	sourceRanges := self completeSourceRanges.
	sourceRanges associationsDo: [ :nodeAtRange |
			nodeAtRange key name = aVariableName ifTrue: [
					variableNode:= nodeAtRange key.
				]
			].

	^variableNode.
	! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901998!
noteBlockEntry: aBlock
	"Evaluate aBlock with the numbering for the block entry."
	locationCounter isNil ifTrue:
		[locationCounter := -1].
	aBlock value: locationCounter + 1.
	locationCounter := locationCounter + 2! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901769!
parseNodesPathAt: aPosition ifAbsent: aBlockClosure

	"This is to be sure that the enconder has the completeSourceRanges - Hernan"
	self completeSourceRanges.
	^ encoder
		parseNodesPathAt: aPosition
		ifAbsent: aBlockClosure! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 50506441!
topParseNodeIncluding: aPosition ifAbsent: anAbsentBlock

	^encoder topParseNodeIncluding: aPosition ifAbsent: anAbsentBlock
! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:53' prior: 16901482!
ifPrimitivePrintOn: aStream
	
	primitive > 0 ifTrue:
		[(primitive between: 255 and: 519) ifFalse:  "Dont decompile quick prims  e.g, ^ self or ^instVar"
			[aStream newLineTab: 1.
			 self printPrimitiveOn: aStream]].
! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901513!
printPragmasOn: aStream
	properties ifNil: [^self].
	properties pragmas do: [ :pragma |
		"Primitives are printed in printPrimitiveOn:; skip these"
		(Parser primitivePragmaSelectors includes: pragma keyword) ifFalse:
			[aStream newLineTab: 1.
			 pragma printOn: aStream]]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16902177!
isMultipleRanges: aRangeOrRanges

	^aRangeOrRanges isKindOf: OrderedCollection ! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16902028!
selector: symbol

	selectorOrFalse := symbol! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901233!
generate: trailer ifQuick: methodBlock
	^self generate: trailer using: CompiledMethod ifQuick: methodBlock! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901132 overrides: 50554393!
temporariesDeclaration

	^ temporariesDeclaration! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50526747 overrides: 50526742!
sendsRecursivelyToSelf

	^ self body sendsMessageToSelf: self selector! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16902127!
sourceText: stringOrText

	sourceText := stringOrText! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901986!
ensureClosureAnalysisDone
	block blockExtent ifNil:
		[temporaries := block analyseArguments: arguments temporaries: temporaries rootNode: self]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901944!
blockExtentsToTempsMap
	"Answer a Dictionary of blockExtent to temp locations for the current method.
	 This is used by the debugger to locate temp vars in contexts.  A temp map
	 entry is a pair of the temp's name and its index, where an index is either an
	 integer for a normal temp or a pair of the index of the indirect temp vector
	 containing  the temp and the index of the temp in its indirect temp vector."

	^encoder blockExtentsToTempsMap ifNil:
		[| methNode |
		methNode := encoder classEncoding parserClass new
						encoderClass: encoder class;
						parse: (sourceText
							ifNil: [self decompileString]
							ifNotNil: [sourceText asPlainString])
						class: self methodClass.
		"As a side effect generate: creates data needed for the map."
		methNode generate.
		methNode encoder blockExtentsToTempsMap]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901045!
body
	^block! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901715!
messageSendKeywordPositionsAt: anIndex of: aSelector ifAbsent: aBlock

	^encoder messageSendKeywordPositionsAt: anIndex of: aSelector ifAbsent: aBlock
	! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16902032!
selector: selOrFalse arguments: args precedence: p temporaries: temps block: blk encoder: anEncoder primitive: prim 
	"RNG: deprecated, use one of the methods that receives a temporariesDeclaration instead of the collection of temporaries"
	
	self 
		selector: selOrFalse
		arguments: args
		precedence: p
		temporaries: temps
		block: blk
		encoder: anEncoder 
		primitive: prim 
		properties: AdditionalMethodState new.! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50534842 overrides: 50534683!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons
 
	"I assume that if somebody wants the types of a method it is looking for the return types - Hernan"
	^aCompiledMethod returnTypes ! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901883!
singleCompleteSourceRangeOf: requestedParseNode
	"Returns the source range associated with the requested parse node.
	Fails if there is no source range, or if there are multiple source ranges."

	^self
		singleCompleteSourceRangeOf: requestedParseNode
		ifPresent: [ :sourceRange | sourceRange ]
		ifAbsent: [ self error: 'could not find source range for node: ' , requestedParseNode printString ]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901591!
printTemporariesOn: aStream
	
	block printTemporaries: temporaries on: aStream doPrior: [aStream newLineTab: 1].
! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16902182 overrides: 16918815!
referencesSelf

	^block referencesSelf! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901994!
locationCounter
	^locationCounter! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506409!
actualMessageSendsSelectorPositionsOfAll: compiledMethods ifAbsent: aBlock withPossibleMessageSends: shouldAddPossibleMessageSends 

	^encoder 
		actualMessageSendsSelectorPositionsOfAll: compiledMethods 
		ifAbsent: aBlock 
		withPossibleMessageSends: shouldAddPossibleMessageSends 
		using: self
! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901220!
generate: trailer 
	"The receiver is the root of a parse tree. Answer a CompiledMethod.
	 The argument, trailer, is arbitrary but is typically either the reference
	 to the source code that is stored with every CompiledMethod, or an
	 encoding of the method's temporary names."

	^self generate: trailer using: CompiledMethod! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901707!
messageSendKeywordAndParameterPositionsAt: anIndex of: aSelector ifAbsent: aClosure

	^encoder messageSendKeywordAndParameterPositionsAt: anIndex of: aSelector ifAbsent: aClosure! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50384654 overrides: 50384637!
sendsMessageToSelf: aSelector

	^ self block sendsMessageToSelf: aSelector! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506422 overrides: 50506121!
identifierPrintString

	^self selectorNode identifierPrintString .
	! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901864!
selectorKeywordsPositions

	^selectorKeywordsRanges! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16902067!
selector: selOrFalse arguments: args precedence: p temporaries: temps block: blk encoder: anEncoder primitive: prim properties: propDict selectorKeywordsRanges: range
	"RNG: deprecated, use one of the methods that receives a temporariesDeclaration instead of the collection of temporaries"
	
	selectorKeywordsRanges := range.
	
	^self selector: selOrFalse arguments: args precedence: p temporaries: temps block: blk encoder: anEncoder primitive: prim properties: propDict! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901839!
rawSourceRangesAndMethodDo: aBinaryBlock
	"Evaluate aBinaryBlock with the rawSourceRanges and method generated from the receiver."

	| methNode method |
	methNode := encoder classEncoding parserClass new
					encoderClass: encoder class;
					parse: (sourceText "If no source, use decompile string as source to map from"
							ifNil: [self decompileString]
							ifNotNil: [sourceText asPlainString])
					class: self methodClass.
	method := methNode generate.  "set bytecodes to map to"
	^aBinaryBlock
		value: methNode encoder rawSourceRanges
		value: method! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506397!
actualMessageSendLastPositionsOfAll: compiledMethods ifAbsent: absentBlock withPossibleMessageSends: shouldAddPossibleMessageSends  

	^encoder 
		actualMessageSendLastPositionsOfAll: compiledMethods 
		ifAbsent: absentBlock 
		withPossibleMessageSends: shouldAddPossibleMessageSends 
		using: self
! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16902016!
referencedValuesWithinBlockExtent: anInterval 
	^(localsPool select:
		[:temp|
		 temp isReferencedWithinBlockExtent: anInterval]) collect:
			[:temp|
			temp isRemote ifTrue: [temp remoteNode] ifFalse: [temp]]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901038 overrides: 50554445!
arguments: aCollectionOfArguments

	"For transformations etc, not used in compilation"
	arguments := aCollectionOfArguments! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901477!
classAndSelector

	^self methodClass name, '>>', self selector storeString! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901653!
addPositionTo: symbolPositions of: symbolString inside: literalArrayPosition

	| insidePosition |

	insidePosition := literalArrayPosition first.
	[ insidePosition < literalArrayPosition last ] whileTrue: [
		insidePosition := self nextPositionAfterAddPositionTo: symbolPositions of: symbolString startingAt: insidePosition ].
	! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16902174 overrides: 16918701!
isMethodNode

	^true.! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506457!
withTopParseNodeIncluding: aPosition do: aBlock ifAbsent: anAbsentBlock

	| nodeAndPosition |
	
	nodeAndPosition :=self topParseNodeIncluding: aPosition ifAbsent: [ ^ anAbsentBlock value ].

	^aBlock value: nodeAndPosition key
	! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901459!
selector 
	"Answer the message selector for the method represented by the receiver."

	(selectorOrFalse isSymbol)
		ifTrue: [^selectorOrFalse].
	^selectorOrFalse key.
! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901859!
selectorKeywordPositionAt: anIndex

	^selectorKeywordsRanges at: anIndex! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16902190!
definitionStartPosition
	
	"It does not includes temp definition because the extract can include temps - Hernan"
	^self selectorLastPosition + 1! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506369!
actualMessageSendKeywordAndParameterPositionsOfAll: compiledMethods at: aParameterIndex of: aSelector ifAbsent: absentBlock withPossibleMessageSends: shouldAddPossibleMessageSends 
	
	^encoder 
		actualMessageSendKeywordAndParameterPositionsOfAll: compiledMethods 
		at: aParameterIndex 
		of: aSelector
		ifAbsent: absentBlock 
		withPossibleMessageSends: shouldAddPossibleMessageSends 
		using: self
	
	! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901806!
positionsInLiteralArrayOf: aSymbol

	| literalArrayPositions |

	literalArrayPositions := encoder positionsOfLiteralArraysContaining: aSymbol.

	^self positionsOf: aSymbol printString containedIn: literalArrayPositions.

! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901467!
selectorNode
	"Answer a SelectorNode for the message selector of the method represented by the receiver."

	^(selectorOrFalse isMemberOf: SelectorNode)
		ifTrue: [selectorOrFalse]
		ifFalse: [SelectorNode new key: selectorOrFalse]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901450!
parserClass
	"Which parser produces this class of parse node"

	^ Parser! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901816!
positionsOf: symbolString containedIn: literalArrayPositions

	| symbolPositions |

	symbolPositions := OrderedCollection new.

	literalArrayPositions do: [ :literalArrayPosition | self addPositionTo: symbolPositions of: symbolString inside: literalArrayPosition ].

	^symbolPositions




! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16902186 overrides: 16918818!
referencesSuper

	^block referencesSuper! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901101!
statements

	^block statements.! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506384!
actualMessageSendKeywordPositionsOfAll: compiledMethods at: aKeywordIndex ifAbsent: absentBlock withPossibleMessageSends: shouldAddPossibleMessageSends

	^encoder 
		actualMessageSendKeywordPositionsOfAll: compiledMethods 
		at: aKeywordIndex 
		ifAbsent: absentBlock 
		withPossibleMessageSends: shouldAddPossibleMessageSends 
		using: self
! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16902155 overrides: 16918625!
equivalentTo: aParseNode

	^ aParseNode isMethodNode
		and: [ block equivalentTo: aParseNode block]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901678!
completeSourceRangesDo: aBinaryBlock
	"block has to receive parse node and collection of source ranges"

	^ self completeSourceRanges keysAndValuesDo: aBinaryBlock! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901723!
messageSendLastPositionsOf: aSelector ifAbsent: aBlock

	^encoder messageSendLastPositionsOf: aSelector ifAbsent: aBlock! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901555!
printPropertiesOn: aStream
	properties ifNil: [^self].
	properties propertyKeysAndValuesDo:
		[:prop :val|
		aStream newLine; tab; nextPut: $<.
		prop = #on:in:
			ifTrue:
				[prop keywords with: val do:
					[:k :v | aStream nextPutAll: k; space; nextPutAll: v; space]]
			ifFalse:
				[prop = #on
					ifTrue: [aStream nextPutAll: prop; nextPutAll:': '; nextPutAll: val] 
					ifFalse: [aStream nextPutAll: prop; nextPutAll:': '; print: val]]. 
		aStream nextPut: $>]! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901147 overrides: 50554433!
decompileString 
	"Answer a string description of the parse tree whose root is the receiver."

	^self fullPrintString
! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901933!
removeAndRenameLastTempIfErrorCode
	self primitiveErrorVariableName ifNotNil:
		[:primitiveErrorVariableName|
		 temporaries last
			name: primitiveErrorVariableName
			key: primitiveErrorVariableName
			code: temporaries last code.
		 temporaries removeLast].! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901779!
positionsForInstanceVariable: aName ifAbsent: aBlock

	^encoder positionsForInstanceVariable: aName ifAbsent: aBlock
! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901024 overrides: 16918831!
accept: aVisitor
	^aVisitor visitMethodNode: self! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16902161!
hasArgumentOrTemporaryNamed: aVariableName

	"See #hasLocallyArgumentOrTemporaryNamed: comment - Hernan" 
	
	^self tempNames includes: aVariableName! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901649!
tempNames
	^encoder tempNames! !
!MethodNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16901496!
printCommentOn: aStream
	
	comment ifNotNil: [
		aStream newLineTab: 1.
		self printCommentOn: aStream indent: 1].! !
!NewArrayNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16910790!
analyseTempsWithin: scopeBlock "<BlockNode>" rootNode: rootNode "<MethodNode>" assignmentPools: assignmentPools "<Dictionary>"
	"This is a no-op except in TempVariableNode"
	^self! !
!NewArrayNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16910799!
emitCodeForValue: stack encoder: encoder
	encoder genPushNewArray: numElements.
	stack push: 1! !
!NewArrayNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16910785 overrides: 16918831!
accept: aVisitor
	^aVisitor visitNewArrayNode: self! !
!NewArrayNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16910814!
numElements: n
	numElements := n! !
!NewArrayNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16910810!
numElements
	^numElements! !
!NewArrayNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16910805!
sizeCodeForValue: encoder
	^encoder sizePushNewArray: numElements! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918635!
isAssignmentToTemporary

	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918577!
expandRange: aSourceRange basedOn: sourceRangesOfChildNode

	| intervals |
	intervals := self consolidateAsCollection: sourceRangesOfChildNode.
	intervals withIndexDo: [ :interval :index |
		(interval first > aSourceRange first) ifTrue: [
			^ self expandRange: aSourceRange basedOnChildRange: (intervals at: index - 1 ifAbsent: [ intervals last ]) ] ].
	^ self expandRange: aSourceRange basedOnChildRange: intervals last! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506165!
typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons castingWith: aTypeCastApplier 

	^aTypeCastApplier applyTo: self with: (self typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons)! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918526 overrides: 16914834!
printOn: aStream 
	"Refer to the comment in Object|printOn:."

	aStream nextPut: ${.
	self printOn: aStream indent: 0.
	aStream nextPut: $}.! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918698!
isMessageNode
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918563!
printWithClosureAnalysisOn: aStream indent: anInteger 
	"If control gets here, avoid recursion loop."

	super printWithClosureAnalysisOn: aStream! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918539!
printOn: aStream indent: level precedence: p 
	self printOn: aStream indent: level! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506147!
nodeTypeAndIdentifierPrintString
	
	^String streamContents: [ :stream | 
		stream
			nextPutAll: self nodeTypePrintString;
			space;
			nextPutAll: self identifierPrintString ]! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918704!
isNilPseudoVariable	
	"Overridden in VariableNode."
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918632!
isAssignmentNode
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918482!
encodeSelector: selector 
	^nil! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918731!
isReturnSelf
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506127!
isNotNil
	
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918827!
currentValueIn: aContext

	^nil! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506155!
nodeTypePrintString
	
	^''! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918889!
comment: newComment 
	"self halt."

	comment := newComment! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918791!
isUnusedTemp
	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918414!
emitCodeForBranchOn: condition dist: dist pop: stack encoder: encoder
	stack pop: 1.
	dist = 0 ifTrue: [^encoder genPop].
	condition
		ifTrue: [encoder genBranchPopTrue: dist]
		ifFalse: [encoder genBranchPopFalse: dist]! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918708!
isOnlySubnodeOf: aSubtree "<ParseNode>" in: aParseTree "<ParseNode>"
	"Answer if the receiver only occurs within aSubtree of aParseTree, not in the rest of aParseTree.
	 Assumes that aSubtree is in fact a subnode of aParseTree."
	| isSubnode |
	isSubnode := false.
	aSubtree accept: (ParseNodeEnumerator
							ofBlock: [:node| node == self ifTrue: [isSubnode := true]]).
	isSubnode ifFalse:
		[^false].
	aParseTree accept: (ParseNodeEnumerator
							ofBlock: [:node| node == self ifTrue: [^false]]
							select: [:node| node ~= aSubtree]).
	^true! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918394!
pc: anInteger
	"Used by encoder source mapping."

	pc := anInteger! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918459!
sizeCodeForBlockValue: encoder
	"Answer the size for evaluating the last statement in a block"
	^self sizeCodeForValue: encoder! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50534690!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: anStorage


	^RawToLiveTypesAdapter new adapt: (self basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons).
	
	! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918645!
isBraceNode

	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918648!
isCascadeNode

	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918873!
printSingleComment: aString on: aStream indent: indent 
	"Print the comment string"
	
	aStream nextPutAll: aString! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918740!
isSelfBasicNewMessageSend
	"Overridden in  MessageNode."
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918601!
expandRanges: sourceRanges basedOn: allSourceRanges using: sourceCode

	^ (self consolidateAsCollection: sourceRanges)
		collect: [ :sourceRange | sourceRange expandToMatchExpressionOn: sourceCode ]! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918787!
isUndefTemp
	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918749!
isSelfPseudoVariable	
	"Overridden in VariableNode."
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918754!
isSpecialConstant
	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918555 overrides: 16914881!
printWithClosureAnalysisOn: aStream 
	"Refer to the comment in Object|printOn:."

	aStream nextPut: ${.
	self printWithClosureAnalysisOn: aStream indent: 0.
	aStream nextPut: $}.! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506130!
isSameAs: aParseNode

	"I had to create this message because originalReceiver is MessageNode is a copy of the receiver (I don't 
	undertand why it makes a copy but I can not change that, it is too risky) and it cascade messages I have 
	to use the originalReceiver to get the receiver of the message. So this message has to be reimplemented
	in those nodes that are the same no matter if they are a copy. See LeafNode for example - Hernan"
	^self = aParseNode ! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918642!
isBlockNode
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918809!
printsInNewLine
	"Used for pretty printing to determine whether to start a new line"

	^self isComplex! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918734!
isReturningIf
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918758!
isSuperPseudoVariable	
	"Overridden in VariableNode."
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918822!
toDoIncrement: ignored
	"Only meant for Messages or Assignments - else return nil"
	^ nil! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918766!
isTempOrArg

	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918685!
isMessage
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918860!
nextWordFrom: aStream setCharacter: aBlock

	| outStream char |
	outStream := String writeStream.
	[ (aStream peekFor: Character space) or: [ aStream peekFor: Character tab ]] whileTrue.
	[ aStream atEnd or: [
		char := aStream next.
		char isSeparator ]]
			whileFalse: [ outStream nextPut: char ].
	aBlock value: char.
	^ outStream contents! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918737!
isSelectorNode

	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50526742!
sendsRecursivelyToSelf

	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918854!
ifNilReceiver
	"assuming this object is the receiver of an ifNil:, what object is being asked about?"
	^self! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918478!
asReturnNode
	^ReturnNode new expr: self! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918533!
printOn: aStream indent: anInteger 
	"If control gets here, avoid recursion loop"

	super printOn: aStream! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918671!
isInstanceVariableNode

	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918681!
isLiteralVariableNode

	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918842!
nodesDo: aBlock
	self accept: (ParseNodeEnumerator ofBlock: aBlock)! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918544!
printSourceCode
	
	^String streamContents: [ :stream | self printOn: stream indent: 0 ] ! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918662!
isConstantNumber  "Overridden in LiteralNode"
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918773!
isTemporaryDeclaration

	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918688!
isMessage: selSymbol receiver: rcvrPred arguments: argsPred
	"See comment in MessageNode."

	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50534683!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons

	self subclassResponsibility ! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918745!
isSelfNewMessageSend
	"Overridden in  MessageNode."
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918815!
referencesSelf

	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918894!
receiverOrCascadeReceiver
	
	"To contemplate cases like: 
	a := Object
		value;
		va
	Thanks Nico Papagna.
	Heavily used by LiveTyping, please do not remove or change without testing LiveTyping - Hernan"
	
	self nodesDo: [ :aNode | (aNode isCascadeNode or: [ aNode isMessageNode]) ifTrue: [ ^aNode receiverOrCascadeReceiver ]].
	
	"If there is no message node there is nothing valid I could return, but I return self for the rest to work - Hernan"
	^self! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918879!
addComment: newComment 
	"self halt."

	comment := comment isNil
		ifTrue: [newComment]
		ifFalse: [comment, newComment]! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918513!
printCommentOn: aStream indent: indent 
	| thisComment |
	self comment == nil ifTrue: [^ self].
	1 to: self comment size do: [ :index |
		index > 1 ifTrue: [aStream newLineTab: indent].
		aStream nextPut: $".
		thisComment := self comment at: index.
		self printSingleComment: thisComment
			on: aStream
			indent: indent.
		aStream nextPut: $"]! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918549!
printWithClosureAnalysis

	^String streamContents: [:str| self printWithClosureAnalysisOn: str]! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50384637!
sendsMessageToSelf: aSelector

	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918486!
nodePrintOn: aStrm indent: nn
	| var aaStrm myLine |
	"Show just the sub nodes and the code."

	aaStrm := aStrm ifNil: [String writeStream].
	nn timesRepeat: [aaStrm tab].
	aaStrm nextPutAll: self class name; space.
	myLine := self printString withBlanksCondensed.
	myLine := myLine copyFrom: 1 to: (myLine size min: 70).
	aaStrm nextPutAll: myLine; newLine.
	1 to: self class instSize do: [:ii | 
		var := self instVarAt: ii.
		(var respondsTo: #asReturnNode) ifTrue: [var nodePrintOn: aaStrm indent: nn+1]].
	1 to: self class instSize do: [:ii | 
		var := self instVarAt: ii.
		(var isCollection and: [var isSequenceable]) ifTrue: [
			var do: [ :aNode | 
				(aNode respondsTo: #asReturnNode) ifTrue: [
					aNode nodePrintOn: aaStrm indent: nn+1]]]].
	^ aaStrm! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918570!
printWithClosureAnalysisOn: aStream indent: level precedence: p

	self printWithClosureAnalysisOn: aStream indent: level! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506121!
identifierPrintString
	
	^String streamContents: [ :stream | self printOn: stream indent: 0 ]! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918666!
isFalsePseudoVariable	
	"Overridden in VariableNode."
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918728!
isReturn

	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918797!
isVariableReference
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918675!
isJust: node
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918782!
isTruePseudoVariable	
	"Overridden in VariableNode."
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918622!
ensureCanCascade: encoder! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918431!
emitCodeForJump: dist encoder: encoder

	dist = 0 ifFalse: [encoder genJump: dist]! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918610!
assignmentCheck: encoder at: location
	"For messageNodes masquerading as variables for the debugger.
	For now we let this through - ie we allow stores ev
	into args.  Should check against numArgs, though."
	^ -1! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918466!
sizeCodeForEffect: encoder

	^(self sizeCodeForValue: encoder) + encoder sizePop! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918444!
sizeCode: encoder forBranchOn: condition dist: dist
	dist = 0 ifTrue: [^encoder sizePop].
	^condition
		ifTrue: [encoder sizeBranchPopTrue: dist]
		ifFalse: [encoder sizeBranchPopFalse: dist]! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918657!
isConstantCharacter  "Overridden in LiteralNode"
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918619!
canCascade
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918847!
consolidateAsCollection: sourceRanges

	^ sourceRanges isInterval
		ifTrue: [ OrderedCollection with: sourceRanges ]
		ifFalse: [ sourceRanges ]! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918763!
isTemp
	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918701!
isMethodNode

	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918652 overrides: 16915255!
isComplex
	"Used for pretty printing to determine whether to start a new line"

	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918886!
comment
	^comment! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918437!
emitCodeForReturn: stack encoder: encoder

	self emitCodeForValue: stack encoder: encoder.
	encoder genReturnTop! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918406!
emitCodeForBlockValue: stack encoder: encoder
	"Generate code for evaluating the last statement in a block"
	^self emitCodeForValue: stack encoder: encoder! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918639!
isBacktickNode

	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918399!
optimizedBlockHoistTempsInto: scopeBlock "<BlockNode>" 
	"This is a No-op for all nodes except non-optimized BlockNodes."
	^self! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918818!
referencesSuper

	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918625!
equivalentTo: aParseNode

	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918678!
isLiteralNode

	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918424!
emitCodeForEffect: stack encoder: encoder

	self emitCodeForValue: stack encoder: encoder.
	encoder genPop.
	stack pop: 1! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918629!
isArg
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918777!
isThisContextPseudoVariable	
	"Overridden in VariableNode."
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918805!
nowHasRef  "Ignored in all but VariableNode"! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918694!
isMessageNamed: aSelector

	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918769!
isTemporariesDeclaration

	^ false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918794!
isVariableNode
	^false! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918801!
nowHasDef  "Ignored in all but VariableNode"! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918389!
pc
	"Used by encoder source mapping."

	^pc ifNil: [ 0 ]
! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50534701!
typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons

	^self liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: (LiveTyping getGenericsStorage).! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918593!
expandRange: parentSourceRange basedOnChildRange: childSourceRange

	^ ((parentSourceRange first min: childSourceRange first) to: parentSourceRange last) asSourceCodeInterval! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918831!
accept: aVisitor
	"Accept a visitor by double-dispatching to a type-specific method on the visitor, e.g. visitBlockNode:.
	 All such implementations under ParseNode should answer the result of the dispatch, e.g.
		^aVisitor visitBlockNode: self"
	^self subclassResponsibility! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918453!
sizeCode: encoder forJump: dist

	^dist = 0 ifTrue: [0] ifFalse: [encoder sizeJump: dist]! !
!ParseNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918472!
sizeCodeForReturn: encoder

	^(self sizeCodeForValue: encoder) + encoder sizeReturnTop! !
!ParseNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918921!
popCode

	Pop ifNil: [ self initClassCachedState ].
	^ Pop! !
!ParseNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918993 overrides: 16916096!
initialize
	"
	ParseNode initialize. VariableNode initialize
	"
	self initClassCachedState! !
!ParseNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918959 overrides: 16789347!
initClassCachedState
	"
	ParseNode initialize. VariableNode initialize
	"
	LdInstType := 1.
	LdTempType := 2.
	LdLitType := 3.
	LdLitIndType := 4.
	SendType := 5.
	"Back in the day the following constants corresponded to bytecodes.
	 Now they're just unique values that need to be eliminated when and if
	 things like code:type: are cleaned up."
	CodeBases := #(0 16 32 64 208 ).
	CodeLimits := #(16 16 32 32 16 ).
	LdSelf := 112.
	LdTrue := 113.
	LdFalse := 114.
	LdNil := 115.
	LdMinus1 := 116.
	LoadLong := 128.
	LdSuper := 133.
	Pop := 135.
	LdThisContext := 137.
	EndRemote := 125.
	SendPlus := 176.
	Send := 208.
	
	"((ParseNode class >> #initialize) literals select: [:l| l isVariableBinding and: [(ParseNode classPool includesAssociation: l) and: [(self systemNavigation allCallsOn: l localTo: ParseNode) size = 1]]]) sort: [:a :b| a key <= b key]"

	"ParseNode classPool associations select: [:a| (self systemNavigation allCallsOn: a localTo: ParseNode) isEmpty]"! !
!ParseNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918999 overrides: 16789356!
releaseClassCachedState

	LdInstType := LdTempType := LdLitType := LdLitIndType := SendType := nil.
	CodeBases := CodeLimits := nil.
	LdSelf := LdTrue := LdFalse := nil.
	LdNil := LdMinus1 := LoadLong := nil.
	LdSuper := Pop := nil.
	LdThisContext := EndRemote := nil.
	SendPlus := Send := nil! !
!ParseNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918916!
blockReturnCode

	EndRemote ifNil: [ self initClassCachedState ].
	^ EndRemote! !
!ParseNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918926!
pushNilCode

	LdNil ifNil: [ self initClassCachedState ].
	^LdNil! !
!ParseNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16919011 overrides: 16787772!
new
	LdInstType ifNil: [
		ParseNode initClassCachedState.
		VariableNode initClassCachedState ].
	^super new! !
!ParseNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16918931!
tempSortBlock
	"Answer a block that can sort a set of temporaries into a stable
	 order so that different compilations produce the same results."
	^[:t1 :t2| | be1 be2 bs1 bs2 |
	   t1 index < t2 index "simple sort by index."
	   or: [t1 index = t2 index "complex tie break" 
		  and: [t1 isRemote ~= t2 isRemote
				ifTrue: [t2 isRemote] "put direct temps before indirect temps"
				ifFalse: 
					[((be1 := t1 definingScope blockExtent) isNil
					  or: [(be2 := t2 definingScope blockExtent) isNil])
						ifTrue: [t1 name < t2 name] "only have the name left to go on"
						ifFalse: "put temps from outer scopes before those from inner scopes"
							[(bs1 := be1 first) < (bs2 := be2 first)
							 or: [bs1 = bs2 and: [t1 name < t2 name]]]]]]] "only have the name left to go on"! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938652!
addRemoteTemp: aTempVariableNode encoder: encoder
	remoteTemps isNil ifTrue:
		[remoteTemps := OrderedCollection new].
	remoteTemps addLast: aTempVariableNode.
	aTempVariableNode referenceScopesAndIndicesDo:
		[:scopeBlock "<BlockNode>" :location "<Integer>"|
		 self addReadWithin: scopeBlock at: location].
	encoder supportsClosureOpcodes ifFalse:
		[encoder encodeLiteral: remoteTemps size.
		 readNode := encoder encodeSelector: #at:.
		 writeNode := encoder encodeSelector: #at:put:]! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938779!
sizeCodeForIndexOf: aTempVariableNode encoder: encoder
	self assert: encoder supportsClosureOpcodes not.
	^(encoder encodeLiteral: (remoteTemps indexOf: aTempVariableNode)) sizeCodeForValue: encoder! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938789!
sizeCodeForLoadFor: aTempVariableNode encoder: encoder
	encoder supportsClosureOpcodes ifTrue:
		[^0].
	"Need to size the first half of
		tempVector at: index put: expr
	 i.e. the push of tempVector and index."
	^(super sizeCodeForValue: encoder)
	+ (self sizeCodeForIndexOf: aTempVariableNode encoder: encoder)! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938839 overrides: 16974467!
printDefinitionForClosureAnalysisOn: aStream 
	| refs |
	aStream
		nextPut: ${;
		nextPutAll: key.
	definingScope ifNotNil: [definingScope blockExtent ifNotNil: [:be| aStream nextPutAll: ' d@'; print: be first]].
	readingScopes ifNotNil: [
		refs := Set new.
		readingScopes do: [:elems| refs addAll: elems].
		refs asSortedCollection do: [:read| aStream nextPutAll: ' r@'; print: read]].
	remoteTemps
		do: [:rt| rt printDefinitionForClosureAnalysisOn: aStream]
		separatedBy: [aStream nextPut: $,; space].
	aStream nextPut: $}! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938682!
emitCodeForLoadFor: aTempVariableNode stack: stack encoder: encoder
	encoder supportsClosureOpcodes ifTrue:
		[^self].
	"Need to generate the first half of
		tempVector at: index put: expr
	 i.e. the push of tempVector and index."
	super emitCodeForValue: stack encoder: encoder.
	self emitCodeForIndexOf: aTempVariableNode stack: stack encoder: encoder! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938802!
sizeCodeForStoreInto: aTempVariableNode encoder: encoder
	encoder supportsClosureOpcodes ifTrue:
		[^encoder sizeStoreRemoteTemp: (remoteTemps indexOf: aTempVariableNode) - 1 inVectorAt: index].
	^writeNode sizeCode: encoder args: 2 super: false! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938760 overrides: 16974378!
referenceScopesAndIndicesDo: aBinaryBlock
	self shouldNotImplement! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938740 overrides: 16974358!
isIndirectTempVector
	^true! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938766 overrides: 16974456!
scope
	"Answer scope of temporary variables.
	 Currently only the following distinctions are made:
		 0	outer level: args and user-declared temps
		 1	block args and doLimiT temps
		-1	a block temp that is no longer active
		-2	a block temp that held limit of to:do:
		-3	an indirect temp vector"
	^-3! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938863!
remoteTemps: anArray
	remoteTemps := anArray.
	anArray do: [:tempNode| tempNode remoteNode: self]! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938744!
nodeToInitialize: encoder
	^AssignmentNode new
		variable: self
		value: (encoder supportsClosureOpcodes
					ifTrue: [NewArrayNode new numElements: remoteTemps size]
					ifFalse:
						[MessageNode new
							receiver: (encoder encodeVariable: 'Array')
							selector: #new:
							arguments: (Array with: (encoder encodeLiteral: remoteTemps size))
							precedence: 3
							from: encoder])! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938859!
remoteTemps
	^remoteTemps! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938724!
emitCodeForValueOf: aTempVariableNode stack: stack encoder: encoder
	encoder supportsClosureOpcodes
		ifTrue:
			[encoder
				genPushRemoteTemp: (remoteTemps indexOf: aTempVariableNode) - 1
				inVectorAt: index.
			 stack push: 1]
		ifFalse:
			[self emitCodeForLoadFor: aTempVariableNode stack: stack encoder: encoder.
			 readNode
				emitCode: stack
				args: 1
				encoder: encoder
				super: false]! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938825!
sizeCodeForValueOf: aTempVariableNode encoder: encoder
	encoder supportsClosureOpcodes ifTrue:
		[^encoder sizePushRemoteTemp: (remoteTemps indexOf: aTempVariableNode) - 1 inVectorAt: index].
	^(self sizeCodeForValue: encoder)
	+ (self sizeCodeForIndexOf: aTempVariableNode encoder: encoder)
	+ (readNode sizeCode: encoder args: 1 super: false)! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938697!
emitCodeForStoreInto: aTempVariableNode stack: stack encoder: encoder
	encoder supportsClosureOpcodes
		ifTrue:
			[encoder
				genStoreRemoteTemp: (remoteTemps indexOf: aTempVariableNode) - 1
				inVectorAt: index]
		ifFalse:
			[writeNode
				emitCode: stack
				args: 2
				encoder: encoder
				super: false]! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938647 overrides: 16974220!
accept: aVisitor
	^aVisitor visitRemoteTempVectorNode: self! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938671!
emitCodeForIndexOf: aTempVariableNode stack: stack encoder: encoder
	self assert: encoder supportsClosureOpcodes not.
	(encoder encodeLiteral: (remoteTemps indexOf: aTempVariableNode))
		emitCodeForValue: stack encoder: encoder! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938813!
sizeCodeForStorePopInto: aTempVariableNode encoder: encoder
	encoder supportsClosureOpcodes ifTrue:
		[^encoder sizeStorePopRemoteTemp: (remoteTemps indexOf: aTempVariableNode) - 1 inVectorAt: index].
	^(self sizeCodeForStoreInto: aTempVariableNode encoder: encoder)
	+ encoder sizePop! !
!RemoteTempVectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16938710!
emitCodeForStorePopInto: aTempVariableNode stack: stack encoder: encoder
	encoder supportsClosureOpcodes
		ifTrue:
			[encoder
				genStorePopRemoteTemp: (remoteTemps indexOf: aTempVariableNode) - 1
				inVectorAt: index]
		ifFalse:
			[self emitCodeForStoreInto: aTempVariableNode stack: stack encoder: encoder.
			 encoder genPop].
	stack pop: 1! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940848 overrides: 50559674!
asReturnNode! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940882 overrides: 50559679!
printOn: aStream indent: level

	aStream nextPutAll: '^ '. "make this a preference??"
	expr printOn: aStream indent: level.
	expr printCommentOn: aStream indent: level! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940862!
emitCodeForValue: stack encoder: encoder

	expr emitCodeForReturn: stack encoder: encoder.
	pc := encoder methodStreamPosition! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50535128 overrides: 50559725!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	
	^aCompiledMethod returnTypes
! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940855 overrides: 50559926!
emitCodeForReturn: stack encoder: encoder

	expr emitCodeForReturn: stack encoder: encoder.
	pc := encoder methodStreamPosition! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940927 overrides: 50559737!
referencesSelf

	^expr referencesSelf! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940919 overrides: 50559578!
isSpecialConstant

	^expr isSpecialConstant! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940828!
analyseTempsWithin: scopeBlock "<BlockNode>" rootNode: rootNode "<MethodNode>" assignmentPools: assignmentPools "<Dictionary>"
	"Note we could do this:
		scopeBlock ~~ rootNode block ifTrue:
			[scopeBlock noteNonLocalReturn].
	 and pass up the flag in <BlockNode>>>analyseTempsWithin:rootNode:
	 which may be fast but will also give less information the debugger.
	 For now we consider clean blocks a premature optimization."
	self flag: 'consider clean blocks'.
	expr analyseTempsWithin: scopeBlock rootNode: rootNode assignmentPools: assignmentPools! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940890 overrides: 50559419!
printWithClosureAnalysisOn: aStream indent: level

	aStream nextPutAll: '^ '. "make this a preference??"
	expr printWithClosureAnalysisOn: aStream indent: level.
	expr printCommentOn: aStream indent: level! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940874!
sizeCodeForValue: encoder

	^expr sizeCodeForReturn: encoder! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940935!
expr: e 
	expr := e! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940931 overrides: 50559953!
referencesSuper

	^expr referencesSuper! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50384676 overrides: 50559787!
sendsMessageToSelf: aSelector

	^expr sendsMessageToSelf: aSelector! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940915 overrides: 50559456!
isReturnSelf
	^expr == NodeSelf! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940899 overrides: 50559957!
equivalentTo: aParseNode

	^ aParseNode isReturn and: [ expr equivalentTo: aParseNode expr ]! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940851!
code
	^expr code! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940939!
expr: e encoder: encoder sourceRange: range 
	expr := e.
	encoder noteSourceRange: range forNode: self! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506850 overrides: 50559826!
identifierPrintString
	
	^'^'! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940912 overrides: 50559837!
isReturn

	^true! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940905!
isImplicitSelfReturnIn: aMethodNode

	self isReturnSelf ifFalse: [^false]. 
	aMethodNode encoder rangeForNode: self ifAbsent: [^true].
	
	^false! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940923 overrides: 50559841!
isVariableReference
	^expr isVariableReference! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50535136 overrides: 50559527!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage
 
	^aCompiledMethod returnLiveTypes: aStorage! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940879!
expr

	^ expr.
! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940823 overrides: 50560032!
accept: aVisitor
	^aVisitor visitReturnNode: self! !
!ReturnNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16940869 overrides: 50560050!
sizeCodeForReturn: encoder

	^expr sizeCodeForReturn: encoder! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946249!
name: literal key: object index: i type: type
	"For compatibility with Encoder>>name:key:class:type:set:"
	^self key: object index: i type: type! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946212 overrides: 50554580!
emitCodeForEffect: stack encoder: encoder

	self shouldNotImplement! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946217!
emitCodeForValue: stack encoder: encoder

	self shouldNotImplement! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946222!
sizeCode: encoder args: nArgs super: supered
	self reserve: encoder.
	^supered
		ifTrue:
			[code < Send "i.e. its a special selector" ifTrue:
				[code := self code: (index := encoder sharableLitIndex: key) type: 5].
			 encoder sizeSendSuper: index numArgs: nArgs]
		ifFalse:
			[self flag: #yuck. "special selector sends cause this problem"
			 encoder
				sizeSend: (code < Send ifTrue: [code negated] ifFalse: [index])
				numArgs: nArgs]! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946271 overrides: 50559679!
printOn: aStream indent: level 
	aStream nextPutAll: (key == nil
							ifTrue: ['<key==nil>']
							ifFalse: [key])! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946305!
isPvtSelector
	"Answer if this selector node is a private message selector."

	^key isPvtSelector! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946284 overrides: 50554591!
equivalentTo: aParseNode

	^ aParseNode isSelectorNode and: [ super equivalentTo: aParseNode ]! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50384659!
isNamed: aSelectorName

	^ self key = aSelectorName! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946290!
isForFFICall
	^key includesSubString: '()/'! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506492 overrides: 50559826!
identifierPrintString
	
	^key printString ! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946256 overrides: 50554654!
key: aSelector
	"This is for printing of FFI selectors."
	key := aSelector! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946298!
isInitializePvtSelector
	"Answer whether the receiver is a private instance initialization message selector"

	^ key isInitializePvtSelector! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946261!
printAsFFICallWithArguments: aSequence on: aStream indent: level
	aStream nextPutAll: (key copyUpTo: $)).
	aSequence
		do: [:arg| arg printOn: aStream indent: level]
		separatedBy: [aStream nextPutAll: ', '].
	aStream nextPut: $)! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946277 overrides: 50559419!
printWithClosureAnalysisOn: aStream indent: level 
	aStream nextPutAll: (key == nil
							ifTrue: ['<key==nil>']
							ifFalse: [key])! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946244 overrides: 50554666!
sizeCodeForValue: encoder

	self shouldNotImplement! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946201!
emitCode: stack args: nArgs encoder: encoder super: supered
	stack pop: nArgs.
	^supered
		ifTrue:
			[encoder genSendSuper: index numArgs: nArgs]
		ifFalse:
			[encoder
				genSend: (code < Send ifTrue: [code negated] ifFalse: [index])
				numArgs: nArgs]! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946311 overrides: 50559658!
isSelectorNode

	^ true! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946294!
isInfix

	^key isInfix ! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946314 overrides: 50560032!
accept: aVisitor
	^aVisitor visitSelectorNode: self! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946185 overrides: 50554680!
reserve: encoder 
	"If this is a yet unused literal of type -code, reserve it."

	code < 0 ifTrue: [code := self code: (index := encoder sharableLitIndex: key) type: 0 - code]! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946194!
emitCode: stack args: nArgs encoder: encoder

	self emitCode: stack
		args: nArgs
		encoder: encoder
		super: false! !
!SelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16946239 overrides: 50554586!
sizeCodeForEffect: encoder

	self shouldNotImplement! !
!SpecialSelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16958503 overrides: 50560591!
sizeCode: encoder args: nArgs super: supered
	"Size a special selector send.
	 A super send of a special selector must be handled like a normal send."
	^supered
		ifTrue: [super sizeCode: encoder args: nArgs super: supered]
		ifFalse: [encoder sizeSendSpecial: code numArgs: nArgs]! !
!SpecialSelectorNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16958489 overrides: 50560686!
emitCode: stack args: nArgs encoder: encoder super: supered
	"Generate a special selector send.
	 A super send of a special selector must be handled like a normal send."
	supered
		ifTrue:
			[super emitCode: stack args: nArgs encoder: encoder super: supered]
		ifFalse:
			[stack pop: nArgs.
			 encoder genSendSpecial: code numArgs: nArgs]! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974579!
name: varName index: i type: type scope: level
	"Only used for initting temporary variables"
	hasDefs := hasRefs := false.
	scope := level.
	^super name: varName key: varName index: i type: type! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974538 overrides: 16997769!
emitCodeForValue: stack encoder: encoder
	remoteNode ~~ nil ifTrue:
		[^remoteNode emitCodeForValueOf: self stack: stack encoder: encoder].
	encoder genPushTemp: index.
	stack push: 1! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974521 overrides: 16997756!
emitCodeForStore: stack encoder: encoder
	remoteNode ~~ nil ifTrue:
		[^remoteNode emitCodeForStoreInto: self stack: stack encoder: encoder].
	encoder genStoreTemp: index! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974301 overrides: 16997702!
beingAssignedToAnalyseTempsWithin: scopeBlock "<BlockNode>" rootNode: rootNode "<MethodNode>" assignmentPools: assignmentPools "<Dictionary>"
	self addWriteWithin: scopeBlock at: rootNode locationCounter.
	"For analysis of optimized blocks also record the set of temporaries written to
	 within optimized blocks so that additional writes can be added at locations that
	 represent subsequent iterations of the loop. e.g. testInlineBlockCollectionSD1"
	assignmentPools keysAndValuesDo:
		[:outerScopeBlock :set|
		"definingScope can be nil in expr in expr ifNil: [:arg|...] expressions because
		 arg gets its definingScope set when [:arg|...] is analysed."
		outerScopeBlock actualScope
			= (definingScope
				ifNil: [scopeBlock]
				ifNotNil: [definingScope actualScope]) ifTrue:
			[set add: self]]! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50535036 overrides: 50534893!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	
	^aCompiledMethod typesOfVariableNamed: name ifAbsent: [ #() ]! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974237!
addWriteWithin: scopeBlock "<BlockNode>" at: location "<Integer>"
	writingScopes ifNil: [writingScopes := Dictionary new].
	(writingScopes at: scopeBlock ifAbsentPut: [Set new]) add: location.
	remoteNode ifNotNil:
		[remoteNode addReadWithin: scopeBlock at: location]! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974436 overrides: 50559907!
isTemp
	^ true! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974452!
remoteNode
	^remoteNode! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974428!
isMethodArg
	^#method == argType! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974378!
referenceScopesAndIndicesDo: aBinaryBlock
	"Evaluate aBinaryBlock with all read or write scopes and locations.
	 This is used to copy the reference information into RemoteTempVectorNodes"
	readingScopes ~~ nil ifTrue:
		[readingScopes keysAndValuesDo:
			[:scopeBlock "<BlockNode>" :set "<Set of <Integer>>"|
			set do: [:location| aBinaryBlock value: scopeBlock value: location]]].
	writingScopes ~~ nil ifTrue:
		[writingScopes keysAndValuesDo:
			[:scopeBlock "<BlockNode>" :set "<Set of <Integer>>"|
			set do: [:location| aBinaryBlock value: scopeBlock value: location]]]! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974444 overrides: 50559569!
isUndefTemp
	^ hasDefs not! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974358!
isIndirectTempVector
	^false! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974547 overrides: 50554610!
sizeCodeForLoad: encoder forValue: forValue
	^remoteNode
		ifNil: [0]
		ifNotNil: [remoteNode sizeCodeForLoadFor: self encoder: encoder]! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974456!
scope
	"Answer scope of temporary variables.
	 Currently only the following distinctions are made:
		 0	outer level: args and user-declared temps
		 1	block args and doLimiT temps
		-1	a block temp that is no longer active
		-2	a block temp that held limit of to:do:"
	^scope! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974529 overrides: 16997761!
emitCodeForStorePop: stack encoder: encoder
	remoteNode ~~ nil ifTrue:
		[^remoteNode emitCodeForStorePopInto: self stack: stack encoder: encoder].
	encoder genStorePopTemp: index.
	stack pop: 1! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974292 overrides: 50554631!
analyseTempsWithin: scopeBlock "<BlockNode>" rootNode: rootNode "<MethodNode>" assignmentPools: assignmentPools "<Dictionary>"
	self addReadWithin: scopeBlock at: rootNode locationCounter! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974513 overrides: 16997812!
emitCodeForLoad: stack forValue: forValue encoder: encoder
	remoteNode ~~ nil ifTrue:
		[remoteNode emitCodeForLoadFor: self stack: stack encoder: encoder]! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974344!
index: anInteger
	"For renumbering temps in the closure compiler."
	index := anInteger.
	code := self code: index type: LdTempType! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50541243!
receiverLiveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo 
	^self typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974488 overrides: 16997842!
printWithClosureAnalysisOn: aStream indent: level
	aStream nextPutAll: name.
	readingScopes ifNotNil: [
		(readingScopes
			inject: Set new
			into: [ :them :reads |
				them addAll: reads.
				them ]) asArray sort do: [ :location |
			aStream
				 space;
				 nextPut: $r;
				 nextPut: $@;
				 print: location ]].
	writingScopes ifNotNil: [
		(writingScopes
			inject: Set new
			into: [ :them :writes |
				them addAll: writes.
				them ]) asArray sort do: [ :location |
			aStream
				 space;
				 nextPut: $w;
				 nextPut: $@;
				 print: location ]].! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974333!
definingScope: scopeBlock "<BlockNode>"
	definingScope = scopeBlock ifTrue: [^ self]. "No need to bail"
	definingScope ifNotNil:
		[self error: 'temp has more than one defining scope.  This is probably a parser error'].
	definingScope := scopeBlock! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974571 overrides: 16997795!
sizeCodeForValue: encoder
	remoteNode ~~ nil ifTrue:
		[^remoteNode sizeCodeForValueOf: self encoder: encoder].
	self reserve: encoder.
	^encoder sizePushTemp: index! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974596!
scope: level
	"Note scope of temporary variables.
	Currently only the following distinctions are made:
		0	outer level: args and user-declared temps
		1	block args and doLimiT temps
		-1	a block temp that is no longer active
		-2	a block temp that held limit of to:do:"
	scope := level! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974432!
isRemote
	^remoteNode notNil! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974419!
isBlockArg
	^#block == argType! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974329!
definingScope
	^definingScope! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974423!
isDeclaredAtMethodLevel
	"For the explainer."
	^scope = 0! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974351!
isDefinedWithinBlockExtent: anInterval
	^anInterval rangeIncludes: definingScope actualScope blockExtent first! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974416 overrides: 50559973!
isArg
	^argType notNil! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506603 overrides: 50506497!
nodeTypePrintString

	^self isArg
		ifTrue: [ 'parameter' ]
		ifFalse: [ 'temporary' ]! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974592 overrides: 50559983!
nowHasRef
	hasRefs := true! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974562 overrides: 16997790!
sizeCodeForStorePop: encoder
	remoteNode ~~ nil ifTrue:
		[^remoteNode sizeCodeForStorePopInto: self encoder: encoder].
	self reserve: encoder.
	^encoder sizeStorePopTemp: index! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974448 overrides: 50559478!
isUnusedTemp
	^ hasRefs not! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974467!
printDefinitionForClosureAnalysisOn: aStream 
	| refs |
	aStream
		nextPut: ${;
		nextPutAll: key.
	definingScope ifNotNil: [definingScope blockExtent ifNotNil: [:be| aStream nextPutAll: ' d@'; print: be first]].
	readingScopes ifNotNil: [
		refs := Set new.
		readingScopes do: [:elems| refs addAll: elems].
		refs asArray sort do: [:read| aStream nextPutAll: ' r@'; print: read]].
	writingScopes ifNotNil: [
		refs := Set new.
		writingScopes do: [:elems| refs addAll: elems].
		refs asArray sort do: [:write| aStream nextPutAll: ' w@'; print: write]].
	aStream nextPut: $}! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974225!
addReadWithin: scopeBlock "<BlockNode>" at: location "<Integer>"
	readingScopes ifNil: [readingScopes := Dictionary new].
	(readingScopes at: scopeBlock ifAbsentPut: [Set new]) add: location.
	remoteNode ifNotNil:
		[remoteNode addReadWithin: scopeBlock at: location]! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974362!
isReferencedWithinBlockExtent: anInterval 
	readingScopes ~~ nil ifTrue:
		[readingScopes do:
			[:set "<Set of <Integer>>"|
			set do:
				[:location|
				 (anInterval rangeIncludes: location) ifTrue:
					[^true]]]].
	writingScopes ~~ nil ifTrue:
		[writingScopes do:
			[:set "<Set of <Integer>>"|
			set do:
				[:location|
				 (anInterval rangeIncludes: location) ifTrue:
					[^true]]]].
	^false! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974588 overrides: 50560002!
nowHasDef
	hasDefs := true! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974508!
remoteNode: aRemoteTempVectorNode
	remoteNode := aRemoteTempVectorNode! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974408!
beBlockArg
	argType := #block! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50535045 overrides: 50534969!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage 
	
	^aCompiledMethod liveTypesOfVariableNamed: name
					storingGenericsInfoIn: aStorage
					ifAbsent: [`EmptyType new`].! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974412!
beMethodArg
	argType := #method! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974439 overrides: 50559636!
isTempOrArg

	^self isTemp or: [ self isArg ]! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974399 overrides: 16997603!
assignmentCheck: encoder at: location
	^((self isBlockArg and: [(Preferences at: #allowBlockArgumentAssignment) not])
	    or: [self isMethodArg])
			ifTrue: [location]
			ifFalse: [-1]! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974220 overrides: 16997599!
accept: aVisitor
	^aVisitor visitTempVariableNode: self! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974554 overrides: 16997785!
sizeCodeForStore: encoder
	remoteNode ~~ nil ifTrue:
		[^remoteNode sizeCodeForStoreInto: self encoder: encoder].
	self reserve: encoder.
	^encoder sizeStoreTemp: index! !
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974249!
analyseClosure: rootNode "<MethodNode>"
	"Analyse whether the temporary needs to be made remote
	 or not, and answer whether it was made remote.
	 A temp cannot be local if it is written to remotely,
	 or if it is written to after it is closed-over.  An exception
	 is an inlined block argument that appears to be written
	 remotely but is actually local to a block."
	| latestWrite |
	self isBlockArg ifTrue: [^false].
	remoteNode ifNotNil: [^false]. "If already remote, don't remote a second time"
	latestWrite := 0.
	((writingScopes notNil
	 and: [writingScopes associations anySatisfy: [:assoc|
			[:blockScope :refs|
			refs do: [:write| latestWrite := write max: latestWrite].
			"A temp cannot be local if it is written to remotely."
			blockScope actualScope ~~ definingScope actualScope]
				value: assoc key value: assoc value]])
	or: [readingScopes notNil
		and: [readingScopes associations anySatisfy: [:assoc|
				[:blockScope :refs|
				 "A temp cannot be local if it is written to after it is closed-over."
				 blockScope actualScope ~~ definingScope actualScope
				 and: [refs anySatisfy: [:read| read < latestWrite]]]
					value: assoc key value: assoc value]]]) ifTrue:
		[remoteNode := definingScope addRemoteTemp: self rootNode: rootNode.
		 ^true].
	^false! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974659 overrides: 50559679!
printOn: aStream indent: anInteger

	aStream nextPut: $|; space.
	self printEachTempVarDeclarationOn: aStream.
	aStream nextPut: $|.! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974642!
initializeWithAll: aCollectionOfTempDeclarationNodes declarationWritten: aBoolean

	tempDeclarationNodes := aCollectionOfTempDeclarationNodes.
	declarationWritten := aBoolean! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974617!
allDeclaredVariableNodes

	^ tempDeclarationNodes collect: [ :tempDeclaration | tempDeclaration variableNode ]! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50535145 overrides: 50559725!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  

	^#()! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974670!
declaresAnyVariable

	^ tempDeclarationNodes notEmpty! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974705 overrides: 50559993!
isTemporariesDeclaration

	^ true! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974651!
printEachTempVarDeclarationOn: aStream

	^ tempDeclarationNodes do: [ :tempDeclarationNode |
		aStream nextPutAll: tempDeclarationNode variableName; space]! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974675!
declaresSameVariablesThan: aTemporariesDeclarationNode

	tempDeclarationNodes size ~= aTemporariesDeclarationNode temporaryDeclarationNodes size ifTrue: [ ^ false ].

	tempDeclarationNodes with: aTemporariesDeclarationNode temporaryDeclarationNodes do: [ :myTempDeclaration :otherTempDeclaration |
		(myTempDeclaration equivalentTo: otherTempDeclaration) ifFalse: [ ^ false ] ].
	^ true! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974690!
declaresVariable: aVariableNode

	^ self allDeclaredVariableNodes
		anySatisfy: [ :variableNode | variableNode isNamed: aVariableNode name ]! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974629!
temporaryDeclarationNodesDo: aBlock

	tempDeclarationNodes do: aBlock! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50535152 overrides: 50559527!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage
 
	^`EmptyType new`! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974635!
initializeWithAll: aCollectionOfTempDeclarationNodes

	tempDeclarationNodes := aCollectionOfTempDeclarationNodes! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974666!
declarationWritten

	^ declarationWritten! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974709 overrides: 50560032!
accept: aVisitor

	^ aVisitor visitTemporariesDeclarationNode: self! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974624!
temporaryDeclarationNodes

	^ tempDeclarationNodes! !
!TemporariesDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974698 overrides: 50559957!
equivalentTo: aParseNode

	^ aParseNode isTemporariesDeclaration
		and: [ self declaresSameVariablesThan: aParseNode  ]! !
!TemporariesDeclarationNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974721!
empty

	^ self withAll: #() declarationWritten: false! !
!TemporariesDeclarationNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974726!
withAll: tempDeclarationNodes

	^ self new initializeWithAll: tempDeclarationNodes declarationWritten: true! !
!TemporariesDeclarationNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974733!
withAll: tempDeclarationNodes declarationWritten: aBoolean

	^ self new initializeWithAll: tempDeclarationNodes declarationWritten: aBoolean! !
!TemporaryDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974765 overrides: 50559679!
printOn: aStream indent: anInteger

	aStream nextPut: $|; space.
	variableNode printOn: aStream indent: anInteger.
	aStream space; nextPut: $|.! !
!TemporaryDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974786!
initializeVariableNode: aVariableNode

	variableNode := aVariableNode! !
!TemporaryDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50535160 overrides: 50559725!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  

	^variableNode basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
! !
!TemporaryDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974761 overrides: 50559713!
isTemporaryDeclaration

	^ true! !
!TemporaryDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974748!
declaresVariable: aVariableNode

	^ variableNode isNamed: aVariableNode name! !
!TemporaryDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50535170 overrides: 50559527!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage
 
	^variableNode liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage
! !
!TemporaryDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974773 overrides: 50560032!
accept: aVisitor

	^ aVisitor visitTemporaryDeclarationNode: self! !
!TemporaryDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974778!
variableName

	^ self variableNode name! !
!TemporaryDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974782!
variableNode

	^ variableNode! !
!TemporaryDeclarationNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974754 overrides: 50559957!
equivalentTo: aParseNode

	^ aParseNode isTemporaryDeclaration
		and: [ self declaresVariable: aParseNode variableNode ]! !
!TemporaryDeclarationNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16974798!
of: aVariableNode

	^ self new initializeVariableNode: aVariableNode! !
!UndeclaredVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50535063 overrides: 50534969!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage
	
	^`EmptyType new`! !
!UndeclaredVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16990800!
tag: anObject
	"Tag can be whatever one wants it to be; used by Parser to tag
	  undeclared temps with the user's desired declaration level."

	tag := anObject! !
!UndeclaredVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50535057 overrides: 50534893!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: aSet 
	
	^#()! !
!UndeclaredVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16990784 overrides: 16997599!
accept: aVisitor
	^aVisitor visitUndeclaredVariableNode: self! !
!UndeclaredVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16990793!
tag
	"Tag can be whatever one wants it to be; used by Parser to tag
	  undeclared temps with the user's desired declaration level."

	^tag! !
!UndeclaredVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16990789 overrides: 16997670!
isUndeclared
	^true! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997871!
name: varName key: objRef index: i type: type
	"Only used for initting global (litInd) variables"
	^self name: varName key: objRef code: (self code: (index := i) type: type)! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997838 overrides: 50559679!
printOn: aStream indent: level 
	aStream nextPutAll: name! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997769!
emitCodeForValue: stack encoder: encoder
	stack push: 1.
	encoder
		if: code
		isSpecialLiteralForPush:
			[:specialLiteral|
			 ^encoder genPushSpecialLiteral: specialLiteral].
	(code = LdSelf or: [code = LdSuper]) ifTrue:
		[^encoder genPushReceiver].
	code = LdThisContext ifTrue:
		[^encoder genPushThisContext].
	self flag: 'probably superfluous'.
	self halt.
	^encoder genPushInstVar: index! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997756!
emitCodeForStore: stack encoder: encoder

	self shouldNotImplement! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997702!
beingAssignedToAnalyseTempsWithin: scopeBlock "<BlockNode>" rootNode: rootNode "<MethodNode>" assignmentPools: assignmentPools "<Dictionary>"
	"No-op overridden by TempVariableNode"! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50534893 overrides: 50554598!
basicTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	
	"This is other possible implementation... the problem is that self can be referenced in a method that
	is being executed in a subclass, so self in that context is the subclass no the class where the method
	is defined. 
	If I use the below implementation, the Float>>#storeOn:base: version RNG 10/12/2018 05:43:39
	passes the typecheck. If the above implementation is used, that version does not passes the type check
	because 'self infinite' returns type will be True and not Boolean.
	On the other hand, with the below implementation, if in ProtoObject I type 'self initialize ' and ask for the
	autocompleter, it will look for selectors in all subclasses of ProtoObject, while with the above implementation
	it does not.
	In a statically typed language, self would 'statically' reference only to instances of the class where the method
	is defined, in dynamically typed languages self it would be valid to send a message to self defined in a subclass
	because self could be referencing an instance of a subclass. So the behavior of self when analized statically is 
	different, although sending a message to self not defined in the method's class hierarchy is not really a good
	practice.
	This is something to continue thinking about. Maybe both strategies are valid and contextual to what we are
	doing, if typechecking or autocompete, etc - Hernan "
	
	self isSelfPseudoVariable ifTrue: [ ^{aCompiledMethod methodClass} ].
	"self isSelfPseudoVariable ifTrue: [ ^aCompiledMethod methodClass withAllSubclasses ]."
	
	self isSuperPseudoVariable ifTrue: [ 
		"If there is a message send to super in ProtoObject, the type is ProtoObject - Hernan"
		^{aCompiledMethod methodClass superclass ifNil: [ aCompiledMethod methodClass ] ifNotNil: [ :aClass | aClass ]} ].
	"self isSuperPseudoVariable ifTrue: [ ^aCompiledMethod methodClass superclass withAllSubclasses ]."
	
	self isTruePseudoVariable ifTrue: [ ^`Array with: true class` ].
	self isFalsePseudoVariable ifTrue: [ ^`Array with: false class` ].
	self isThisContextPseudoVariable ifTrue: [ ^`Array with: MethodContext` ]. 
	self isNilPseudoVariable ifTrue: [ ^`Array with: nil class` ]. 
	
	self error: 'Unsupported variable node'! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997863 overrides: 50554604!
name: string key: object code: byte
	"Only used for initting std variables, nil, true, false, self, etc."
	name := string.
	key := object.
	code := byte! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997646 overrides: 50559573!
isSelfPseudoVariable
	"Answer if this ParseNode represents the 'self' pseudo-variable."

	^ key = 'self' or: [ name = 'self'  or: [name = '{{self}}']]! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997739 overrides: 50559926!
emitCodeForReturn: stack encoder: encoder
	encoder
		if: code
		isSpecialLiteralForReturn:
			[:specialLiteral|
			"short returns"
			 encoder genReturnSpecialLiteral: specialLiteral.
			 stack push: 1 "doesnt seem right".
			 ^self].
	(self code = LdSelf or: [self code = LdSuper]) ifTrue: 
		["short returns"
		 encoder genReturnReceiver.
		 stack push: 1 "doesnt seem right".
		 ^self].
	super emitCodeForReturn: stack encoder: encoder! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997680 overrides: 50559737!
referencesSelf

	^ self isSelfPseudoVariable ! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997761!
emitCodeForStorePop: stack encoder: encoder
	self varNodeType ~= 1 ifTrue:
		[self halt].
	encoder genStorePopInstVar: index.
	stack pop: 1! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997852!
name: string
	"Change name"

	name := string! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997717!
variableGetterBlockIn: aContext

	| temps tempIndex ivars |
	(self varNodeType = 4 and: [self key isVariableBinding]) ifTrue: [
		^[self key value]
	].
	aContext ifNil: [^nil].
	self isSelfPseudoVariable ifTrue: [^[aContext receiver]].
	self varNodeType = 1 ifTrue: [
		ivars := aContext receiver class allInstVarNames.
		tempIndex := ivars indexOf: self name ifAbsent: [^nil].
		^[aContext receiver instVarAt: tempIndex]
	].
	self varNodeType = 2 ifTrue: [
		temps := aContext tempNames.
		tempIndex := temps indexOf: self name ifAbsent: [^nil].
		^[aContext tempAt: tempIndex]
	].
	^nil
! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997812 overrides: 50554617!
emitCodeForLoad: stack forValue: forValue encoder: encoder
	"Do nothing"! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997842 overrides: 50559419!
printWithClosureAnalysisOn: aStream indent: level 

	aStream nextPutAll: name! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997795 overrides: 50554666!
sizeCodeForValue: encoder
	self reserve: encoder.
	encoder
		if: code
		isSpecialLiteralForPush:
			[:specialLiteral| "i.e. the pseudo-variables nil true & false"
			 ^encoder sizePushSpecialLiteral: specialLiteral].
	(code = LdSelf or: [code = LdSuper]) ifTrue:
		[^encoder sizePushReceiver].
	code = LdThisContext ifTrue:
		[^encoder sizePushThisContext].
	self flag: 'probably superfluous'.
	self halt.
	^encoder sizePushInstVar: index! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997615!
index
	"If index is nil, this code attempts to reconstruct the index from its encoding in code."
	index ifNotNil:
		[^index].
	code < 0 ifTrue:[^nil].
	code > 256 ifTrue:
		[self assert: index = (code \\ 256).
		^code \\ 256].
	code >= (CodeBases at: self varNodeType) ifTrue:
		[self assert: index = (code - (CodeBases at: self varNodeType)).
		^code - (CodeBases at: self varNodeType)].
	self assert: index = (code - self varNodeType).
	^code - self varNodeType! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997879!
nameAndKey: aName

	name := key := aName ! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997641 overrides: 50559442!
isNilPseudoVariable
	
	^ key = 'nil' or: [name = '{{nil}}']! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997856!
name: varName index: i type: type
	"Only used for initting instVar refs"
	^self name: varName key: varName index: i type: type! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997684 overrides: 50559953!
referencesSuper

	^self isSuperPseudoVariable ! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997609 overrides: 50554591!
equivalentTo: aParseNode

	^ aParseNode isVariableNode and: [ super equivalentTo: aParseNode ]! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997710 overrides: 50559464!
currentValueIn: aContext

	aContext ifNil: [^nil].
	^((self variableGetterBlockIn: aContext) ifNil: [^nil]) value printString
	

! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997660 overrides: 50559977!
isThisContextPseudoVariable
	
	^key = 'thisContext' or: [name = '{{thisContext}}']! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997790!
sizeCodeForStorePop: encoder
	self shouldNotImplement! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997632 overrides: 50559832!
isFalsePseudoVariable
	
	^key = 'false' or: [name = '{{false}}']! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997637!
isNamed: aName

	^ self name = aName! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50506497 overrides: 50559469!
nodeTypePrintString

	^'pseudo var'! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50526766!
isPseudoVariable

	^ self isFalsePseudoVariable
		or: [ self isTruePseudoVariable
		or: [ self isSelfPseudoVariable
		or: [ self isSuperPseudoVariable
		or: [ self isThisContextPseudoVariable
		or: [ self isNilPseudoVariable ]]]]]! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997676 overrides: 50559841!
isVariableReference
	^true! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997817!
fieldOffset
	"Return temp or instVar offset for this variable"
	^index ifNil: [code < 256
					ifTrue: [code \\ 16]
					ifFalse: [code \\ 256]]! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997688!
varNodeType
	"This code attempts to reconstruct the type from its encoding in code.
		This allows one to test, for instance, (aNode type = LdInstType)."
	| type |
	code < 0 ifTrue: [^code negated].
	code >= 256 ifTrue: [^code // 256].
	type := CodeBases findFirst: [:one | code < one].
	^type = 0 ifTrue: [5] ifFalse: [type - 1]! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997673 overrides: 50559998!
isVariableNode
	^true! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997665 overrides: 50559849!
isTruePseudoVariable
	
	^ key = 'true' or: [name = '{{true}}']! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50534969 overrides: 50554672!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: anStorage
	
	self isSelfPseudoVariable ifTrue: [ ^FixedType for: aCompiledMethod methodClass ].
	
	self isSuperPseudoVariable ifTrue: [ 
		"If there is a message send to super in ProtoObject, the type is ProtoObject - Hernan"
		^(aCompiledMethod methodClass superclass ifNil: [ FixedType for: aCompiledMethod methodClass ] ifNotNil: [ :aClass | FixedType for: aClass ]) ].
	
	self isTruePseudoVariable ifTrue: [ ^`FixedType for: true class` ].
	self isFalsePseudoVariable ifTrue: [ ^`FixedType for: false class` ].
	self isThisContextPseudoVariable ifTrue: [ ^`FixedType for: MethodContext` ]. 
	self isNilPseudoVariable ifTrue: [ ^`FixedType for: nil class` ]. 
	
	self error: 'Unsupported variable node'! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997653 overrides: 50559625!
isSuperPseudoVariable
	"Answer if this ParseNode represents the 'super' pseudo-variable."

	^ key = 'super' or: [name = '{{super}}']! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50526752!
argumentNameForNewMessageSentFrom: aSender

	| argumentName |
	
	argumentName := self isPseudoVariable
		ifTrue: [ self pseudoVariableNameIn: aSender ]
		ifFalse: [ self name ].
	
	^ (aSender receiver class definesInstanceVariableNamedInHierarchy: argumentName) 
		ifTrue: [ argumentName article, argumentName capitalized ]
		ifFalse: [ argumentName ]
	! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50526776!
pseudoVariableNameIn: aContext

	(self isSelfPseudoVariable or: [ self isSuperPseudoVariable] ) ifTrue: [ ^aContext receiver argumentName ].
	(self isFalsePseudoVariable or: [ self isTruePseudoVariable]) ifTrue: [ ^ 'aBoolean' ].
	self isThisContextPseudoVariable ifTrue: [ ^ 'aMethodContext' ].
	
	^'anObject'! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997603 overrides: 50559864!
assignmentCheck: encoder at: location
	^(encoder cantStoreInto: name) ifTrue: [location] ifFalse: [-1]! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997848!
asStorableNode: encoder
	^ self! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997599 overrides: 50560032!
accept: aVisitor
	^aVisitor visitVariableNode: self! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997835 overrides: 16915326!
name
	^ name! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997785!
sizeCodeForStore: encoder
	self shouldNotImplement! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997824 overrides: 50560050!
sizeCodeForReturn: encoder
	encoder
		if: code
		isSpecialLiteralForReturn:
			[:specialLiteral|
			 ^encoder sizeReturnSpecialLiteral: specialLiteral].
	(self code = LdSelf or: [self code = LdSuper]) ifTrue:
		[^encoder sizeReturnReceiver].
	^super sizeCodeForReturn: encoder! !
!VariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997670!
isUndeclared
	^false! !
!VariableNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997889 overrides: 50560069!
initClassCachedState
	"
	VariableNode initialize. Decompiler initialize
	"
	| encoder |
	encoder := Encoder new.
	StdVariables := Dictionary new: 16.
	encoder
		fillDict: StdVariables
		with: VariableNode
		mapping: #('self' 'thisContext' 'super' 'nil' 'false' 'true' )
		to: (Array with: LdSelf with: LdThisContext with: LdSuper)
				, (Array with: LdNil with: LdFalse with: LdTrue).
	StdSelectors := Dictionary new: 64.
	encoder
		fillDict: StdSelectors
		with: SpecialSelectorNode
		mapping: ((1 to: Smalltalk specialSelectorSize) collect: 
							[:i | Smalltalk specialSelectorAt: i])
		to: (1 to: Smalltalk specialSelectorSize) asArray.
	StdLiterals := LiteralDictionary new: 16.
	encoder
		fillDict: StdLiterals
		with: LiteralNode
		mapping: #(-1 0 1 2 )
		to: (LdMinus1 to: LdMinus1 + 3).
	encoder initScopeAndLiteralTables.

	NodeNil := encoder encodeVariable: 'nil'.
	NodeTrue := encoder encodeVariable: 'true'.
	NodeFalse := encoder encodeVariable: 'false'.
	NodeSelf := encoder encodeVariable: 'self'.
	NodeThisContext := encoder encodeVariable: 'thisContext'.
	NodeSuper := encoder encodeVariable: 'super'! !
!VariableNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997927 overrides: 50560062!
initialize
	"
	VariableNode initialize
	"
	self initClassCachedState! !
!VariableNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 16997932 overrides: 50560104!
releaseClassCachedState

	StdVariables := nil.
	StdSelectors := nil.
	StdLiterals := nil.

	NodeNil := nil.
	NodeTrue := nil.
	NodeFalse := nil.
	NodeSelf := nil.
	NodeThisContext := nil.
	NodeSuper := nil ! !
!VariableNode class methodsFor: 'as yet unclassified' stamp: 'JFGO 9/26/2024 19:29:54' prior: 50384664!
named: aString 

	^ self new name: aString; yourself! !
Morphic view for MessageSet models. See category 'GUI building'.!

----QUIT----(26 September 2024 19:43:17) CuisUniversity-6169.image priorSource: 7006434!

----STARTUP---- (27 September 2024 09:20:55) as C:\Users\juli_\Tesis\TO_UPLOAD\windows64\CuisUniversity-6169.image!


----QUIT----(27 September 2024 09:43:33) CuisUniversity-6169.image priorSource: 7372663!

----STARTUP---- (27 September 2024 18:56:31) as C:\Users\juli_\Tesis\TO_UPLOAD\windows64\CuisUniversity-6169.image!

!EqualsClassTypeContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 9/27/2024 19:23:16' prior: 50546149 overrides: 50545997!
liveTypesCastingObjectFor: aParseNode in:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo

	^FixedType for: type.
	
! !
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 9/27/2024 19:23:24' prior: 50546158 overrides: 50546033!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	| originalTypes filteredLiveTypes liveType |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	(self isParseNodeClassMessageSend: aParseNode) ifTrue: [liveType := FixedType for: type class.] ifFalse:[liveType := FixedType for: type.].
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = liveType typeName].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 9/27/2024 19:24:15' prior: 50562070 overrides: 50546033!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	| originalTypes filteredLiveTypes liveType |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	(self isParseNodeClassMessageSend: aParseNode) ifTrue: [liveType := FixedType for: type.] ifFalse:[liveType := FixedType for: type.].
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = liveType typeName].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/27/2024 19:24:17'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/27/2024 19:24:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/27/2024 19:24:17'!
FAILURE!
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50562093 overrides: 50546033!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes liveType |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	(self isParseNodeClassMessageSend: aParseNode) ifTrue: [liveType := FixedType for: type class.] ifFalse:[liveType := FixedType for: type.].
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = liveType typeName].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 9/27/2024 19:25:41' prior: 50562358 overrides: 50546033!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes liveType |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	liveType := FixedType for: type.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = liveType typeName].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/27/2024 19:25:43'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/27/2024 19:25:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/27/2024 19:25:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/27/2024 19:25:44'!
FAILURE!
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 9/18/2024 18:41:33' prior: 50562381 overrides: 50546033!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes liveType |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	(self isParseNodeClassMessageSend: aParseNode) ifTrue: [liveType := FixedType for: type class.] ifFalse:[liveType := FixedType for: type.].
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = liveType typeName].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !

!testRun: #ManyMethodsTypeCheckerDragonTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test04AlertsDetectIfNone stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test05AlertsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test07ErrorsDetectIfNone stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test10WarningsDetectIfNone stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test15HasErrorsOrWarnings stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 9/27/2024 19:30:58'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/27/2024 19:30:59'!
PASSED!

----QUIT----(27 September 2024 19:47:05) CuisUniversity-6169.image priorSource: 7372871!

----STARTUP---- (30 September 2024 17:39:43) as C:\Users\juli_\Tesis\TO_UPLOAD\windows64\CuisUniversity-6169.image!


OrderedCollection isKindOf: Collection!

OrderedCollection new isKindOf: Collection!

'tes' isKindOf: Collection !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/30/2024 17:56:37'!
PASSED!
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 9/30/2024 19:20:09' prior: 50546515 overrides: 50546722!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| types |
	
	types:=OrderedCollection new.
	
	2 to: contextApplierCollection size do: [:index | | currentTypes | 
		currentTypes := self rawTypesOver: (contextApplierCollection at: index) for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		types:= self rawTypesWith: types and: currentTypes .
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 9/30/2024 19:20:13' prior: 50563286 overrides: 50546722!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| types |
	
	types:=OrderedCollection new.
	
	1 to: contextApplierCollection size do: [:index | | currentTypes | 
		currentTypes := self rawTypesOver: (contextApplierCollection at: index) for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		types:= self rawTypesWith: types and: currentTypes .
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/30/2024 19:20:41'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/30/2024 19:20:41'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/30/2024 19:20:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/30/2024 19:20:41'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/30/2024 19:20:41'!
FAILURE!
!LogicalContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 9/30/2024 19:20:51' prior: 50546478!
rawTypesWith: previousTypes and:currentTypes
		
	| types |
	(self shouldIntersect) ifTrue:[
		previousTypes ifEmpty: [^currentTypes ].
		types := previousTypes intersection: currentTypes.
	] ifFalse:[
		types := previousTypes union: currentTypes.
	].
	
	^types .! !

!testRun: #ManyMethodsTypeCheckerDragonTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test04AlertsDetectIfNone stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test05AlertsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test07ErrorsDetectIfNone stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test10WarningsDetectIfNone stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test15HasErrorsOrWarnings stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 9/30/2024 19:20:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 9/30/2024 19:20:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/30/2024 19:20:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 9/30/2024 19:20:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 9/30/2024 19:20:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 9/30/2024 19:20:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 9/30/2024 19:20:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 9/30/2024 19:20:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 9/30/2024 19:20:57'!
PASSED!
Morphic view for MessageSet models. See category 'GUI building'.!

----QUIT----(30 September 2024 20:24:47) CuisUniversity-6169.image priorSource: 7404355!

----STARTUP---- (1 October 2024 17:51:00) as C:\Users\juli_\Tesis\TO_UPLOAD\windows64\CuisUniversity-6169.image!


----QUIT----(1 October 2024 19:35:26) CuisUniversity-6169.image priorSource: 7433402!

----STARTUP---- (3 October 2024 16:38:27) as C:\Users\juli_\Tesis\TO_UPLOAD\windows64\CuisUniversity-6169.image!

!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 10/3/2024 17:27:56' prior: 50544125!
typeCastIfFalseNested

	|v1|
	v1:= OrderedCollection new.
	v1 := Date today.
	v1 := 5.
	v1 := true.
	
	v1 class = SmallInteger ifFalse: [
		v1 isCollection ifFalse: 		[
				v1 class = Date ifFalse:[
					v1 not.
				].
			].
		].! !

!testRun: #ManyMethodsTypeCheckerDragonTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test04AlertsDetectIfNone stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test05AlertsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test07ErrorsDetectIfNone stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test10WarningsDetectIfNone stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test15HasErrorsOrWarnings stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 10/3/2024 17:27:59'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 9/18/2024 18:40:01' prior: 50563959!
typeCastIfFalseNested

	|v1|
	v1:= OrderedCollection new.
	v1 := Date today.
	v1 := 5.
	v1 := true.
	
	v1 class = SmallInteger ifFalse: [
		v1 class = OrderedCollection ifFalse: 		[
				v1 class = Date ifFalse:[
					v1 not.
				].
			].
		].! !

----QUIT----(3 October 2024 17:49:11) CuisUniversity-6169.image priorSource: 7433607!

----STARTUP---- (4 October 2024 19:16:39) as C:\Users\juli_\Tesis\TO_UPLOAD\windows64\CuisUniversity-6169.image!


!testRun: #ManyMethodsTypeCheckerDragonTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test04AlertsDetectIfNone stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test05AlertsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test07ErrorsDetectIfNone stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test10WarningsDetectIfNone stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test15HasErrorsOrWarnings stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 10/4/2024 19:16:48'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 10/4/2024 19:16:49'!
PASSED!

!testRun: #ActualImplementorsTest #test01WhenIsImplementedOnlyInRootReturnsThatImplementorOnly stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualImplementorsTest #test02ReturnsImplementorsOfSuperclasses stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualImplementorsTest #test03IfNotImplementedInRootOrSuperclassesDoesNotIncludeSubclassesImplementations stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualImplementorsTest #test04IncludesSubclassesImplementations stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualImplementorsTest #test05DoesNotIncludeImplementorsOfSubclassesNotDefinedInSuperclass stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualImplementorsTest #test06DoesNotIncludeImplementorsOfSiblingsWhenNotDefinedInSuperclass stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualImplementorsTest #test07ReturnsAllSubclassesImplementorsOfTheHighestImplementorClass stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualImplementorsTest #test08highestClassImplementingSelectorReturnsHighgestClass stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualImplementorsTest #test09WhenNoHighestClassImplementingSelectorIfNoneBlockIsEvaluated stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test01SurelyRecognizeTypeSenderWhenSentToInstanceVariable stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test02SurelyRecognizeTypeSenderWhenSentToTemporaryVariable stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test03SurelyRecognizeTypeSenderInACollaboration stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test04RecognizeTypeSendersToInstancesOfSubClasses stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test05RecognizeTypeSendersToLiteralTrue stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test06RecognizeTypeSendersToLiteralFalse stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test07RecognizeTypeSendersToThisContext stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test08RecognizeTypeSendersToSelf stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test09RecognizeTypeSendersToSuper stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test09_01 stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test10RecognizeTypeSendersToSelfOfMessageImplementedInSuperclass stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test11RecognizeTypeSendersToReturnsOfMessageSend stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test12RecognizeTypeSendersOfChainedMessageSends stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test13RecognizeTypeSendersToReturnOfMessageSendNoMatterThePrecedence stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test14RecognizeTypeSendersToClasses stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test15RecognizeTypeSendersToVariablesReferencingClasses stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test16RecognizeTypeSendersToAnyLiteral stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test17CanRecognizePossibleTypeSenders stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test18RecognizeTypeSendersWhenReturnTypeIsSelfType stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test19RecognizeTypeSendersWhenReturnTypeIsClassType stamp: 'JFGO 10/4/2024 19:16:53'!
PASSED!

!testRun: #ActualSendersTest #test20SurelySendWhenReceiverTypeIsSuperclassOfImplementorType stamp: 'JFGO 10/4/2024 19:16:54'!
PASSED!

!testRun: #ActualSendersTest #test21ActualSendersWorksWithCascadeMessageSends stamp: 'JFGO 10/4/2024 19:16:54'!
PASSED!

!testRun: #ActualSendersTest #test22ActualSendersDoesNotHangWhenReceiverIsTempVarInMethodWithoutTypes stamp: 'JFGO 10/4/2024 19:16:54'!
PASSED!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:54'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:54'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:54'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:54' prior: 50564870!
m3 | x | self m1: 1. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:16:54'!
m1!

!testRun: #AddParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 10/4/2024 19:16:54'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:16:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:54'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:54'!
m3 | x | self m1: 1 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:54'!
m1: p1 m2: p2 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:54' prior: 50564911!
m3 | x | self m1: 1 m2: 2 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'JFGO 10/4/2024 19:16:54'!
m1: p1 m3: p3!

!testRun: #AddParameterWithActualScopeTest #test01_01_DoesNotChangePossibleMessageSendWhenInstructedToDoSoWithKeywordMessages stamp: 'JFGO 10/4/2024 19:16:54'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:16:55'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:55'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:55'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:55'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:55'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:55'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #AddParameterWithActualScopeTest #test02CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:16:55'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:16:55'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:16:55'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:55'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:55'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:55'!
m1: p1 m3: p3! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:55'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:55'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1 m3: 3! !

!testRun: #AddParameterWithActualScopeTest #test02_01_CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsForKeywordMessage stamp: 'JFGO 10/4/2024 19:16:55'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:16:56'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:16:56'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:56'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:56'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:56'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:56'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:56'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:56' prior: 50565061!
m3 | x | x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:16:56'!
m1!

!testRun: #AddParameterWithActualScopeTest #test03AddParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 10/4/2024 19:16:56'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:16:56'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:16:57'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:57'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:57'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:57'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:57'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:57'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:57'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:57'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:57' prior: 50565120!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:16:57'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:16:57'!
m1!

!testRun: #AddParameterWithActualScopeTest #test04AddParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 10/4/2024 19:16:57'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:16:57'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:16:57'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:57'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:57'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:57'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:57'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:57'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:57'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:57'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:57' prior: 50565184!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:16:57'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:16:57'!
m1!

!testRun: #AddParameterWithActualScopeTest #test05AddParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 10/4/2024 19:16:57'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:16:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:16:58'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:58'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:58'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:58'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:58'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:58'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:58'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:58' prior: 50565249!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:16:58'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:16:58'!
m1!

!testRun: #AddParameterWithActualScopeTest #test06AddParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 10/4/2024 19:16:58'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:16:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:16:58'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:58'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:58'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:58'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:59' prior: 50565303!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:16:59'!
m1!

!testRun: #AddParameterWithActualScopeTest #test07AddParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 10/4/2024 19:16:59'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:16:59'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:59'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:16:59'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:59'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:59'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:59'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:16:59' prior: 50565351!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:16:59'!
m1!

!testRun: #AddParameterWithActualScopeTest #test08AddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 10/4/2024 19:16:59'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:16:59'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:00'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:00'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:00'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:00'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:00'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:00'!
m3 self m1. ClassOfSender new m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:00'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:00' prior: 50565411!
m3 self m1: 1. ClassOfSender new m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:17:00'!
m1!

!testRun: #AddParameterWithActualScopeTest #test09AddParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 10/4/2024 19:17:00'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:17:00'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:00'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:00'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:00'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:00'!
m3 |x| self m1. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:00'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:00' prior: 50565457!
m3 |x| self m1: 1. x m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:17:00'!
m1!

!testRun: #AddParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenAddingParameterToMethodWithSureAndPossibleSenders stamp: 'JFGO 10/4/2024 19:17:00'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:17:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:01'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:01'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:01'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:01'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #AddParameterWithActualScopeTest #test11CanNotAddParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:17:01'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:17:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:01'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 10/4/2024 19:17:01'!
PASSED!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:02'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:02'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:02'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:02'!
m3 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:02'!
m1: p1 m2: p2 ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:02' prior: 50565559!
m3 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'JFGO 10/4/2024 19:17:02'!
m1: p1!

!testRun: #AddParameterWithActualScopeTest #test13AddLastParameterCorrectly stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:02'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:17:02'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AdditionalMethodStateTest #test01topBlockTempsMapReturnsTheTempsMapOfTheMethod stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #AdditionalMethodStateTest #test02MethodWithNoParametersNoTemporariesAreInitializedCorrectly stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #AdditionalMethodStateTest #test03MethodWithOnlyOneArgumentAreInitializedCorrectly stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #AdditionalMethodStateTest #test04rawTypesOfInvalidVariableNameEvaluatesIfAbsentBlock stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #AdditionalMethodStateTest #test05MethodWithOnlyOneTempTwoArgumentsAreInitializedCorrectly stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #AdditionalMethodStateTest #test06MethodWithRemoveVectorVariablesAreInitializedCorrectly stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #AdditionalMethodStateTest #test07RemoteVectorRawTypesIsNilWhenMethodHasNoVariableInRemoteVector stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #AdditionalMethodStateTest #test08VariableRawTypesIsNilWhenMethodHasNoVariableButHasInRemoteVector stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #AdditionalMethodStateTest #test09CanGetRawTypesWhenMethodHasNoVariableButHasInRemoteVector stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #ClosureVariablesTest #testOneArrayForTypesIsCreatedWhenAMethodHasNoClosures stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #DynamicTypesTest #test01TypeConvertionForAClassReturnsSameClass stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #DynamicTypesTest #test02TypeConvertionForSelfTypeReturnsReceiversType stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #DynamicTypesTest #test03TypeConvertionForClassTypeReturnsReceiversTypeClass stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #DynamicTypesTest #test04ClassMessageSendChainsClassType stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #DynamicTypesTest #test05TypeConvertionForInstanceTypeReturnsMetaclassSoleInstance stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #DynamicTypesTest #test06newTypeIsMetaclassSoleInstance stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #DynamicTypesTest #test07InstanceTypeReturnsClassWhenIsKindOfOfBehaviorButNotMeta stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #DynamicTypesTest #test08InstanceTypeErrorsWhenUsedWithNoBehavior stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #DynamicTypesTest #test09ClassTypeForMetamodelIsMetaclass stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test01TypeCollectionOfInstanceVariableDefinedInLeafClassDoesNotTraverseHierarchy stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test02TypeCollectionIncludesSubclasses stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test03TypeCollectionDoesNotIncludeSuperclassesAndSiblings stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test05TypeCollectionIncludesAllSubclasses stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test06IsNotMegamorphicIfTypesSizeIsLessToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test07IsMegamorphicIfTypesSizeIsEqualToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test08IsNotMegamorphicIfDoesNotFillRawTypesForLocalTypeInfo stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test09IsMegamorphicIfFillsRawTypesOfDefiningClassForLocalTypeInfo stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test10IsMegamorphicIfFillsRawTypesOfNotDefiningClassForLocalTypeInfo stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test11IsTypesEmptyOfNonLocalTypeInfoTakesCareOfHierarchy stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test12IsTypesEmptyForLocalTypeInfoOnlyCheckOnLocalRawTypes stamp: 'JFGO 10/4/2024 19:17:02'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:17:02'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:17:03'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #InstanceVariableTypeInfoTest #test13RemovingAClassRemovesItAndItsClassFromInstanceVariableRawTypes stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test14InstVarAtPutKeepTypeInfo stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test01InstanceVariablesTypesIsInitializedWithAnArrayOfClassInstSize stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test02InitializeInstanceVariablesTypesWithAllInstancesStoreCurrentClassInstancesTypes stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test03TypesOfDifferentInstVarsAreStoredCorrectly stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test04MoreThanOneTypeAreStoredCorrectlyInDifferentInstVars stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test05TypesAreStoredUpToInstVarTypesSize stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test06NoTypesAreStoredWhenInstVarTypesIsNil stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test07CommonSupertypeOfReturnsSupertypeOfStoredTypes stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test08CommonSupertypeIfNoTypesEvaluatesAlternativeBlockWhenNoTypeHasBeenStore stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test09EvaluatesIfAbsentBlockWhenAskTypeInfoForNonExistingInstVar stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test01KeepTypesOfLocalTemporariesI stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test02KeepTypesOfRemoteTemporaries stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test03KeepTypesOfParameters stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test04KeepReturnTopTypes stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test05KeepReturnConstantTypes stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test06KeepReturnReceiverTypes stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test07KeepReturnFromClosureTypes stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test08KeepReturnTypeWhenUnwind stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test09BlockReturnDoesNotAffectMethodReturn stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test10KeepTypesOfParametersWhenSendingValueWithArguments stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test11BlockWithParametersDoNotAffectMethodParameters stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'JFGO 10/4/2024 19:17:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'JFGO 10/4/2024 19:17:04'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables_WithSelectorsOfInstVarTypes stamp: 'JFGO 10/4/2024 19:17:04'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:17:04'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:17:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsOfTempVarTypes stamp: 'JFGO 10/4/2024 19:17:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:17:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:17:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:17:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 10/4/2024 19:17:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'JFGO 10/4/2024 19:17:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 10/4/2024 19:17:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'JFGO 10/4/2024 19:17:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'JFGO 10/4/2024 19:17:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'JFGO 10/4/2024 19:17:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'JFGO 10/4/2024 19:17:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'JFGO 10/4/2024 19:17:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'JFGO 10/4/2024 19:17:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test045_AutocompletesEntriesFor_patternUnary_containsExactlyTwoMethods stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test046_AutocompletesEntriesFor_patternUnary_notContainsAnyMethod stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test047_AutocompletesEntriesFor_patternUnary_doesNotAutocompleteMethodOfSameClass stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test048_AutocompletesEntriesFor_patternKeyword_containsExactlyOneMethod stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test049_AutocompletesEntriesFor_patternKeyword_notContainsAnyMethod stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test050_AutocompletesEntriesFor_patternKeyword_doesNotAutocompleteMethodOfSameClass stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test051_AutocompletesEntriesFor_patternBinary_containsExactlyOneMethod stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test052_AutocompletesEntriesFor_patternBinary_notContainsAnyMethod stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test053_AutocompletesEntriesFor_patternBinary_doestNotAutocompleteMethodOfSameClass stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #testMessages stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ArrayWithArrayAndOtherObjects stamp: 'JFGO 10/4/2024 19:17:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArray stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayOfArray stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayWithManyElements stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBinaryInParenthesis stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlock stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfBlock stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfEvaluatedBlock stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndExpresionInParenthesis stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndLiteralArray stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndMoreThanOneUnaryAfterExpresionInParenthesis stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBlock stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBrace stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterCharacter stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterLiteralArray stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterStringSymbol stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterSymbol stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUnaryInProtoObject stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterParenthesis stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterUnary stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteMessageAfterUnary stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryInParenthesis stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithMoreThanOneUnary stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithOneUnary stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ClosedAndUnclosedParenthesis stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionInManyParenthesis stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionWithMoreThanOneParenthesis stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_LFBeforeParenthesis stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_SpaceBeforeParenthesis stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnaryAfterExpresionInParenthesis stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedArrayAfterClosedArray stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedBlockAfterBlock stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedDoubleParenthesis stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_selfInProtoObject stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_ExpresionInParenthesis stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_MoreThanOneUnaryMessage stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_OnlyRightParenthesis stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test01CanSignalItWithAMethod stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test02IsResumable stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:17:08'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:17:08'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test01RemovingAClassRemovesItFromMethodVariableRawTypesForParameter stamp: 'JFGO 10/4/2024 19:17:08'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:17:08'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:17:09'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test02RemovingAClassRemovesItsClassFromMethodVariableRawTypesForParameter stamp: 'JFGO 10/4/2024 19:17:09'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:17:09'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:17:09'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test03RemovingAClassRemovesItFromMethodVariablesRawTypes stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:17:10'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:17:10'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test04RemovingAClassRemovesItFromMethodVariableRemoteVectorRawTypes stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!testRun: #NotImplementedMethodTest #test01ActualSendersIsEmpty stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!testRun: #NotImplementedMethodTest #test02CategoryIsNil stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!testRun: #NotImplementedMethodTest #test03CompiledMethodSignalsError stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!testRun: #NotImplementedMethodTest #test04CompiledMethodIfAbsentEvaluatesIfAbsentBlock stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!testRun: #NotImplementedMethodTest #test05doesOnlySurelySendReturnsFalse stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!testRun: #NotImplementedMethodTest #test06dynamicTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!testRun: #NotImplementedMethodTest #test07IsNotValid stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!testRun: #NotImplementedMethodTest #test08liveTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!testRun: #NotImplementedMethodTest #test09rangesOASentSelectorWhenSendToReceiverTypesIsEmpty stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!testRun: #NotImplementedMethodTest #test10FailsWhenAsItsSourceCode stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!testRun: #NotImplementedMethodTest #test11StringVersionStartsWithNotImplemented stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!testRun: #PossibleSenderTest #test01StringVersionBeginsWithPossible stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:10'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:10'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:10'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:10'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:10' prior: 50566422!
m3 | x | self m1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:17:10'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 10/4/2024 19:17:10'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:17:11'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:11'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:11'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:11'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:11'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:11'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!testRun: #RemoveParameterWithActualScopeTest #test02CanNotRemoveParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:17:11'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:17:12'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:12'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:12'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:12'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:12'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:12'!
m3 | x | x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:12'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:12' prior: 50566521!
m3 | x | x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:17:12'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test03RemovesParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 10/4/2024 19:17:12'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:12'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:17:13'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:13'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:13'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:13'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:13'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:13'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:13'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:13'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:13' prior: 50566582!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:17:13'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 10/4/2024 19:17:13'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test04RemovesParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 10/4/2024 19:17:13'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:17:14'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:14'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:14'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:14'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:14'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:14'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:14'!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:14'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:14'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:14' prior: 50566648!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:17:14'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 10/4/2024 19:17:14'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test05RemovesParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 10/4/2024 19:17:14'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:17:15'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:15'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:15'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:15'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:15'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:15'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:15'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:15'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:15'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:15' prior: 50566715!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:17:15'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 10/4/2024 19:17:16'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test06RemovesParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 10/4/2024 19:17:16'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:17:16'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:17'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:17'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:17'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:17'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:17'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:17' prior: 50566772!
m3 | x | self m1. false ifTrue: [ x m1]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:17:17'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test07RemovesParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 10/4/2024 19:17:17'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:17:18'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:18'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:18'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:18'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:18'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:18'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:18' prior: 50566822!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 10/4/2024 19:17:18'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test08RemovesParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 10/4/2024 19:17:18'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:17:19'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:19'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:19'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:19'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:19'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:19'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:19'!
m3 self m1: 1. ClassOfSender new m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:19'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:19' prior: 50566884!
m3 self m1. ClassOfSender new m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:17:19'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test09RemovesParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 10/4/2024 19:17:19'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:17:20'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:20'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:20'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:20'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:20'!
m3 |x| self m1: 1. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:20'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:20' prior: 50566933!
m3 |x| self m1. x m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:17:20'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRemovingParameterToMethodWithSureAndPossibleSenders stamp: 'JFGO 10/4/2024 19:17:20'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:17:21'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:21'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:21'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:21'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:21'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:21'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1; printString! !

!testRun: #RemoveParameterWithActualScopeTest #test11CanNotRemoveParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:17:21'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:17:22'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:22'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 10/4/2024 19:17:22'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:23'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:23'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:23'!
m1: p1 m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:23'!
m3 self m1: 1 m2: 2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:23'!
m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:23' prior: 50567037!
m3 self m2: 2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'JFGO 10/4/2024 19:17:23'!
m1: p1 m2: p2!

!testRun: #RemoveParameterWithActualScopeTest #test13RemovesOtherThanLastParameterCorrectly stamp: 'JFGO 10/4/2024 19:17:23'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:24'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:17:24'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:24'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:24'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:24'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:24' prior: 50567084!
m3 | x | self m2. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:17:24'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test01DoesNotRenamesPossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 10/4/2024 19:17:24'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:17:25'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:25'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:25'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:25'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:25'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:25'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #RenameSelectorWithActualScopeTest #test02CanNotRenameWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:17:25'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:17:26'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:27'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:27'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:27'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:27'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:27'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:27' prior: 50567183!
m3 | x | x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:17:27'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test03RenamesWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 10/4/2024 19:17:27'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:28'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:17:28'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:28'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:28'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:28'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:28'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:28'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:28'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:28'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:28' prior: 50567243!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:17:28'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:17:28'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test04RenamesWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 10/4/2024 19:17:28'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:17:29'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:29'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:29'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:29'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:29'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:29'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:29'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:29'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:29'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:29' prior: 50567309!
m3 | x y | x := self. y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:17:29'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:17:29'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test05RenamesDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 10/4/2024 19:17:29'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:17:30'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:31'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:31'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:31'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:31'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:31'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:31'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:31'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:31'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:31' prior: 50567375!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:17:31'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:17:31'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test06RenamesDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 10/4/2024 19:17:31'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:17:32'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:32'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:32'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:32'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:32'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:32'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:32' prior: 50567430!
m3 | x | self m2. false ifTrue: [ x m2 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:17:32'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test07RenamePossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 10/4/2024 19:17:32'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:17:33'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:33'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:33'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:33'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:33'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:33'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:33' prior: 50567479!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:17:33'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test08RenamesWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 10/4/2024 19:17:33'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:17:34'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:34'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:34'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:34'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:34'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:34'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:34'!
m3 self m1. ClassOfSender new m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:34'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:34' prior: 50567540!
m3 self m2. ClassOfSender new m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:17:34'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test09RenamesOnlyValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 10/4/2024 19:17:34'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:17:35'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:36'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:36'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:36'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:36'!
m3 |x| self m1. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:36'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:36' prior: 50567587!
m3 |x| self m2. x m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:17:36'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRenamingAMethodWithSureAndPossibleSenders stamp: 'JFGO 10/4/2024 19:17:36'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:17:37'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:37'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:17:37'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:37'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:37'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:17:37'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #RenameSelectorWithActualScopeTest #test11CanNotRenameWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:17:37'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:17:38'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:17:38'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 10/4/2024 19:17:38'!
PASSED!

!testRun: #ReturnTypeInfoTest #test01QuickReturnSelfMethodsReturnSelfTypeAsReturnType stamp: 'JFGO 10/4/2024 19:17:39'!
PASSED!

!testRun: #ReturnTypeInfoTest #test02QuickReturnTrueMethodsReturnTrueReturnType stamp: 'JFGO 10/4/2024 19:17:39'!
PASSED!

!testRun: #ReturnTypeInfoTest #test03QuickReturnFalseMethodsReturnFalseAsReturnType stamp: 'JFGO 10/4/2024 19:17:39'!
PASSED!

!testRun: #ReturnTypeInfoTest #test04QuickReturnNilMethodsReturnUndefinedObjectAsReturnType stamp: 'JFGO 10/4/2024 19:17:39'!
PASSED!

!testRun: #ReturnTypeInfoTest #test05QuickReturnMinusOneMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 10/4/2024 19:17:39'!
PASSED!

!testRun: #ReturnTypeInfoTest #test06QuickReturnZeroMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 10/4/2024 19:17:39'!
PASSED!

!testRun: #ReturnTypeInfoTest #test07QuickReturnOneMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 10/4/2024 19:17:39'!
PASSED!

!testRun: #ReturnTypeInfoTest #test08QuickReturnTwoMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 10/4/2024 19:17:39'!
PASSED!

!testRun: #ReturnTypeInfoTest #test09QuickReturnOfFirstInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'JFGO 10/4/2024 19:17:39'!
PASSED!

!testRun: #ReturnTypeInfoTest #test10QuickReturnOfSecondInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'JFGO 10/4/2024 19:17:39'!
PASSED!

!testRun: #ReturnTypeInfoTest #test11classMethodReturnsClassTypeAsReturnType stamp: 'JFGO 10/4/2024 19:17:39'!
PASSED!

!testRun: #ReturnTypeInfoTest #test12newMethodReturnsInstanceTypeAsReturnType stamp: 'JFGO 10/4/2024 19:17:39'!
PASSED!

!testRun: #ReturnTypeInfoTest #test13yourselfMethodReturnsSelfTypeAsReturnType stamp: 'JFGO 10/4/2024 19:17:39'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:17:39'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:17:39'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #ReturnTypeInfoTest #test14RemovingAClassRemovesItAndItsClassFromMethodReturnType stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #ReturnTypeInfoTest #test15ReturnTypesOfAbstractMethodsIncludesSubclassesImplementationsTypes stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #ReturnTypeInfoTest #test16ReturnTypesOfAbstractMethodWorksWhenNotImplementedInAllSubclasses stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test01IsEmptyWhenAllTypesAreNil stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test02StoresAddedTypes stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test03StoresSameTypeOnce stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test04StoresMoreThanOneTypeCorrectly stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test05DoesNotStoreTypesWhenContainerIsNil stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test06CommonSupertypeOfSiblingsClassesReturnsRightSuperclass stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test07CommonSupertypeOnSameHierarchyIsMostTopClass stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test08CommonSupertypeOnSameHierarchyIsNotAffectedByAddingOrder stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test09ObjectIsCommonSupertypeWhenClassesAreNotSiblings stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test10ProtoObjectIsCommonSupertypeWhenThereAreNoTypesStored stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test11ProtoObjectIsCommonSupertypeWhenCointainerIsNil stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test12CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenIsEmpty stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test13CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenContainerIsNil stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test14UndefinedObjectIsNotConsideredWhenLookingForCommonSupertype stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test15StoresTypesIsTrueWhenContainerIsNotNil stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test16StoresTypesIsFalseWhenContainerIsNil stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test17IsMegamorphicWhenContainerIsFull stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test18IsNotMegamorphicWhenContainerIsNotFull stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test19CommonSelectorsPreviousToSameOnlyTypeIsEmpty stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test20CommonSelectorsPreviousToSuperclassOfOnlyAddedTypeAreAddedTypeSelectors stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test21CommonSelectorsPreviousToSuperclassSuperclassOfOnlyAddedTypeAreAddedTypeUpToSuperclassSelectors stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test22CommonSelectorsPreviousToInvalidSuperclassRaisesError stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test23CommonSelectorsPreviousToSuperclassOfSiblingTypesAreSiblingsCommonSelectors stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test24CommonSelectorsPreviousToOnSameHierarchyReturnsCommonSuperclassesSelectors stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test25CommonSelectorsPreviousToAddedSSupertypeOnSameHierarchyIsEmpty stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test26CommonSelectorsPreviousToWhenNotStoringTypesIsEmpty stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test27CommonSelectorsPreviousToIfInvalidSupertypeEvaluatesInvalidBlock stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test28CommonSelectorsPreviousToIfInvalidSupertypeWithManyTypesEvaluatesInvalidBlock stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test29CommonSelectosGoesUpToIncludingProtoObject stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test30CommonSupertypeIfGenericEvaluatesIfGenericBlockForObject stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test31CommonSupertypeIfGenericEvaluatesIfGenericBlockForProtoObject stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test32WithCommonSupertypeDoIfGenericEvaluatesDoBlockWhenNoGenericSupertype stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test33WithCommonSupertypeDoIfGenericEvaluatesGenericBlockWhenGenericSupertype stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test34AddingATypeWhenNoMoreSpaceEvaluatesIsFullBlock stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test35TypeIsNotMoreInTypesWhenRemoved stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test36RemovingTypeWhenTypesIsEmptyEvaluatesIfAbsent stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test37RemovingNotIncludedTypeEvaluatesIfAbsent stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test38RemovingLastAddedTypeWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test39RemoveTypeSignalExceptionWhenTypeNotFound stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #VariableTypeInfoTest #test40TypesDoEvaluatesBlockOnEachType stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 10/4/2024 19:17:40'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 10/4/2024 19:17:43'!
ERROR!

!testRun: #ManyMethodsTypeCheckerTest #test04ProblemsDetectIfNone stamp: 'JFGO 10/4/2024 19:17:43'!
ERROR!

!testRun: #ManyMethodsTypeCheckerTest #test05ProblemsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 10/4/2024 19:17:43'!
ERROR!

!testRun: #ManyMethodsTypeCheckerTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test07ErrorsDetectIfNone stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 10/4/2024 19:17:43'!
ERROR!

!testRun: #ManyMethodsTypeCheckerTest #test10WarningsDetectIfNone stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test15HasErrorsOrWarnings stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test01MethodNotAnnotatingTypesGeneratesWarning stamp: 'JFGO 10/4/2024 19:17:43'!
ERROR!

!testRun: #MethodTypeCheckerTest #test02EmptyMethodDoesNotGenerateWarningsOrErrors stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test03MessageSendNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 10/4/2024 19:17:43'!
ERROR!

!testRun: #MethodTypeCheckerTest #test04MessageUnderstooodByReceiverDoesNotGenerateErrors stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test05ErrorsWhenNoTypeImplementMessageSent stamp: 'JFGO 10/4/2024 19:17:43'!
ERROR!

!testRun: #MethodTypeCheckerTest #test06DifferentErrorsAreReported stamp: 'JFGO 10/4/2024 19:17:43'!
ERROR!

!testRun: #MethodTypeCheckerTest #test07ReceiverWithoutTypesGeneratesWarning stamp: 'JFGO 10/4/2024 19:17:43'!
ERROR!

!testRun: #MethodTypeCheckerTest #test08GivesAWarningWhenReceiversTypeHasAnError stamp: 'JFGO 10/4/2024 19:17:43'!
ERROR!

!testRun: #MethodTypeCheckerTest #test09WhenMethodHasNoReturnTypesAProblemIsAdded stamp: 'JFGO 10/4/2024 19:17:43'!
ERROR!

!testRun: #MethodTypeCheckerTest #test10PrimitiveMethodsAreNotTypedChecked stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test11IfNotNilFiltersUndefinedObjectType stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test12IfNotNilDoesNotFiltersUndefinedObjectTypeForNotCheckedObject stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test13ComparingForNilWithIfTrueIfFalse stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test14ComparingForNilWithIfTrueIfFalseWhenNilFiltersOtherTypes stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test15ComparingForNilWithIfTrueIfFalseWhenNilKeepsUndefinedObject stamp: 'JFGO 10/4/2024 19:17:43'!
ERROR!

!testRun: #MethodTypeCheckerTest #test16NestedIfNotNilFiltersUndefinedObjectType stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test17NestedIfNotNilDoesNotFilterUndefinedObjectWhenOutsideRightIfNotNil stamp: 'JFGO 10/4/2024 19:17:43'!
ERROR!

!testRun: #MethodTypeCheckerTest #test18IfNilAssumesUndefinedObjectAsType stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test19NestedIfNilAssumesUndefinedObjectAsType stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test20NestedIfNilDoesUseUndefinedObjectWhenOutsideRightIfNil stamp: 'JFGO 10/4/2024 19:17:43'!
ERROR!

!testRun: #MethodTypeCheckerTest #test21IfNilIfNotNilWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test22IfNotNilIfNilWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test23EqualsNilIfTrueIfFalseWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test24EqualsNilIfTrueWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test25IdenticalToNilIfTrueWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test26EqualsNilIfFalseWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test27IdenticalToNilIfFalseWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test28EqualsToNilIfFalseIfTrueWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test29IdenticalToNilIfFalseIfTrueWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test30nilEqualsToIfTrueIfFalseOrIfFalseIfTrueWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test31nilEqualsToIfTrueOrIfFalseWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32nilIdenticalToWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32_01_nilNotIdenticalOrEqualToWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test33NotEqualToNilWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test34NotIdenticalToNilWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test35isNilWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test36notNilWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test37TypeCastWithEqualOrIdenticalToWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:43'!
PASSED!

!testRun: #MethodTypeCheckerTest #test38TypeCastWithNotEqualOrNotIdenticalToWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:44'!
PASSED!

!testRun: #MethodTypeCheckerTest #test39TypeCastToUsingEqualOrIdenticalToWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:44'!
PASSED!

!testRun: #MethodTypeCheckerTest #test40TypeCastToUsingNotEqualOrNotIdenticalToWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:44'!
PASSED!

!testRun: #MethodTypeCheckerTest #test41TypeCastUsingIsKindOfToWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:44'!
PASSED!

!testRun: #MethodTypeCheckerTest #test42TypeCheckMessageWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:44'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test43TypeCheckMessageSentToSelfWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:44'!
PASSED!

!testRun: #MethodTypeCheckerTest #test44TypeCheckMessageWorksAsExpected stamp: 'JFGO 10/4/2024 19:17:44'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test46TypeCastRejectsCanBeNested stamp: 'JFGO 10/4/2024 19:17:44'!
PASSED!

!testRun: #MethodTypeCheckerTest #test47IsKindOfCastingAllowsSubtypes stamp: 'JFGO 10/4/2024 19:17:44'!
PASSED!

!testRun: #MethodTypeCheckerTest #test48IfNotNilWithBlockArgumentFiltersUndefinedObject stamp: 'JFGO 10/4/2024 19:17:44'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test49TypeCastWithBlockInRejectBlockKeepsCastingStrategy stamp: 'JFGO 10/4/2024 19:17:44'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test50TypeCastWithoutBlockShouldFail stamp: 'JFGO 10/4/2024 19:17:44'!
PASSED!

!testRun: #MethodTypeCheckerTest #test51NotNilAndFiltersUndefinedObject stamp: 'JFGO 10/4/2024 19:17:44'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test52CascasdeMessageSendAreTypeChecked stamp: 'JFGO 10/4/2024 19:17:44'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test53TypeCastWorksOnCascadeMessageSends stamp: 'JFGO 10/4/2024 19:17:44'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test54IfNilWithReturnRejectsNilInNextColaborations stamp: 'JFGO 10/4/2024 19:17:44'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test55TypeCheckMessageWithSubclassesReturningFalse stamp: 'JFGO 10/4/2024 19:17:44'!
PASSED!

!testRun: #MethodTypeCheckerTest #test56Float_store_on_hasNoTypeErrors stamp: 'JFGO 10/4/2024 19:17:44'!
ERROR!

!testRun: #MethodTypeCheckerTest #test57TypeCheckMessageWithFalse_True_False_InSubclassesCastCorrectly stamp: 'JFGO 10/4/2024 19:17:44'!
PASSED!

!testRun: #MethodTypeCheckerTest #test58TypeCheckMessageWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'JFGO 10/4/2024 19:17:44'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test59TypeCheckMessageWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'JFGO 10/4/2024 19:17:44'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test60TypeCastWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'JFGO 10/4/2024 19:17:44'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test61TypeCastWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'JFGO 10/4/2024 19:17:44'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test62ifNotNilifNotNilWithMoreThanAMessageSendAndNilAsValue stamp: 'JFGO 10/4/2024 19:17:44'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test63orCheck stamp: 'JFGO 10/4/2024 19:17:45'!
PASSED!

!testRun: #MethodTypeCheckerTest #test64notNilAndIfTrue stamp: 'JFGO 10/4/2024 19:17:45'!
PASSED!

!testRun: #MethodTypeCheckerTest #test65isNilOr stamp: 'JFGO 10/4/2024 19:17:45'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test66DoesNotFailsWithMessageSendAsConditionOfIfTrueWithCascadeSend stamp: 'JFGO 10/4/2024 19:17:45'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66orWithoutMessageAsReceiverShouldNotError stamp: 'JFGO 10/4/2024 19:17:45'!
PASSED!

!testRun: #MethodTypeCheckerTest #test67andWithoutMessageAsReceiverShouldNotError stamp: 'JFGO 10/4/2024 19:17:45'!
PASSED!

!testRun: #MethodTypeCheckerTest #test68DoesNotFailsWithIfTrueSendInCascadeMode stamp: 'JFGO 10/4/2024 19:17:45'!
PASSED!

!classRemoval: #TypeCheckerTestMethods stamp: 'JFGO 10/4/2024 19:18:49'!
Object subclass: #TypeCheckerTestMethods
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking-Tests'!

!classRemoval: #MethodTypeCheckerTest stamp: 'JFGO 10/4/2024 19:18:50'!
TestCase subclass: #MethodTypeCheckerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking-Tests'!

!classRemoval: #ManyMethodsTypeCheckerTest stamp: 'JFGO 10/4/2024 19:18:50'!
TestCase subclass: #ManyMethodsTypeCheckerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking-Tests'!

!classRemoval: #TypeCheckingWarning stamp: 'JFGO 10/4/2024 19:18:51'!
TypeCheckingIssue subclass: #TypeCheckingWarning
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #TypeCheckingProblem stamp: 'JFGO 10/4/2024 19:18:51'!
TypeCheckingIssue subclass: #TypeCheckingProblem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #TypeCheckingIssue stamp: 'JFGO 10/4/2024 19:18:51'!
TypeCheckingResult subclass: #TypeCheckingIssue
	instanceVariableNames: 'method messageNode reason methodNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #TypeCheckingError stamp: 'JFGO 10/4/2024 19:18:51'!
TypeCheckingResult subclass: #TypeCheckingError
	instanceVariableNames: 'method messageNode notImplemented methodNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #MethodNotAnnotatingTypesProblem stamp: 'JFGO 10/4/2024 19:18:51'!
TypeCheckingResult subclass: #MethodNotAnnotatingTypesProblem
	instanceVariableNames: 'method'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #TypeCheckingResult stamp: 'JFGO 10/4/2024 19:18:52'!
Object subclass: #TypeCheckingResult
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #TypeCheckingProblemToMethodReferenceAdapter stamp: 'JFGO 10/4/2024 19:18:52'!
Object subclass: #TypeCheckingProblemToMethodReferenceAdapter
	instanceVariableNames: 'typeCheckingProblem prefix'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #MethodTypeChecker stamp: 'JFGO 10/4/2024 19:18:52'!
TypeChecker subclass: #MethodTypeChecker
	instanceVariableNames: 'method errors warnings problems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #ManyMethodsTypeChecker stamp: 'JFGO 10/4/2024 19:18:52'!
TypeChecker subclass: #ManyMethodsTypeChecker
	instanceVariableNames: 'methodsToCheck typeCheckers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #TypeChecker stamp: 'JFGO 10/4/2024 19:18:52'!
Object subclass: #TypeChecker
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #NoTypeCastApplierBuilder stamp: 'JFGO 10/4/2024 19:18:53'!
TypeCastApplierBuilder subclass: #NoTypeCastApplierBuilder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #IsKindOfTypeCastApplierBuilder stamp: 'JFGO 10/4/2024 19:18:53'!
OneTypeCastApplierBuilder subclass: #IsKindOfTypeCastApplierBuilder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #EqualsTypeCastApplierBuilder stamp: 'JFGO 10/4/2024 19:18:53'!
OneTypeCastApplierBuilder subclass: #EqualsTypeCastApplierBuilder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #OneTypeCastApplierBuilder stamp: 'JFGO 10/4/2024 19:18:53'!
EffectiveTypeCastApplierBuilder subclass: #OneTypeCastApplierBuilder
	instanceVariableNames: 'castType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #IsKindOfManyTypeCastApplierBuilder stamp: 'JFGO 10/4/2024 19:18:53'!
EffectiveTypeCastApplierBuilder subclass: #IsKindOfManyTypeCastApplierBuilder
	instanceVariableNames: 'typesToCastTo typesToReject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #EffectiveTypeCastApplierBuilder stamp: 'JFGO 10/4/2024 19:18:54'!
TypeCastApplierBuilder subclass: #EffectiveTypeCastApplierBuilder
	instanceVariableNames: 'castingBlock rejectingBlock objectToCast afterMessageTypeCasts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #TypeCastApplierBuilder stamp: 'JFGO 10/4/2024 19:18:54'!
Object subclass: #TypeCastApplierBuilder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #NoTypeCastApplier stamp: 'JFGO 10/4/2024 19:18:54'!
TypeCastApplier subclass: #NoTypeCastApplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #EffectiveTypeCastApplier stamp: 'JFGO 10/4/2024 19:18:54'!
TypeCastApplier subclass: #EffectiveTypeCastApplier
	instanceVariableNames: 'previous casts rejections'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #TypeCastApplier stamp: 'JFGO 10/4/2024 19:18:54'!
Object subclass: #TypeCastApplier
	instanceVariableNames: 'receiverTypes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #IsKindOfTypeReject stamp: 'JFGO 10/4/2024 19:18:54'!
OneTypeCast subclass: #IsKindOfTypeReject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #IsKindOfTypeCast stamp: 'JFGO 10/4/2024 19:18:55'!
OneTypeCast subclass: #IsKindOfTypeCast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #EqualTypeReject stamp: 'JFGO 10/4/2024 19:18:55'!
OneTypeCast subclass: #EqualTypeReject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #EqualTypeCast stamp: 'JFGO 10/4/2024 19:18:55'!
OneTypeCast subclass: #EqualTypeCast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #OneTypeCast stamp: 'JFGO 10/4/2024 19:18:55'!
TypeCast subclass: #OneTypeCast
	instanceVariableNames: 'typeToCastTo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #ManyTypesCast stamp: 'JFGO 10/4/2024 19:18:55'!
TypeCast subclass: #ManyTypesCast
	instanceVariableNames: 'typesToCastTo typesToReject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #TypeCast stamp: 'JFGO 10/4/2024 19:18:55'!
Object subclass: #TypeCast
	instanceVariableNames: 'objetToCast'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #TypeCheckingResultWindow stamp: 'JFGO 10/4/2024 19:18:56'!
MessageSetWindow subclass: #TypeCheckingResultWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #MethodTypeCheckerVisitor stamp: 'JFGO 10/4/2024 19:18:56'!
ParseNodeVisitor subclass: #MethodTypeCheckerVisitor
	instanceVariableNames: 'errors warnings methodNode actualMethod problems methodReference blockCastingApplier castingApplierBuilder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!classRemoval: #TypeCheckingResultSet stamp: 'JFGO 10/4/2024 19:18:56'!
MessageSet subclass: #TypeCheckingResultSet
	instanceVariableNames: 'methodTypeChecker showProblems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping-TypeChecking'!

!testRun: #ActualImplementorsTest #test01WhenIsImplementedOnlyInRootReturnsThatImplementorOnly stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualImplementorsTest #test02ReturnsImplementorsOfSuperclasses stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualImplementorsTest #test03IfNotImplementedInRootOrSuperclassesDoesNotIncludeSubclassesImplementations stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualImplementorsTest #test04IncludesSubclassesImplementations stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualImplementorsTest #test05DoesNotIncludeImplementorsOfSubclassesNotDefinedInSuperclass stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualImplementorsTest #test06DoesNotIncludeImplementorsOfSiblingsWhenNotDefinedInSuperclass stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualImplementorsTest #test07ReturnsAllSubclassesImplementorsOfTheHighestImplementorClass stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualImplementorsTest #test08highestClassImplementingSelectorReturnsHighgestClass stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualImplementorsTest #test09WhenNoHighestClassImplementingSelectorIfNoneBlockIsEvaluated stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test01SurelyRecognizeTypeSenderWhenSentToInstanceVariable stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test02SurelyRecognizeTypeSenderWhenSentToTemporaryVariable stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test03SurelyRecognizeTypeSenderInACollaboration stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test04RecognizeTypeSendersToInstancesOfSubClasses stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test05RecognizeTypeSendersToLiteralTrue stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test06RecognizeTypeSendersToLiteralFalse stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test07RecognizeTypeSendersToThisContext stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test08RecognizeTypeSendersToSelf stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test09RecognizeTypeSendersToSuper stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test09_01 stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test10RecognizeTypeSendersToSelfOfMessageImplementedInSuperclass stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test11RecognizeTypeSendersToReturnsOfMessageSend stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test12RecognizeTypeSendersOfChainedMessageSends stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test13RecognizeTypeSendersToReturnOfMessageSendNoMatterThePrecedence stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test14RecognizeTypeSendersToClasses stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test15RecognizeTypeSendersToVariablesReferencingClasses stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test16RecognizeTypeSendersToAnyLiteral stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test17CanRecognizePossibleTypeSenders stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test18RecognizeTypeSendersWhenReturnTypeIsSelfType stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test19RecognizeTypeSendersWhenReturnTypeIsClassType stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test20SurelySendWhenReceiverTypeIsSuperclassOfImplementorType stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test21ActualSendersWorksWithCascadeMessageSends stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!testRun: #ActualSendersTest #test22ActualSendersDoesNotHangWhenReceiverIsTempVarInMethodWithoutTypes stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:03'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:03'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:03'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:03'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:03' prior: 50568636!
m3 | x | self m1: 1. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:19:03'!
m1!

!testRun: #AddParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:19:03'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:03'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:03'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:03'!
m3 | x | self m1: 1 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:03'!
m1: p1 m2: p2 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:03' prior: 50568677!
m3 | x | self m1: 1 m2: 2 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'JFGO 10/4/2024 19:19:03'!
m1: p1 m3: p3!

!testRun: #AddParameterWithActualScopeTest #test01_01_DoesNotChangePossibleMessageSendWhenInstructedToDoSoWithKeywordMessages stamp: 'JFGO 10/4/2024 19:19:03'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:19:04'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:04'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:04'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:04'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:04'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:04'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #AddParameterWithActualScopeTest #test02CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:19:04'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:19:04'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:05'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:05'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:05'!
m1: p1 m3: p3! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:05'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:05'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1 m3: 3! !

!testRun: #AddParameterWithActualScopeTest #test02_01_CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsForKeywordMessage stamp: 'JFGO 10/4/2024 19:19:05'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:19:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:05'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:05'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:05'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:05'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:05'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:05' prior: 50568827!
m3 | x | x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:19:05'!
m1!

!testRun: #AddParameterWithActualScopeTest #test03AddParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 10/4/2024 19:19:05'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:06'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:19:06'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:06'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:06'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:06'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:06'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:06'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:06'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:06'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:06' prior: 50568886!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:19:06'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:19:06'!
m1!

!testRun: #AddParameterWithActualScopeTest #test04AddParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 10/4/2024 19:19:06'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:19:06'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:07'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:07'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:07'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:07'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:07'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:07'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:07'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:07'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:07' prior: 50568950!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:19:07'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:19:07'!
m1!

!testRun: #AddParameterWithActualScopeTest #test05AddParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 10/4/2024 19:19:07'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:19:07'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:07'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:07'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:07'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:07'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:07'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:07'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:07'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:07'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:07' prior: 50569015!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:19:07'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:19:07'!
m1!

!testRun: #AddParameterWithActualScopeTest #test06AddParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 10/4/2024 19:19:07'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:19:08'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:08'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:08'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:08'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:08'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:08'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:08' prior: 50569069!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:19:08'!
m1!

!testRun: #AddParameterWithActualScopeTest #test07AddParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 10/4/2024 19:19:08'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:19:08'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:08'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:08'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:08'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:08'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:08'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:08' prior: 50569117!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:19:08'!
m1!

!testRun: #AddParameterWithActualScopeTest #test08AddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 10/4/2024 19:19:08'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:19:09'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:09'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:09'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:09'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:09'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:09'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:09'!
m3 self m1. ClassOfSender new m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:09'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:09' prior: 50569177!
m3 self m1: 1. ClassOfSender new m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:19:09'!
m1!

!testRun: #AddParameterWithActualScopeTest #test09AddParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 10/4/2024 19:19:09'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:19:10'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:10'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:10'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:10'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:10'!
m3 |x| self m1. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:10'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:10' prior: 50569223!
m3 |x| self m1: 1. x m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:19:10'!
m1!

!testRun: #AddParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenAddingParameterToMethodWithSureAndPossibleSenders stamp: 'JFGO 10/4/2024 19:19:10'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:19:10'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:10'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:10'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:10'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:10'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:10'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #AddParameterWithActualScopeTest #test11CanNotAddParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:19:10'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:19:11'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:11'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 10/4/2024 19:19:11'!
PASSED!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:11'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:11'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:11'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:11'!
m3 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:11'!
m1: p1 m2: p2 ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:11' prior: 50569325!
m3 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'JFGO 10/4/2024 19:19:11'!
m1: p1!

!testRun: #AddParameterWithActualScopeTest #test13AddLastParameterCorrectly stamp: 'JFGO 10/4/2024 19:19:11'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:12'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:19:12'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AdditionalMethodStateTest #test01topBlockTempsMapReturnsTheTempsMapOfTheMethod stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #AdditionalMethodStateTest #test02MethodWithNoParametersNoTemporariesAreInitializedCorrectly stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #AdditionalMethodStateTest #test03MethodWithOnlyOneArgumentAreInitializedCorrectly stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #AdditionalMethodStateTest #test04rawTypesOfInvalidVariableNameEvaluatesIfAbsentBlock stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #AdditionalMethodStateTest #test05MethodWithOnlyOneTempTwoArgumentsAreInitializedCorrectly stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #AdditionalMethodStateTest #test06MethodWithRemoveVectorVariablesAreInitializedCorrectly stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #AdditionalMethodStateTest #test07RemoteVectorRawTypesIsNilWhenMethodHasNoVariableInRemoteVector stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #AdditionalMethodStateTest #test08VariableRawTypesIsNilWhenMethodHasNoVariableButHasInRemoteVector stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #AdditionalMethodStateTest #test09CanGetRawTypesWhenMethodHasNoVariableButHasInRemoteVector stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #ClosureVariablesTest #testOneArrayForTypesIsCreatedWhenAMethodHasNoClosures stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #DynamicTypesTest #test01TypeConvertionForAClassReturnsSameClass stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #DynamicTypesTest #test02TypeConvertionForSelfTypeReturnsReceiversType stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #DynamicTypesTest #test03TypeConvertionForClassTypeReturnsReceiversTypeClass stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #DynamicTypesTest #test04ClassMessageSendChainsClassType stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #DynamicTypesTest #test05TypeConvertionForInstanceTypeReturnsMetaclassSoleInstance stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #DynamicTypesTest #test06newTypeIsMetaclassSoleInstance stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #DynamicTypesTest #test07InstanceTypeReturnsClassWhenIsKindOfOfBehaviorButNotMeta stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #DynamicTypesTest #test08InstanceTypeErrorsWhenUsedWithNoBehavior stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #DynamicTypesTest #test09ClassTypeForMetamodelIsMetaclass stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test01TypeCollectionOfInstanceVariableDefinedInLeafClassDoesNotTraverseHierarchy stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test02TypeCollectionIncludesSubclasses stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test03TypeCollectionDoesNotIncludeSuperclassesAndSiblings stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test05TypeCollectionIncludesAllSubclasses stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test06IsNotMegamorphicIfTypesSizeIsLessToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test07IsMegamorphicIfTypesSizeIsEqualToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test08IsNotMegamorphicIfDoesNotFillRawTypesForLocalTypeInfo stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test09IsMegamorphicIfFillsRawTypesOfDefiningClassForLocalTypeInfo stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test10IsMegamorphicIfFillsRawTypesOfNotDefiningClassForLocalTypeInfo stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test11IsTypesEmptyOfNonLocalTypeInfoTakesCareOfHierarchy stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test12IsTypesEmptyForLocalTypeInfoOnlyCheckOnLocalRawTypes stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:19:12'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:19:12'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #InstanceVariableTypeInfoTest #test13RemovingAClassRemovesItAndItsClassFromInstanceVariableRawTypes stamp: 'JFGO 10/4/2024 19:19:12'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test14InstVarAtPutKeepTypeInfo stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test01InstanceVariablesTypesIsInitializedWithAnArrayOfClassInstSize stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test02InitializeInstanceVariablesTypesWithAllInstancesStoreCurrentClassInstancesTypes stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test03TypesOfDifferentInstVarsAreStoredCorrectly stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test04MoreThanOneTypeAreStoredCorrectlyInDifferentInstVars stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test05TypesAreStoredUpToInstVarTypesSize stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test06NoTypesAreStoredWhenInstVarTypesIsNil stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test07CommonSupertypeOfReturnsSupertypeOfStoredTypes stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test08CommonSupertypeIfNoTypesEvaluatesAlternativeBlockWhenNoTypeHasBeenStore stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test09EvaluatesIfAbsentBlockWhenAskTypeInfoForNonExistingInstVar stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test01KeepTypesOfLocalTemporariesI stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test02KeepTypesOfRemoteTemporaries stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test03KeepTypesOfParameters stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test04KeepReturnTopTypes stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test05KeepReturnConstantTypes stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test06KeepReturnReceiverTypes stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test07KeepReturnFromClosureTypes stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test08KeepReturnTypeWhenUnwind stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test09BlockReturnDoesNotAffectMethodReturn stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test10KeepTypesOfParametersWhenSendingValueWithArguments stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test11BlockWithParametersDoNotAffectMethodParameters stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'JFGO 10/4/2024 19:19:13'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'JFGO 10/4/2024 19:19:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables_WithSelectorsOfInstVarTypes stamp: 'JFGO 10/4/2024 19:19:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:19:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:19:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsOfTempVarTypes stamp: 'JFGO 10/4/2024 19:19:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:19:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:19:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test045_AutocompletesEntriesFor_patternUnary_containsExactlyTwoMethods stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test046_AutocompletesEntriesFor_patternUnary_notContainsAnyMethod stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test047_AutocompletesEntriesFor_patternUnary_doesNotAutocompleteMethodOfSameClass stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test048_AutocompletesEntriesFor_patternKeyword_containsExactlyOneMethod stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test049_AutocompletesEntriesFor_patternKeyword_notContainsAnyMethod stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test050_AutocompletesEntriesFor_patternKeyword_doesNotAutocompleteMethodOfSameClass stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test051_AutocompletesEntriesFor_patternBinary_containsExactlyOneMethod stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test052_AutocompletesEntriesFor_patternBinary_notContainsAnyMethod stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test053_AutocompletesEntriesFor_patternBinary_doestNotAutocompleteMethodOfSameClass stamp: 'JFGO 10/4/2024 19:19:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #testMessages stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ArrayWithArrayAndOtherObjects stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArray stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayOfArray stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayWithManyElements stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBinaryInParenthesis stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlock stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfBlock stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfEvaluatedBlock stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndExpresionInParenthesis stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndLiteralArray stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndMoreThanOneUnaryAfterExpresionInParenthesis stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBlock stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBrace stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterCharacter stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterLiteralArray stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterStringSymbol stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterSymbol stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUnaryInProtoObject stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterParenthesis stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterUnary stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteMessageAfterUnary stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryInParenthesis stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithMoreThanOneUnary stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithOneUnary stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ClosedAndUnclosedParenthesis stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionInManyParenthesis stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionWithMoreThanOneParenthesis stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_LFBeforeParenthesis stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_SpaceBeforeParenthesis stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnaryAfterExpresionInParenthesis stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedArrayAfterClosedArray stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedBlockAfterBlock stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedDoubleParenthesis stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_selfInProtoObject stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_ExpresionInParenthesis stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_MoreThanOneUnaryMessage stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_OnlyRightParenthesis stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test01CanSignalItWithAMethod stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test02IsResumable stamp: 'JFGO 10/4/2024 19:19:17'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:19:17'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:19:17'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test01RemovingAClassRemovesItFromMethodVariableRawTypesForParameter stamp: 'JFGO 10/4/2024 19:19:18'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:19:18'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:19:18'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test02RemovingAClassRemovesItsClassFromMethodVariableRawTypesForParameter stamp: 'JFGO 10/4/2024 19:19:18'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:19:18'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:19:18'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test03RemovingAClassRemovesItFromMethodVariablesRawTypes stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:19:19'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:19:19'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test04RemovingAClassRemovesItFromMethodVariableRemoteVectorRawTypes stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!testRun: #NotImplementedMethodTest #test01ActualSendersIsEmpty stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!testRun: #NotImplementedMethodTest #test02CategoryIsNil stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!testRun: #NotImplementedMethodTest #test03CompiledMethodSignalsError stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!testRun: #NotImplementedMethodTest #test04CompiledMethodIfAbsentEvaluatesIfAbsentBlock stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!testRun: #NotImplementedMethodTest #test05doesOnlySurelySendReturnsFalse stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!testRun: #NotImplementedMethodTest #test06dynamicTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!testRun: #NotImplementedMethodTest #test07IsNotValid stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!testRun: #NotImplementedMethodTest #test08liveTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!testRun: #NotImplementedMethodTest #test09rangesOASentSelectorWhenSendToReceiverTypesIsEmpty stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!testRun: #NotImplementedMethodTest #test10FailsWhenAsItsSourceCode stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!testRun: #NotImplementedMethodTest #test11StringVersionStartsWithNotImplemented stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!testRun: #PossibleSenderTest #test01StringVersionBeginsWithPossible stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:19'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:19'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:19'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:19'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:19' prior: 50570188!
m3 | x | self m1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:19:19'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:19:19'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:19'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:19'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:19'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:19'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:19'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!testRun: #RemoveParameterWithActualScopeTest #test02CanNotRemoveParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:19:19'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:19:20'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:20'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:20'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:20'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:20'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:20'!
m3 | x | x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:20'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:20' prior: 50570287!
m3 | x | x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:19:20'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test03RemovesParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 10/4/2024 19:19:20'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:20'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:19:21'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:21'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:21'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:21'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:21'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:21'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:21'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:21'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:21' prior: 50570348!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:19:21'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 10/4/2024 19:19:21'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test04RemovesParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 10/4/2024 19:19:21'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:19:21'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:21'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:21'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:21'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:21'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:21'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:21'!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:21'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:21'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:21' prior: 50570414!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:19:21'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 10/4/2024 19:19:21'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test05RemovesParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 10/4/2024 19:19:21'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:19:22'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:22'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:22'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:22'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:22'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:22'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:22'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:22'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:22'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:22' prior: 50570481!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:19:22'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 10/4/2024 19:19:22'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test06RemovesParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 10/4/2024 19:19:22'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:19:22'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:23'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:23'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:23'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:23'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:23'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:23' prior: 50570538!
m3 | x | self m1. false ifTrue: [ x m1]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:19:23'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test07RemovesParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 10/4/2024 19:19:23'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:19:23'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:23'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:23'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:23'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:23'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:23'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:23' prior: 50570588!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 10/4/2024 19:19:23'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test08RemovesParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 10/4/2024 19:19:23'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:19:23'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:24'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:24'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:24'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:24'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:24'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:24'!
m3 self m1: 1. ClassOfSender new m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:24'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:24' prior: 50570650!
m3 self m1. ClassOfSender new m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:19:24'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test09RemovesParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 10/4/2024 19:19:24'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:19:24'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:24'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:24'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:24'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:24'!
m3 |x| self m1: 1. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:24'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:24' prior: 50570699!
m3 |x| self m1. x m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:19:24'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRemovingParameterToMethodWithSureAndPossibleSenders stamp: 'JFGO 10/4/2024 19:19:24'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:19:25'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:25'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:25'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:25'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:25'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:25'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1; printString! !

!testRun: #RemoveParameterWithActualScopeTest #test11CanNotRemoveParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:19:25'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:19:25'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:25'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 10/4/2024 19:19:25'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:26'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:26'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:26'!
m1: p1 m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:26'!
m3 self m1: 1 m2: 2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:26'!
m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:26' prior: 50570803!
m3 self m2: 2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'JFGO 10/4/2024 19:19:26'!
m1: p1 m2: p2!

!testRun: #RemoveParameterWithActualScopeTest #test13RemovesOtherThanLastParameterCorrectly stamp: 'JFGO 10/4/2024 19:19:26'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:26'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:19:26'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:26'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:26'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:26'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:26'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:26' prior: 50570850!
m3 | x | self m2. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:19:26'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test01DoesNotRenamesPossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 10/4/2024 19:19:26'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:19:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:27'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:27'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:27'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:27'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #RenameSelectorWithActualScopeTest #test02CanNotRenameWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:19:27'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:19:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:27'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:27'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:27'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:27'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:27'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:27' prior: 50570949!
m3 | x | x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:19:27'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test03RenamesWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 10/4/2024 19:19:27'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:28'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:19:28'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:28'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:28'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:28'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:28'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:28'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:28'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:28'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:28' prior: 50571009!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:19:28'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:19:28'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test04RenamesWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 10/4/2024 19:19:28'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:19:28'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:28'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:28'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:28'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:28'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:28'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:28'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:28'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:28'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:28' prior: 50571075!
m3 | x y | x := self. y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:19:28'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:19:28'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test05RenamesDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 10/4/2024 19:19:28'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:19:29'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:29'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:29'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:29'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:29'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:29'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:29'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:29'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:29'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:29' prior: 50571141!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:19:29'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:19:29'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test06RenamesDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 10/4/2024 19:19:29'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:19:29'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:30'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:30'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:30'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:30'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:30'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:30' prior: 50571196!
m3 | x | self m2. false ifTrue: [ x m2 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:19:30'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test07RenamePossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 10/4/2024 19:19:30'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:19:30'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:30'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:30'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:30'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:30'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:30'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:30' prior: 50571245!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:19:30'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test08RenamesWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 10/4/2024 19:19:30'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:19:31'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:31'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:31'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:31'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:31'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:31'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:31'!
m3 self m1. ClassOfSender new m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:31'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:31' prior: 50571306!
m3 self m2. ClassOfSender new m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:19:31'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test09RenamesOnlyValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 10/4/2024 19:19:31'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:19:31'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:31'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:31'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:31'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:31'!
m3 |x| self m1. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:31'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:31' prior: 50571353!
m3 |x| self m2. x m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:19:31'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRenamingAMethodWithSureAndPossibleSenders stamp: 'JFGO 10/4/2024 19:19:31'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:19:32'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:32'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:19:32'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:32'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:32'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:19:32'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #RenameSelectorWithActualScopeTest #test11CanNotRenameWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:19:32'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:19:32'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:19:32'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 10/4/2024 19:19:32'!
PASSED!

!testRun: #ReturnTypeInfoTest #test01QuickReturnSelfMethodsReturnSelfTypeAsReturnType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #ReturnTypeInfoTest #test02QuickReturnTrueMethodsReturnTrueReturnType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #ReturnTypeInfoTest #test03QuickReturnFalseMethodsReturnFalseAsReturnType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #ReturnTypeInfoTest #test04QuickReturnNilMethodsReturnUndefinedObjectAsReturnType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #ReturnTypeInfoTest #test05QuickReturnMinusOneMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #ReturnTypeInfoTest #test06QuickReturnZeroMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #ReturnTypeInfoTest #test07QuickReturnOneMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #ReturnTypeInfoTest #test08QuickReturnTwoMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #ReturnTypeInfoTest #test09QuickReturnOfFirstInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #ReturnTypeInfoTest #test10QuickReturnOfSecondInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #ReturnTypeInfoTest #test11classMethodReturnsClassTypeAsReturnType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #ReturnTypeInfoTest #test12newMethodReturnsInstanceTypeAsReturnType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #ReturnTypeInfoTest #test13yourselfMethodReturnsSelfTypeAsReturnType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:19:33'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:19:33'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #ReturnTypeInfoTest #test14RemovingAClassRemovesItAndItsClassFromMethodReturnType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #ReturnTypeInfoTest #test15ReturnTypesOfAbstractMethodsIncludesSubclassesImplementationsTypes stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #ReturnTypeInfoTest #test16ReturnTypesOfAbstractMethodWorksWhenNotImplementedInAllSubclasses stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test01IsEmptyWhenAllTypesAreNil stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test02StoresAddedTypes stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test03StoresSameTypeOnce stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test04StoresMoreThanOneTypeCorrectly stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test05DoesNotStoreTypesWhenContainerIsNil stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test06CommonSupertypeOfSiblingsClassesReturnsRightSuperclass stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test07CommonSupertypeOnSameHierarchyIsMostTopClass stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test08CommonSupertypeOnSameHierarchyIsNotAffectedByAddingOrder stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test09ObjectIsCommonSupertypeWhenClassesAreNotSiblings stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test10ProtoObjectIsCommonSupertypeWhenThereAreNoTypesStored stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test11ProtoObjectIsCommonSupertypeWhenCointainerIsNil stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test12CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenIsEmpty stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test13CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenContainerIsNil stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test14UndefinedObjectIsNotConsideredWhenLookingForCommonSupertype stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test15StoresTypesIsTrueWhenContainerIsNotNil stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test16StoresTypesIsFalseWhenContainerIsNil stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test17IsMegamorphicWhenContainerIsFull stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test18IsNotMegamorphicWhenContainerIsNotFull stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test19CommonSelectorsPreviousToSameOnlyTypeIsEmpty stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test20CommonSelectorsPreviousToSuperclassOfOnlyAddedTypeAreAddedTypeSelectors stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test21CommonSelectorsPreviousToSuperclassSuperclassOfOnlyAddedTypeAreAddedTypeUpToSuperclassSelectors stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test22CommonSelectorsPreviousToInvalidSuperclassRaisesError stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test23CommonSelectorsPreviousToSuperclassOfSiblingTypesAreSiblingsCommonSelectors stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test24CommonSelectorsPreviousToOnSameHierarchyReturnsCommonSuperclassesSelectors stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test25CommonSelectorsPreviousToAddedSSupertypeOnSameHierarchyIsEmpty stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test26CommonSelectorsPreviousToWhenNotStoringTypesIsEmpty stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test27CommonSelectorsPreviousToIfInvalidSupertypeEvaluatesInvalidBlock stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test28CommonSelectorsPreviousToIfInvalidSupertypeWithManyTypesEvaluatesInvalidBlock stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test29CommonSelectosGoesUpToIncludingProtoObject stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test30CommonSupertypeIfGenericEvaluatesIfGenericBlockForObject stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test31CommonSupertypeIfGenericEvaluatesIfGenericBlockForProtoObject stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test32WithCommonSupertypeDoIfGenericEvaluatesDoBlockWhenNoGenericSupertype stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test33WithCommonSupertypeDoIfGenericEvaluatesGenericBlockWhenGenericSupertype stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test34AddingATypeWhenNoMoreSpaceEvaluatesIsFullBlock stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test35TypeIsNotMoreInTypesWhenRemoved stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test36RemovingTypeWhenTypesIsEmptyEvaluatesIfAbsent stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test37RemovingNotIncludedTypeEvaluatesIfAbsent stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test38RemovingLastAddedTypeWorksAsExpected stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test39RemoveTypeSignalExceptionWhenTypeNotFound stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!testRun: #VariableTypeInfoTest #test40TypesDoEvaluatesBlockOnEachType stamp: 'JFGO 10/4/2024 19:19:33'!
PASSED!

!methodRemoval: MessageNode #receiverTypesIn:addingIncompleteTypeInfoTo:castingWith: stamp: 'JFGO 10/4/2024 19:20:15'!
receiverTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons castingWith: aTypeCastApplier 
	
	^self receiverOrCascadeReceiver typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons castingWith: aTypeCastApplier !

!methodRemoval: MessageNode #typesIn:addingIncompleteTypeInfoTo:castingWith: stamp: 'JFGO 10/4/2024 19:20:19'!
typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons castingWith: aTypeCastApplier 
	
	| types sentSelector receiverTypes  |

	sentSelector := self selectorSymbol.
	receiverTypes := aTypeCastApplier receiverTypesFor: self in: aCompiledMethod addingIncompleteTypeInfoTo:  incompleteTypeInfoReasons.
	
	types := receiverTypes
		inject: Set new
		into: [ :messageReturnTypes :aReceiverType | 								
			(aReceiverType lookupSelector: sentSelector) 
				ifNil: [ incompleteTypeInfoReasons add: (
					IncompleteTypeInfoError dueToMissingImplementationOf: (MethodReference class: aReceiverType selector: sentSelector)) ]
				ifNotNil: [ :implementor | | returnTypes |
					returnTypes := implementor returnTypes.
					returnTypes isEmpty
						ifTrue: [ incompleteTypeInfoReasons add: (IncompleteTypeInfoWarning dueToNoReturnTypeOf: implementor methodReference) ]
						ifFalse: [ messageReturnTypes addAll: (returnTypes collect: [ :aType | aType asTypeFor: aReceiverType])]].
			messageReturnTypes ].
		
	^types!

!methodRemoval: AssignmentNode #typesIn:addingIncompleteTypeInfoTo:castingWith: stamp: 'JFGO 10/4/2024 19:20:32'!
typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons castingWith: aTypeCastApplier 

	^value typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons castingWith: aTypeCastApplier 
!

!methodRemoval: ParseNode #typesIn:addingIncompleteTypeInfoTo:castingWith: stamp: 'JFGO 10/4/2024 19:20:42'!
typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons castingWith: aTypeCastApplier 

	^aTypeCastApplier applyTo: self with: (self typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons)!

!testRun: #ActualImplementorsTest #test01WhenIsImplementedOnlyInRootReturnsThatImplementorOnly stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualImplementorsTest #test02ReturnsImplementorsOfSuperclasses stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualImplementorsTest #test03IfNotImplementedInRootOrSuperclassesDoesNotIncludeSubclassesImplementations stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualImplementorsTest #test04IncludesSubclassesImplementations stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualImplementorsTest #test05DoesNotIncludeImplementorsOfSubclassesNotDefinedInSuperclass stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualImplementorsTest #test06DoesNotIncludeImplementorsOfSiblingsWhenNotDefinedInSuperclass stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualImplementorsTest #test07ReturnsAllSubclassesImplementorsOfTheHighestImplementorClass stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualImplementorsTest #test08highestClassImplementingSelectorReturnsHighgestClass stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualImplementorsTest #test09WhenNoHighestClassImplementingSelectorIfNoneBlockIsEvaluated stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test01SurelyRecognizeTypeSenderWhenSentToInstanceVariable stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test02SurelyRecognizeTypeSenderWhenSentToTemporaryVariable stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test03SurelyRecognizeTypeSenderInACollaboration stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test04RecognizeTypeSendersToInstancesOfSubClasses stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test05RecognizeTypeSendersToLiteralTrue stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test06RecognizeTypeSendersToLiteralFalse stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test07RecognizeTypeSendersToThisContext stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test08RecognizeTypeSendersToSelf stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test09RecognizeTypeSendersToSuper stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test09_01 stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test10RecognizeTypeSendersToSelfOfMessageImplementedInSuperclass stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test11RecognizeTypeSendersToReturnsOfMessageSend stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test12RecognizeTypeSendersOfChainedMessageSends stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test13RecognizeTypeSendersToReturnOfMessageSendNoMatterThePrecedence stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test14RecognizeTypeSendersToClasses stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test15RecognizeTypeSendersToVariablesReferencingClasses stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test16RecognizeTypeSendersToAnyLiteral stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test17CanRecognizePossibleTypeSenders stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test18RecognizeTypeSendersWhenReturnTypeIsSelfType stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test19RecognizeTypeSendersWhenReturnTypeIsClassType stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test20SurelySendWhenReceiverTypeIsSuperclassOfImplementorType stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test21ActualSendersWorksWithCascadeMessageSends stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!testRun: #ActualSendersTest #test22ActualSendersDoesNotHangWhenReceiverIsTempVarInMethodWithoutTypes stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:52'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:52'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:52'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:52' prior: 50571892!
m3 | x | self m1: 1. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:20:52'!
m1!

!testRun: #AddParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 10/4/2024 19:20:52'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:20:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:52'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:52'!
m3 | x | self m1: 1 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:52'!
m1: p1 m2: p2 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:53' prior: 50571933!
m3 | x | self m1: 1 m2: 2 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'JFGO 10/4/2024 19:20:53'!
m1: p1 m3: p3!

!testRun: #AddParameterWithActualScopeTest #test01_01_DoesNotChangePossibleMessageSendWhenInstructedToDoSoWithKeywordMessages stamp: 'JFGO 10/4/2024 19:20:53'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:20:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:53'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:53'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:53'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:53'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #AddParameterWithActualScopeTest #test02CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:20:53'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:20:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:20:54'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:54'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:54'!
m1: p1 m3: p3! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:54'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:54'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1 m3: 3! !

!testRun: #AddParameterWithActualScopeTest #test02_01_CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsForKeywordMessage stamp: 'JFGO 10/4/2024 19:20:54'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:20:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:20:54'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:54'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:54'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:54'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:54'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:54' prior: 50572083!
m3 | x | x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:20:54'!
m1!

!testRun: #AddParameterWithActualScopeTest #test03AddParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 10/4/2024 19:20:54'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:20:55'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:20:55'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:55'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:55'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:55'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:55'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:55'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:55'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:55'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:55' prior: 50572142!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:20:55'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:20:55'!
m1!

!testRun: #AddParameterWithActualScopeTest #test04AddParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 10/4/2024 19:20:55'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:20:56'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:20:56'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:56'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:56'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:56'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:56'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:56'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:56'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:56'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:56' prior: 50572206!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:20:56'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:20:56'!
m1!

!testRun: #AddParameterWithActualScopeTest #test05AddParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 10/4/2024 19:20:56'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:20:56'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:20:56'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:56'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:56'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:56'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:56'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:56'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:56'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:56'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:56' prior: 50572271!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:20:56'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:20:56'!
m1!

!testRun: #AddParameterWithActualScopeTest #test06AddParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 10/4/2024 19:20:56'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:20:57'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:20:57'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:57'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:57'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:57'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:57'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:57' prior: 50572325!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:20:57'!
m1!

!testRun: #AddParameterWithActualScopeTest #test07AddParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 10/4/2024 19:20:57'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:20:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:58'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:58'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:58'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:58'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:58' prior: 50572373!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:20:58'!
m1!

!testRun: #AddParameterWithActualScopeTest #test08AddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 10/4/2024 19:20:58'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:20:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:20:58'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:58'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:58'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:58'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:58'!
m3 self m1. ClassOfSender new m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:58'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:58' prior: 50572433!
m3 self m1: 1. ClassOfSender new m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:20:58'!
m1!

!testRun: #AddParameterWithActualScopeTest #test09AddParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 10/4/2024 19:20:58'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:20:59'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:20:59'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:59'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:59'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:59'!
m3 |x| self m1. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:59'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:59' prior: 50572479!
m3 |x| self m1: 1. x m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 10/4/2024 19:20:59'!
m1!

!testRun: #AddParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenAddingParameterToMethodWithSureAndPossibleSenders stamp: 'JFGO 10/4/2024 19:20:59'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:20:59'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:59'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:20:59'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:59'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:59'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:20:59'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #AddParameterWithActualScopeTest #test11CanNotAddParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:20:59'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:21:00'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:00'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 10/4/2024 19:21:00'!
PASSED!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:00'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:00'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:00'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:00'!
m3 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:00'!
m1: p1 m2: p2 ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:00' prior: 50572581!
m3 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'JFGO 10/4/2024 19:21:00'!
m1: p1!

!testRun: #AddParameterWithActualScopeTest #test13AddLastParameterCorrectly stamp: 'JFGO 10/4/2024 19:21:00'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:01'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 10/4/2024 19:21:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AdditionalMethodStateTest #test01topBlockTempsMapReturnsTheTempsMapOfTheMethod stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #AdditionalMethodStateTest #test02MethodWithNoParametersNoTemporariesAreInitializedCorrectly stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #AdditionalMethodStateTest #test03MethodWithOnlyOneArgumentAreInitializedCorrectly stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #AdditionalMethodStateTest #test04rawTypesOfInvalidVariableNameEvaluatesIfAbsentBlock stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #AdditionalMethodStateTest #test05MethodWithOnlyOneTempTwoArgumentsAreInitializedCorrectly stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #AdditionalMethodStateTest #test06MethodWithRemoveVectorVariablesAreInitializedCorrectly stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #AdditionalMethodStateTest #test07RemoteVectorRawTypesIsNilWhenMethodHasNoVariableInRemoteVector stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #AdditionalMethodStateTest #test08VariableRawTypesIsNilWhenMethodHasNoVariableButHasInRemoteVector stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #AdditionalMethodStateTest #test09CanGetRawTypesWhenMethodHasNoVariableButHasInRemoteVector stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #ClosureVariablesTest #testOneArrayForTypesIsCreatedWhenAMethodHasNoClosures stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #DynamicTypesTest #test01TypeConvertionForAClassReturnsSameClass stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #DynamicTypesTest #test02TypeConvertionForSelfTypeReturnsReceiversType stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #DynamicTypesTest #test03TypeConvertionForClassTypeReturnsReceiversTypeClass stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #DynamicTypesTest #test04ClassMessageSendChainsClassType stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #DynamicTypesTest #test05TypeConvertionForInstanceTypeReturnsMetaclassSoleInstance stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #DynamicTypesTest #test06newTypeIsMetaclassSoleInstance stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #DynamicTypesTest #test07InstanceTypeReturnsClassWhenIsKindOfOfBehaviorButNotMeta stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #DynamicTypesTest #test08InstanceTypeErrorsWhenUsedWithNoBehavior stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #DynamicTypesTest #test09ClassTypeForMetamodelIsMetaclass stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test01TypeCollectionOfInstanceVariableDefinedInLeafClassDoesNotTraverseHierarchy stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test02TypeCollectionIncludesSubclasses stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test03TypeCollectionDoesNotIncludeSuperclassesAndSiblings stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test05TypeCollectionIncludesAllSubclasses stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test06IsNotMegamorphicIfTypesSizeIsLessToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test07IsMegamorphicIfTypesSizeIsEqualToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test08IsNotMegamorphicIfDoesNotFillRawTypesForLocalTypeInfo stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test09IsMegamorphicIfFillsRawTypesOfDefiningClassForLocalTypeInfo stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test10IsMegamorphicIfFillsRawTypesOfNotDefiningClassForLocalTypeInfo stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test11IsTypesEmptyOfNonLocalTypeInfoTakesCareOfHierarchy stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test12IsTypesEmptyForLocalTypeInfoOnlyCheckOnLocalRawTypes stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:21:01'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:21:01'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #InstanceVariableTypeInfoTest #test13RemovingAClassRemovesItAndItsClassFromInstanceVariableRawTypes stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test14InstVarAtPutKeepTypeInfo stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test01InstanceVariablesTypesIsInitializedWithAnArrayOfClassInstSize stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test02InitializeInstanceVariablesTypesWithAllInstancesStoreCurrentClassInstancesTypes stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test03TypesOfDifferentInstVarsAreStoredCorrectly stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test04MoreThanOneTypeAreStoredCorrectlyInDifferentInstVars stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test05TypesAreStoredUpToInstVarTypesSize stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test06NoTypesAreStoredWhenInstVarTypesIsNil stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test07CommonSupertypeOfReturnsSupertypeOfStoredTypes stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test08CommonSupertypeIfNoTypesEvaluatesAlternativeBlockWhenNoTypeHasBeenStore stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test09EvaluatesIfAbsentBlockWhenAskTypeInfoForNonExistingInstVar stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test01KeepTypesOfLocalTemporariesI stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test02KeepTypesOfRemoteTemporaries stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test03KeepTypesOfParameters stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test04KeepReturnTopTypes stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test05KeepReturnConstantTypes stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test06KeepReturnReceiverTypes stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test07KeepReturnFromClosureTypes stamp: 'JFGO 10/4/2024 19:21:01'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test08KeepReturnTypeWhenUnwind stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test09BlockReturnDoesNotAffectMethodReturn stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test10KeepTypesOfParametersWhenSendingValueWithArguments stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test11BlockWithParametersDoNotAffectMethodParameters stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables_WithSelectorsOfInstVarTypes stamp: 'JFGO 10/4/2024 19:21:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:21:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:21:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsOfTempVarTypes stamp: 'JFGO 10/4/2024 19:21:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:21:04'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:21:04'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test045_AutocompletesEntriesFor_patternUnary_containsExactlyTwoMethods stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test046_AutocompletesEntriesFor_patternUnary_notContainsAnyMethod stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test047_AutocompletesEntriesFor_patternUnary_doesNotAutocompleteMethodOfSameClass stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test048_AutocompletesEntriesFor_patternKeyword_containsExactlyOneMethod stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test049_AutocompletesEntriesFor_patternKeyword_notContainsAnyMethod stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test050_AutocompletesEntriesFor_patternKeyword_doesNotAutocompleteMethodOfSameClass stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test051_AutocompletesEntriesFor_patternBinary_containsExactlyOneMethod stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test052_AutocompletesEntriesFor_patternBinary_notContainsAnyMethod stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test053_AutocompletesEntriesFor_patternBinary_doestNotAutocompleteMethodOfSameClass stamp: 'JFGO 10/4/2024 19:21:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #testMessages stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ArrayWithArrayAndOtherObjects stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArray stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayOfArray stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayWithManyElements stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBinaryInParenthesis stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlock stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfBlock stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfEvaluatedBlock stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndExpresionInParenthesis stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndLiteralArray stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndMoreThanOneUnaryAfterExpresionInParenthesis stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBlock stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBrace stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterCharacter stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterLiteralArray stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterStringSymbol stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterSymbol stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUnaryInProtoObject stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterParenthesis stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterUnary stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteMessageAfterUnary stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryInParenthesis stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithMoreThanOneUnary stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithOneUnary stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ClosedAndUnclosedParenthesis stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionInManyParenthesis stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionWithMoreThanOneParenthesis stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_LFBeforeParenthesis stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_SpaceBeforeParenthesis stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnaryAfterExpresionInParenthesis stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedArrayAfterClosedArray stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedBlockAfterBlock stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedDoubleParenthesis stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_selfInProtoObject stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_ExpresionInParenthesis stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_MoreThanOneUnaryMessage stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_OnlyRightParenthesis stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test01CanSignalItWithAMethod stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test02IsResumable stamp: 'JFGO 10/4/2024 19:21:06'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:21:06'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:21:06'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test01RemovingAClassRemovesItFromMethodVariableRawTypesForParameter stamp: 'JFGO 10/4/2024 19:21:07'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:21:07'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:21:07'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test02RemovingAClassRemovesItsClassFromMethodVariableRawTypesForParameter stamp: 'JFGO 10/4/2024 19:21:07'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:21:07'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:21:07'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test03RemovingAClassRemovesItFromMethodVariablesRawTypes stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:21:08'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:21:08'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test04RemovingAClassRemovesItFromMethodVariableRemoteVectorRawTypes stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test01ActualSendersIsEmpty stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test02CategoryIsNil stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test03CompiledMethodSignalsError stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test04CompiledMethodIfAbsentEvaluatesIfAbsentBlock stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test05doesOnlySurelySendReturnsFalse stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test06dynamicTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test07IsNotValid stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test08liveTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test09rangesOASentSelectorWhenSendToReceiverTypesIsEmpty stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test10FailsWhenAsItsSourceCode stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test11StringVersionStartsWithNotImplemented stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!testRun: #PossibleSenderTest #test01StringVersionBeginsWithPossible stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:08'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:08'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:08'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:08'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:08' prior: 50573444!
m3 | x | self m1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:21:08'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:21:08'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:08'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:08'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:08'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:08'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:08'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!testRun: #RemoveParameterWithActualScopeTest #test02CanNotRemoveParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:21:08'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:21:09'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:09'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:09'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:09'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:09'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:09'!
m3 | x | x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:09'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:09' prior: 50573543!
m3 | x | x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:21:09'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test03RemovesParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 10/4/2024 19:21:09'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:09'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:21:10'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:10'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:10'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:10'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:10'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:10'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:10'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:10'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:10' prior: 50573604!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:21:10'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 10/4/2024 19:21:10'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test04RemovesParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 10/4/2024 19:21:10'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:21:10'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:10'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:10'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:10'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:10'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:10'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:10'!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:10'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:10'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:10' prior: 50573670!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:21:10'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 10/4/2024 19:21:10'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test05RemovesParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 10/4/2024 19:21:10'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:21:11'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:11'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:11'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:11'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:11'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:11'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:11'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:11'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:11'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:11' prior: 50573737!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:21:11'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 10/4/2024 19:21:11'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test06RemovesParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 10/4/2024 19:21:11'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:21:11'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:11'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:11'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:12'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:12'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:12'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:12' prior: 50573794!
m3 | x | self m1. false ifTrue: [ x m1]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:21:12'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test07RemovesParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 10/4/2024 19:21:12'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:21:12'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:12'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:12'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:12'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:12'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:12'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:12' prior: 50573844!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 10/4/2024 19:21:12'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test08RemovesParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 10/4/2024 19:21:12'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:21:12'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:13'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:13'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:13'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:13'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:13'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:13'!
m3 self m1: 1. ClassOfSender new m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:13'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:13' prior: 50573906!
m3 self m1. ClassOfSender new m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:21:13'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test09RemovesParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 10/4/2024 19:21:13'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:21:13'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:13'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:13'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:13'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:13'!
m3 |x| self m1: 1. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:13'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:13' prior: 50573955!
m3 |x| self m1. x m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 10/4/2024 19:21:13'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRemovingParameterToMethodWithSureAndPossibleSenders stamp: 'JFGO 10/4/2024 19:21:13'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:21:14'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:14'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:14'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:14'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:14'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:14'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1; printString! !

!testRun: #RemoveParameterWithActualScopeTest #test11CanNotRemoveParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:21:14'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:21:14'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:14'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 10/4/2024 19:21:14'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:15'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:15'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:15'!
m1: p1 m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:15'!
m3 self m1: 1 m2: 2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:15'!
m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:15' prior: 50574059!
m3 self m2: 2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'JFGO 10/4/2024 19:21:15'!
m1: p1 m2: p2!

!testRun: #RemoveParameterWithActualScopeTest #test13RemovesOtherThanLastParameterCorrectly stamp: 'JFGO 10/4/2024 19:21:15'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:15'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 10/4/2024 19:21:15'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:15'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:15'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:15'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:15'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:15' prior: 50574106!
m3 | x | self m2. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:21:15'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test01DoesNotRenamesPossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 10/4/2024 19:21:15'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:21:16'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:16'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:16'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:16'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:16'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:16'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #RenameSelectorWithActualScopeTest #test02CanNotRenameWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:21:16'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:21:16'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:16'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:16'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:16'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:16'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:16'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:16'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:16' prior: 50574205!
m3 | x | x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:21:16'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test03RenamesWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 10/4/2024 19:21:16'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:17'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:21:17'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:17'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:17'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:17'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:17'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:17'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:17'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:17'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:17' prior: 50574265!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:21:17'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:21:17'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test04RenamesWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 10/4/2024 19:21:17'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:21:18'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:18'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:18'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:18'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:18'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:18'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:18'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:18'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:18'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:18' prior: 50574331!
m3 | x y | x := self. y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:21:18'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:21:18'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test05RenamesDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 10/4/2024 19:21:18'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:21:18'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:18'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:18'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:18'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:18'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:18'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:18'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:18'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:18'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:18' prior: 50574397!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:21:18'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:21:18'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test06RenamesDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 10/4/2024 19:21:18'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:21:19'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:19'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:19'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:19'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:19'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:19'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:19' prior: 50574452!
m3 | x | self m2. false ifTrue: [ x m2 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:21:19'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test07RenamePossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 10/4/2024 19:21:19'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:21:20'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:20'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:20'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:20'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:20'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:20'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:20' prior: 50574501!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 10/4/2024 19:21:20'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test08RenamesWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 10/4/2024 19:21:20'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:21:21'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:21'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:21'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:21'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:21'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:21'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:21'!
m3 self m1. ClassOfSender new m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:21'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:21' prior: 50574562!
m3 self m2. ClassOfSender new m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:21:21'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test09RenamesOnlyValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 10/4/2024 19:21:21'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:21:22'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:22'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:22'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:22'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:22'!
m3 |x| self m1. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:22'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:22' prior: 50574609!
m3 |x| self m2. x m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 10/4/2024 19:21:22'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRenamingAMethodWithSureAndPossibleSenders stamp: 'JFGO 10/4/2024 19:21:22'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:21:22'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:22'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 10/4/2024 19:21:22'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:22'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:22'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 10/4/2024 19:21:22'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #RenameSelectorWithActualScopeTest #test11CanNotRenameWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 10/4/2024 19:21:22'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 10/4/2024 19:21:23'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 10/4/2024 19:21:24'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 10/4/2024 19:21:24'!
PASSED!

!testRun: #ReturnTypeInfoTest #test01QuickReturnSelfMethodsReturnSelfTypeAsReturnType stamp: 'JFGO 10/4/2024 19:21:24'!
PASSED!

!testRun: #ReturnTypeInfoTest #test02QuickReturnTrueMethodsReturnTrueReturnType stamp: 'JFGO 10/4/2024 19:21:24'!
PASSED!

!testRun: #ReturnTypeInfoTest #test03QuickReturnFalseMethodsReturnFalseAsReturnType stamp: 'JFGO 10/4/2024 19:21:24'!
PASSED!

!testRun: #ReturnTypeInfoTest #test04QuickReturnNilMethodsReturnUndefinedObjectAsReturnType stamp: 'JFGO 10/4/2024 19:21:24'!
PASSED!

!testRun: #ReturnTypeInfoTest #test05QuickReturnMinusOneMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 10/4/2024 19:21:24'!
PASSED!

!testRun: #ReturnTypeInfoTest #test06QuickReturnZeroMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 10/4/2024 19:21:24'!
PASSED!

!testRun: #ReturnTypeInfoTest #test07QuickReturnOneMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 10/4/2024 19:21:24'!
PASSED!

!testRun: #ReturnTypeInfoTest #test08QuickReturnTwoMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 10/4/2024 19:21:24'!
PASSED!

!testRun: #ReturnTypeInfoTest #test09QuickReturnOfFirstInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'JFGO 10/4/2024 19:21:24'!
PASSED!

!testRun: #ReturnTypeInfoTest #test10QuickReturnOfSecondInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'JFGO 10/4/2024 19:21:24'!
PASSED!

!testRun: #ReturnTypeInfoTest #test11classMethodReturnsClassTypeAsReturnType stamp: 'JFGO 10/4/2024 19:21:24'!
PASSED!

!testRun: #ReturnTypeInfoTest #test12newMethodReturnsInstanceTypeAsReturnType stamp: 'JFGO 10/4/2024 19:21:24'!
PASSED!

!testRun: #ReturnTypeInfoTest #test13yourselfMethodReturnsSelfTypeAsReturnType stamp: 'JFGO 10/4/2024 19:21:24'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 10/4/2024 19:21:24'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 10/4/2024 19:21:25'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #ReturnTypeInfoTest #test14RemovingAClassRemovesItAndItsClassFromMethodReturnType stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #ReturnTypeInfoTest #test15ReturnTypesOfAbstractMethodsIncludesSubclassesImplementationsTypes stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #ReturnTypeInfoTest #test16ReturnTypesOfAbstractMethodWorksWhenNotImplementedInAllSubclasses stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test01IsEmptyWhenAllTypesAreNil stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test02StoresAddedTypes stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test03StoresSameTypeOnce stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test04StoresMoreThanOneTypeCorrectly stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test05DoesNotStoreTypesWhenContainerIsNil stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test06CommonSupertypeOfSiblingsClassesReturnsRightSuperclass stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test07CommonSupertypeOnSameHierarchyIsMostTopClass stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test08CommonSupertypeOnSameHierarchyIsNotAffectedByAddingOrder stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test09ObjectIsCommonSupertypeWhenClassesAreNotSiblings stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test10ProtoObjectIsCommonSupertypeWhenThereAreNoTypesStored stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test11ProtoObjectIsCommonSupertypeWhenCointainerIsNil stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test12CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenIsEmpty stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test13CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenContainerIsNil stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test14UndefinedObjectIsNotConsideredWhenLookingForCommonSupertype stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test15StoresTypesIsTrueWhenContainerIsNotNil stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test16StoresTypesIsFalseWhenContainerIsNil stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test17IsMegamorphicWhenContainerIsFull stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test18IsNotMegamorphicWhenContainerIsNotFull stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test19CommonSelectorsPreviousToSameOnlyTypeIsEmpty stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test20CommonSelectorsPreviousToSuperclassOfOnlyAddedTypeAreAddedTypeSelectors stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test21CommonSelectorsPreviousToSuperclassSuperclassOfOnlyAddedTypeAreAddedTypeUpToSuperclassSelectors stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test22CommonSelectorsPreviousToInvalidSuperclassRaisesError stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test23CommonSelectorsPreviousToSuperclassOfSiblingTypesAreSiblingsCommonSelectors stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test24CommonSelectorsPreviousToOnSameHierarchyReturnsCommonSuperclassesSelectors stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test25CommonSelectorsPreviousToAddedSSupertypeOnSameHierarchyIsEmpty stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test26CommonSelectorsPreviousToWhenNotStoringTypesIsEmpty stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test27CommonSelectorsPreviousToIfInvalidSupertypeEvaluatesInvalidBlock stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test28CommonSelectorsPreviousToIfInvalidSupertypeWithManyTypesEvaluatesInvalidBlock stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test29CommonSelectosGoesUpToIncludingProtoObject stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test30CommonSupertypeIfGenericEvaluatesIfGenericBlockForObject stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test31CommonSupertypeIfGenericEvaluatesIfGenericBlockForProtoObject stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test32WithCommonSupertypeDoIfGenericEvaluatesDoBlockWhenNoGenericSupertype stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test33WithCommonSupertypeDoIfGenericEvaluatesGenericBlockWhenGenericSupertype stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test34AddingATypeWhenNoMoreSpaceEvaluatesIsFullBlock stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test35TypeIsNotMoreInTypesWhenRemoved stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test36RemovingTypeWhenTypesIsEmptyEvaluatesIfAbsent stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test37RemovingNotIncludedTypeEvaluatesIfAbsent stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test38RemovingLastAddedTypeWorksAsExpected stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test39RemoveTypeSignalExceptionWhenTypeNotFound stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #VariableTypeInfoTest #test40TypesDoEvaluatesBlockOnEachType stamp: 'JFGO 10/4/2024 19:21:25'!
PASSED!

!testRun: #FlowGraphCreationTest #test01onVarToVarAssigmentAssignorFlowsToAssignee stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #FlowGraphCreationTest #test02ThereIsAlwaysANodeForReturnValue stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #FlowGraphCreationTest #test03onAssigmentToAssigmentAllVarsAreLinked stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #FlowGraphCreationTest #test04onVarReturnItFlowsToReturnNode stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #FlowGraphCreationTest #test05CanTrackAMethodThroughMessageSends stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #FlowGraphCreationTest #test06TrackedMethodIsLinkedToVarsOnAssigment stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #FlowGraphCreationTest #test07CanTrackMultipleMethodThroughMessageSends stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #FlowGraphCreationTest #test08TrackedMethodsAreLinkedToVarsOnAssigment stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #FlowGraphCreationTest #test09InstVarsAreAlwaysAddedToGraph stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #FlowGraphCreationTest #test10WhenVarIsConnectedToReturnValueItsNeighborsAreAlsoConnected stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test01CanAddAGenericType stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test02GenericsDoesNotRepeat stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test03GenericsCannotBeAlteredFromOuterScope stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test04CanSaveASelectorForAGeneric stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test05TracedMethodsCanBeRecovered stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test06TracedMethodsCantBeModifiedExternally stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test07ATracedMethodCanBeDeleted stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test08AGenericCanBeDeleted stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test09CanSaveAGetterSelectorForAGeneric stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test10GetterSelectorsCantBeModifiedExternally stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test11CanStoreAndRetrieveTracedMethodRefs stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test12CanStoreAndRetrieveMultipleTracedMethodRefs stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test13AnalysisCanBeInitializedRecursively stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test14RecursiveAnalysisHasRecursiveTracedMethods stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test15GraphsAreDeletedWhenAllAnalysisFinish stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test16CanStoreGenericTypeConstructors stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test17SaveASelectorForAGenericWithMultipleParams stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #GAStorageTest #test18AGetterMethodCanBeDeleted stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #InferenceTest #test01GenericClassesAreReplacedByGenericTypeInstances stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #InferenceTest #test02GenericClassesAreMergedWithTheirGenericTypes stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #InferenceTest #test03LiteralCollectionOneLiteralElement stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #InferenceTest #test04LiteralCollectionLiteralElementsOfDifferentType stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #InferenceTest #test05LiteralCollectionElementsFromVariable stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #InferenceTest #test06LiteralCollectionElementsFromMethodCall stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #InferenceTest #test07LiteralCollectionElementsFromMethodCallWithArgumentsTypesFromContext stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #InferenceTest #test08LiteralCollectionElementsFromRecursiveMethod stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #InferenceTest #test09LiteralCollectionFlowingInMultipleVariables stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #InferenceTest #test10LiteralCollectionFlowingInMultipleVariablesArgumentInMethod stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #InferenceTest #test11LiteralCollectionFlowingInMultipleVariablesEachReceivingMessages stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #InferenceTest #test12LiteralCollectionFlowingInMultipleVariablesEachReceivingMessagesBeforeAndAfterAssigment stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #InferenceTest #test13LiteralCollectionFlowingInMultipleVariablesArgumentInMultipleMethod stamp: 'JFGO 10/4/2024 19:21:40'!
PASSED!

!testRun: #InferenceTest #test14LiteralCollectionFlowingInMultipleVariablesMultipleArgumentsInMethod stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test15LiteralCollectionFlowingToNonSelfMethod stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test16LiteralCollectionFlowingToSuperMethod stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test17GenericTypeReturningParameterFromGetter stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test18MethodReturningGenericType stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test19InstanceVariableUsedOnlyWithinCurrentClass stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test20InstanceVariableExposedByGetterAssignToVariable stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test21InstanceVariableExposedByMultipleGettersAssignToVariable stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test22InstanceVariableMessageSendsToGetters stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test23InstanceVariableGettersUsedAsArguments stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test24InstanceVariableFlowingToOtherVariables stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test25CollectionContainingAnotherCollection stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test26CollectionContainingMultipleCollections stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test27CollectionAssignedFromMethodCallAndNotUsedAfter stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test28ReturnResultOfMethodCall stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test29MethodCallOnMultipleClassesWithSameProtocol stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test30MethodCallInsideGenericClasses stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test31CascadeMessageSends stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test32ArgumentCollectsInfoFromCalls stamp: 'JFGO 10/4/2024 19:21:41'!
PASSED!

!testRun: #InferenceTest #test33ArgumentCollectsInfoFromCallsAndCurrentMethod stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #InferenceTest #test34GenericTypeConstructorFromArguments stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #InferenceTest #test35GenericTypeConstructorFromArgumentParameters stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #InferenceTest #test36TraceReturnValueWhenMethodReturnsArgument stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #InferenceTest #test37AddingFromOtherCollectionParameters stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #InferenceTest #test38CollectionFromLiteralNode stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #InferenceTest #test39CollectionWithMultipleParameters stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #InferenceTest #test40GetterForGenericWithMultipleParameters stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #InferenceTest #test41ArgumentCollectsInfoFromCallsWithMultipleParameters stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #InferenceTest #test42ArgumentCollectsInfoFromCallsAndCurrentMethodWithMultipleParameters stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #InferenceTest #test43ReturnTypeOfSetterMethodIsLastArgument stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #InferenceTest #test44CollectionIsDetectedWhenReturnedFromMethodAndAssignedToVariable stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #InferenceTest #test45ArgumentCollectsInfoCurrentMethodWithNoCallers stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test001SameType stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test002DifferentType stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test003SameHierarchy stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test004CommonSupertypeIsObject stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test005SameGeneric stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test006SameGenericDifferentOrder stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test007GenericsHandleSystemTypes stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test008NestedGenerics stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test009GenericSupertypeWithSameGenerics stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test010GenericSupertypeWithCommonGenerics stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test011FixedAgainstGenericType stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test012FixedAgainstGenericTypeInList stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test013GenericAgainstFixedTypeInList stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test014NestedGenerics stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test015NestedGenericsWithDifferentDepth stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test016EmptyTypeAgainstSelf stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test017EmptyTypeAgainstFixedType stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test018EmptyTypeAgainstGenericType stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test019UnionTypeCollectsTypes stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test020UnionTypeAgainstSelf stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test021UnionTypeAgainstInnerElement stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test022ConvertionAccordingToReceiver stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test023ConvertionToArray stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test024EnumeratingClassTypes stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test025EnumeratingLiveTypes stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #LiveTypeTests #test026EnumeratingLiveAndClassTypes stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test001EmptyRawTypes stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test002AllClasses stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test003AnEmptyCollectionsContentType stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test004ClassesAndCollectionsContentType stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test005ACollectionsContentTypeWithTypes stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test006SeveralCollectionsContentTypesWithTypes stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test007CreateFixedType stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test008CreateEmptyType stamp: 'JFGO 10/4/2024 19:21:42'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test009CreateGenericType stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test010CreateGenericNestedType stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test011CreateGenericNonEmptyType stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test012CreateGenericMultipleNestedType stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test001TooltipForEmptyCollection stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test002TooltipForSingleItemCollection stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test003TooltipForTwoItemsWhenSupertypeIsObject stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test004TooltipForTwoItemsWithCommonSupertype stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test005TooltipForVariableWithCollectionAndSomeOtherType stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test006TooltipForMergedCollections stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test007TooltipForSameCollectionsWithSameTypes stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test008TooltipForSameCollectionsWithCommonSuperTypes stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test009TooltipForSameCollectionsWithNoSuperTypes stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test010TooltipForCommonSuperCollectionsWithCommonSuperTypes stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test011TooltipForNestedCollections stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test012TooltipForCommonSuperCollectionsWithNoSuperTypes stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test013TooltipForCommonSuperCollectionsRepeatedWithNoSuperTypes stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test014TooltipForCommonSuperCollectionsWithEmptyCollections stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test015TooltipForCommonSuperCollectionsWithAnEmptyCollection stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test016TooltipForCommonSuperCollectionsAndNoCollection stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test017TooltipForCommonSuperTypeAndNoCommonType stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test018TooltipForCommonSuperCollectionsAndNoCollection stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test019TooltipForNestedCollectionsOneOfThemEmpty stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test020TooltipForNestedCollectionsBothSameTypes stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test021TooltipForNestedCollectionsEachNoCommonInnerType stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test022TooltipForNestedCommonSuperCollectionsNoCommonInnerType stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test023TooltipForNestedNoCommonSupertype stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test024TooltipForNestedRepeatedTypeDifferentInners stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test025TooltipForNestedCommonTypesAndIntruder stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test026TooltipForNestedCommontTypesWithTwoLevelIntruder stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test027TooltipForAwfullyComplexInnerCollections stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test028TooltipOnlyOneType stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test029TooltipCommonSuperTypeSingleClasses stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test030TooltipNoTypes stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test031TooltipNoCommonSuperTypeSingleClasses stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TooltipTests #test032TooltipForCollectionWithTwoParameters stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeFlowGraphTest #test01IsCreatedEmpty stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeFlowGraphTest #test02AddingANodeIncreasesTheirCount stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeFlowGraphTest #test03AddingAnEdgeIncreasesTheirCount stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeFlowGraphTest #test04CannotLinkInexistantNodes stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeFlowGraphTest #test05CanAccessNodesButCantDirectlyAddToResult stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeFlowGraphTest #test06CheckingConnectionOnAssociatedUndirectedGraph stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeNodeTests #test001Empty stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeNodeTests #test002Fixed stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeNodeTests #test003GenericSingleValue stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeNodeTests #test004MultipleFixed stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeNodeTests #test005GenericMultipleValues stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeNodeTests #test006MultipleFixedWithNoCommonSupertype stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeNodeTests #test007MultipleGenerics stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeNodeTests #test008GenericEmptyValue stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeNodeTests #test009MultipleGenericsEmptyValue stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #TypeNodeTests #test010EmptyAndFixed stamp: 'JFGO 10/4/2024 19:21:43'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 10/4/2024 19:21:46'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test04AlertsDetectIfNone stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test05AlertsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test07ErrorsDetectIfNone stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test10WarningsDetectIfNone stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #ManyMethodsTypeCheckerDragonTest #test15HasErrorsOrWarnings stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #MethodTypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test49ConjunctionOnlyOnOneSideAffectingContextIgnoreOtherside stamp: 'JFGO 10/4/2024 19:21:47'!
PASSED!
Morphic view for MessageSet models. See category 'GUI building'.!
Morphic view for MessageSet models. See category 'GUI building'.!

----QUIT----(4 October 2024 19:26:10) CuisUniversity-6169.image priorSource: 7446485!