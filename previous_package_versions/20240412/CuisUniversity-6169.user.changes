

----STARTUP---- (27 March 2024 14:26:54) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


!testRun: #ActualImplementorsTest #test01WhenIsImplementedOnlyInRootReturnsThatImplementorOnly stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test02ReturnsImplementorsOfSuperclasses stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test03IfNotImplementedInRootOrSuperclassesDoesNotIncludeSubclassesImplementations stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test04IncludesSubclassesImplementations stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test05DoesNotIncludeImplementorsOfSubclassesNotDefinedInSuperclass stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test06DoesNotIncludeImplementorsOfSiblingsWhenNotDefinedInSuperclass stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test07ReturnsAllSubclassesImplementorsOfTheHighestImplementorClass stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test08highestClassImplementingSelectorReturnsHighgestClass stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test09WhenNoHighestClassImplementingSelectorIfNoneBlockIsEvaluated stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test01SurelyRecognizeTypeSenderWhenSentToInstanceVariable stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test02SurelyRecognizeTypeSenderWhenSentToTemporaryVariable stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test03SurelyRecognizeTypeSenderInACollaboration stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test04RecognizeTypeSendersToInstancesOfSubClasses stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test05RecognizeTypeSendersToLiteralTrue stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test06RecognizeTypeSendersToLiteralFalse stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test07RecognizeTypeSendersToThisContext stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test08RecognizeTypeSendersToSelf stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test09RecognizeTypeSendersToSuper stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test09_01 stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test10RecognizeTypeSendersToSelfOfMessageImplementedInSuperclass stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test11RecognizeTypeSendersToReturnsOfMessageSend stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test12RecognizeTypeSendersOfChainedMessageSends stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test13RecognizeTypeSendersToReturnOfMessageSendNoMatterThePrecedence stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test14RecognizeTypeSendersToClasses stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test15RecognizeTypeSendersToVariablesReferencingClasses stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test16RecognizeTypeSendersToAnyLiteral stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test17CanRecognizePossibleTypeSenders stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test18RecognizeTypeSendersWhenReturnTypeIsSelfType stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test19RecognizeTypeSendersWhenReturnTypeIsClassType stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test20SurelySendWhenReceiverTypeIsSuperclassOfImplementorType stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test21ActualSendersWorksWithCascadeMessageSends stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test22ActualSendersDoesNotHangWhenReceiverIsTempVarInMethodWithoutTypes stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:32'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32' prior: 50526953!
m3 | x | self m1: 1. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:32'!
m1!

!testRun: #AddParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:32'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:32'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32'!
m3 | x | self m1: 1 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32'!
m1: p1 m2: p2 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32' prior: 50526994!
m3 | x | self m1: 1 m2: 2 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'JFGO 3/27/2024 14:37:32'!
m1: p1 m3: p3!

!testRun: #AddParameterWithActualScopeTest #test01_01_DoesNotChangePossibleMessageSendWhenInstructedToDoSoWithKeywordMessages stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #AddParameterWithActualScopeTest #test02CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 3/27/2024 14:37:33'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m1: p1 m3: p3! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1 m3: 3! !

!testRun: #AddParameterWithActualScopeTest #test02_01_CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsForKeywordMessage stamp: 'JFGO 3/27/2024 14:37:33'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:33'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33' prior: 50527144!
m3 | x | x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:33'!
m1!

!testRun: #AddParameterWithActualScopeTest #test03AddParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 3/27/2024 14:37:33'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:34'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34' prior: 50527203!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:34'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:34'!
m1!

!testRun: #AddParameterWithActualScopeTest #test04AddParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 3/27/2024 14:37:34'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34' prior: 50527267!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:34'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:34'!
m1!

!testRun: #AddParameterWithActualScopeTest #test05AddParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 3/27/2024 14:37:34'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34' prior: 50527332!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:34'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:34'!
m1!

!testRun: #AddParameterWithActualScopeTest #test06AddParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 3/27/2024 14:37:34'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35' prior: 50527386!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:35'!
m1!

!testRun: #AddParameterWithActualScopeTest #test07AddParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 3/27/2024 14:37:35'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35' prior: 50527434!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:35'!
m1!

!testRun: #AddParameterWithActualScopeTest #test08AddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 3/27/2024 14:37:35'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m3 self m1. ClassOfSender new m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35' prior: 50527494!
m3 self m1: 1. ClassOfSender new m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:35'!
m1!

!testRun: #AddParameterWithActualScopeTest #test09AddParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 3/27/2024 14:37:35'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m3 |x| self m1. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35' prior: 50527540!
m3 |x| self m1: 1. x m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:35'!
m1!

!testRun: #AddParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenAddingParameterToMethodWithSureAndPossibleSenders stamp: 'JFGO 3/27/2024 14:37:35'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:36'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:36'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:36'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:36'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:36'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:36'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #AddParameterWithActualScopeTest #test11CanNotAddParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:36'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:36'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:36'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:36'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:36'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:36'!
m3 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:36'!
m1: p1 m2: p2 ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:36' prior: 50527642!
m3 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'JFGO 3/27/2024 14:37:36'!
m1: p1!

!testRun: #AddParameterWithActualScopeTest #test13AddLastParameterCorrectly stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:36'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:36'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AdditionalMethodStateTest #test01topBlockTempsMapReturnsTheTempsMapOfTheMethod stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test02MethodWithNoParametersNoTemporariesAreInitializedCorrectly stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test03MethodWithOnlyOneArgumentAreInitializedCorrectly stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test04rawTypesOfInvalidVariableNameEvaluatesIfAbsentBlock stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test05MethodWithOnlyOneTempTwoArgumentsAreInitializedCorrectly stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test06MethodWithRemoveVectorVariablesAreInitializedCorrectly stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test07RemoteVectorRawTypesIsNilWhenMethodHasNoVariableInRemoteVector stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test08VariableRawTypesIsNilWhenMethodHasNoVariableButHasInRemoteVector stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test09CanGetRawTypesWhenMethodHasNoVariableButHasInRemoteVector stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #ClosureVariablesTest #testOneArrayForTypesIsCreatedWhenAMethodHasNoClosures stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test01TypeConvertionForAClassReturnsSameClass stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test02TypeConvertionForSelfTypeReturnsReceiversType stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test03TypeConvertionForClassTypeReturnsReceiversTypeClass stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test04ClassMessageSendChainsClassType stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test05TypeConvertionForInstanceTypeReturnsMetaclassSoleInstance stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test06newTypeIsMetaclassSoleInstance stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test07InstanceTypeReturnsClassWhenIsKindOfOfBehaviorButNotMeta stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test08InstanceTypeErrorsWhenUsedWithNoBehavior stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test09ClassTypeForMetamodelIsMetaclass stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test01TypeCollectionOfInstanceVariableDefinedInLeafClassDoesNotTraverseHierarchy stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test02TypeCollectionIncludesSubclasses stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test03TypeCollectionDoesNotIncludeSuperclassesAndSiblings stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test05TypeCollectionIncludesAllSubclasses stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test06IsNotMegamorphicIfTypesSizeIsLessToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test07IsMegamorphicIfTypesSizeIsEqualToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test08IsNotMegamorphicIfDoesNotFillRawTypesForLocalTypeInfo stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test09IsMegamorphicIfFillsRawTypesOfDefiningClassForLocalTypeInfo stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test10IsMegamorphicIfFillsRawTypesOfNotDefiningClassForLocalTypeInfo stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test11IsTypesEmptyOfNonLocalTypeInfoTakesCareOfHierarchy stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test12IsTypesEmptyForLocalTypeInfoOnlyCheckOnLocalRawTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 3/27/2024 14:37:37'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 3/27/2024 14:37:37'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #InstanceVariableTypeInfoTest #test13RemovingAClassRemovesItAndItsClassFromInstanceVariableRawTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test14InstVarAtPutKeepTypeInfo stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test01InstanceVariablesTypesIsInitializedWithAnArrayOfClassInstSize stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test02InitializeInstanceVariablesTypesWithAllInstancesStoreCurrentClassInstancesTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test03TypesOfDifferentInstVarsAreStoredCorrectly stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test04MoreThanOneTypeAreStoredCorrectlyInDifferentInstVars stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test05TypesAreStoredUpToInstVarTypesSize stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test06NoTypesAreStoredWhenInstVarTypesIsNil stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test07CommonSupertypeOfReturnsSupertypeOfStoredTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test08CommonSupertypeIfNoTypesEvaluatesAlternativeBlockWhenNoTypeHasBeenStore stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test09EvaluatesIfAbsentBlockWhenAskTypeInfoForNonExistingInstVar stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test01KeepTypesOfLocalTemporariesI stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test02KeepTypesOfRemoteTemporaries stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test03KeepTypesOfParameters stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test04KeepReturnTopTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test05KeepReturnConstantTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test06KeepReturnReceiverTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test07KeepReturnFromClosureTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test08KeepReturnTypeWhenUnwind stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test09BlockReturnDoesNotAffectMethodReturn stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test10KeepTypesOfParametersWhenSendingValueWithArguments stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test11BlockWithParametersDoNotAffectMethodParameters stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables_WithSelectorsOfInstVarTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'JFGO 3/27/2024 14:37:38'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 3/27/2024 14:37:38'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsOfTempVarTypes stamp: 'JFGO 3/27/2024 14:37:38'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'JFGO 3/27/2024 14:37:38'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 3/27/2024 14:37:38'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test045_AutocompletesEntriesFor_patternUnary_containsExactlyTwoMethods stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test046_AutocompletesEntriesFor_patternUnary_notContainsAnyMethod stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test047_AutocompletesEntriesFor_patternUnary_doesNotAutocompleteMethodOfSameClass stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test048_AutocompletesEntriesFor_patternKeyword_containsExactlyOneMethod stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test049_AutocompletesEntriesFor_patternKeyword_notContainsAnyMethod stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test050_AutocompletesEntriesFor_patternKeyword_doesNotAutocompleteMethodOfSameClass stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test051_AutocompletesEntriesFor_patternBinary_containsExactlyOneMethod stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test052_AutocompletesEntriesFor_patternBinary_notContainsAnyMethod stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test053_AutocompletesEntriesFor_patternBinary_doestNotAutocompleteMethodOfSameClass stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #testMessages stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ArrayWithArrayAndOtherObjects stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArray stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayOfArray stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayWithManyElements stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBinaryInParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlock stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfBlock stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfEvaluatedBlock stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndExpresionInParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndLiteralArray stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndMoreThanOneUnaryAfterExpresionInParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBlock stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBrace stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterCharacter stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterLiteralArray stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterStringSymbol stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterSymbol stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUnaryInProtoObject stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterUnary stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteMessageAfterUnary stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryInParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithMoreThanOneUnary stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithOneUnary stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ClosedAndUnclosedParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionInManyParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionWithMoreThanOneParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_LFBeforeParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_SpaceBeforeParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnaryAfterExpresionInParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedArrayAfterClosedArray stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedBlockAfterBlock stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedDoubleParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_selfInProtoObject stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_ExpresionInParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_MoreThanOneUnaryMessage stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_OnlyRightParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test01CanSignalItWithAMethod stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test02IsResumable stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 3/27/2024 14:37:39'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 3/27/2024 14:37:39'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test01RemovingAClassRemovesItFromMethodVariableRawTypesForParameter stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 3/27/2024 14:37:40'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 3/27/2024 14:37:40'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test02RemovingAClassRemovesItsClassFromMethodVariableRawTypesForParameter stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 3/27/2024 14:37:40'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 3/27/2024 14:37:40'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test03RemovingAClassRemovesItFromMethodVariablesRawTypes stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 3/27/2024 14:37:40'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 3/27/2024 14:37:40'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test04RemovingAClassRemovesItFromMethodVariableRemoteVectorRawTypes stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test01ActualSendersIsEmpty stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test02CategoryIsNil stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test03CompiledMethodSignalsError stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test04CompiledMethodIfAbsentEvaluatesIfAbsentBlock stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test05doesOnlySurelySendReturnsFalse stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test06dynamicTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test07IsNotValid stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test08liveTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test09rangesOASentSelectorWhenSendToReceiverTypesIsEmpty stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test10FailsWhenAsItsSourceCode stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test11StringVersionStartsWithNotImplemented stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #PossibleSenderTest #test01StringVersionBeginsWithPossible stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:40'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:40'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:40'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:40'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:40' prior: 50528505!
m3 | x | self m1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:40'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!testRun: #RemoveParameterWithActualScopeTest #test02CanNotRemoveParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 3/27/2024 14:37:41'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m3 | x | x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41' prior: 50528604!
m3 | x | x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test03RemovesParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 3/27/2024 14:37:41'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:41'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41' prior: 50528665!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test04RemovesParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 3/27/2024 14:37:41'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41' prior: 50528731!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test05RemovesParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 3/27/2024 14:37:42'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42' prior: 50528798!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test06RemovesParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 3/27/2024 14:37:42'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42' prior: 50528855!
m3 | x | self m1. false ifTrue: [ x m1]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test07RemovesParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 3/27/2024 14:37:42'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42' prior: 50528905!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test08RemovesParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 3/27/2024 14:37:42'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m3 self m1: 1. ClassOfSender new m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43' prior: 50528967!
m3 self m1. ClassOfSender new m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:43'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test09RemovesParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 3/27/2024 14:37:43'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m3 |x| self m1: 1. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43' prior: 50529016!
m3 |x| self m1. x m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:43'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRemovingParameterToMethodWithSureAndPossibleSenders stamp: 'JFGO 3/27/2024 14:37:43'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1; printString! !

!testRun: #RemoveParameterWithActualScopeTest #test11CanNotRemoveParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 3/27/2024 14:37:43'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 3/27/2024 14:37:44'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:44'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m1: p1 m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m3 self m1: 1 m2: 2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44' prior: 50529120!
m3 self m2: 2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'JFGO 3/27/2024 14:37:44'!
m1: p1 m2: p2!

!testRun: #RemoveParameterWithActualScopeTest #test13RemovesOtherThanLastParameterCorrectly stamp: 'JFGO 3/27/2024 14:37:44'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:44'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44' prior: 50529167!
m3 | x | self m2. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:44'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test01DoesNotRenamesPossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 3/27/2024 14:37:44'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #RenameSelectorWithActualScopeTest #test02CanNotRenameWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 3/27/2024 14:37:44'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45' prior: 50529266!
m3 | x | x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:45'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test03RenamesWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 3/27/2024 14:37:45'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:45'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45' prior: 50529326!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:45'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:45'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test04RenamesWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 3/27/2024 14:37:45'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45' prior: 50529392!
m3 | x y | x := self. y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:45'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:45'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test05RenamesDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 3/27/2024 14:37:45'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45' prior: 50529458!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:45'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:45'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test06RenamesDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 3/27/2024 14:37:46'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46' prior: 50529513!
m3 | x | self m2. false ifTrue: [ x m2 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:46'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test07RenamePossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 3/27/2024 14:37:46'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46' prior: 50529562!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:46'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test08RenamesWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 3/27/2024 14:37:46'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m3 self m1. ClassOfSender new m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46' prior: 50529623!
m3 self m2. ClassOfSender new m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:46'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test09RenamesOnlyValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 3/27/2024 14:37:46'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:47'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:47'!
m3 |x| self m1. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:47'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:47' prior: 50529670!
m3 |x| self m2. x m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:47'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRenamingAMethodWithSureAndPossibleSenders stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:47'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:47'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:47'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #RenameSelectorWithActualScopeTest #test11CanNotRenameWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test01QuickReturnSelfMethodsReturnSelfTypeAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test02QuickReturnTrueMethodsReturnTrueReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test03QuickReturnFalseMethodsReturnFalseAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test04QuickReturnNilMethodsReturnUndefinedObjectAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test05QuickReturnMinusOneMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test06QuickReturnZeroMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test07QuickReturnOneMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test08QuickReturnTwoMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test09QuickReturnOfFirstInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test10QuickReturnOfSecondInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test11classMethodReturnsClassTypeAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test12newMethodReturnsInstanceTypeAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test13yourselfMethodReturnsSelfTypeAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 3/27/2024 14:37:47'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 3/27/2024 14:37:47'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #ReturnTypeInfoTest #test14RemovingAClassRemovesItAndItsClassFromMethodReturnType stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ReturnTypeInfoTest #test15ReturnTypesOfAbstractMethodsIncludesSubclassesImplementationsTypes stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ReturnTypeInfoTest #test16ReturnTypesOfAbstractMethodWorksWhenNotImplementedInAllSubclasses stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test01IsEmptyWhenAllTypesAreNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test02StoresAddedTypes stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test03StoresSameTypeOnce stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test04StoresMoreThanOneTypeCorrectly stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test05DoesNotStoreTypesWhenContainerIsNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test06CommonSupertypeOfSiblingsClassesReturnsRightSuperclass stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test07CommonSupertypeOnSameHierarchyIsMostTopClass stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test08CommonSupertypeOnSameHierarchyIsNotAffectedByAddingOrder stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test09ObjectIsCommonSupertypeWhenClassesAreNotSiblings stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test10ProtoObjectIsCommonSupertypeWhenThereAreNoTypesStored stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test11ProtoObjectIsCommonSupertypeWhenCointainerIsNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test12CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenIsEmpty stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test13CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenContainerIsNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test14UndefinedObjectIsNotConsideredWhenLookingForCommonSupertype stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test15StoresTypesIsTrueWhenContainerIsNotNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test16StoresTypesIsFalseWhenContainerIsNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test17IsMegamorphicWhenContainerIsFull stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test18IsNotMegamorphicWhenContainerIsNotFull stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test19CommonSelectorsPreviousToSameOnlyTypeIsEmpty stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test20CommonSelectorsPreviousToSuperclassOfOnlyAddedTypeAreAddedTypeSelectors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test21CommonSelectorsPreviousToSuperclassSuperclassOfOnlyAddedTypeAreAddedTypeUpToSuperclassSelectors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test22CommonSelectorsPreviousToInvalidSuperclassRaisesError stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test23CommonSelectorsPreviousToSuperclassOfSiblingTypesAreSiblingsCommonSelectors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test24CommonSelectorsPreviousToOnSameHierarchyReturnsCommonSuperclassesSelectors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test25CommonSelectorsPreviousToAddedSSupertypeOnSameHierarchyIsEmpty stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test26CommonSelectorsPreviousToWhenNotStoringTypesIsEmpty stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test27CommonSelectorsPreviousToIfInvalidSupertypeEvaluatesInvalidBlock stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test28CommonSelectorsPreviousToIfInvalidSupertypeWithManyTypesEvaluatesInvalidBlock stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test29CommonSelectosGoesUpToIncludingProtoObject stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test30CommonSupertypeIfGenericEvaluatesIfGenericBlockForObject stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test31CommonSupertypeIfGenericEvaluatesIfGenericBlockForProtoObject stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test32WithCommonSupertypeDoIfGenericEvaluatesDoBlockWhenNoGenericSupertype stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test33WithCommonSupertypeDoIfGenericEvaluatesGenericBlockWhenGenericSupertype stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test34AddingATypeWhenNoMoreSpaceEvaluatesIsFullBlock stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test35TypeIsNotMoreInTypesWhenRemoved stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test36RemovingTypeWhenTypesIsEmptyEvaluatesIfAbsent stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test37RemovingNotIncludedTypeEvaluatesIfAbsent stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test38RemovingLastAddedTypeWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test39RemoveTypeSignalExceptionWhenTypeNotFound stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test40TypesDoEvaluatesBlockOnEachType stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test04ProblemsDetectIfNone stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test05ProblemsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test07ErrorsDetectIfNone stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test10WarningsDetectIfNone stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test15HasErrorsOrWarnings stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test01MethodNotAnnotatingTypesGeneratesWarning stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test02EmptyMethodDoesNotGenerateWarningsOrErrors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test03MessageSendNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test04MessageUnderstooodByReceiverDoesNotGenerateErrors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test05ErrorsWhenNoTypeImplementMessageSent stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test06DifferentErrorsAreReported stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test07ReceiverWithoutTypesGeneratesWarning stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test08GivesAWarningWhenReceiversTypeHasAnError stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test09WhenMethodHasNoReturnTypesAProblemIsAdded stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test10PrimitiveMethodsAreNotTypedChecked stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test11IfNotNilFiltersUndefinedObjectType stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test12IfNotNilDoesNotFiltersUndefinedObjectTypeForNotCheckedObject stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test13ComparingForNilWithIfTrueIfFalse stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test14ComparingForNilWithIfTrueIfFalseWhenNilFiltersOtherTypes stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test15ComparingForNilWithIfTrueIfFalseWhenNilKeepsUndefinedObject stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test16NestedIfNotNilFiltersUndefinedObjectType stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test17NestedIfNotNilDoesNotFilterUndefinedObjectWhenOutsideRightIfNotNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test18IfNilAssumesUndefinedObjectAsType stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test19NestedIfNilAssumesUndefinedObjectAsType stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test20NestedIfNilDoesUseUndefinedObjectWhenOutsideRightIfNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test21IfNilIfNotNilWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test22IfNotNilIfNilWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test23EqualsNilIfTrueIfFalseWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test24EqualsNilIfTrueWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test25IdenticalToNilIfTrueWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test26EqualsNilIfFalseWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test27IdenticalToNilIfFalseWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test28EqualsToNilIfFalseIfTrueWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test29IdenticalToNilIfFalseIfTrueWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test30nilEqualsToIfTrueIfFalseOrIfFalseIfTrueWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test31nilEqualsToIfTrueOrIfFalseWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32nilIdenticalToWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32_01_nilNotIdenticalOrEqualToWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test33NotEqualToNilWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test34NotIdenticalToNilWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test35isNilWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test36notNilWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test37TypeCastWithEqualOrIdenticalToWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test38TypeCastWithNotEqualOrNotIdenticalToWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test39TypeCastToUsingEqualOrIdenticalToWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test40TypeCastToUsingNotEqualOrNotIdenticalToWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test41TypeCastUsingIsKindOfToWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test42TypeCheckMessageWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test43TypeCheckMessageSentToSelfWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test44TypeCheckMessageWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test46TypeCastRejectsCanBeNested stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test47IsKindOfCastingAllowsSubtypes stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test48IfNotNilWithBlockArgumentFiltersUndefinedObject stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test49TypeCastWithBlockInRejectBlockKeepsCastingStrategy stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test50TypeCastWithoutBlockShouldFail stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test51NotNilAndFiltersUndefinedObject stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test52CascasdeMessageSendAreTypeChecked stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test53TypeCastWorksOnCascadeMessageSends stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test54IfNilWithReturnRejectsNilInNextColaborations stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test55TypeCheckMessageWithSubclassesReturningFalse stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test56Float_store_on_hasNoTypeErrors stamp: 'JFGO 3/27/2024 14:37:48'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test57TypeCheckMessageWithFalse_True_False_InSubclassesCastCorrectly stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test58TypeCheckMessageWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test59TypeCheckMessageWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test60TypeCastWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test61TypeCastWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test62ifNotNilifNotNilWithMoreThanAMessageSendAndNilAsValue stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test63orCheck stamp: 'JFGO 3/27/2024 14:37:48'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test64notNilAndIfTrue stamp: 'JFGO 3/27/2024 14:37:48'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test65isNilOr stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66DoesNotFailsWithMessageSendAsConditionOfIfTrueWithCascadeSend stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66orWithoutMessageAsReceiverShouldNotError stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test67andWithoutMessageAsReceiverShouldNotError stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test68DoesNotFailsWithIfTrueSendInCascadeMode stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

----End fileIn of C:\Users\juli_\Tesis\TESIS-LAST\windows64\LiveTypingGenerics.pck.st----!

!testRun: #FlowGraphCreationTest #test01onVarToVarAssigmentAssignorFlowsToAssignee stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test02ThereIsAlwaysANodeForReturnValue stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test03onAssigmentToAssigmentAllVarsAreLinked stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test04onVarReturnItFlowsToReturnNode stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test05CanTrackAMethodThroughMessageSends stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test06TrackedMethodIsLinkedToVarsOnAssigment stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test07CanTrackMultipleMethodThroughMessageSends stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test08TrackedMethodsAreLinkedToVarsOnAssigment stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test09InstVarsAreAlwaysAddedToGraph stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test10WhenVarIsConnectedToReturnValueItsNeighborsAreAlsoConnected stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test01CanAddAGenericType stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test02GenericsDoesNotRepeat stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test03GenericsCannotBeAlteredFromOuterScope stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test04CanSaveASelectorForAGeneric stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test05TracedMethodsCanBeRecovered stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test06TracedMethodsCantBeModifiedExternally stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test07ATracedMethodCanBeDeleted stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test08AGenericCanBeDeleted stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test09CanSaveAGetterSelectorForAGeneric stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test10GetterSelectorsCantBeModifiedExternally stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test11CanStoreAndRetrieveTracedMethodRefs stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test12CanStoreAndRetrieveMultipleTracedMethodRefs stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test13AnalysisCanBeInitializedRecursively stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test14RecursiveAnalysisHasRecursiveTracedMethods stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test15GraphsAreDeletedWhenAllAnalysisFinish stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test16CanStoreGenericTypeConstructors stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test17SaveASelectorForAGenericWithMultipleParams stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test18AGetterMethodCanBeDeleted stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test01GenericClassesAreReplacedByGenericTypeInstances stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test02GenericClassesAreMergedWithTheirGenericTypes stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test03LiteralCollectionOneLiteralElement stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test04LiteralCollectionLiteralElementsOfDifferentType stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test05LiteralCollectionElementsFromVariable stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test06LiteralCollectionElementsFromMethodCall stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test07LiteralCollectionElementsFromMethodCallWithArgumentsTypesFromContext stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test08LiteralCollectionElementsFromRecursiveMethod stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test09LiteralCollectionFlowingInMultipleVariables stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test10LiteralCollectionFlowingInMultipleVariablesArgumentInMethod stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test11LiteralCollectionFlowingInMultipleVariablesEachReceivingMessages stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test12LiteralCollectionFlowingInMultipleVariablesEachReceivingMessagesBeforeAndAfterAssigment stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test13LiteralCollectionFlowingInMultipleVariablesArgumentInMultipleMethod stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test14LiteralCollectionFlowingInMultipleVariablesMultipleArgumentsInMethod stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test15LiteralCollectionFlowingToNonSelfMethod stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test16LiteralCollectionFlowingToSuperMethod stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test17GenericTypeReturningParameterFromGetter stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test18MethodReturningGenericType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test19InstanceVariableUsedOnlyWithinCurrentClass stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test20InstanceVariableExposedByGetterAssignToVariable stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test21InstanceVariableExposedByMultipleGettersAssignToVariable stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test22InstanceVariableMessageSendsToGetters stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test23InstanceVariableGettersUsedAsArguments stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test24InstanceVariableFlowingToOtherVariables stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test25CollectionContainingAnotherCollection stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test26CollectionContainingMultipleCollections stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test27CollectionAssignedFromMethodCallAndNotUsedAfter stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test28ReturnResultOfMethodCall stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test29MethodCallOnMultipleClassesWithSameProtocol stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test30MethodCallInsideGenericClasses stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test31CascadeMessageSends stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test32ArgumentCollectsInfoFromCalls stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test33ArgumentCollectsInfoFromCallsAndCurrentMethod stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test34GenericTypeConstructorFromArguments stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test35GenericTypeConstructorFromArgumentParameters stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test36TraceReturnValueWhenMethodReturnsArgument stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test37AddingFromOtherCollectionParameters stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test38CollectionFromLiteralNode stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test39CollectionWithMultipleParameters stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test40GetterForGenericWithMultipleParameters stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test41ArgumentCollectsInfoFromCallsWithMultipleParameters stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test42ArgumentCollectsInfoFromCallsAndCurrentMethodWithMultipleParameters stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test43ReturnTypeOfSetterMethodIsLastArgument stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test44CollectionIsDetectedWhenReturnedFromMethodAndAssignedToVariable stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test45ArgumentCollectsInfoCurrentMethodWithNoCallers stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test001SameType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test002DifferentType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test003SameHierarchy stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test004CommonSupertypeIsObject stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test005SameGeneric stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test006SameGenericDifferentOrder stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test007GenericsHandleSystemTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test008NestedGenerics stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test009GenericSupertypeWithSameGenerics stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test010GenericSupertypeWithCommonGenerics stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test011FixedAgainstGenericType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test012FixedAgainstGenericTypeInList stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test013GenericAgainstFixedTypeInList stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test014NestedGenerics stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test015NestedGenericsWithDifferentDepth stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test016EmptyTypeAgainstSelf stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test017EmptyTypeAgainstFixedType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test018EmptyTypeAgainstGenericType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test019UnionTypeCollectsTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test020UnionTypeAgainstSelf stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test021UnionTypeAgainstInnerElement stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test022ConvertionAccordingToReceiver stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test023ConvertionToArray stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test024EnumeratingClassTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test025EnumeratingLiveTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test026EnumeratingLiveAndClassTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test001EmptyRawTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test002AllClasses stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test003AnEmptyCollectionsContentType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test004ClassesAndCollectionsContentType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test005ACollectionsContentTypeWithTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test006SeveralCollectionsContentTypesWithTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test007CreateFixedType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test008CreateEmptyType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test009CreateGenericType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test010CreateGenericNestedType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test011CreateGenericNonEmptyType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test012CreateGenericMultipleNestedType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test001TooltipForEmptyCollection stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test002TooltipForSingleItemCollection stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test003TooltipForTwoItemsWhenSupertypeIsObject stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test004TooltipForTwoItemsWithCommonSupertype stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test005TooltipForVariableWithCollectionAndSomeOtherType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test006TooltipForMergedCollections stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test007TooltipForSameCollectionsWithSameTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test008TooltipForSameCollectionsWithCommonSuperTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test009TooltipForSameCollectionsWithNoSuperTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test010TooltipForCommonSuperCollectionsWithCommonSuperTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test011TooltipForNestedCollections stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test012TooltipForCommonSuperCollectionsWithNoSuperTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test013TooltipForCommonSuperCollectionsRepeatedWithNoSuperTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test014TooltipForCommonSuperCollectionsWithEmptyCollections stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test015TooltipForCommonSuperCollectionsWithAnEmptyCollection stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test016TooltipForCommonSuperCollectionsAndNoCollection stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test017TooltipForCommonSuperTypeAndNoCommonType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test018TooltipForCommonSuperCollectionsAndNoCollection stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test019TooltipForNestedCollectionsOneOfThemEmpty stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test020TooltipForNestedCollectionsBothSameTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test021TooltipForNestedCollectionsEachNoCommonInnerType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test022TooltipForNestedCommonSuperCollectionsNoCommonInnerType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test023TooltipForNestedNoCommonSupertype stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test024TooltipForNestedRepeatedTypeDifferentInners stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test025TooltipForNestedCommonTypesAndIntruder stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test026TooltipForNestedCommontTypesWithTwoLevelIntruder stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test027TooltipForAwfullyComplexInnerCollections stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test028TooltipOnlyOneType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test029TooltipCommonSuperTypeSingleClasses stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test030TooltipNoTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test031TooltipNoCommonSuperTypeSingleClasses stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test032TooltipForCollectionWithTwoParameters stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeFlowGraphTest #test01IsCreatedEmpty stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeFlowGraphTest #test02AddingANodeIncreasesTheirCount stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeFlowGraphTest #test03AddingAnEdgeIncreasesTheirCount stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeFlowGraphTest #test04CannotLinkInexistantNodes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeFlowGraphTest #test05CanAccessNodesButCantDirectlyAddToResult stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeFlowGraphTest #test06CheckingConnectionOnAssociatedUndirectedGraph stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test001Empty stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test002Fixed stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test003GenericSingleValue stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test004MultipleFixed stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test005GenericMultipleValues stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test006MultipleFixedWithNoCommonSupertype stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test007MultipleGenerics stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test008GenericEmptyValue stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test009MultipleGenericsEmptyValue stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test010EmptyAndFixed stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

----End fileIn of C:\Users\juli_\Tesis\TESIS-LAST\windows64\LiveTypingTypeChecker.pck.st----!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:28:42' prior: 50541834!
receiverLiveTypesRejectingObjectFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes filteredTypes |
	originalTypes := previousContext receiverLiveTypesFor: aVariableNode In:  compiledMethod.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	filteredTypes := OrderedCollection new.
	(RawToLiveTypesAdapter new adapt: filteredLiveTypes) classTypesDo: [:aClass | filteredTypes add:aClass].
	
	^filteredTypes asArray .
	
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:28:58' prior: 50542358!
receiverLiveTypesRejectingObjectFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes filteredTypes |
	originalTypes := previousContext receiverLiveTypesFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	filteredTypes := OrderedCollection new.
	(RawToLiveTypesAdapter new adapt: filteredLiveTypes) classTypesDo: [:aClass | filteredTypes add:aClass].
	
	^filteredTypes asArray .
	
! !

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesRejectingObjectFor:In: stamp: 'JFGO 3/27/2024 15:29:23'!
receiverLiveTypesRejectingObjectFor: aVariableNode In:  compiledMethod
	


	| originalTypes filteredLiveTypes filteredTypes |
	originalTypes := previousContext receiverLiveTypesFor: aVariableNode In:  compiledMethod.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	filteredTypes := OrderedCollection new.
	(RawToLiveTypesAdapter new adapt: filteredLiveTypes) classTypesDo: [:aClass | filteredTypes add:aClass].
	
	^filteredTypes asArray .
	
!
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:29:33' prior: 50541818!
receiverLiveTypesFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aVariableNode In: compiledMethod ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:29:42' prior: 50542421!
receiverLiveTypesFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:29:49'!
receiverLiveTypesCastingObjectFor: aVariableNode In:  compiledMethoda ddingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^Array with: type.
	
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:29:50' prior: 50541810!
receiverLiveTypesCastingObjectFor: aVariableNode In:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^Array with: type.
	
! !

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesCastingObjectFor:In:ddingIncompleteTypeInfoTo: stamp: 'JFGO 3/27/2024 15:29:52'!
receiverLiveTypesCastingObjectFor: aVariableNode In:  compiledMethoda ddingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^Array with: type.
	
!

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesFor:In: stamp: 'JFGO 3/27/2024 15:29:55'!
receiverLiveTypesFor: aVariableNode In:  compiledMethod
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aVariableNode In: compiledMethod ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aVariableNode In: compiledMethod ]
!

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesCastingObjectFor:In: stamp: 'JFGO 3/27/2024 15:29:56'!
receiverLiveTypesCastingObjectFor: aVariableNode In:  compiledMethod
	


	^Array with: type.
	
!
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:30:12'!
receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
! !
!EqualsTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 15:30:12' prior: 50542379!
receiverLiveTypesRejectingObjectFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes filteredTypes |
	originalTypes := previousContext receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	filteredTypes := OrderedCollection new.
	(RawToLiveTypesAdapter new adapt: filteredLiveTypes) classTypesDo: [:aClass | filteredTypes add:aClass].
	
	^filteredTypes asArray .
	
! !

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesFor:In:addingIncompleteTypeInfoTo: stamp: 'JFGO 3/27/2024 15:30:12'!
receiverLiveTypesFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
!
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:30:20'!
receiverLiveTypesRejectingObjectFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes filteredTypes |
	originalTypes := previousContext receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	filteredTypes := OrderedCollection new.
	(RawToLiveTypesAdapter new adapt: filteredLiveTypes) classTypesDo: [:aClass | filteredTypes add:aClass].
	
	^filteredTypes asArray .
	
! !
!EqualsTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 15:30:20' prior: 50542496!
receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aVariableNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
! !

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesRejectingObjectFor:In:addingIncompleteTypeInfoTo: stamp: 'JFGO 3/27/2024 15:30:20'!
receiverLiveTypesRejectingObjectFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes filteredTypes |
	originalTypes := previousContext receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	filteredTypes := OrderedCollection new.
	(RawToLiveTypesAdapter new adapt: filteredLiveTypes) classTypesDo: [:aClass | filteredTypes add:aClass].
	
	^filteredTypes asArray .
	
!
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:30:29'!
receiverLiveTypesCastingObjectFor: aVariableNode in:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^Array with: type.
	
! !
!EqualsTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 15:30:29' prior: 50542573!
receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aVariableNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aVariableNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
! !

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesCastingObjectFor:In:addingIncompleteTypeInfoTo: stamp: 'JFGO 3/27/2024 15:30:29'!
receiverLiveTypesCastingObjectFor: aVariableNode In:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^Array with: type.
	
!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 15:30:35'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:30:35'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 15:30:41'!
ERROR!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 3/27/2024 15:31:03' prior: 50540781 overrides: 16919312!
visitBlockNode: aBlockNode
	"TODO. Cuando inicializamos el visitor, podemos inicializar el contextApplier y ahorrar el ifNil. El blockNode no parece usarse.. sacarlo y correr tests"
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	(aBlockNode equivalentTo: blockNode) ifTrue:[
		types:= contextApplier receiverLiveTypesFor: variableName in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
	].
	super visitBlockNode: aBlockNode.
	! !

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 15:31:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:31:06'!
ERROR!
!GeneralContextApplier methodsFor: 'LiveTyping-Variable Nodes' stamp: 'JFGO 3/27/2024 15:31:43'!
receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aVariableNode typesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !

!methodRemoval: GeneralContextApplier #receiverLiveTypesFor:In: stamp: 'JFGO 3/27/2024 15:31:45'!
receiverLiveTypesFor: aVariableNode In:  compiledMethod
	^ aVariableNode typesIn: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 15:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:31:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:37:41'!
ERROR!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 15:37:41'!
ERROR!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 15:37:41'!
ERROR!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:37:41'!
ERROR!
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:30:20' prior: 50542551!
receiverLiveTypesRejectingObjectFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes filteredTypes |
	originalTypes := previousContext receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	filteredTypes := OrderedCollection new.
	(RawToLiveTypesAdapter new adapt: filteredLiveTypes) classTypesDo: [:aClass | filteredTypes add:aClass].
	
	^filteredTypes asArray .
	
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:40:11' prior: 50542612!
receiverLiveTypesCastingObjectFor: aVariableNode in:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^FixedType for: type.
	
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:40:55' prior: 50542778!
receiverLiveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := previousContext receiverLiveTypesFor: aParseNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:41:25' prior: 50542621!
receiverLiveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:41:35' prior: 50542801!
receiverLiveTypesCastingObjectFor: aParseNode in:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^FixedType for: type.
	
! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:41:38'!
ERROR!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 15:41:38'!
ERROR!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 15:41:38'!
ERROR!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:41:38'!
ERROR!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:41:43'!
ERROR!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:44:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 15:44:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 15:44:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:44:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:44:18'!
ERROR!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 3/27/2024 15:44:30' prior: 50540710 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=contextApplier receiverLiveTypesFor: aMessageNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation on: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	self visitMessageNodeArguments:aMessageNode.! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:44:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 15:44:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 15:44:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 15:44:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:44:36'!
ERROR!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:44:39'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:44:58'!
ERROR!
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 3/27/2024 15:45:16' prior: 50542810!
receiverLiveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := previousContext receiverLiveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:45:17'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 15:45:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 15:45:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 15:45:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!
!GeneralContextApplier methodsFor: 'LiveTyping-Message Nodes' stamp: 'JFGO 3/27/2024 15:46:02' prior: 50542686!
receiverLiveTypesFor: aMessageNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	^ aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !
!GeneralContextApplier methodsFor: 'LiveTyping-Message Nodes' stamp: 'JFGO 3/27/2024 15:31:43' prior: 50543187!
receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aVariableNode typesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !
!GeneralContextApplier methodsFor: 'LiveTyping-Message Nodes' stamp: 'JFGO 3/27/2024 15:47:13' prior: 50543197!
receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aVariableNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 15:47:15'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:47:15'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 15:47:16'!
ERROR!

!methodRemoval: GeneralContextApplier #receiverLiveTypesFor:In:addingIncompleteTypeInfoTo: stamp: 'JFGO 3/27/2024 15:48:09'!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	^ aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.!
!GeneralContextApplier methodsFor: 'LiveTyping-Message Nodes' stamp: 'JFGO 3/27/2024 15:48:18' prior: 50543207!
receiverLiveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aParseNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

----SNAPSHOT----(27 March 2024 15:48:27) CuisUniversity-6169.image priorSource: 6245038!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 15:50:41'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:50:41'!
ERROR!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 3/27/2024 15:52:44' prior: 50542659 overrides: 16919312!
visitBlockNode: aBlockNode
	"TODO. Cuando inicializamos el visitor, podemos inicializar el contextApplier y ahorrar el ifNil. El blockNode no parece usarse.. sacarlo y correr tests"
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier receiverLiveTypesFor: variableName in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
	].
	super visitBlockNode: aBlockNode.
	! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 3/27/2024 15:54:54' prior: 50543394 overrides: 16919312!
visitBlockNode: aBlockNode
	"TODO. Cuando inicializamos el visitor, podemos inicializar el contextApplier y ahorrar el ifNil. El blockNode no parece usarse.. sacarlo y correr tests"
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier receiverLiveTypesFor: variableName in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		(RawToLiveTypesAdapter new adapt: liveTypes) classTypesDo: [:aClass | types add:aClass].
	].
	super visitBlockNode: aBlockNode.
	! !

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:55:00'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:55:00'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:55:58'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:55:58'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:56:16'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:56:16'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:56:46'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:56:46'!
ERROR!
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 15:56:56'!
receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo 
	self shouldBeImplemented.! !

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:57:17'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:57:18'!
ERROR!
!TempVariableNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 3/27/2024 15:58:40' prior: 50543470!
receiverLiveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo 
	^self liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !
!TempVariableNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 3/27/2024 15:58:50' prior: 50543486!
receiverLiveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo 
	^self typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:59:04'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:59:04'!
ERROR!

(RawToLiveTypesAdapter new adapt: liveTypes)!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 3/27/2024 16:00:15' prior: 50543414 overrides: 16919312!
visitBlockNode: aBlockNode
	"TODO. Cuando inicializamos el visitor, podemos inicializar el contextApplier y ahorrar el ifNil. El blockNode no parece usarse.. sacarlo y correr tests"
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier receiverLiveTypesFor: variableName in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		liveTypes classTypesDo: [:aClass | types add:aClass].
	].
	super visitBlockNode: aBlockNode.
	! !

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 16:00:21'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 16:00:21'!
ERROR!
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 3/27/2024 16:00:45' prior: 50540819!
initializeFor: aCompiledMethod on: aVariableName within: aBlockNode 
	compiledMethod := aCompiledMethod.
	variableName := aVariableName.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 3/27/2024 16:01:08' prior: 50543514 overrides: 16919312!
visitBlockNode: aBlockNode
	"TODO. Cuando inicializamos el visitor, podemos inicializar el contextApplier y ahorrar el ifNil. El blockNode no parece usarse.. sacarlo y correr tests"
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier receiverLiveTypesFor: variableName in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	! !

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 16:01:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 16:01:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

----QUIT----(27 March 2024 16:01:24) CuisUniversity-6169.image priorSource: 6773267!

----STARTUP---- (9 April 2024 19:57:30) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 19:57:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/9/2024 20:03:10' prior: 50543556 overrides: 16919312!
visitBlockNode: aBlockNode
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier receiverLiveTypesFor: variableName in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	! !

!classDefinition: #ContextAppliersMethodVisitor category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/9/2024 20:24:07'!
ParseNodeVisitor subclass: #ContextAppliersMethodVisitor
	instanceVariableNames: 'compiledMethod parseNode blockNode methodNode types contextApplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 4/9/2024 20:24:07' prior: 50543812 overrides: 16919312!
visitBlockNode: aBlockNode
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier receiverLiveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	! !
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 4/9/2024 20:24:07' prior: 50543544!
initializeFor: aCompiledMethod on: aVariableName within: aBlockNode 
	compiledMethod := aCompiledMethod.
	parseNode := aVariableName.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.! !
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/9/2024 20:24:15' prior: 50543866!
initializeFor: aCompiledMethod on: aParseNode within: aBlockNode 
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!
!GeneralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/9/2024 20:27:24'!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aParseNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !

!methodRemoval: GeneralContextApplier #liveTypesFor:in:addingIncompleteTypeInfoTo: stamp: 'JFGO 4/9/2024 20:27:36'!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aParseNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .!
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/9/2024 20:28:09'!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
! !
!GeneralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/9/2024 20:28:09'!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aParseNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !
!EqualsTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 4/9/2024 20:28:10' prior: 50543098!
receiverLiveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 4/9/2024 20:28:10' prior: 50543845 overrides: 16919312!
visitBlockNode: aBlockNode
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	! !

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesFor:in:addingIncompleteTypeInfoTo: stamp: 'JFGO 4/9/2024 20:28:10'!
receiverLiveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
!

!methodRemoval: GeneralContextApplier #receiverLiveTypesFor:in:addingIncompleteTypeInfoTo: stamp: 'JFGO 4/9/2024 20:28:10'!
receiverLiveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aParseNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/9/2024 20:28:32' prior: 50542993 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=contextApplier liveTypesFor: aMessageNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation on: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	self visitMessageNodeArguments:aMessageNode.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!methodRemoval: GeneralContextApplier class #for: stamp: 'JFGO 4/9/2024 20:43:43'!
for: aBlockNode 
		
	^self new initializeFor: aBlockNode !

!methodRemoval: GeneralContextApplier #initializeFor: stamp: 'JFGO 4/9/2024 20:43:54'!
initializeFor: aBlockNode 
	blockNode := aBlockNode.!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/9/2024 20:44:03' prior: 50544024 overrides: 16919312!
visitBlockNode: aBlockNode
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier new.].
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/9/2024 20:44:12' prior: 50540696 overrides: 16919312!
visitBlockNode: aBlockNode
	"TODO. Cuando inicializamos el visitor, podemos inicializar el contextApplier y ahorrar el ifNil. El blockNode no parece usarse.. sacarlo y correr tests"
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier new.].
	super visitBlockNode: aBlockNode.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/9/2024 20:44:40' prior: 50540627!
initializeFor: aCompiledMethod collectingIssues: anIssuesCollection
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	issues := anIssuesCollection .
	contextApplier := GeneralContextApplier new.
	! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/9/2024 20:44:53' prior: 50544201 overrides: 16919312!
visitBlockNode: aBlockNode
	super visitBlockNode: aBlockNode.! !
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/9/2024 20:45:05' prior: 50543877!
initializeFor: aCompiledMethod on: aParseNode within: aBlockNode 
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/9/2024 20:45:13' prior: 50544181 overrides: 16919312!
visitBlockNode: aBlockNode
	
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/9/2024 20:45:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/9/2024 20:45:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 4/9/2024 20:45:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 20:45:16'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/9/2024 20:49:42'!
test01TypeCastIfTrueCorrectlyAppliesCastedType

| compiledMethod blockToTest blockToTestString types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrue.
blockToTestString:= '[ v1 factorial. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

types := compiledMethod typesOfVariableNamed: 'v1' withinBlockNode: blockToTest.

self assert:types size equals: 1.
self assert: types first equals: SmallInteger.! !

!methodRemoval: TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 4/9/2024 20:49:42'!
test01MethodCastToTypeReturnsJustCastedType

| compiledMethod blockToTest blockToTestString types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrue.
blockToTestString:= '[ v1 factorial. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

types := compiledMethod typesOfVariableNamed: 'v1' withinBlockNode: blockToTest.

self assert:types size equals: 1.
self assert: types first equals: SmallInteger.!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/9/2024 20:50:29'!
test02TypeCastIfFalseReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalse.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalse.
blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !

!methodRemoval: TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 20:50:29'!
test02MethodCastToRejectReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalse.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalse.
blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.!
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 4/9/2024 20:50:51'!
test14TypeCastIfFalseReturnsAllTypesButRejected
	self performMethodWithClass: TypesWithContextAppliersTestMethods andSelector: #typeCastIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !

!methodRemoval: TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 4/9/2024 20:50:51'!
test14TypeCastIfFalseCorrectlyRejectsCastedType
	self performMethodWithClass: TypesWithContextAppliersTestMethods andSelector: #typeCastIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	!

Object subclass: #ParseNodeTypesDisplay
	instanceVariableNames: 'parseNodeToAnalize methodNodeOwner definingClass methodToAnalyze types incompleteTypeInfoReasons typeInfo labels lines selectedIndex icons typesIndexLimit actions contextBlockNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping'!

!classDefinition: #ParseNodeTypesDisplay category: #LiveTyping stamp: 'JFGO 4/9/2024 20:55:53'!
Object subclass: #ParseNodeTypesDisplay
	instanceVariableNames: 'parseNodeToAnalize methodNodeOwner definingClass methodToAnalyze types incompleteTypeInfoReasons typeInfo labels lines selectedIndex icons typesIndexLimit actions contextBlockNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping'!
!ContextAppliersMethodVisitor class methodsFor: 'instance creation' stamp: 'JFGO 4/9/2024 21:00:52'!
for: aCompiledMethod on: aVariableName within: aBlockNode incompleteTypeInfoReasons: addingIncompleteTypeInfoTo 
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode ! !

!methodRemoval: ContextAppliersMethodVisitor class #for:on:within: stamp: 'JFGO 4/9/2024 21:00:52'!
for: aCompiledMethod on: aVariableName within: aBlockNode
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode !
!ContextAppliersMethodVisitor class methodsFor: 'instance creation' stamp: 'JFGO 4/9/2024 21:01:11'!
for: aCompiledMethod on: aVariableName within: aBlockNode  
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode ! !

!methodRemoval: ContextAppliersMethodVisitor class #for:on:within:incompleteTypeInfoReasons: stamp: 'JFGO 4/9/2024 21:01:11'!
for: aCompiledMethod on: aVariableName within: aBlockNode incompleteTypeInfoReasons: addingIncompleteTypeInfoTo 
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode !
!ContextAppliersMethodVisitor class methodsFor: 'instance creation' stamp: 'JFGO 4/9/2024 21:01:43'!
for: aCompiledMethod on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons   
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode ! !

!methodRemoval: ContextAppliersMethodVisitor class #for:on:within: stamp: 'JFGO 4/9/2024 21:01:43'!
for: aCompiledMethod on: aVariableName within: aBlockNode  
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode !
!CompiledMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/9/2024 21:02:35' prior: 50541965!
typesOfVariableNamed: aVariableName withinBlockNode: blockToTest 
	^ (ContextAppliersMethodVisitor for: self on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new) types.! !
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/9/2024 21:03:08'!
initializeFor: aCompiledMethod on: aParseNode within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.! !
!ContextAppliersMethodVisitor class methodsFor: 'as yet unclassified' stamp: 'JFGO 4/9/2024 21:03:08' prior: 50544581!
for: aCompiledMethod on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons   
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons ! !

!methodRemoval: ContextAppliersMethodVisitor #initializeFor:on:within: stamp: 'JFGO 4/9/2024 21:03:08'!
initializeFor: aCompiledMethod on: aParseNode within: aBlockNode 
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.!
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/9/2024 21:03:56' prior: 50544608!
initializeFor: aCompiledMethod on: aParseNode within: aBlockNode addingIncompleteTypeInfoTo: aIncompleteTypeInfoReasonsList
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.
	! !

!classDefinition: #ContextAppliersMethodVisitor category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/9/2024 21:04:00'!
ParseNodeVisitor subclass: #ContextAppliersMethodVisitor
	instanceVariableNames: 'compiledMethod parseNode blockNode methodNode types contextApplier incompleteTypeInfoReasons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/9/2024 21:03:58' prior: 50544647!
initializeFor: aCompiledMethod on: aParseNode within: aBlockNode addingIncompleteTypeInfoTo: aIncompleteTypeInfoReasonsList
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.
	incompleteTypeInfoReasons := aIncompleteTypeInfoReasonsList.! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/9/2024 21:04:20' prior: 50544319 overrides: 16919312!
visitBlockNode: aBlockNode
	
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons .
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	! !
!CompiledMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/9/2024 21:05:21'!
typesOfVariableNamed: aVariableName withinBlockNode: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	^ (ContextAppliersMethodVisitor for: self on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new) types.! !

!methodRemoval: CompiledMethod #typesOfVariableNamed:withinBlockNode: stamp: 'JFGO 4/9/2024 21:05:21'!
typesOfVariableNamed: aVariableName withinBlockNode: blockToTest 
	^ (ContextAppliersMethodVisitor for: self on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new) types.!
!CompiledMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/9/2024 21:05:28' prior: 50544708!
typesOfVariableNamed: aVariableName withinBlockNode: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	^ (ContextAppliersMethodVisitor for: self on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons) types.! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/9/2024 21:06:08' prior: 50544451!
test02TypeCastIfFalseReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalse.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalse.
blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/9/2024 21:06:24' prior: 50544410!
test01TypeCastIfTrueCorrectlyAppliesCastedType

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrue.
blockToTestString:= '[ v1 factorial. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types first equals: SmallInteger.! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/9/2024 21:06:44' prior: 50544768!
test01TypeCastIfTrueCorrectlyAppliesCastedType

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrue.
blockToTestString:= '[ v1 factorial. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types first equals: SmallInteger.! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/9/2024 21:06:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 21:06:49'!
PASSED!
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/9/2024 21:07:59' prior: 50542244!
calculateTypesWithContext

	"self halt."
	"incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray ."
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/9/2024 21:08:56' prior: 50544824!
calculateTypesWithContext

	"self halt."
	"incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray ."
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	! !

----QUIT----(9 April 2024 21:12:51) CuisUniversity-6169.image priorSource: 6786421!

----STARTUP---- (12 April 2024 15:57:10) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/12/2024 16:00:22' prior: 50544841!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/12/2024 16:00:30' prior: 50544866!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!
!GeneralContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:09:15'!
updateOn: aPreviousContextApplier For: aMessageNode visiting: aBlockNode
	
	| newContext contextUpdated|
	
	contextUpdated := false.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: aPreviousContextApplier.
		
		^newContext
				
	].
	^self .! !
!GeneralContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:09:35' prior: 50544978!
updateOn: aPreviousContextApplier For: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: aPreviousContextApplier.
		
		^newContext
				
	].
	^self .! !
!GeneralContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:13:23'!
updatefor: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		^newContext
				
	].
	^self .! !

!methodRemoval: GeneralContextApplier #updateOn:For:visiting: stamp: 'JFGO 4/12/2024 16:13:27'!
updateOn: aPreviousContextApplier For: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: aPreviousContextApplier.
		
		^newContext
				
	].
	^self .!
!GeneralContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:13:38'!
updateFor: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		^newContext
				
	].
	^self .! !

!methodRemoval: GeneralContextApplier #updatefor:visiting: stamp: 'JFGO 4/12/2024 16:13:38'!
updatefor: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		^newContext
				
	].
	^self .!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/12/2024 16:15:44' prior: 50540806!
visitMessageNodeArguments:aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | | shouldRestore | 
		shouldRestore := self updateContextApplierFor: aMessageNode visiting: argumentBlock.
		argumentBlock accept: self.
		shouldRestore ifTrue: [self restorePreviousContext].
		
		contextApplier := contextApplier updateFor: aMessageNode visiting: argumentBlock.
	].! !
!GeneralContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:24:50'!
updateFor: aMessageNode visiting: aBlockNode withVisitor: aVisitor
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aVisitor proceedWithContextupdated: newContext toVisit: aBlockNode.
		
				
	].
	! !
!ContextAppliersMethodVisitor methodsFor: 'context' stamp: 'JFGO 4/12/2024 16:25:44'!
proceedWithContextupdated: newContext toVisit: aBlockNode.
	aBlockNode accept: self.
	self restorePreviousContext .! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/12/2024 16:26:11' prior: 50545146!
visitMessageNodeArguments:aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		"shouldRestore := self updateContextApplierFor: aMessageNode visiting: argumentBlock.
		argumentBlock accept: self.
		shouldRestore ifTrue: [self restorePreviousContext]."
		
		contextApplier updateFor: aMessageNode visiting: argumentBlock.
	].! !
!GeneralContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:28:21'!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aBlockWhenContextUpdated value: newContext.
				
	].
	aBlockWhenContextNotUpdated value.! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/12/2024 16:29:27' prior: 50545198!
visitMessageNodeArguments:aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		"shouldRestore := self updateContextApplierFor: aMessageNode visiting: argumentBlock.
		argumentBlock accept: self.
		shouldRestore ifTrue: [self restorePreviousContext]."
		
		contextApplier updateFor: aMessageNode visiting: argumentBlock ifUpdated: [] ifNotUpdated:[].
	].! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/12/2024 16:31:24' prior: 50545245!
visitMessageNodeArguments:aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		"shouldRestore := self updateContextApplierFor: aMessageNode visiting: argumentBlock.
		argumentBlock accept: self.
		shouldRestore ifTrue: [self restorePreviousContext]."
		
		contextApplier updateFor: aMessageNode visiting: argumentBlock 
			ifUpdated: 	[:newContext | 
				contextApplier:= newContext. 
				argumentBlock accept: self.
				self restorePreviousContext .
				] 
			ifNotUpdated:[ argumentBlock accept: self.				].
	].! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:31:27'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:31:27'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:31:30'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:32:41'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:32:53'!
ERROR!

!methodRemoval: GeneralContextApplier #updateFor:visiting:withVisitor: stamp: 'JFGO 4/12/2024 16:33:20'!
updateFor: aMessageNode visiting: aBlockNode withVisitor: aVisitor
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aVisitor proceedWithContextupdated: newContext toVisit: aBlockNode.
		
				
	].
	!

!methodRemoval: GeneralContextApplier #updateFor:visiting: stamp: 'JFGO 4/12/2024 16:33:21'!
updateFor: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		^newContext
				
	].
	^self .!
!GeneralContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:39:05' prior: 50545213!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:39:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:39:09'!
PASSED!

!methodRemoval: ContextAppliersMethodVisitor #updateContextApplierFor:visiting: stamp: 'JFGO 4/12/2024 16:39:22'!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	
	| newContext contextUpdated|
	
	contextUpdated := false.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: contextApplier.
		contextApplier := newContext.
		contextUpdated := true.
				
	].
	^contextUpdated .
	

	!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:39:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:39:25'!
PASSED!

!methodRemoval: ContextAppliersMethodVisitor #proceedWithContextupdated:toVisit: stamp: 'JFGO 4/12/2024 16:40:31'!
proceedWithContextupdated: newContext toVisit: aBlockNode.
	aBlockNode accept: self.
	self restorePreviousContext .!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/12/2024 16:40:45' prior: 50545261!
visitMessageNodeArguments:aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		contextApplier updateFor: aMessageNode visiting: argumentBlock 
			ifUpdated: 	[:newContext | 
				contextApplier:= newContext. 
				argumentBlock accept: self.
				self restorePreviousContext .
				] 
			ifNotUpdated:[ argumentBlock accept: self.				].
	].! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:40:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:40:50'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/12/2024 16:43:09' prior: 50540736!
visitMessageNodeArguments: aMessageNode
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		contextApplier updateFor: aMessageNode visiting: argumentBlock 
			ifUpdated: 	[:newContext | 
				contextApplier:= newContext. 
				argumentBlock accept: self.
				self restorePreviousContext .
			] 
			ifNotUpdated:[ argumentBlock accept: self.				].
	].! !

!methodRemoval: TypeCheckerDragonMethodVisitor #updateContextApplierFor:visiting: stamp: 'JFGO 4/12/2024 16:43:17'!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	
	| newContext contextUpdated|
	
	contextUpdated := false.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: contextApplier.
		contextApplier := newContext.
		contextUpdated := true.
				
	].
	^contextUpdated .
	

	!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/12/2024 16:43:19'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/12/2024 16:43:19'!
ERROR!

GeneralContextApplier subclass: #EqualsTypeContextApplier
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldCast previousContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #EqualsTypeContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/12/2024 16:43:50'!
GeneralContextApplier subclass: #EqualsTypeContextApplier
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldCast previousContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

Object subclass: #TypeContextAppliers
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldCast previousContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #TypeContextAppliers category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/12/2024 16:46:05'!
Object subclass: #TypeContextAppliers
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldCast previousContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

TypeContextAppliers subclass: #GeneralContextApplier
	instanceVariableNames: 'blockNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

Object subclass: #TypeContextAppliers
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #TypeContextAppliers category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/12/2024 16:46:51'!
Object subclass: #TypeContextAppliers
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

TypeContextAppliers subclass: #GeneralContextApplier
	instanceVariableNames: 'blockNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #GeneralContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/12/2024 16:46:58'!
TypeContextAppliers subclass: #GeneralContextApplier
	instanceVariableNames: 'blockNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

TypeContextAppliers subclass: #EqualsTypeContextApplier
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldCast previousContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #EqualsTypeContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/12/2024 16:47:06'!
TypeContextAppliers subclass: #EqualsTypeContextApplier
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldCast previousContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!methodRemoval: GeneralContextApplier #updateFor:visiting:ifUpdated:ifNotUpdated: stamp: 'JFGO 4/12/2024 16:47:40'!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.!
!TypeContextAppliers methodsFor: 'nil' stamp: 'JFGO 4/12/2024 16:47:45'!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !
!TypeContextAppliers methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:48:21'!
previous
	self subclassResponsibility .! !
!TypeContextAppliers methodsFor: 'LiveTyping' stamp: 'JFGO 4/12/2024 16:49:27'!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	self subclassResponsibility .! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:49:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:49:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:49:52'!
PASSED!

----SNAPSHOT----(12 April 2024 16:51:18) CuisUniversity-6169.image priorSource: 6822663!