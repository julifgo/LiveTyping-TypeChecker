

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (13 December 2023 19:49:39) as C:\Users\jgutierrez\Tesis\CUIS3\windows64\CuisUniversity-5981.image!


----End fileIn of C:\Users\jgutierrez\Tesis\CUIS3\windows64\LiveTypingGenerics.pck.st----!

----End fileIn of C:\Users\jgutierrez\Tesis\CUIS3\windows64\LiveTypingTypeChecker.pck.st----!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/13/2023 19:53:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/13/2023 19:53:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/13/2023 19:53:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/13/2023 19:53:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/13/2023 19:53:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/13/2023 19:53:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/13/2023 19:53:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/13/2023 19:53:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/13/2023 19:53:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/13/2023 19:53:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/13/2023 19:53:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithCollectionIteratingGeneratesAlertForItemsWithErrorTypes stamp: 'JFGO 12/13/2023 19:53:02'!
PASSED!

----QUIT----(13 December 2023 19:53:24) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (13 December 2023 19:55:12) as C:\Users\jgutierrez\Tesis\CUIS\windows64\CuisUniversity-5981.image!


TypeCheckerDragonTestMethods new methodWithCollectionWithNoTypeError .!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 12/13/2023 20:18:52' prior: 50659838 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo castingWith: NoTypeCastApplier new.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlertWithMessage: 'Receiver has no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 12/13/2023 20:19:08' prior: 50660406 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType castApplier |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	castApplier := NoTypeCastApplier new.
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo castingWith: castApplier.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlertWithMessage: 'Receiver has no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 12/13/2023 20:18:52' prior: 50660434 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo castingWith: NoTypeCastApplier new.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlertWithMessage: 'Receiver has no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 12/13/2023 20:19:08' prior: 50660463 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType castApplier |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	castApplier := NoTypeCastApplier new.
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo castingWith: castApplier.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlertWithMessage: 'Receiver has no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 12/13/2023 20:20:03' prior: 50660491 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	castApplier := NoTypeCastApplier new.
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo castingWith: castApplier.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlertWithMessage: 'Receiver has no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !

!classDefinition: #TypeCheckerDragonMethodVisitor category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 12/13/2023 20:20:04'!
ParseNodeVisitor subclass: #TypeCheckerDragonMethodVisitor
	instanceVariableNames: 'compiledMethod methodNode alerts castApplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 12/13/2023 20:20:14' prior: 50660520 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo castingWith: castApplier.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlertWithMessage: 'Receiver has no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 12/13/2023 20:20:21' prior: 50659787!
initializeFor: aCompiledMethod collectingAlerts: anAlertCollection
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	alerts := anAlertCollection .
	castApplier := NoTypeCastApplier new.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 12/13/2023 20:22:02' prior: 50660560 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlertWithMessage: 'Receiver has no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 12/13/2023 20:22:06' prior: 50660587!
initializeFor: aCompiledMethod collectingAlerts: anAlertCollection
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	alerts := anAlertCollection .
	! !

aMessageNode argumentsInEvaluationOrder!

self innerTypes!

self isGenericType !

self generics !

self!

----SNAPSHOT----(13 December 2023 20:37:33) CuisUniversity-5981.image priorSource: 10519843!

----QUIT----(15 December 2023 09:10:36) CuisUniversity-5981.image priorSource: 10527519!

----STARTUP---- (15 December 2023 09:10:49) as C:\Users\jgutierrez\Tesis\CUIS\windows64\CuisUniversity-5981.image!


TypeCheckerDragonTestMethods new methodWithCollectionWithNoTypeError resetTypeInfo !

TypeCheckerDragonTestMethods >>#methodWithCollectionWithNoTypeError resetTypeInfo !

(TypeCheckerDragonTestMethods >>#methodWithCollectionWithNoTypeError) resetTypeInfo !

!classDefinition: #TypeCheckerDragonTestMethods category: 'LiveTypingTypeChecker-TypeCheckingDragon-Tests' stamp: 'JFGO 12/15/2023 09:12:48'!
Object subclass: #TypeCheckerDragonTestMethods
	instanceVariableNames: 'nilVariableWithNoType aCol anotherCol anotherCol2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon-Tests'!
!TypeCheckerDragonTestMethods methodsFor: 'collections generics' stamp: 'JFGO 12/15/2023 09:12:47' prior: 50660283!
methodWithCollectionWithNoTypeError
	"| col |"
	anotherCol2:= OrderedCollection with: 1.
	anotherCol2 do:[:item | item factorial].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 12/15/2023 09:13:17' prior: 50660598 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	self halt.
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlertWithMessage: 'Receiver has no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 12/15/2023 09:13:33' prior: 50660675 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlertWithMessage: 'Receiver has no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !

TypeCheckerDragonTestMethods new methodWithCollectionWithNoTypeError !

TypeCheckerDragonTestMethods new methodWithCollectionWithNoTypeError !

----QUIT----(15 December 2023 09:44:36) CuisUniversity-5981.image priorSource: 10527613!

----STARTUP---- (21 December 2023 19:04:08) as C:\Users\jgutierrez\Tesis\CUIS\windows64\CuisUniversity-5981.image!

!TypeCheckerDragonTestMethods methodsFor: 'collections generics' stamp: 'JFGO 12/21/2023 19:04:49' prior: 50660666!
methodWithCollectionWithNoTypeError
	| col |
	col:= OrderedCollection with: 1.
	col do:[:item | item factorial].! !
!TypeCheckerDragonTestMethods methodsFor: 'collections generics' stamp: 'JFGO 12/21/2023 19:05:16' prior: 50660275!
methodWithCollectionWithErrorTypeOnIteration
	| col |
	col:= OrderedCollection with: 1 with: 'string'.
	col do:[:item | item factorial].! !
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 12/21/2023 19:07:04'!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado y sin problemas de compatibilidad con typeChecker."
	| methodToCheck typeChecker |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodWithCollectionWithNoTypeError.
	
	typeChecker := methodToCheck typeCheckDragon.
	
	"self deny: typeChecker hasAlerts."
	self assert: true.
! !

!methodRemoval: TypeCheckerDragonTest #test11MethodWithCollectionItemsTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:07:04'!
test11MethodWithCollectionItemsTypedCorrectlyDoesNotGenerateAlerts
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado y sin problemas de compatibilidad con typeChecker."
	| methodToCheck typeChecker |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodWithCollectionWithNoTypeError.
	
	typeChecker := methodToCheck typeCheckDragon.
	
	"self deny: typeChecker hasAlerts."
	self assert: true.
!
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 12/21/2023 19:08:28' prior: 50660755!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado"
	"Ademas, al momento de esta version de typeChecker, no hay LiveTyping sobre bloques, por eso se genera la alerta"
	
	| methodToCheck typeChecker |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodWithCollectionWithNoTypeError.
	
	typeChecker := methodToCheck typeCheckDragon.
	
	"self deny: typeChecker hasAlerts."
	self assert: true.
! !
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 12/21/2023 19:09:10' prior: 50660794!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado"
	"Ademas, al momento de esta version de typeChecker, no hay LiveTyping sobre bloques, por eso se genera la alerta"
	"Una vez implementado, habra que agregar tests adicionales para chequeo de tipos dentro de bloques usando la informacion de generics"
	
	| methodToCheck typeChecker |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodWithCollectionWithNoTypeError.
	
	typeChecker := methodToCheck typeCheckDragon.
	
	"self deny: typeChecker hasAlerts."
	self assert: true.
! !

!methodRemoval: TypeCheckerDragonTest #test12MethodWithCollectionIteratingGeneratesAlertForItemsWithErrorTypes stamp: 'JFGO 12/21/2023 19:10:38'!
test12MethodWithCollectionIteratingGeneratesAlertForItemsWithErrorTypes
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithCollectionWithErrorTypeOnIteration.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: true. "TODO. Instalar Generics y ver que onda"
	!

TypeCheckerDragonTestMethods new methodWithCollectionWithNoTypeError !

TypeCheckerDragonTestMethods new methodWithCollectionWithNoTypeError !

!methodRemoval: TypeCheckerDragonTestMethods #methodWithCollectionWithErrorTypeOnIteration stamp: 'JFGO 12/21/2023 19:14:33'!
methodWithCollectionWithErrorTypeOnIteration
	| col |
	col:= OrderedCollection with: 1 with: 'string'.
	col do:[:item | item factorial].!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:14:39'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:15:42'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 12/21/2023 19:16:00' prior: 50660816!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado"
	"Ademas, al momento de esta version de typeChecker, no hay LiveTyping sobre bloques, por eso se genera la alerta"
	"Una vez implementado, habra que agregar tests adicionales para chequeo de tipos dentro de bloques usando la informacion de generics"
	
	| methodToCheck typeChecker |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodWithCollectionWithNoTypeError.
	
	typeChecker := methodToCheck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
! !

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:16:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:16:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:16:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:16:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:16:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:16:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:16:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:16:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:16:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:16:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:16:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:16:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:16:24'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:16:24'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 12/21/2023 19:17:15' prior: 50660878!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado"
	"Ademas, al momento de esta version de typeChecker, no hay LiveTyping sobre bloques, por eso se genera la alerta"
	"Una vez implementado, habra que agregar tests adicionales para chequeo de tipos dentro de bloques usando la informacion de generics"
	
	| methodToCheck typeChecker |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodWithCollectionWithNoTypeError.
	TypeCheckerDragonTestMethods new perform: methodToCheck .
	typeChecker := methodToCheck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
! !

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:17:15'!
ERROR!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:17:15'!
ERROR!
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 12/21/2023 19:18:08' prior: 50660964!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado"
	"Ademas, al momento de esta version de typeChecker, no hay LiveTyping sobre bloques, por eso se genera la alerta"
	"Una vez implementado, habra que agregar tests adicionales para chequeo de tipos dentro de bloques usando la informacion de generics"
	
	| methodToCheck typeChecker selector|
	
	selector:= #methodWithCollectionWithNoTypeError.
	methodToCheck := TypeCheckerDragonTestMethods >> selector.
	TypeCheckerDragonTestMethods new perform: selector.
	typeChecker := methodToCheck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
! !

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:18:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:18:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:18:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:18:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:18:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:18:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:18:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:18:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:18:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:18:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:18:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:18:09'!
PASSED!

----SNAPSHOT----(21 December 2023 19:18:29) CuisUniversity-5981.image priorSource: 10530585!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:20:10'!
typeCheckOn: aCompiledMethod andAssert: anAssertionBlock

	
	
	| typeChecker |
	typeChecker := aCompiledMethod typeCheckDragon.
	
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Method has live typing disabled'.
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:20:37' prior: 50661083!
typeCheckOn: aCompiledMethod andAssert: anAssertionBlock
		
	| typeChecker |
	typeChecker := aCompiledMethod typeCheckDragon.
	anAssertionBlock value: typeChecker.
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:21:37' prior: 50659964!
test02MethodThatDontCheckTypesGeneratesAlert

	| methodToCkeck |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodTypedCorrectlyEnableTyping.
	methodToCkeck removeProperties .
	
	self typeCheckOn: methodToCkeck andAssert: [:typeChecker | self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Method has live typing disabled'.]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:21:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:21:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:21:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:21:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:21:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:21:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:21:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:21:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:21:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:21:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:21:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:21:38'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:21:55' prior: 50661105!
test02MethodThatDontCheckTypesGeneratesAlert

	| methodToCkeck |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodTypedCorrectlyEnableTyping.
	methodToCkeck removeProperties .
	
	self typeCheckOn: methodToCkeck andAssert: [:typeChecker | 
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Method has live typing disabled'.
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:21:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:21:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:21:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:21:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:21:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:21:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:21:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:21:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:21:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:21:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:21:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:21:56'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:23:31' prior: 50659952!
test01MethodTypedCorrectlyDoesNotGenerateAlerts

	| methodToCheck  |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodTypedCorrectlyEnableTyping.
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker | 
		self deny: typeChecker hasAlerts.
	]. 
	
	
! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:23:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:23:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:23:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:23:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:23:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:23:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:23:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:23:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:23:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:23:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:23:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:23:32'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:23:55' prior: 50661170!
test02MethodThatDontCheckTypesGeneratesAlert

	| methodToCheck |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodTypedCorrectlyEnableTyping.
	methodToCheck removeProperties .
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker | 
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Method has live typing disabled'.
	]. 
	
	
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:24:45' prior: 50659979!
test03PrimitiveMethodsDontCheckTypes

	| methodToCheck |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #emptyMethodPrimitive.
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker | 
		self deny: typeChecker hasAlerts.
	]. 
! !

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:24:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:24:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:24:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:24:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:24:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:24:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:24:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:24:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:24:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:24:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:24:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:24:46'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'assertions' stamp: 'JFGO 12/21/2023 19:27:20'!
typeCheckWithSelector: aSelector andAssert: anAssertionBlock
		
	| methodToCheck|
	methodToCheck := TypeCheckerDragonTestMethods >> aSelector.
	self typeCheckOn:  methodToCheck andAssert: anAssertionBlock.
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:28:02' prior: 50661235!
test01MethodTypedCorrectlyDoesNotGenerateAlerts
		
	self typeCheckWithSelector: #methodTypedCorrectlyEnableTyping andAssert: [:typeChecker | 
		self deny: typeChecker hasAlerts.
	]. 
	
	
! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:28:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:28:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:28:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:28:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:28:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:28:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:28:05'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:28:47' prior: 50661313!
test03PrimitiveMethodsDontCheckTypes
	
	self typeCheckWithSelector: #emptyMethodPrimitive andAssert: [:typeChecker | 
		self deny: typeChecker hasAlerts.
	]. 
! !

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:28:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:28:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:28:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:28:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:28:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:28:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:28:48'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:28:51' prior: 50661444!
test03PrimitiveMethodsDontCheckTypes
	
	self typeCheckWithSelector: #emptyMethodPrimitive andAssert: [:typeChecker | 
		self deny: typeChecker hasAlerts.
	]. 
! !

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:28:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:28:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:28:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:28:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:28:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:28:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:28:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:28:52'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:29:35' prior: 50659992!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNotUnderstood andAssert: [:typeChecker | 
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:29:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:29:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:29:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:29:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:29:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:29:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:29:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:29:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:29:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:29:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:29:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:29:36'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:30:39' prior: 50660007!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker | | firstAlert secondAlert |
		self assert: 2 equals: typeChecker alerts size.
		firstAlert := typeChecker alerts first.
		self assert: 'Message Selector not implemented in Receiver' equals: firstAlert message .
		secondAlert := typeChecker alerts second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:30:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:30:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:30:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:30:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:30:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:30:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:30:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:30:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:30:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:30:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:30:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:30:40'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:31:20' prior: 50660029!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker | | firstAlert secondAlert |
		self assert: 2 equals: typeChecker alerts size.
		firstAlert := typeChecker alerts first.
		self assert: 'Message Selector not implemented in Receiver' equals: firstAlert message .
		secondAlert := typeChecker alerts second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	]. 
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:31:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:31:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:31:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:31:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:31:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:31:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:31:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:31:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:31:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:31:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:31:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:31:21'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:33:59' prior: 50660050!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert
	
	self typeCheckWithSelector: #methodWithReceiverWithNoTypes andAssert: [:typeChecker | 
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:33:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:33:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:33:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:33:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:34:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:34:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:34:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:34:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:34:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:34:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:34:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:34:00'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:35:05' prior: 50660064!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	self typeCheckWithSelector: #methodWithMessageArgumentToResolve andAssert: [:typeChecker | 
		self assert: 2 equals: typeChecker alerts size.
		typeChecker alerts do: [:alert | 
			self assert: (alert isKindOf: TypeCheckerDragonAlert).
			self assert: 'Message Selector not implemented in Receiver' equals: alert message .
		].
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:35:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:35:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:35:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:35:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:35:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:35:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:35:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:35:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:35:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:35:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:35:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:35:06'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:36:04' prior: 50660083!
test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts
	"This is because the object is able to respond to the message even if it is for throwing an exception"
	
	self typeCheckWithSelector: #methodInstanceNotIndexable andAssert: [:typeChecker | 
		self deny: typeChecker hasAlerts.
	]. 
	! !

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:36:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:36:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:36:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:36:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:36:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:36:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:36:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:36:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:36:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:36:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:36:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:36:05'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:37:05' prior: 50660098!
test10MessageSentToMethodWithNoReturnTypeGeneratesAlert
	
		
	self typeCheckWithSelector: #methodWithMessageWithNoReturnTypes andAssert: [:typeChecker | 
		"TODO. So far, this test does not generate value versus test03, but we are waiting definition of error vs warning vs problem"
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Cannot deduce Receiver Type'.
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:37:10'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 12/21/2023 19:38:35' prior: 50661001!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado"
	"Ademas, al momento de esta version de typeChecker, no hay LiveTyping sobre bloques, por eso se genera la alerta"
	"Una vez implementado, habra que agregar tests adicionales para chequeo de tipos dentro de bloques usando la informacion de generics"
	
	| methodToCheck selector|
	
	selector:= #methodWithCollectionWithNoTypeError.
	methodToCheck := TypeCheckerDragonTestMethods >> selector.
	TypeCheckerDragonTestMethods new perform: selector.
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker | 
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	]. 
	
! !

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:38:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/21/2023 19:38:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/21/2023 19:38:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/21/2023 19:38:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:38:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/21/2023 19:38:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/21/2023 19:38:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:38:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/21/2023 19:38:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/21/2023 19:38:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/21/2023 19:38:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:38:37'!
PASSED!

----SNAPSHOT----(21 December 2023 19:38:40) CuisUniversity-5981.image priorSource: 10541698!

----SNAPSHOT----(21 December 2023 19:44:55) CuisUniversity-5981.image priorSource: 10574444!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 12/21/2023 19:48:41'!
methodWithVariableWithManyTypes
	nilVariableWithNoType size.! !
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 12/21/2023 19:49:13' prior: 50662109!
methodWithVariableWithManyTypes
	|v1|
	v1 := 'true'.
	v1 := 5.
	v1 factorial.! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:52:39'!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	self typeCheckWithSelector: #methodWithMessageNotUnderstood andAssert: [:typeChecker | 
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	]. 
	
	! !
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 12/21/2023 19:53:03' prior: 50662115!
methodWithVariableWithManyTypes
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 factorial.! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:53:42' prior: 50662121!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	| methodToCheck selector|
	
	selector:= #methodWithCollectionWithNoTypeError.
	methodToCheck := TypeCheckerDragonTestMethods >> selector.
	TypeCheckerDragonTestMethods new perform: selector.
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker | 
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	]. 
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:53:56' prior: 50662142!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	| methodToCheck selector|
	
	selector:= #methodWithVariableWithManyTypes.
	methodToCheck := TypeCheckerDragonTestMethods >> selector.
	TypeCheckerDragonTestMethods new perform: selector.
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker | 
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	]. 
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:54:33' prior: 50662160!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	| methodToCheck selector|
	
	selector:= #methodWithVariableWithManyTypes.
	methodToCheck := TypeCheckerDragonTestMethods >> selector.
	TypeCheckerDragonTestMethods new perform: selector.
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker | 
		self assert: typeChecker hasAlerts. "TODO. CHANGE".
	]. 
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 12/21/2023 19:56:32'!
performMethodWithSelector: aSelector typeCheckAndAssert: anAssertionBlock
	
	| methodToCheck |
	methodToCheck := TypeCheckerDragonTestMethods >> aSelector.
	TypeCheckerDragonTestMethods new perform: aSelector.
	
	self typeCheckOn: methodToCheck andAssert: anAssertionBlock .
	
! !
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 12/21/2023 19:57:15' prior: 50662024!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado"
	"Ademas, al momento de esta version de typeChecker, no hay LiveTyping sobre bloques, por eso se genera la alerta"
	"Una vez implementado, habra que agregar tests adicionales para chequeo de tipos dentro de bloques usando la informacion de generics"
		
	
	self performMethodWithSelector: #methodWithCollectionWithNoTypeError typeCheckAndAssert: [:typeChecker | 
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	]. 
	
! !

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/21/2023 19:57:18'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/21/2023 19:57:52' prior: 50662178!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	self performMethodWithSelector: #methodWithVariableWithManyTypes typeCheckAndAssert: [:typeChecker | 
		self assert: typeChecker hasAlerts. "TODO. CHANGE".
	]. 
	
	! !

self message!

self first message!

self notImplemented !

----SNAPSHOT----(21 December 2023 20:05:57) CuisUniversity-5981.image priorSource: 10574538!

----QUIT----(22 December 2023 10:37:36) CuisUniversity-5981.image priorSource: 10579148!

----STARTUP---- (27 December 2023 17:53:21) as C:\Users\jgutierrez\Tesis\CUIS\windows64\CuisUniversity-5981.image!


!classDefinition: #TypeCheckerDragon category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 12/27/2023 19:29:59'!
Object subclass: #TypeCheckerDragon
	instanceVariableNames: 'compiledMethod issues'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 12/27/2023 19:29:59' prior: 50660125!
hasAlerts
	^issues size > 0.! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 12/27/2023 19:29:59' prior: 50660115!
alerts
	^issues.! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 12/27/2023 19:29:59' prior: 50660155!
typeCheckWhenEnabledTyping
	(TypeCheckerDragonMethodVisitor for: compiledMethod collectingAlerts: issues) accept.
	^self.! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 12/27/2023 19:29:59' prior: 50660118!
generateAlertWithMessage: anAlertMessage
	issues add: (TypeCheckerDragonAlert for: compiledMethod withMessage: anAlertMessage).! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 12/27/2023 19:29:59' prior: 50660129!
initializeFor: aCompiledMethod 
	compiledMethod := aCompiledMethod " asMethodReference".
	issues := OrderedCollection new.! !
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 12/27/2023 19:30:19'!
hasIssues
	^issues size > 0.! !

!methodRemoval: TypeCheckerDragon #hasAlerts stamp: 'JFGO 12/27/2023 19:30:19'!
hasAlerts
	^issues size > 0.!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/27/2023 19:30:23'!
ERROR!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/27/2023 19:30:23'!
ERROR!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/27/2023 19:30:23'!
ERROR!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 19:30:23'!
ERROR!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 19:30:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/27/2023 19:30:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/27/2023 19:30:23'!
ERROR!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/27/2023 19:30:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/27/2023 19:30:23'!
ERROR!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/27/2023 19:30:23'!
ERROR!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/27/2023 19:30:23'!
ERROR!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/27/2023 19:30:23'!
ERROR!
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 12/27/2023 19:30:47'!
hasAlerts
	^issues size > 0.! !

!methodRemoval: TypeCheckerDragon #hasIssues stamp: 'JFGO 12/27/2023 19:30:47'!
hasIssues
	^issues size > 0.!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/27/2023 19:30:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/27/2023 19:30:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/27/2023 19:30:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/27/2023 19:30:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/27/2023 19:30:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/27/2023 19:30:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/27/2023 19:30:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 19:30:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 19:30:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/27/2023 19:30:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/27/2023 19:30:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/27/2023 19:30:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/27/2023 19:30:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/27/2023 19:30:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/27/2023 19:30:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/27/2023 19:30:55'!
PASSED!
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 12/27/2023 19:31:48'!
hasIssues
	^issues size > 0.! !
!TypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 12/27/2023 19:31:48' prior: 50659935!
assertTypeChecker: aTypeChecker hasOneAlertWithMessage: anAlertMessage
	
	| alert |
	self assert: aTypeChecker hasIssues.
	self assert: aTypeChecker alerts size equals: 1.
	alert:=aTypeChecker alerts anyOne.
	self assert: (alert isKindOf: TypeCheckerDragonAlert).
	self assert: anAlertMessage equals: alert message .
	"PEDIR MAS INFO SOBRE LA ALERTA. NO HARIA FALTA EXPONER EL MENSAJE NI TENERLO HARDCODEADO".
	! !
!TypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 12/27/2023 19:31:48' prior: 50661384!
test01MethodTypedCorrectlyDoesNotGenerateAlerts
		
	self typeCheckWithSelector: #methodTypedCorrectlyEnableTyping andAssert: [:typeChecker | 
		self deny: typeChecker hasIssues.
	]. 
	
	
! !
!TypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 12/27/2023 19:31:48' prior: 50661503!
test03PrimitiveMethodsDontCheckTypes
	
	self typeCheckWithSelector: #emptyMethodPrimitive andAssert: [:typeChecker | 
		self deny: typeChecker hasIssues.
	]. 
! !
!TypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 12/27/2023 19:31:48' prior: 50661894!
test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts
	"This is because the object is able to respond to the message even if it is for throwing an exception"
	
	self typeCheckWithSelector: #methodInstanceNotIndexable andAssert: [:typeChecker | 
		self deny: typeChecker hasIssues.
	]. 
	! !
!TypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 12/27/2023 19:31:48' prior: 50662237!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	self performMethodWithSelector: #methodWithVariableWithManyTypes typeCheckAndAssert: [:typeChecker | 
		self assert: typeChecker hasIssues. "TODO. CHANGE".
	]. 
	
	! !

!methodRemoval: TypeCheckerDragon #hasAlerts stamp: 'JFGO 12/27/2023 19:31:48'!
hasAlerts
	^issues size > 0.!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/27/2023 19:32:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/27/2023 19:32:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/27/2023 19:32:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 19:32:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 19:32:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/27/2023 19:32:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/27/2023 19:32:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/27/2023 19:32:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/27/2023 19:32:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/27/2023 19:32:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/27/2023 19:32:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/27/2023 19:32:06'!
PASSED!
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 12/27/2023 19:32:23'!
issues
	^issues.! !
!TypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 12/27/2023 19:32:23' prior: 50661827!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	self typeCheckWithSelector: #methodWithMessageArgumentToResolve andAssert: [:typeChecker | 
		self assert: 2 equals: typeChecker issues size.
		typeChecker issues do: [:alert | 
			self assert: (alert isKindOf: TypeCheckerDragonAlert).
			self assert: 'Message Selector not implemented in Receiver' equals: alert message .
		].
	]. 
	
	
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 12/27/2023 19:32:23' prior: 50662437!
assertTypeChecker: aTypeChecker hasOneAlertWithMessage: anAlertMessage
	
	| alert |
	self assert: aTypeChecker hasIssues.
	self assert: aTypeChecker issues size equals: 1.
	alert:=aTypeChecker issues anyOne.
	self assert: (alert isKindOf: TypeCheckerDragonAlert).
	self assert: anAlertMessage equals: alert message .
	"PEDIR MAS INFO SOBRE LA ALERTA. NO HARIA FALTA EXPONER EL MENSAJE NI TENERLO HARDCODEADO".
	! !
!TypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 12/27/2023 19:32:23' prior: 50661625!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker | | firstAlert secondAlert |
		self assert: 2 equals: typeChecker issues size.
		firstAlert := typeChecker issues first.
		self assert: 'Message Selector not implemented in Receiver' equals: firstAlert message .
		secondAlert := typeChecker issues second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	]. 
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 12/27/2023 19:32:23' prior: 50661695!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker | | firstAlert secondAlert |
		self assert: 2 equals: typeChecker issues size.
		firstAlert := typeChecker issues first.
		self assert: 'Message Selector not implemented in Receiver' equals: firstAlert message .
		secondAlert := typeChecker issues second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	]. 
	
	
	
	! !

!methodRemoval: TypeCheckerDragon #alerts stamp: 'JFGO 12/27/2023 19:32:23'!
alerts
	^issues.!
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 12/27/2023 19:35:12' prior: 50660149!
typeCheckWhenDisabledTyping
	issues add: (TypeCheckerDragonAlert for: compiledMethod withMessage: 'Method has live typing disabled').
	^self.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/27/2023 19:35:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/27/2023 19:35:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/27/2023 19:35:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 19:35:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 19:35:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/27/2023 19:35:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/27/2023 19:35:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/27/2023 19:35:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/27/2023 19:35:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/27/2023 19:35:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/27/2023 19:35:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/27/2023 19:35:21'!
PASSED!

!methodRemoval: TypeCheckerDragon #generateAlertWithMessage: stamp: 'JFGO 12/27/2023 19:35:33'!
generateAlertWithMessage: anAlertMessage
	issues add: (TypeCheckerDragonAlert for: compiledMethod withMessage: anAlertMessage).!

!classDefinition: #MethodNotAnnotatingTypesIssue category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 12/27/2023 19:44:58'!
Object subclass: #MethodNotAnnotatingTypesIssue
	instanceVariableNames: 'method'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 12/27/2023 19:44:39' prior: 50662630!
typeCheckWhenDisabledTyping
	issues add: (MethodNotAnnotatingTypesIssue for: compiledMethod).
	^self.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/27/2023 19:45:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/27/2023 19:45:17'!
ERROR!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/27/2023 19:45:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 19:45:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 19:45:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/27/2023 19:45:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/27/2023 19:45:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/27/2023 19:45:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/27/2023 19:45:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/27/2023 19:45:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/27/2023 19:45:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/27/2023 19:45:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/27/2023 19:45:17'!
ERROR!
!MethodNotAnnotatingTypesIssue class methodsFor: 'instance creation' stamp: 'JFGO 12/27/2023 19:45:26'!
for: aCompiledMethod 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCompiledMethod ! !
!MethodNotAnnotatingTypesIssue class methodsFor: 'instance creation' stamp: 'JFGO 12/27/2023 19:45:35' prior: 50662766!
for: aCompiledMethod 
	^self new initializeFor: aCompiledMethod ! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/27/2023 19:45:36'!
ERROR!

!classDefinition: #MethodNotAnnotatingTypesIssue category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 12/27/2023 19:45:53'!
Object subclass: #MethodNotAnnotatingTypesIssue
	instanceVariableNames: 'method compiledMethod'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!MethodNotAnnotatingTypesIssue methodsFor: 'initialization' stamp: 'JFGO 12/27/2023 19:45:53'!
initializeFor: aCompiledMethod 
	self shouldBeImplemented.
	compiledMethod := aCompiledMethod.! !
!MethodNotAnnotatingTypesIssue methodsFor: 'initialization' stamp: 'JFGO 12/27/2023 19:46:00' prior: 50662795!
initializeFor: aCompiledMethod 
	compiledMethod := aCompiledMethod.! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/27/2023 19:46:01'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/27/2023 19:46:12'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/27/2023 19:47:21' prior: 50661297!
test02MethodThatDontCheckTypesGeneratesAlert

	| methodToCheck |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodTypedCorrectlyEnableTyping.
	methodToCheck removeProperties .
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker | | alert | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		alert:=typeChecker issues anyOne.
		self assert: (alert isKindOf: TypeCheckerDragonAlert).
	]. 
	
	
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/27/2023 19:48:01' prior: 50662816!
test02MethodThatDontCheckTypesGeneratesAlert

	| methodToCheck |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodTypedCorrectlyEnableTyping.
	methodToCheck removeProperties .
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker |  
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		self assert: (typeChecker issues anyOne isKindOf: MethodNotAnnotatingTypesIssue ).
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/27/2023 19:48:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/27/2023 19:48:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/27/2023 19:48:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/27/2023 19:48:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 19:48:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 19:48:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/27/2023 19:48:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/27/2023 19:48:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/27/2023 19:48:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/27/2023 19:48:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/27/2023 19:48:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/27/2023 19:48:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/27/2023 19:48:04'!
PASSED!
!MethodNotAnnotatingTypesIssue methodsFor: 'initialization' stamp: 'JFGO 12/27/2023 19:48:43'!
problemDescription
	^''.! !
!MethodNotAnnotatingTypesIssue methodsFor: 'initialization' stamp: 'JFGO 12/27/2023 19:49:07' prior: 50662906!
problemDescription
	^ 'Method is not annotating types'.! !
!MethodNotAnnotatingTypesIssue methodsFor: 'method' stamp: 'JFGO 12/27/2023 19:49:46'!
method
	^compiledMethod .! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/27/2023 19:51:31'!
test01MethodTypedCorrectlyDoesNotGenerateIssues
		
	self typeCheckWithSelector: #methodTypedCorrectlyEnableTyping andAssert: [:typeChecker | 
		self deny: typeChecker hasIssues.
	]. 
	
	
! !

!methodRemoval: TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateAlerts stamp: 'JFGO 12/27/2023 19:51:31'!
test01MethodTypedCorrectlyDoesNotGenerateAlerts
		
	self typeCheckWithSelector: #methodTypedCorrectlyEnableTyping andAssert: [:typeChecker | 
		self deny: typeChecker hasIssues.
	]. 
	
	
!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/27/2023 19:51:53'!
test02MethodThatDontCheckTypesGeneratesIssue

	| methodToCheck |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodTypedCorrectlyEnableTyping.
	methodToCheck removeProperties .
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker |  
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		self assert: (typeChecker issues anyOne isKindOf: MethodNotAnnotatingTypesIssue ).
	]. 
	
	
	
	
	! !

!methodRemoval: TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 12/27/2023 19:51:53'!
test02MethodThatDontCheckTypesGeneratesAlert

	| methodToCheck |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodTypedCorrectlyEnableTyping.
	methodToCheck removeProperties .
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker |  
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		self assert: (typeChecker issues anyOne isKindOf: MethodNotAnnotatingTypesIssue ).
	]. 
	
	
	
	
	!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/27/2023 19:55:18'!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	
	self typeCheckWithSelector: #methodWithMessageNotUnderstood andAssert: [:typeChecker | 
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	]. 
	
	! !

!methodRemoval: TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 19:55:18'!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNotUnderstood andAssert: [:typeChecker | 
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	]. 
	
	!

!classDefinition: #TypeCheckingDragonError category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 12/27/2023 19:57:34'!
Object subclass: #TypeCheckingDragonError
	instanceVariableNames: 'method'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/27/2023 19:57:11' prior: 50662976!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	
	self typeCheckWithSelector: #methodWithMessageNotUnderstood andAssert: [:typeChecker | 
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		self assert: (typeChecker issues anyOne isKindOf: TypeCheckingDragonError ).
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 19:57:55'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 19:57:55'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 19:58:11'!
FAILURE!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 12/27/2023 20:04:06' prior: 50659808!
checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType 
	
	| implementorsFinder |
	
	implementorsFinder := AllActualLocalImplementors of: aMessageNode selectorSymbol forAll: receiverLiveType.
	implementorsFinder LiveTypeValue.
	
	implementorsFinder notImplementedIsEmpty ifFalse: [  
		alerts add: (TypeCheckingDragonError for: methodNode node: aMessageNode)].! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 20:06:44'!
ERROR!
!TypeCheckingDragonError class methodsFor: 'instance creation' stamp: 'JFGO 12/27/2023 20:06:50'!
for: aMethodNode node: aMessageNode 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aMethodNode node: aMessageNode ! !
!TypeCheckingDragonError class methodsFor: 'instance creation' stamp: 'JFGO 12/27/2023 20:07:08' prior: 50663062!
for: aMethodNode node: aMessageNode 
	
	^self new initializeFor: aMethodNode node: aMessageNode ! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 20:07:21'!
ERROR!

!classDefinition: #TypeCheckingDragonError category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 12/27/2023 20:07:43'!
Object subclass: #TypeCheckingDragonError
	instanceVariableNames: 'method methodNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #TypeCheckingDragonError category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 12/27/2023 20:07:43'!
Object subclass: #TypeCheckingDragonError
	instanceVariableNames: 'method methodNode messageNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckingDragonError methodsFor: 'initialization' stamp: 'JFGO 12/27/2023 20:07:43'!
initializeFor: aMethodNode node: aMessageNode 
	self shouldBeImplemented.
	methodNode := aMethodNode.
	messageNode := aMessageNode.! !
!TypeCheckingDragonError methodsFor: 'initialization' stamp: 'JFGO 12/27/2023 20:07:54' prior: 50663103!
initializeFor: aMethodNode node: aMessageNode 
	methodNode := aMethodNode.
	messageNode := aMessageNode.! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 20:07:55'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/27/2023 20:08:18' prior: 50663011!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	
	self typeCheckWithSelector: #methodWithMessageNotUnderstood andAssert: [:typeChecker | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		self assert: (typeChecker issues anyOne isKindOf: TypeCheckingDragonError ).
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 20:08:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 20:08:23'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/27/2023 20:08:35' prior: 50663123!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	
	self typeCheckWithSelector: #methodWithMessageNotUnderstood andAssert: [:typeChecker | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		self assert: (typeChecker issues anyOne isKindOf: TypeCheckingDragonError ).
		"TODO. COntinue asking for detail error"
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 20:08:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/27/2023 20:08:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/27/2023 20:08:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/27/2023 20:08:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 20:08:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 20:08:38'!
ERROR!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/27/2023 20:08:38'!
ERROR!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/27/2023 20:08:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/27/2023 20:08:38'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/27/2023 20:08:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/27/2023 20:08:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/27/2023 20:08:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/27/2023 20:08:38'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/27/2023 20:09:30' prior: 50662588!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker | | firstAlert secondAlert |
		self assert: 2 equals: typeChecker issues size.
		firstAlert := typeChecker issues first.
		self assert: (firstAlert isKindOf: TypeCheckingDragonError ).
		secondAlert := typeChecker issues second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 20:09:31'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/27/2023 20:09:49' prior: 50662608!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker | | firstAlert secondAlert |
		self assert: 2 equals: typeChecker issues size.
		firstAlert := typeChecker issues first.
		self assert: (firstAlert isKindOf: TypeCheckingDragonError ).
		secondAlert := typeChecker issues second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	]. 
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/27/2023 20:09:51'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/27/2023 20:10:14' prior: 50662554!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	self typeCheckWithSelector: #methodWithMessageArgumentToResolve andAssert: [:typeChecker | 
		self assert: 2 equals: typeChecker issues size.
		typeChecker issues do: [:alert | 
			self assert: (alert isKindOf: TypeCheckingDragonError).
			
		].
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/27/2023 20:10:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/27/2023 20:10:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/27/2023 20:10:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/27/2023 20:10:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 20:10:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 20:10:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/27/2023 20:10:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/27/2023 20:10:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/27/2023 20:10:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/27/2023 20:10:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/27/2023 20:10:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/27/2023 20:10:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/27/2023 20:10:17'!
PASSED!
!TypeCheckingDragonError methodsFor: 'printing' stamp: 'JFGO 12/27/2023 20:14:19'!
problemDescription
	self shouldBeImplemented .! !
!TypeCheckingDragonError methodsFor: 'method' stamp: 'JFGO 12/27/2023 20:14:29'!
method
	^method.! !
!TypeCheckingDragonError methodsFor: 'receiver/selector' stamp: 'JFGO 12/27/2023 20:14:42'!
receiver
	^messageNode receiver.! !
!TypeCheckingDragonError methodsFor: 'receiver/selector' stamp: 'JFGO 12/27/2023 20:14:48'!
selector
	^messageNode selector.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/27/2023 20:15:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/27/2023 20:15:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/27/2023 20:15:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 20:15:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 20:15:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/27/2023 20:15:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/27/2023 20:15:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/27/2023 20:15:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/27/2023 20:15:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/27/2023 20:15:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/27/2023 20:15:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/27/2023 20:15:37'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/27/2023 20:16:25' prior: 50662941!
test02MethodThatDontCheckTypesGeneratesIssue

	| methodToCheck |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodTypedCorrectlyEnableTyping.
	methodToCheck removeProperties .
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker |  
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		self assert: (typeChecker issues anyOne isKindOf: MethodNotAnnotatingTypesIssue ).
		self assert: (typeChecker issues anyOne method) equals: methodToCheck .
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/27/2023 20:16:28'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/27/2023 20:17:19' prior: 50663146!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	| methodToCheck |
	methodToCheck := #methodWithMessageNotUnderstood.
	self typeCheckWithSelector:  methodToCheck andAssert: [:typeChecker | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		self assert: (typeChecker issues anyOne isKindOf: TypeCheckingDragonError ).
		self assert: (typeChecker issues anyOne method) equals: methodToCheck .
		"TODO. COntinue asking for detail error"
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 20:17:24'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 20:17:24'!
FAILURE!

typeChecker issues anyOne!

self method !

self asMethodReference !

self methodReference !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/27/2023 20:18:58' prior: 50663425!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	| methodToCheck |
	methodToCheck := #methodWithMessageNotUnderstood.
	self typeCheckWithSelector:  methodToCheck andAssert: [:typeChecker | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		self assert: (typeChecker issues anyOne isKindOf: TypeCheckingDragonError ).
		"self assert: (typeChecker issues anyOne method) equals: methodToCheck ."
		"TODO. COntinue asking for detail error"
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/27/2023 20:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/27/2023 20:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/27/2023 20:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 20:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 20:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/27/2023 20:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/27/2023 20:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/27/2023 20:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/27/2023 20:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/27/2023 20:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/27/2023 20:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/27/2023 20:19:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/27/2023 20:19:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/27/2023 20:19:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/27/2023 20:19:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/27/2023 20:19:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/27/2023 20:19:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/27/2023 20:19:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/27/2023 20:19:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/27/2023 20:19:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/27/2023 20:19:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/27/2023 20:19:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/27/2023 20:19:07'!
PASSED!

----SNAPSHOT----(27 December 2023 20:19:12) CuisUniversity-5981.image priorSource: 10579242!

----SNAPSHOT----(27 December 2023 20:19:57) CuisUniversity-5981.image priorSource: 10621469!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:02:05' prior: 50663457!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	| methodToCheck |
	methodToCheck := #methodWithMessageNotUnderstood.
	self typeCheckWithSelector:  methodToCheck andAssert: [:typeChecker | | error | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		error:= typeChecker issues anyOne.
		self assert: (error isKindOf: TypeCheckingDragonError ).
		"self assert: (typeChecker issues anyOne method) equals: methodToCheck ."
		"TODO. COntinue asking for detail error"
	]. 
	
	! !

error!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:02:39'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:02:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:03:17'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:03:30' prior: 50663579!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	| methodToCheck |
	methodToCheck := #methodWithMessageNotUnderstood.
	self typeCheckWithSelector:  methodToCheck andAssert: [:typeChecker | | error | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		error:= typeChecker issues anyOne.
		self assert: (error isKindOf: TypeCheckingDragonError ).
		self assert: (error method) equals: methodToCheck .
		"TODO. COntinue asking for detail error"
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:03:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:03:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:03:56'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:04:35' prior: 50663613!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	| methodToCheck |
	methodToCheck := #methodWithMessageNotUnderstood.
	self typeCheckWithSelector:  methodToCheck andAssert: [:typeChecker | | error | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		error:= typeChecker issues anyOne.
		self assert: (error isKindOf: TypeCheckingDragonError ).
		self assert: (error method) equals: methodToCheck .
		"TODO. COntinue asking for detail error"
	]. 
	
	! !

methodNode!

methodNode !

methodNode method !

compiledMethod!

compiledMethod asMethodReference !

aMessageNode !

methodNode!

aMessageNode!

aMessageNode method !

methodNode!

methodNode originalReceiver !

methodNode !
!TypeCheckingDragonError class methodsFor: 'instance creation' stamp: 'JFGO 12/28/2023 16:12:32'!
on: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeFor: aMethodNode node: aMessageNode ! !
!TypeCheckingDragonError class methodsFor: 'instance creation' stamp: 'JFGO 12/28/2023 16:13:02' prior: 50663672!
on: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode .! !

!classDefinition: #TypeCheckingDragonError category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 12/28/2023 16:13:31'!
Object subclass: #TypeCheckingDragonError
	instanceVariableNames: 'method methodNode messageNode compiledMethod'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckingDragonError methodsFor: 'initialization' stamp: 'JFGO 12/28/2023 16:13:28'!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode .
	compiledMethod := aCompiledMethod .
	methodNode := aMethodNode.
	messageNode := aMessageNode.! !
!TypeCheckingDragonError methodsFor: 'method' stamp: 'JFGO 12/28/2023 16:13:40' prior: 50663337!
method
	^compiledMethod .! !

Object subclass: #TypeCheckingDragonError
	instanceVariableNames: 'methodNode messageNode compiledMethod'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #TypeCheckingDragonError category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 12/28/2023 16:13:55'!
Object subclass: #TypeCheckingDragonError
	instanceVariableNames: 'methodNode messageNode compiledMethod'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

Object subclass: #MethodNotAnnotatingTypesIssue
	instanceVariableNames: 'compiledMethod'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #MethodNotAnnotatingTypesIssue category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 12/28/2023 16:14:16'!
Object subclass: #MethodNotAnnotatingTypesIssue
	instanceVariableNames: 'compiledMethod'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 12/28/2023 16:14:44' prior: 50663042!
checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType 
	
	| implementorsFinder |
	
	implementorsFinder := AllActualLocalImplementors of: aMessageNode selectorSymbol forAll: receiverLiveType.
	implementorsFinder LiveTypeValue.
	
	implementorsFinder notImplementedIsEmpty ifFalse: [  
		alerts add: (TypeCheckingDragonError on: compiledMethod for: methodNode by: aMessageNode)].! !

!methodRemoval: TypeCheckingDragonError class #for:node: stamp: 'JFGO 12/28/2023 16:15:01'!
for: aMethodNode node: aMessageNode 
	
	^self new initializeFor: aMethodNode node: aMessageNode !

!methodRemoval: TypeCheckingDragonError #initializeFor:node: stamp: 'JFGO 12/28/2023 16:15:06'!
initializeFor: aMethodNode node: aMessageNode 
	methodNode := aMethodNode.
	messageNode := aMessageNode.!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:15:25'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:15:26'!
FAILURE!

error method!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:17:17'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:17:17'!
FAILURE!

error method!

error method = methodToCheck !

methodToCheck !

methodToCheck !

method!

error method!

error method!

self methodReference !

self methodReference compiledMethod !

self methodReference classSymbol !

self methodReference methodSymbol !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:19:55' prior: 50663646!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	| methodSelector |
	methodSelector := #methodWithMessageNotUnderstood.
	self typeCheckWithSelector:  methodSelector andAssert: [:typeChecker | | error | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		error:= typeChecker issues anyOne.
		self assert: (error isKindOf: TypeCheckingDragonError ).
		self assert: (error method) equals: methodSelector .
		"TODO. COntinue asking for detail error"
	]. 
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:20:35' prior: 50663800!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	| methodSelector |
	methodSelector := #methodWithMessageNotUnderstood.
	self typeCheckWithSelector:  methodSelector andAssert: [:typeChecker :methodChecked| | error | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		error:= typeChecker issues anyOne.
		self assert: (error isKindOf: TypeCheckingDragonError ).
		self assert: (error method) equals: methodChecked .
		"TODO. COntinue asking for detail error"
	]. 
	
	! !
!TypeCheckerDragonTest methodsFor: 'assertions' stamp: 'JFGO 12/28/2023 16:21:00' prior: 50661095!
typeCheckOn: aCompiledMethod andAssert: anAssertionBlock
		
	| typeChecker |
	typeChecker := aCompiledMethod typeCheckDragon.
	anAssertionBlock value: typeChecker value: aCompiledMethod.
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:21:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/28/2023 16:21:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/28/2023 16:21:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/28/2023 16:21:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:21:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:21:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/28/2023 16:21:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:21:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:21:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/28/2023 16:21:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:21:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/28/2023 16:21:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/28/2023 16:21:15'!
ERROR!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/28/2023 16:21:51'!
ERROR!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/28/2023 16:21:51'!
ERROR!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:22:23' prior: 50662921!
test01MethodTypedCorrectlyDoesNotGenerateIssues
		
	self typeCheckWithSelector: #methodTypedCorrectlyEnableTyping andAssert: [:typeChecker :methodChecked| 
		self deny: typeChecker hasIssues.
	]. 
	
	
! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/28/2023 16:22:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/28/2023 16:22:26'!
ERROR!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/28/2023 16:22:26'!
ERROR!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:22:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:22:26'!
ERROR!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/28/2023 16:22:26'!
ERROR!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:22:26'!
ERROR!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:22:26'!
ERROR!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/28/2023 16:22:26'!
ERROR!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:22:26'!
ERROR!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/28/2023 16:22:26'!
ERROR!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/28/2023 16:22:26'!
ERROR!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:22:31' prior: 50663401!
test02MethodThatDontCheckTypesGeneratesIssue

	| methodToCheck |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodTypedCorrectlyEnableTyping.
	methodToCheck removeProperties .
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker :methodChecked |  
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		self assert: (typeChecker issues anyOne isKindOf: MethodNotAnnotatingTypesIssue ).
		self assert: (typeChecker issues anyOne method) equals: methodToCheck .
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/28/2023 16:22:32'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:22:35' prior: 50662464!
test03PrimitiveMethodsDontCheckTypes
	
	self typeCheckWithSelector: #emptyMethodPrimitive andAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	]. 
! !

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/28/2023 16:22:36'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:22:40' prior: 50663217!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | firstAlert secondAlert |
		self assert: 2 equals: typeChecker issues size.
		firstAlert := typeChecker issues first.
		self assert: (firstAlert isKindOf: TypeCheckingDragonError ).
		secondAlert := typeChecker issues second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:22:41'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:22:46' prior: 50663241!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker :methodChecked | | firstAlert secondAlert |
		self assert: 2 equals: typeChecker issues size.
		firstAlert := typeChecker issues first.
		self assert: (firstAlert isKindOf: TypeCheckingDragonError ).
		secondAlert := typeChecker issues second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	]. 
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/28/2023 16:22:47'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:22:50' prior: 50661765!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert
	
	self typeCheckWithSelector: #methodWithReceiverWithNoTypes andAssert: [:typeChecker :methodChecked | 
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:22:51'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:22:55' prior: 50663264!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	self typeCheckWithSelector: #methodWithMessageArgumentToResolve andAssert: [:typeChecker :methodChecked | 
		self assert: 2 equals: typeChecker issues size.
		typeChecker issues do: [:alert | 
			self assert: (alert isKindOf: TypeCheckingDragonError).
			
		].
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:22:56'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:23:00' prior: 50662473!
test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts
	"This is because the object is able to respond to the message even if it is for throwing an exception"
	
	self typeCheckWithSelector: #methodInstanceNotIndexable andAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	]. 
	! !

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/28/2023 16:23:09'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:23:14' prior: 50661958!
test10MessageSentToMethodWithNoReturnTypeGeneratesAlert
	
		
	self typeCheckWithSelector: #methodWithMessageWithNoReturnTypes andAssert: [:typeChecker :methodChecked | 
		"TODO. So far, this test does not generate value versus test03, but we are waiting definition of error vs warning vs problem"
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Cannot deduce Receiver Type'.
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:23:15'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 12/28/2023 16:23:20' prior: 50662207!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado"
	"Ademas, al momento de esta version de typeChecker, no hay LiveTyping sobre bloques, por eso se genera la alerta"
	"Una vez implementado, habra que agregar tests adicionales para chequeo de tipos dentro de bloques usando la informacion de generics"
		
	
	self performMethodWithSelector: #methodWithCollectionWithNoTypeError typeCheckAndAssert: [:typeChecker :methodChecked | 
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	]. 
	
! !

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/28/2023 16:23:21'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:23:26' prior: 50662486!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	self performMethodWithSelector: #methodWithVariableWithManyTypes typeCheckAndAssert: [:typeChecker :methodChecked | 
		self assert: typeChecker hasIssues. "TODO. CHANGE".
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/28/2023 16:23:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/28/2023 16:23:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/28/2023 16:23:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/28/2023 16:23:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/28/2023 16:23:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:23:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:23:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/28/2023 16:23:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:23:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:23:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/28/2023 16:23:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:23:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/28/2023 16:23:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/28/2023 16:23:30'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:24:35' prior: 50663820!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	| methodSelector |
	methodSelector := #methodWithMessageNotUnderstood.
	self typeCheckWithSelector:  methodSelector andAssert: [:typeChecker :methodChecked| | error | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		error:= typeChecker issues anyOne.
		self assert: (error isKindOf: TypeCheckingDragonError ).
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver) equals: 'false'.
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:24:37'!
FAILURE!

error receiver!

error receiver = {'false'}!

error receiver key!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:25:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/28/2023 16:25:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/28/2023 16:25:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/28/2023 16:25:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:25:41'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:25:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/28/2023 16:25:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:25:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:25:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/28/2023 16:25:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:25:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/28/2023 16:25:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/28/2023 16:25:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:25:41'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:25:50' prior: 50664235!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	| methodSelector |
	methodSelector := #methodWithMessageNotUnderstood.
	self typeCheckWithSelector:  methodSelector andAssert: [:typeChecker :methodChecked| | error | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		error:= typeChecker issues anyOne.
		self assert: (error isKindOf: TypeCheckingDragonError ).
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:25:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:25:53'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:26:11' prior: 50664321!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	| methodSelector |
	methodSelector := #methodWithMessageNotUnderstood.
	self typeCheckWithSelector:  methodSelector andAssert: [:typeChecker :methodChecked| | error | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		error:= typeChecker issues anyOne.
		self assert: (error isKindOf: TypeCheckingDragonError ).
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:26:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/28/2023 16:26:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/28/2023 16:26:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/28/2023 16:26:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:26:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:26:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/28/2023 16:26:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:26:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:26:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/28/2023 16:26:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:26:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/28/2023 16:26:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/28/2023 16:26:12'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:33:09' prior: 50664011!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | firstError secondAlert |
		self assert: 2 equals: typeChecker issues size.
		firstError := typeChecker issues first.
		self assert: (firstError isKindOf: TypeCheckingDragonError ).
		secondAlert := typeChecker issues second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	]. 
	
	
	! !
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 12/28/2023 16:34:13'!
errors
	^issues detect: [:issue | issue isKindOf: TypeCheckingDragonError.]! !
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 12/28/2023 16:34:50'!
hasErrors
	^self errors size > 0.! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:35:25' prior: 50664428!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | firstError secondAlert |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		firstError := typeChecker errors first.
		self assert: (firstError isKindOf: TypeCheckingDragonError ).
		secondAlert := typeChecker issues second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:35:28'!
ERROR!

typeChecker errors!
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 12/28/2023 16:36:19' prior: 50664446!
errors
	^issues collect: [:issue | issue isKindOf: TypeCheckingDragonError.]! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:36:24'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:36:24'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:37:33'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:37:33'!
FAILURE!

typeChecker issues!

typeChecker errors!

----End fileIn of C:\Users\jgutierrez\Tesis\CUIS\windows64\Packages\TerseGuide.pck.st----!
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 12/28/2023 16:38:57' prior: 50664481!
errors
	^issues select: [:issue | issue isKindOf: TypeCheckingDragonError.]! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:39:03'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:39:21' prior: 50664456!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | firstError secondAlert |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		firstError := typeChecker errors anyOne .
		self assert: (firstError isKindOf: TypeCheckingDragonError ).
		secondAlert := typeChecker issues second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:39:23'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:39:57' prior: 50667436!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error secondAlert |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		error := typeChecker errors anyOne .
		self assert: (error isKindOf: TypeCheckingDragonError ).
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		secondAlert := typeChecker issues second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:39:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/28/2023 16:39:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/28/2023 16:39:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/28/2023 16:39:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:39:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:39:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/28/2023 16:39:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:39:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:39:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/28/2023 16:39:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:39:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/28/2023 16:39:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/28/2023 16:39:57'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:40:25' prior: 50667462!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error secondAlert |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		error := typeChecker errors anyOne .
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		secondAlert := typeChecker issues second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	]. 
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:41:47' prior: 50664035!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker :methodChecked | | secondAlert error |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		error := typeChecker errors anyOne .
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		secondAlert := typeChecker issues second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	]. 
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/28/2023 16:41:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/28/2023 16:41:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/28/2023 16:41:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/28/2023 16:41:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:41:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:41:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/28/2023 16:41:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:41:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:41:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/28/2023 16:41:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:41:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/28/2023 16:41:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/28/2023 16:41:51'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:47:42' prior: 50664076!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	self typeCheckWithSelector: #methodWithMessageArgumentToResolve andAssert: [:typeChecker :methodChecked | 
		self assert: 2 equals: typeChecker errors size.
		typeChecker errors do: [:alert | 
			self assert: (alert isKindOf: TypeCheckingDragonError).
			
		].
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:47:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/28/2023 16:47:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/28/2023 16:47:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/28/2023 16:47:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:47:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:47:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/28/2023 16:47:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:47:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:47:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/28/2023 16:47:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:47:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/28/2023 16:47:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/28/2023 16:47:43'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:49:03' prior: 50667644!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	self typeCheckWithSelector: #methodWithMessageArgumentToResolve andAssert: [:typeChecker :methodChecked | | error | 
		self assert: 2 equals: typeChecker issues size.
		self assert: 2 equals: typeChecker errors size.
		error := typeChecker errors first .
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		
	]. 
	
	
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:49:14' prior: 50667714!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	self typeCheckWithSelector: #methodWithMessageArgumentToResolve andAssert: [:typeChecker :methodChecked | | firstError | 
		self assert: 2 equals: typeChecker issues size.
		self assert: 2 equals: typeChecker errors size.
		firstError := typeChecker errors first .
		self assert: (firstError method) equals: methodChecked .
		self assert: (firstError receiver key) equals: 'false'.
		self assert: (firstError selector key) equals: #not.
		
	]. 
	
	
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:49:24' prior: 50667734!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	self typeCheckWithSelector: #methodWithMessageArgumentToResolve andAssert: [:typeChecker :methodChecked | | firstError | 
		self assert: 2 equals: typeChecker issues size.
		self assert: 2 equals: typeChecker errors size.
		firstError := typeChecker errors first .
		self assert: (firstError method) equals: methodChecked .
		self assert: (firstError receiver key) equals: '10'.
		self assert: (firstError selector key) equals: #factorial.
		
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:49:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/28/2023 16:49:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/28/2023 16:49:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/28/2023 16:49:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:49:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:49:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/28/2023 16:49:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:49:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:49:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/28/2023 16:49:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:49:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/28/2023 16:49:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/28/2023 16:49:25'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:49:46' prior: 50667755!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	self typeCheckWithSelector: #methodWithMessageArgumentToResolve andAssert: [:typeChecker :methodChecked | | secondError | 
		self assert: 2 equals: typeChecker issues size.
		self assert: 2 equals: typeChecker errors size.
		secondError := typeChecker errors first .
		self assert: (secondError method) equals: methodChecked .
		self assert: (secondError receiver key) equals: '10'.
		self assert: (secondError selector key) equals: #factorial.
		
		secondError := typeChecker errors first .
		self assert: (secondError method) equals: methodChecked .
		self assert: (secondError receiver key) equals: '15'.
		self assert: (secondError selector key) equals: #factorial.
		
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:49:47'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:50:12' prior: 50667830!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	self typeCheckWithSelector: #methodWithMessageArgumentToResolve andAssert: [:typeChecker :methodChecked | | secondError firstError | 
		self assert: 2 equals: typeChecker issues size.
		self assert: 2 equals: typeChecker errors size.
		firstError := typeChecker errors first .
		self assert: (firstError method) equals: methodChecked .
		self assert: (firstError receiver key) equals: '10'.
		self assert: (firstError selector key) equals: #factorial.
		
		secondError := typeChecker errors first .
		self assert: (secondError method) equals: methodChecked .
		self assert: (secondError receiver key) equals: '15'.
		self assert: (secondError selector key) equals: #factorial.
		
	]. 
	
	
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:50:19' prior: 50667862!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	self typeCheckWithSelector: #methodWithMessageArgumentToResolve andAssert: [:typeChecker :methodChecked | | secondError firstError | 
		self assert: 2 equals: typeChecker issues size.
		self assert: 2 equals: typeChecker errors size.
		firstError := typeChecker errors first .
		self assert: (firstError method) equals: methodChecked .
		self assert: (firstError receiver key) equals: '10'.
		self assert: (firstError selector key) equals: #factorial.
		
		secondError := typeChecker errors second .
		self assert: (secondError method) equals: methodChecked .
		self assert: (secondError receiver key) equals: '15'.
		self assert: (secondError selector key) equals: #factorial.
		
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:50:20'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 12/28/2023 16:50:25' prior: 50667890!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	self typeCheckWithSelector: #methodWithMessageArgumentToResolve andAssert: [:typeChecker :methodChecked | | secondError firstError | 
		self assert: 2 equals: typeChecker issues size.
		self assert: 2 equals: typeChecker errors size.
		firstError := typeChecker errors first .
		self assert: (firstError method) equals: methodChecked .
		self assert: (firstError receiver key) equals: '10'.
		self assert: (firstError selector key) equals: #factorial.
		
		secondError := typeChecker errors second .
		self assert: (secondError method) equals: methodChecked .
		self assert: (secondError receiver key) equals: '5'.
		self assert: (secondError selector key) equals: #factorial.
		
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:50:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 12/28/2023 16:50:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 12/28/2023 16:50:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 12/28/2023 16:50:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 12/28/2023 16:50:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 12/28/2023 16:50:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 12/28/2023 16:50:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:50:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 12/28/2023 16:50:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 12/28/2023 16:50:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 12/28/2023 16:50:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 12/28/2023 16:50:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 12/28/2023 16:50:26'!
PASSED!

typeChecker issues!

----SNAPSHOT----(28 December 2023 16:55:50) CuisUniversity-5981.image priorSource: 10621563!
!TypeCheckerDragonMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 12/28/2023 18:57:04'!
initializeFor: aCompiledMethod collectingIssues: anAlertCollection
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	alerts := anAlertCollection .
	! !
!TypeCheckerDragonMethodVisitor class methodsFor: 'as yet unclassified' stamp: 'JFGO 12/28/2023 18:57:04' prior: 50659884!
for: aCompiledMethod collectingAlerts: anAlertCollection  
	^self new initializeFor: aCompiledMethod collectingIssues: anAlertCollection .! !

!methodRemoval: TypeCheckerDragonMethodVisitor #initializeFor:collectingAlerts: stamp: 'JFGO 12/28/2023 18:57:04'!
initializeFor: aCompiledMethod collectingAlerts: anAlertCollection
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	alerts := anAlertCollection .
	!

!classDefinition: #TypeCheckerDragonMethodVisitor category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 12/28/2023 18:57:18'!
ParseNodeVisitor subclass: #TypeCheckerDragonMethodVisitor
	instanceVariableNames: 'compiledMethod methodNode issues castApplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 12/28/2023 18:57:18' prior: 50659801!
addAlertWithMessage: aStringMessage

	^ issues add: (TypeCheckerDragonAlert for: methodNode withMessage: aStringMessage)! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 12/28/2023 18:57:18' prior: 50663745!
checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType 
	
	| implementorsFinder |
	
	implementorsFinder := AllActualLocalImplementors of: aMessageNode selectorSymbol forAll: receiverLiveType.
	implementorsFinder LiveTypeValue.
	
	implementorsFinder notImplementedIsEmpty ifFalse: [  
		issues add: (TypeCheckingDragonError on: compiledMethod for: methodNode by: aMessageNode)].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 12/28/2023 18:57:18' prior: 50668009!
initializeFor: aCompiledMethod collectingIssues: anAlertCollection
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	issues := anAlertCollection .
	! !
!TypeCheckerDragonMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 12/28/2023 18:57:33' prior: 50668072!
initializeFor: aCompiledMethod collectingIssues: anIssuesCollection
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	issues := anIssuesCollection .
	! !

----SNAPSHOT----(28 December 2023 19:16:04) CuisUniversity-5981.image priorSource: 10763334!

typeChecker!
!TypeCheckerDragonMethodVisitor methodsFor: 'alerts' stamp: 'JFGO 1/3/2024 20:01:23' prior: 50659874!
addWarning: anIncompleteTypeInfoError node: aMessageNode
"TODO. We still don't know about warnings, this message is for coupling with incompleteTypeInfo"
	self addAlertWithMessage: 'Cannot deduce Receiver Type'.
	"issues add: TypeCheckingDragonError on:  for:  by: "
! !
!TypeCheckerDragonMethodVisitor methodsFor: 'alerts' stamp: 'JFGO 1/3/2024 20:02:26' prior: 50668095!
addWarning: anIncompleteTypeInfoError node: aMessageNode

	
	issues add: (TypeCheckingDragonError on: compiledMethod for: methodNode by: aMessageNode)
! !

!classDefinition: #TypeCheckingDragonWarning category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 1/3/2024 20:05:35'!
Object subclass: #TypeCheckingDragonWarning
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckerDragonMethodVisitor methodsFor: 'alerts' stamp: 'JFGO 1/3/2024 20:05:23' prior: 50668107!
addWarning: anIncompleteTypeInfoError node: aMessageNode

	
	issues add: (TypeCheckingDragonWarning on: compiledMethod for: methodNode by: aMessageNode reason: anIncompleteTypeInfoError reasonDescription )
! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:05:47'!
ERROR!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:05:47'!
ERROR!
!TypeCheckingDragonWarning class methodsFor: 'instance creation' stamp: 'JFGO 1/3/2024 20:05:55'!
on: aCompiledMethod for: aMethodNode by: aMessageNode reason: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode reason: aRenameMe1 ! !
!TypeCheckingDragonWarning class methodsFor: 'instance creation' stamp: 'JFGO 1/3/2024 20:06:15' prior: 50668143!
on: aCompiledMethod for: aMethodNode by: aMessageNode reason: aReasonDescription
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode reason: aReasonDescription ! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:06:16'!
ERROR!

!classDefinition: #TypeCheckingDragonWarning category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 1/3/2024 20:06:28'!
Object subclass: #TypeCheckingDragonWarning
	instanceVariableNames: 'compiledMethod'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #TypeCheckingDragonWarning category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 1/3/2024 20:06:28'!
Object subclass: #TypeCheckingDragonWarning
	instanceVariableNames: 'compiledMethod methodNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #TypeCheckingDragonWarning category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 1/3/2024 20:06:28'!
Object subclass: #TypeCheckingDragonWarning
	instanceVariableNames: 'compiledMethod methodNode messageNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #TypeCheckingDragonWarning category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 1/3/2024 20:06:28'!
Object subclass: #TypeCheckingDragonWarning
	instanceVariableNames: 'compiledMethod methodNode messageNode reasonDescription'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckingDragonWarning methodsFor: 'initialization' stamp: 'JFGO 1/3/2024 20:06:28'!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode reason: aReasonDescription 
	self shouldBeImplemented.
	compiledMethod := aCompiledMethod.
	methodNode := aMethodNode.
	messageNode := aMessageNode.
	reasonDescription := aReasonDescription.! !
!TypeCheckingDragonWarning methodsFor: 'initialization' stamp: 'JFGO 1/3/2024 20:06:40' prior: 50668210!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode reason: aReasonDescription 
	compiledMethod := aCompiledMethod.
	methodNode := aMethodNode.
	messageNode := aMessageNode.
	reasonDescription := aReasonDescription.! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:06:41'!
ERROR!
!TypeCheckingDragonWarning methodsFor: 'initialization' stamp: 'JFGO 1/3/2024 20:07:29'!
method
	^compiledMethod.! !
!TypeCheckingDragonWarning methodsFor: 'printing' stamp: 'JFGO 1/3/2024 20:08:31'!
problemDescription
	.! !
!TypeCheckingDragonWarning methodsFor: 'printing' stamp: 'JFGO 1/3/2024 20:08:43' prior: 50668241!
problemDescription
	^reasonDescription .! !
!TypeCheckingDragonWarning methodsFor: 'receiver/selector' stamp: 'JFGO 1/3/2024 20:08:52'!
receiver! !
!TypeCheckingDragonWarning methodsFor: 'receiver/selector' stamp: 'JFGO 1/3/2024 20:08:55'!
selector! !
!TypeCheckingDragonWarning methodsFor: 'receiver/selector' stamp: 'JFGO 1/3/2024 20:09:16' prior: 50668250!
receiver
	^messageNode receiver.! !
!TypeCheckingDragonWarning methodsFor: 'receiver/selector' stamp: 'JFGO 1/3/2024 20:09:26' prior: 50668254!
selector
	^messageNode selector.! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/3/2024 20:10:51' prior: 50667542!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error secondAlert |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		error := typeChecker errors anyOne .
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		secondAlert := typeChecker issues second.
		self assert: 'Cannot deduce Receiver Type' equals: secondAlert problemDescription .	
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:10:52'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/3/2024 20:11:32' prior: 50668268!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error secondAlert |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		error := typeChecker errors anyOne .
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		secondAlert := typeChecker issues second.
		self assert: '#not not implemented in String' equals: secondAlert problemDescription .	
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:11:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 1/3/2024 20:11:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 1/3/2024 20:11:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 1/3/2024 20:11:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 1/3/2024 20:11:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:11:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/3/2024 20:11:33'!
ERROR!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/3/2024 20:11:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 1/3/2024 20:11:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 1/3/2024 20:11:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 1/3/2024 20:11:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 1/3/2024 20:11:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 1/3/2024 20:11:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/3/2024 20:11:33'!
ERROR!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:11:43'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/3/2024 20:11:52' prior: 50668297!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error warning |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		error := typeChecker errors anyOne .
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker issues second.
		self assert: '#not not implemented in String' equals: warning problemDescription .	
	]. 
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/3/2024 20:12:11' prior: 50668383!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error warning |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		error := typeChecker errors anyOne .
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker issues second.
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:12:15'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/3/2024 20:12:30' prior: 50668407!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error warning |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		error := typeChecker errors anyOne .
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker issues second.
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #not.
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:12:33'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/3/2024 20:12:53' prior: 50668437!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error warning |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		error := typeChecker errors anyOne .
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker issues second.
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #not.
		self assert: (warning receiver key) equals: 'false'.
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:12:56'!
ERROR!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:12:56'!
ERROR!

self receiver!

self receiver key!

self receiver!

self asString !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/3/2024 20:14:35' prior: 50668469!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error warning |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		error := typeChecker errors anyOne .
		self assert: '#not not implemented in String' equals: error problemDescription .	
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker issues second.
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #not.
		
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:14:38'!
ERROR!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:14:38'!
ERROR!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/3/2024 20:14:52' prior: 50668509!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error warning |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		error := typeChecker errors anyOne .
		"self assert: '#not not implemented in String' equals: error problemDescription .	" "TODO"
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker issues second.
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #not.
		
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:14:57'!
PASSED!
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 1/3/2024 20:15:33'!
warnings
	^issues select: [:issue | issue isKindOf: TypeCheckingDragonWarning.]! !
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 1/3/2024 20:15:51'!
hasWarnings
	^self warnings size > 0.! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/3/2024 20:16:16' prior: 50668547!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error warning |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		"self assert: '#not not implemented in String' equals: error problemDescription .	" "TODO"
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #not.
		
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:16:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/3/2024 20:22:19'!
ERROR!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/3/2024 20:22:19'!
ERROR!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/3/2024 20:23:57' prior: 50667566!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker :methodChecked | | warning error |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		"self assert: '#not not implemented in String' equals: error problemDescription .	" "TODO"
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker warnings anyOne .
		self assert: '#factorial not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #not.
	]. 
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/3/2024 20:24:00'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/3/2024 20:24:00'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/3/2024 20:24:25' prior: 50668636!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker :methodChecked | | warning error |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		"self assert: '#not not implemented in String' equals: error problemDescription .	" "TODO"
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #not.
	]. 
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/3/2024 20:24:43'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/3/2024 20:24:43'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/3/2024 20:25:00' prior: 50668676!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker :methodChecked | | warning error |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		"self assert: '#not not implemented in String' equals: error problemDescription .	" "TODO"
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #factorial.
	]. 
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/3/2024 20:25:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/3/2024 20:25:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 1/3/2024 20:25:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 1/3/2024 20:25:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 1/3/2024 20:25:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 1/3/2024 20:25:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 1/3/2024 20:25:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/3/2024 20:25:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/3/2024 20:25:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/3/2024 20:25:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 1/3/2024 20:25:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 1/3/2024 20:25:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 1/3/2024 20:25:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 1/3/2024 20:25:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 1/3/2024 20:25:38'!
PASSED!

----SNAPSHOT----(3 January 2024 20:26:17) CuisUniversity-5981.image priorSource: 10766071!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 1/4/2024 19:20:09'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/4/2024 19:22:11'!
test10MessageSentToMethodWithNoReturnTypeGeneratesIssue
	
		
	self typeCheckWithSelector: #methodWithMessageWithNoReturnTypes andAssert: [:typeChecker :methodChecked | 
		"TODO. So far, this test does not generate value versus test03, but we are waiting definition of error vs warning vs problem"
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Cannot deduce Receiver Type'.
	]. 
	
	
	! !

!methodRemoval: TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 1/4/2024 19:22:11'!
test10MessageSentToMethodWithNoReturnTypeGeneratesAlert
	
		
	self typeCheckWithSelector: #methodWithMessageWithNoReturnTypes andAssert: [:typeChecker :methodChecked | 
		"TODO. So far, this test does not generate value versus test03, but we are waiting definition of error vs warning vs problem"
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Cannot deduce Receiver Type'.
	]. 
	
	
	!

methodToCheck!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/4/2024 19:26:51' prior: 50668817!
test10MessageSentToMethodWithNoReturnTypeGeneratesIssue
	
		
	self typeCheckWithSelector: #methodWithMessageWithNoReturnTypes andAssert: [:typeChecker :methodChecked | 
		"TODO. So far, this test does not generate value versus test03, but we are waiting definition of error vs warning vs problem"
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Cannot deduce Receiver Type'.
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/4/2024 19:33:45'!
PASSED!

aMessageNode receiver!

aMessageNode receiver!

aMessageNode receiver!

aMessageNode!

self receiverOrCascadeReceiver!

self typeCheckWithSelector: #methodWithMessageWithNoReturnTypes andAssert: [:typeChecker :methodChecked | 
		"TODO. So far, this test does not generate value versus test03, but we are waiting definition of error vs warning vs problem"
		self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Cannot deduce Receiver Type'.
	]!
!IncompleteTypeInfoWarning methodsFor: 'as yet unclassified' stamp: 'JFGO 1/4/2024 19:56:32' prior: 50622842!
addTo: aMethodTypeCheckerVisitor node: aMessageNode 
	"TODO. After removing Hernan's Type Checker, rename the message below to addIssue: or addNonDeductibleTypeIssue:. Julian"
	aMethodTypeCheckerVisitor addProblem: self node: aMessageNode ! !
!TypeCheckerDragonMethodVisitor methodsFor: 'alerts' stamp: 'JFGO 1/4/2024 20:18:51' prior: 50659864!
addProblem: anIncompleteTypeInfoError node: aMessageNode
	self addWarning: anIncompleteTypeInfoError node: aMessageNode.
! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/4/2024 20:20:36' prior: 50668851!
test10MessageSentToMethodWithNoReturnTypeGeneratesIssue
	
		
	self typeCheckWithSelector: #methodWithMessageWithNoReturnTypes andAssert: [:typeChecker :methodChecked | | warning | 
		self assert: typeChecker hasWarnings .
		self assert: typeChecker warnings size equals: 1.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #factorial.
		
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/4/2024 20:20:43'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/4/2024 20:20:43'!
FAILURE!

warning problemDescription!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/4/2024 20:21:24' prior: 50668905!
test10MessageSentToMethodWithNoReturnTypeGeneratesIssue
	
		
	self typeCheckWithSelector: #methodWithMessageWithNoReturnTypes andAssert: [:typeChecker :methodChecked | | warning | 
		self assert: typeChecker hasWarnings .
		self assert: typeChecker warnings size equals: 1.
		warning := typeChecker warnings anyOne .
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #factorial.
		
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/4/2024 20:21:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/4/2024 20:21:29'!
PASSED!

implementor methodReference!

self !
!MessageNode methodsFor: '*LiveTypingGenerics-livetypes' stamp: 'JFGO 1/4/2024 20:29:26' prior: 50658772!
returnTypesOf: implementor from: aReceiverType receiving: sentSelector in: aCompiledMethod addingReturnTypesTo: messageReturnTypes addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage

	| returnTypes |

	"generic getter case"
	((aReceiverType isGenericType) and: [aStorage getterMethodsFor: aReceiverType includes: sentSelector]) ifTrue: [
		| parameterIndex |
		parameterIndex := (aStorage getterMethodsFor: aReceiverType) at: sentSelector.
		messageReturnTypes addAll: (aReceiverType generics at: parameterIndex).
		^self.
	].
	
	"generic setter case"
	(((aStorage tracedMethodsFor: aReceiverType liveClass) includesKey: sentSelector)
		or: [(aStorage tracedMethodsFromParametersFor: aReceiverType liveClass) includesKey: sentSelector])
		ifTrue: [ | lastArgument argumentType |
		"setters need to receive the object from where the type will be set, then there's at least one argument - Adrian"
		lastArgument := self argumentsInEvaluationOrder last.
		argumentType := lastArgument 
						liveTypesIn: aCompiledMethod 
						addingIncompleteTypeInfoTo: incompleteTypeInfoReasons 
						storingGenericsInfoIn: aStorage.
						
		messageReturnTypes add: argumentType.
		^self.	
	].
	
	"general case"
	returnTypes := implementor returnLiveTypesForReceiver: aReceiverType liveClass usingStorage: aStorage.
	(returnTypes isEmpty or: [returnTypes allSatisfy:[:item | item isEmptyType]])
		ifTrue: [ incompleteTypeInfoReasons add: (IncompleteTypeInfoWarning dueToNoReturnTypeOf: implementor methodReference node: self) ]
		ifFalse: [
			returnTypes := returnTypes collect: [ :aType | aType asTypeFor: aReceiverType liveClass].
			messageReturnTypes addAll: returnTypes.
		].! !
!MessageNode methodsFor: '*LiveTypingGenerics-livetypes' stamp: 'JFGO 1/4/2024 20:30:25' prior: 50658669 overrides: 50658183!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons castingWith: aTypeCastApplier storingGenericsInfoIn: aStorage
	
	| messageReturnTypes sentSelector receiverTypes  |

	sentSelector := self selectorSymbol.
	receiverTypes := aTypeCastApplier receiverLiveTypesFor: self in: aCompiledMethod addingIncompleteTypeInfoTo:  incompleteTypeInfoReasons storingGenericsInfoIn: aStorage.
	
	messageReturnTypes := Set new.
	receiverTypes liveTypesDo: [:aReceiverType | | currentReceiverClass currentMethodRef | 								
			currentReceiverClass := aReceiverType liveClass.
			currentMethodRef := (MethodReference class: currentReceiverClass selector: sentSelector).
			(aStorage genericTypeConstructorFrom: currentMethodRef) 
				ifNil: [
					(currentReceiverClass lookupSelector: sentSelector) 
						ifNil: [ incompleteTypeInfoReasons add: (
							IncompleteTypeInfoError dueToMissingImplementationOf: currentMethodRef node: self) ]
						ifNotNil: [ :implementor |
							self returnTypesOf: implementor 
								from: aReceiverType 
								receiving: sentSelector 
								in: aCompiledMethod
								addingReturnTypesTo: messageReturnTypes 
								addingIncompleteTypeInfoTo: incompleteTypeInfoReasons 
								storingGenericsInfoIn: aStorage
							].
				] 
				ifNotNil: [:aGenericTypeConstructor | 
					messageReturnTypes add: (aGenericTypeConstructor in: aCompiledMethod forArguments: self argumentsInEvaluationOrder storingGenericsInfoIn: aStorage).
				].
			
			].
		
	^RawToLiveTypesAdapter new adapt: messageReturnTypes.! !
!IncompleteTypeInfoError class methodsFor: 'instance creation' stamp: 'JFGO 1/4/2024 20:31:22'!
dueToMissingImplementationOf: aMethodReference node: aMessageNode 
	
	^self of: aMethodReference describedAs: (self missingImplementationDescriptionOf: aMethodReference)! !
!IncompleteTypeInfoWarning class methodsFor: 'instance creation' stamp: 'JFGO 1/4/2024 20:31:38'!
dueToNoReturnTypeOf: aMethodReference node: aMessageNode
	
	^self of: aMethodReference describedAs: (self noReturnTypesDescriptionOf: aMethodReference)! !
!IncompleteTypeInfoWarning class methodsFor: '*LiveTypingTypeChecker-instance creation' stamp: 'JFGO 1/4/2024 20:36:35' prior: 50669081!
dueToNoReturnTypeOf: aMethodReference node: aMessageNode
	
	^self of: aMethodReference describedAs: (self noReturnTypesDescriptionOf: aMethodReference) node: aMessageNode.! !
!IncompleteTypeInfoError class methodsFor: '*LiveTypingTypeChecker-instance creation' stamp: 'JFGO 1/4/2024 20:36:48' prior: 50669072!
dueToMissingImplementationOf: aMethodReference node: aMessageNode 
	
	^self of: aMethodReference describedAs: (self missingImplementationDescriptionOf: aMethodReference) node: aMessageNode.! !
!IncompleteTypeInfo methodsFor: 'initialization' stamp: 'JFGO 1/4/2024 20:37:06'!
initializeOf: aMethodReference describedAs: aReasonDescription node: aMessageNode
	
	methodReference := aMethodReference.
	reasonDescription := aReasonDescription ! !

!classDefinition: #IncompleteTypeInfo category: 'LiveTyping' stamp: 'JFGO 1/4/2024 20:37:38'!
Object subclass: #IncompleteTypeInfo
	instanceVariableNames: 'methodReference reasonDescription messageNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping'!
!IncompleteTypeInfo methodsFor: 'initialization' stamp: 'JFGO 1/4/2024 20:37:35' prior: 50669110!
initializeOf: aMethodReference describedAs: aReasonDescription node: aMessageNode
	
	methodReference := aMethodReference.
	reasonDescription := aReasonDescription .
	messageNode := aMessageNode.! !
!IncompleteTypeInfoError methodsFor: 'as yet unclassified' stamp: 'JFGO 1/4/2024 20:38:32'!
addTo: aMethodTypeCheckerVisitor
	
	aMethodTypeCheckerVisitor addWarning: self node: messageNode .! !
!IncompleteTypeInfoWarning methodsFor: 'as yet unclassified' stamp: 'JFGO 1/4/2024 20:39:23'!
addTo: aMethodTypeCheckerVisitor 
	"TODO. After removing Hernan's Type Checker, rename the message below to addIssue: or addNonDeductibleTypeIssue:. Julian"
	aMethodTypeCheckerVisitor addProblem: self node: messageNode ! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 1/4/2024 20:40:08' prior: 50660702 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self. ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlertWithMessage: 'Receiver has no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 1/4/2024 20:40:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 1/4/2024 20:40:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 1/4/2024 20:40:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 1/4/2024 20:40:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/4/2024 20:40:18'!
ERROR!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/4/2024 20:40:18'!
ERROR!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/4/2024 20:40:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 1/4/2024 20:40:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 1/4/2024 20:40:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/4/2024 20:40:18'!
ERROR!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 1/4/2024 20:40:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 1/4/2024 20:40:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/4/2024 20:40:27'!
ERROR!
!IncompleteTypeInfo class methodsFor: 'instance creation' stamp: 'JFGO 1/4/2024 20:41:40'!
of: aMethodReference describedAs: aReasonDescription node: aMessageNode
	
	^self new initializeOf: aMethodReference describedAs: aReasonDescription! !
!IncompleteTypeInfo class methodsFor: '*LiveTypingTypeChecker-instance creation' stamp: 'JFGO 1/4/2024 20:42:21' prior: 50669234!
of: aMethodReference describedAs: aReasonDescription node: aMessageNode
	
	^self new initializeOf: aMethodReference describedAs: aReasonDescription node: aMessageNode.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 1/4/2024 20:42:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 1/4/2024 20:42:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 1/4/2024 20:42:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 1/4/2024 20:42:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/4/2024 20:42:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/4/2024 20:42:33'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/4/2024 20:42:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 1/4/2024 20:42:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 1/4/2024 20:42:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/4/2024 20:42:33'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 1/4/2024 20:42:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 1/4/2024 20:42:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/4/2024 20:42:37'!
FAILURE!

----SNAPSHOT----(4 January 2024 20:42:59) CuisUniversity-5981.image priorSource: 10789053!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/8/2024 17:14:35'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 17:15:05' prior: 50668716!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker :methodChecked | | warning error |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		"self assert: '#not not implemented in String' equals: error problemDescription .	" "TODO"
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #not.
	]. 
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/8/2024 17:15:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/8/2024 17:15:08'!
FAILURE!

self selector key!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 17:15:41' prior: 50668935!
test10MessageSentToMethodWithNoReturnTypeGeneratesIssue
	
		
	self typeCheckWithSelector: #methodWithMessageWithNoReturnTypes andAssert: [:typeChecker :methodChecked | | warning | 
		self assert: typeChecker hasWarnings .
		self assert: typeChecker warnings size equals: 1.
		warning := typeChecker warnings anyOne .
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #methodSumsNumber:anotherNumber:.
		
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/8/2024 17:15:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 1/8/2024 17:18:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 1/8/2024 17:18:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 1/8/2024 17:18:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 1/8/2024 17:18:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 1/8/2024 17:18:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/8/2024 17:18:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/8/2024 17:18:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 17:18:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 1/8/2024 17:18:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 1/8/2024 17:18:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/8/2024 17:18:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 1/8/2024 17:18:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 1/8/2024 17:18:49'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 17:22:17' prior: 50669314!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker :methodChecked | | warning error |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		self assert: '#not not implemented in String' equals: error problemDescription .	
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #not.
	]. 
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/8/2024 17:22:18'!
ERROR!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/8/2024 17:24:18'!
ERROR!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/8/2024 17:24:18'!
ERROR!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 17:15:05' prior: 50669432!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker :methodChecked | | warning error |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		"self assert: '#not not implemented in String' equals: error problemDescription .	" "TODO"
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #not.
	]. 
	
	
	
	! !

anIncompleteTypeInfoError reasonDescription!

self!

self!

self selector!

self receiverOrCascadeReceiver!

self!

receiver ifNil: [ originalReceiver ]!

	receiver!

	receiver isNil!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 17:46:00' prior: 50669476!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker :methodChecked | | warning error |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		"self assert: '#not not implemented in String' equals: error problemDescription .	" "TODO"
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning receiver key) equals: 'false'.
		self assert: (warning selector key) equals: #not.
	]. 
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/8/2024 17:46:03'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 1/8/2024 17:50:58' prior: 50669155 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self. ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlertWithMessage: 'Receiver hsdas no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 1/8/2024 17:51:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 1/8/2024 17:51:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 1/8/2024 17:51:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 1/8/2024 17:51:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/8/2024 17:51:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/8/2024 17:51:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 17:51:01'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 1/8/2024 17:51:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 1/8/2024 17:51:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/8/2024 17:51:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 1/8/2024 17:51:01'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 1/8/2024 17:51:01'!
PASSED!

!classDefinition: #TypeCheckingDragonIncompleteInformation category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 1/8/2024 18:06:28'!
Object subclass: #TypeCheckingDragonIncompleteInformation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 1/8/2024 18:06:19' prior: 50669552 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self. ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation on: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 1/8/2024 18:07:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 1/8/2024 18:07:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 1/8/2024 18:07:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 1/8/2024 18:07:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/8/2024 18:07:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/8/2024 18:07:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 18:07:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 1/8/2024 18:07:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 1/8/2024 18:07:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/8/2024 18:07:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 1/8/2024 18:07:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 1/8/2024 18:07:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 18:07:17'!
ERROR!
!TypeCheckingDragonIncompleteInformation class methodsFor: 'instance creation' stamp: 'JFGO 1/8/2024 18:07:29'!
on: aCompiledMethod for: aMethodNode by: aMessageNode 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode ! !
!TypeCheckingDragonIncompleteInformation class methodsFor: 'instance creation' stamp: 'JFGO 1/8/2024 18:07:36' prior: 50669719!
on: aCompiledMethod for: aMethodNode by: aMessageNode 
	self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode ! !

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 18:07:38'!
ERROR!

!classDefinition: #TypeCheckingDragonIncompleteInformation category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 1/8/2024 18:07:50'!
Object subclass: #TypeCheckingDragonIncompleteInformation
	instanceVariableNames: 'compiledMethod'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #TypeCheckingDragonIncompleteInformation category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 1/8/2024 18:07:50'!
Object subclass: #TypeCheckingDragonIncompleteInformation
	instanceVariableNames: 'compiledMethod methodNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #TypeCheckingDragonIncompleteInformation category: 'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 1/8/2024 18:07:50'!
Object subclass: #TypeCheckingDragonIncompleteInformation
	instanceVariableNames: 'compiledMethod methodNode messageNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckingDragonIncompleteInformation methodsFor: 'initialization' stamp: 'JFGO 1/8/2024 18:07:50'!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	self shouldBeImplemented.
	compiledMethod := aCompiledMethod.
	methodNode := aMethodNode.
	messageNode := aMessageNode.! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'initialization' stamp: 'JFGO 1/8/2024 18:07:54' prior: 50669776!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	compiledMethod := aCompiledMethod.
	methodNode := aMethodNode.
	messageNode := aMessageNode.! !

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 18:07:56'!
FAILURE!
!TypeCheckingDragonIncompleteInformation methodsFor: 'receiver/selector' stamp: 'JFGO 1/8/2024 18:09:00'!
receiver
	^messageNode receiver.! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'receiver/selector' stamp: 'JFGO 1/8/2024 18:09:17'!
selector
	^messageNode selector.! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'method' stamp: 'JFGO 1/8/2024 18:09:42'!
method
	^compiledMethod .! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'method' stamp: 'JFGO 1/8/2024 18:10:19'!
problemDescription
	^'No type information on receiver collected'.! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 18:11:24' prior: 50664059!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert
	
	self typeCheckWithSelector: #methodWithReceiverWithNoTypes andAssert: [:typeChecker :methodChecked | 
		self assert: typeChecker hasOneAlertWithMessage: 'No type information on receiver collected'.
	]. 
	
	
	
	
	! !
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 1/8/2024 18:12:39'!
incompleteInfoAlerts
	^issues select: [:issue | issue isKindOf: TypeCheckingDragonIncompleteInformation .]! !
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 1/8/2024 18:13:19'!
hasIncompleteInfoAlerts
	^self incompleteInfoAlerts size > 0.! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 18:14:51' prior: 50669819!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert
	
	self typeCheckWithSelector: #methodWithReceiverWithNoTypes andAssert: [:typeChecker :methodChecked | | warning | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasIncompleteInfoAlerts .
				
		warning := typeChecker incompleteInfoAlerts anyOne .
		self assert: 'No type information on receiver collected' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning receiver key) equals: 'false'.
		self assert: (warning selector key) equals: #not.
	]. 
	
	
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 18:14:56' prior: 50669842!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert
	
	self typeCheckWithSelector: #methodWithReceiverWithNoTypes andAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasIncompleteInfoAlerts .
				
		alert := typeChecker incompleteInfoAlerts anyOne .
		self assert: 'No type information on receiver collected' equals: alert problemDescription .	
		self assert: (alert method) equals: methodChecked .
		self assert: (alert receiver key) equals: 'false'.
		self assert: (alert selector key) equals: #not.
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 18:15:09'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 18:15:21'!
ERROR!

self issues!

self incompleteInfoAlerts !

self hasIncompleteInfoAlerts !

issues select: [:issue | issue isKindOf: TypeCheckingDragonIncompleteInformation .]!

issues select: [:issue | issue isKindOf: TypeCheckingDragonIncompleteInformation .]!

issue!

self class!

self isKindOf: TypeCheckingDragonIncompleteInformation !

self hasErrors !

self hasWarnings!

self hasIncompleteInfoAlerts !

self issues!

self issues first!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 18:20:12' prior: 50669865!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert
	
	self typeCheckWithSelector: #methodWithReceiverWithNoTypes andAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		"self assert: typeChecker hasIncompleteInfoAlerts ."
				
		alert := typeChecker incompleteInfoAlerts anyOne .
		self assert: 'No type information on receiver collected' equals: alert problemDescription .	
		self assert: (alert method) equals: methodChecked .
		self assert: (alert receiver key) equals: 'false'.
		self assert: (alert selector key) equals: #not.
	]. 
	
	
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 18:20:28' prior: 50669910!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert
	
	self typeCheckWithSelector: #methodWithReceiverWithNoTypes andAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		"self assert: typeChecker hasIncompleteInfoAlerts ."
				
		alert := typeChecker issues anyOne .
		self assert: 'No type information on receiver collected' equals: alert problemDescription .	
		self assert: (alert method) equals: methodChecked .
		self assert: (alert receiver key) equals: 'false'.
		self assert: (alert selector key) equals: #not.
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 18:20:29'!
ERROR!
!TypeCheckingDragonIncompleteInformation class methodsFor: 'instance creation' stamp: 'JFGO 1/8/2024 18:21:14' prior: 50669731!
on: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode ! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 18:21:23' prior: 50669933!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert
	
	self typeCheckWithSelector: #methodWithReceiverWithNoTypes andAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasIncompleteInfoAlerts .
				
		alert := typeChecker issues anyOne .
		self assert: 'No type information on receiver collected' equals: alert problemDescription .	
		self assert: (alert method) equals: methodChecked .
		self assert: (alert receiver key) equals: 'false'.
		self assert: (alert selector key) equals: #not.
	]. 
	
	
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 18:21:30' prior: 50669968!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert
	
	self typeCheckWithSelector: #methodWithReceiverWithNoTypes andAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasIncompleteInfoAlerts .
				
		alert := typeChecker incompleteInfoAlerts anyOne .
		self assert: 'No type information on receiver collected' equals: alert problemDescription .	
		self assert: (alert method) equals: methodChecked .
		self assert: (alert receiver key) equals: 'false'.
		self assert: (alert selector key) equals: #not.
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 18:21:31'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 18:21:50' prior: 50669991!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert
	
	self typeCheckWithSelector: #methodWithReceiverWithNoTypes andAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasIncompleteInfoAlerts .
				
		alert := typeChecker incompleteInfoAlerts anyOne .
		self assert: 'No type information on receiver collected' equals: alert problemDescription .	
		self assert: (alert method) equals: methodChecked .
		self assert: (alert receiver key) equals: 'nilVariableWithNoType'.
		self assert: (alert selector key) equals: #not.
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 18:21:51'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 18:22:00' prior: 50670018!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert
	
	self typeCheckWithSelector: #methodWithReceiverWithNoTypes andAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasIncompleteInfoAlerts .
				
		alert := typeChecker incompleteInfoAlerts anyOne .
		self assert: 'No type information on receiver collected' equals: alert problemDescription .	
		self assert: (alert method) equals: methodChecked .
		self assert: (alert receiver key) equals: 'nilVariableWithNoType'.
		self assert: (alert selector key) equals: #size.
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 18:22:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 1/8/2024 18:22:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 1/8/2024 18:22:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 1/8/2024 18:22:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 1/8/2024 18:22:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/8/2024 18:22:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/8/2024 18:22:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 18:22:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 1/8/2024 18:22:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 1/8/2024 18:22:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/8/2024 18:22:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 1/8/2024 18:22:04'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 1/8/2024 18:22:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 1/8/2024 18:22:04'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 1/8/2024 18:22:52' prior: 50664134!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado"
	"Ademas, al momento de esta version de typeChecker, no hay LiveTyping sobre bloques, por eso se genera la alerta"
	"Una vez implementado, habra que agregar tests adicionales para chequeo de tipos dentro de bloques usando la informacion de generics"
		
	
	self performMethodWithSelector: #methodWithCollectionWithNoTypeError typeCheckAndAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasIncompleteInfoAlerts .
				
		alert := typeChecker incompleteInfoAlerts anyOne .
		self assert: 'No type information on receiver collected' equals: alert problemDescription .	
		self assert: (alert method) equals: methodChecked .
		self assert: (alert receiver key) equals: 'nilVariableWithNoType'.
		self assert: (alert selector key) equals: #size.
	]. 
	
! !

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 1/8/2024 18:22:55'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 1/8/2024 18:23:03' prior: 50670128!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado"
	"Ademas, al momento de esta version de typeChecker, no hay LiveTyping sobre bloques, por eso se genera la alerta"
	"Una vez implementado, habra que agregar tests adicionales para chequeo de tipos dentro de bloques usando la informacion de generics"
		
	
	self performMethodWithSelector: #methodWithCollectionWithNoTypeError typeCheckAndAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasIncompleteInfoAlerts .
				
		alert := typeChecker incompleteInfoAlerts anyOne .
		self assert: 'No type information on receiver collected' equals: alert problemDescription .	
		self assert: (alert method) equals: methodChecked .
		self assert: (alert receiver key) equals: 'item'.
		self assert: (alert selector key) equals: #size.
	]. 
	
! !

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 1/8/2024 18:23:04'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 1/8/2024 18:23:14' prior: 50670169!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado"
	"Ademas, al momento de esta version de typeChecker, no hay LiveTyping sobre bloques, por eso se genera la alerta"
	"Una vez implementado, habra que agregar tests adicionales para chequeo de tipos dentro de bloques usando la informacion de generics"
		
	
	self performMethodWithSelector: #methodWithCollectionWithNoTypeError typeCheckAndAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasIncompleteInfoAlerts .
				
		alert := typeChecker incompleteInfoAlerts anyOne .
		self assert: 'No type information on receiver collected' equals: alert problemDescription .	
		self assert: (alert method) equals: methodChecked .
		self assert: (alert receiver key) equals: 'item'.
		self assert: (alert selector key) equals: #factorial.
	]. 
	
! !

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 1/8/2024 18:23:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 1/8/2024 18:23:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 1/8/2024 18:23:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 1/8/2024 18:23:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 1/8/2024 18:23:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/8/2024 18:23:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/8/2024 18:23:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 18:23:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 1/8/2024 18:23:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 1/8/2024 18:23:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/8/2024 18:23:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 1/8/2024 18:23:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 1/8/2024 18:23:16'!
PASSED!

self hasErrors!

self hasWarnings!

self hasIncompleteInfoAlerts !

self errors size!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 18:25:03' prior: 50664164!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	self performMethodWithSelector: #methodWithVariableWithManyTypes typeCheckAndAssert: [:typeChecker :methodChecked | | firstError | 
		self assert: 2 equals: typeChecker issues size.
		self assert: 2 equals: typeChecker errors size.
		firstError := typeChecker errors first .
		self assert: (firstError method) equals: methodChecked .
		self assert: (firstError receiver key) equals: '10'.
		self assert: (firstError selector key) equals: #factorial.
	]. 
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 18:25:08' prior: 50670302!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	self performMethodWithSelector: #methodWithVariableWithManyTypes typeCheckAndAssert: [:typeChecker :methodChecked | | error | 
		self assert: 2 equals: typeChecker issues size.
		self assert: 2 equals: typeChecker errors size.
		error := typeChecker errors first .
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: '10'.
		self assert: (error selector key) equals: #factorial.
	]. 
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 18:25:32' prior: 50670323!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	self performMethodWithSelector: #methodWithVariableWithManyTypes typeCheckAndAssert: [:typeChecker :methodChecked | | error | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasErrors.
		error := typeChecker errors anyOne.
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: '10'.
		self assert: (error selector key) equals: #factorial.
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 1/8/2024 18:25:33'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 1/8/2024 18:25:41' prior: 50670343!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	self performMethodWithSelector: #methodWithVariableWithManyTypes typeCheckAndAssert: [:typeChecker :methodChecked | | error | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasErrors.
		error := typeChecker errors anyOne.
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'v1'.
		self assert: (error selector key) equals: #factorial.
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 1/8/2024 18:25:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 1/8/2024 18:25:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 1/8/2024 18:25:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 1/8/2024 18:25:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 1/8/2024 18:25:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 1/8/2024 18:25:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 1/8/2024 18:25:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 1/8/2024 18:25:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 1/8/2024 18:25:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 1/8/2024 18:25:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 1/8/2024 18:25:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 1/8/2024 18:25:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 1/8/2024 18:25:42'!
PASSED!

----QUIT----(8 January 2024 18:31:29) CuisUniversity-5981.image priorSource: 10804931!