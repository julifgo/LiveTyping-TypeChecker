

----STARTUP---- (30 May 2024 19:00:14) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


----End fileIn of C:\Users\juli_\Tesis\TESIS-LAST\windows64\LiveTypingGenerics.pck.st----!

----End fileIn of C:\Users\juli_\Tesis\TESIS-LAST\windows64\LiveTypingTypeChecker.pck.st----!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #FlowGraphCreationTest #test01onVarToVarAssigmentAssignorFlowsToAssignee stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test02ThereIsAlwaysANodeForReturnValue stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test03onAssigmentToAssigmentAllVarsAreLinked stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test04onVarReturnItFlowsToReturnNode stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test05CanTrackAMethodThroughMessageSends stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test06TrackedMethodIsLinkedToVarsOnAssigment stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test07CanTrackMultipleMethodThroughMessageSends stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test08TrackedMethodsAreLinkedToVarsOnAssigment stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test09InstVarsAreAlwaysAddedToGraph stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test10WhenVarIsConnectedToReturnValueItsNeighborsAreAlsoConnected stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test01CanAddAGenericType stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test02GenericsDoesNotRepeat stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test03GenericsCannotBeAlteredFromOuterScope stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test04CanSaveASelectorForAGeneric stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test05TracedMethodsCanBeRecovered stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test06TracedMethodsCantBeModifiedExternally stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test07ATracedMethodCanBeDeleted stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test08AGenericCanBeDeleted stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test09CanSaveAGetterSelectorForAGeneric stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test10GetterSelectorsCantBeModifiedExternally stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test11CanStoreAndRetrieveTracedMethodRefs stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test12CanStoreAndRetrieveMultipleTracedMethodRefs stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test13AnalysisCanBeInitializedRecursively stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test14RecursiveAnalysisHasRecursiveTracedMethods stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test15GraphsAreDeletedWhenAllAnalysisFinish stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test16CanStoreGenericTypeConstructors stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test17SaveASelectorForAGenericWithMultipleParams stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test18AGetterMethodCanBeDeleted stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #InferenceTest #test01GenericClassesAreReplacedByGenericTypeInstances stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test02GenericClassesAreMergedWithTheirGenericTypes stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test03LiteralCollectionOneLiteralElement stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test04LiteralCollectionLiteralElementsOfDifferentType stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test05LiteralCollectionElementsFromVariable stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test06LiteralCollectionElementsFromMethodCall stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test07LiteralCollectionElementsFromMethodCallWithArgumentsTypesFromContext stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test08LiteralCollectionElementsFromRecursiveMethod stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test09LiteralCollectionFlowingInMultipleVariables stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test10LiteralCollectionFlowingInMultipleVariablesArgumentInMethod stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test11LiteralCollectionFlowingInMultipleVariablesEachReceivingMessages stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test12LiteralCollectionFlowingInMultipleVariablesEachReceivingMessagesBeforeAndAfterAssigment stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test13LiteralCollectionFlowingInMultipleVariablesArgumentInMultipleMethod stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test14LiteralCollectionFlowingInMultipleVariablesMultipleArgumentsInMethod stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test15LiteralCollectionFlowingToNonSelfMethod stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test16LiteralCollectionFlowingToSuperMethod stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test17GenericTypeReturningParameterFromGetter stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test18MethodReturningGenericType stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test19InstanceVariableUsedOnlyWithinCurrentClass stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test20InstanceVariableExposedByGetterAssignToVariable stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test21InstanceVariableExposedByMultipleGettersAssignToVariable stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test22InstanceVariableMessageSendsToGetters stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test23InstanceVariableGettersUsedAsArguments stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test24InstanceVariableFlowingToOtherVariables stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test25CollectionContainingAnotherCollection stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test26CollectionContainingMultipleCollections stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test27CollectionAssignedFromMethodCallAndNotUsedAfter stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test28ReturnResultOfMethodCall stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test29MethodCallOnMultipleClassesWithSameProtocol stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test30MethodCallInsideGenericClasses stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test31CascadeMessageSends stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test32ArgumentCollectsInfoFromCalls stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test33ArgumentCollectsInfoFromCallsAndCurrentMethod stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test34GenericTypeConstructorFromArguments stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test35GenericTypeConstructorFromArgumentParameters stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test36TraceReturnValueWhenMethodReturnsArgument stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test37AddingFromOtherCollectionParameters stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test38CollectionFromLiteralNode stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test39CollectionWithMultipleParameters stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test40GetterForGenericWithMultipleParameters stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test41ArgumentCollectsInfoFromCallsWithMultipleParameters stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test42ArgumentCollectsInfoFromCallsAndCurrentMethodWithMultipleParameters stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test43ReturnTypeOfSetterMethodIsLastArgument stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test44CollectionIsDetectedWhenReturnedFromMethodAndAssignedToVariable stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test45ArgumentCollectsInfoCurrentMethodWithNoCallers stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test001SameType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test002DifferentType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test003SameHierarchy stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test004CommonSupertypeIsObject stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test005SameGeneric stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test006SameGenericDifferentOrder stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test007GenericsHandleSystemTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test008NestedGenerics stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test009GenericSupertypeWithSameGenerics stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test010GenericSupertypeWithCommonGenerics stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test011FixedAgainstGenericType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test012FixedAgainstGenericTypeInList stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test013GenericAgainstFixedTypeInList stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test014NestedGenerics stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test015NestedGenericsWithDifferentDepth stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test016EmptyTypeAgainstSelf stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test017EmptyTypeAgainstFixedType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test018EmptyTypeAgainstGenericType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test019UnionTypeCollectsTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test020UnionTypeAgainstSelf stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test021UnionTypeAgainstInnerElement stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test022ConvertionAccordingToReceiver stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test023ConvertionToArray stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test024EnumeratingClassTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test025EnumeratingLiveTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test026EnumeratingLiveAndClassTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test001EmptyRawTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test002AllClasses stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test003AnEmptyCollectionsContentType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test004ClassesAndCollectionsContentType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test005ACollectionsContentTypeWithTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test006SeveralCollectionsContentTypesWithTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test007CreateFixedType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test008CreateEmptyType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test009CreateGenericType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test010CreateGenericNestedType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test011CreateGenericNonEmptyType stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test012CreateGenericMultipleNestedType stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test001TooltipForEmptyCollection stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test002TooltipForSingleItemCollection stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test003TooltipForTwoItemsWhenSupertypeIsObject stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test004TooltipForTwoItemsWithCommonSupertype stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test005TooltipForVariableWithCollectionAndSomeOtherType stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test006TooltipForMergedCollections stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test007TooltipForSameCollectionsWithSameTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test008TooltipForSameCollectionsWithCommonSuperTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test009TooltipForSameCollectionsWithNoSuperTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test010TooltipForCommonSuperCollectionsWithCommonSuperTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test011TooltipForNestedCollections stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test012TooltipForCommonSuperCollectionsWithNoSuperTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test013TooltipForCommonSuperCollectionsRepeatedWithNoSuperTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test014TooltipForCommonSuperCollectionsWithEmptyCollections stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test015TooltipForCommonSuperCollectionsWithAnEmptyCollection stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test016TooltipForCommonSuperCollectionsAndNoCollection stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test017TooltipForCommonSuperTypeAndNoCommonType stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test018TooltipForCommonSuperCollectionsAndNoCollection stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test019TooltipForNestedCollectionsOneOfThemEmpty stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test020TooltipForNestedCollectionsBothSameTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test021TooltipForNestedCollectionsEachNoCommonInnerType stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test022TooltipForNestedCommonSuperCollectionsNoCommonInnerType stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test023TooltipForNestedNoCommonSupertype stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test024TooltipForNestedRepeatedTypeDifferentInners stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test025TooltipForNestedCommonTypesAndIntruder stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test026TooltipForNestedCommontTypesWithTwoLevelIntruder stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test027TooltipForAwfullyComplexInnerCollections stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test028TooltipOnlyOneType stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test029TooltipCommonSuperTypeSingleClasses stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test030TooltipNoTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test031TooltipNoCommonSuperTypeSingleClasses stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test032TooltipForCollectionWithTwoParameters stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeFlowGraphTest #test01IsCreatedEmpty stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeFlowGraphTest #test02AddingANodeIncreasesTheirCount stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeFlowGraphTest #test03AddingAnEdgeIncreasesTheirCount stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeFlowGraphTest #test04CannotLinkInexistantNodes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeFlowGraphTest #test05CanAccessNodesButCantDirectlyAddToResult stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeFlowGraphTest #test06CheckingConnectionOnAssociatedUndirectedGraph stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test001Empty stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test002Fixed stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test003GenericSingleValue stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test004MultipleFixed stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test005GenericMultipleValues stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test006MultipleFixedWithNoCommonSupertype stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test007MultipleGenerics stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test008GenericEmptyValue stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test009MultipleGenericsEmptyValue stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test010EmptyAndFixed stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

----QUIT----(30 May 2024 19:07:20) CuisUniversity-6169.image priorSource: 6245038!

----STARTUP---- (31 May 2024 09:29:27) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 5/31/2024 09:35:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 5/31/2024 09:35:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 5/31/2024 09:35:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 5/31/2024 09:35:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 5/31/2024 09:35:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 5/31/2024 09:35:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 5/31/2024 09:35:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 5/31/2024 09:35:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 5/31/2024 09:35:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 5/31/2024 09:35:29'!
PASSED!

!methodRemoval: IsTypeMessageContextApplier #JFGO2liveTypesFor:in:addingIncompleteTypeInfoTo: stamp: 'JFGO 5/31/2024 09:58:27'!
JFGO2liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	(self shouldApplyTo: aParseNode) ifTrue: [ | implementors |
		implementors := Smalltalk allImplementorsOf: messageSelector .
		implementors := implementors select: [:aMethodReference | aMethodReference compiledMethod isReturnSpecialTrue ]. 
		implementors := implementors collect: [:aMethodReference | aMethodReference actualClass].
		^RawToLiveTypesAdapter new adapt: implementors .
	]
	ifFalse:[^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.].!

!methodRemoval: IsTypeMessageContextApplier #JFGOliveTypesFor:in:addingIncompleteTypeInfoTo: stamp: 'JFGO 5/31/2024 09:58:30'!
JFGOliveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	(self shouldApplyTo: aParseNode) ifTrue: [ | originalTypes |
		originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		^self filterLiveTypesFrom: originalTypes .
	]
	ifFalse:[^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.].!

!methodRemoval: IsTypeMessageContextApplier #filterLiveTypesFrom: stamp: 'JFGO 5/31/2024 09:58:37'!
filterLiveTypesFrom: aTypeList
	| filteredLiveTypes |
	filteredLiveTypes := OrderedCollection new.
	aTypeList liveTypesDo: [ :aLiveType | 
		(aLiveType liveClass lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  (self shouldAddTypeFor: method) ifTrue: [filteredLiveTypes add: aLiveType]].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .!

!methodRemoval: IsTypeMessageContextApplier #shouldAddTypeFor: stamp: 'JFGO 5/31/2024 09:58:45'!
shouldAddTypeFor: aCompiledMethod
	| methodReturnFalseAndRejecting methodReturnTrueAndCasting |
	methodReturnFalseAndRejecting := typeShouldFilter and: [ aCompiledMethod isReturnSpecialFalse ].
	methodReturnTrueAndCasting := typeShouldFilter not and: [ aCompiledMethod isReturnSpecialTrue ].
	
	^methodReturnFalseAndRejecting or: [methodReturnTrueAndCasting ].!
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 09:59:17'!
is: aType subclassOfAny: implementors
	^implementors anySatisfy:[:anImplementorType | anImplementorType withAllSubclasses anySatisfy: [:aSubclass | aSubclass = aType ]. ].
		
	! !
!IsTypeMessageContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 5/31/2024 09:59:17' prior: 50539147 overrides: 50538967!
liveTypesCastingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| implementors subclassesTypes originalTypes |
	
	implementors := self implementorsReturningTrue.
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	subclassesTypes := originalTypes select: [:aType | self is: aType subclassOfAny: implementors.].
	subclassesTypes isEmpty ifTrue:[
		^RawToLiveTypesAdapter new adapt: implementors .
	] ifFalse:[
		^RawToLiveTypesAdapter new adapt: subclassesTypes .
	].
		
	! !

!methodRemoval: IsTypeMessageContextApplier #isType:subclassOfAny: stamp: 'JFGO 5/31/2024 09:59:17'!
isType: aType subclassOfAny: implementors
	^implementors anySatisfy:[:anImplementorType | anImplementorType withAllSubclasses anySatisfy: [:aSubclass | aSubclass = aType ]. ].
		
	!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/31/2024 10:00:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/31/2024 10:00:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:01:19' prior: 50539170 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	"originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo."
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	originalTypes liveTypesDo: [ :aLiveType | 
		(aLiveType liveClass lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aLiveType]].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:02:14' prior: 50542124 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	"originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo."
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	originalTypes do: [ :aType | 
		(aType liveClass lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:02:19' prior: 50542151 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	"originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo."
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/31/2024 10:02:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/31/2024 10:02:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/31/2024 10:02:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:02:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:02:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:02:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:02:54' prior: 50542177 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

----End fileIn of C:\Users\juli_\Tesis\TESIS-LAST\windows64\Packages\TerseGuide.pck.st----!
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:04:14' prior: 50542481 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ].
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:a :b].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:07:39' prior: 50545423 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ].
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | (aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [result add: aType]].].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:07:49' prior: 50545447 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	"originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ]."
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | (aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [result add: aType]].].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:07:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:07:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:07:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:07:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:07:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:07:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:07:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:07:57'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 5/31/2024 10:07:57'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 5/31/2024 10:07:57'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:08:02'!
ERROR!
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:09:00' prior: 50545476 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	"originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ]."
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | true].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:09:44' prior: 50545716 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	"originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ]."
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | (aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:10:21' prior: 50545741 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	"originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ]."
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | (aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [result add: aType]].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:11:04'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:11:51'!
ERROR!
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:13:07' prior: 50545770 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	"originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ]."
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | (aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [result add: aType]. result.].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:13:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/31/2024 10:13:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/31/2024 10:13:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 5/31/2024 10:13:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 5/31/2024 10:13:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 5/31/2024 10:13:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 5/31/2024 10:13:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 5/31/2024 10:13:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 5/31/2024 10:13:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 5/31/2024 10:13:24'!
PASSED!
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:13:39' prior: 50545807 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | (aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [result add: aType]. result.].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

----QUIT----(31 May 2024 10:14:58) CuisUniversity-6169.image priorSource: 6713515!

----STARTUP---- (25 June 2024 18:38:13) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/25/2024 19:14:43'!
m1

| v1 |
v1:= 'hola'.
! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/25/2024 19:15:36' prior: 50546425!
m1

| v1 |
v1:= 'hola'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1 + 1.].
! !

TypesWithContextAppliersTestMethods new perform: #m1.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/25/2024 19:18:23'!
m2

| v1 |
v1:= 1.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1 + 1.].
! !

TypesWithContextAppliersTestMethods new perform: #m2.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/25/2024 19:19:40'!
m3

| v1 |
v1:= '1'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = String ifTrue:[ v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m3.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/25/2024 19:20:09' prior: 50546448!
m3

| v1 |
v1:= 1.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = String ifTrue:[ v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m3.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/25/2024 19:25:40'!
m4

| v1 |
v1:= 'hola'.
v1:= 1.
v1 < 5 ifTrue:[ v1 + 1 .].
v1 class = String ifTrue:[ v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m4.!

'hola' < 'bb'!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/25/2024 19:29:13' prior: 50546466!
m4

| v1 |
v1:= 'hola'.
v1:= 1.
v1 < 5 ifTrue:[ v1 + 1 .].
v1 = 5 ifTrue:[ v1 + 1 .].
v1 class = String ifTrue:[ v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m4.!

----SNAPSHOT----(25 June 2024 19:32:51) CuisUniversity-6169.image priorSource: 6863629!
!TypesWithContextAppliersTestMethods methodsFor: 'disjunction contexts' stamp: 'JFGO 6/26/2024 18:28:46'!
disjunctionCastDifferentTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1:= 1.

(v1 class = String or: [v1 class = OrderedCollection]) ifTrue:[ v1 isEmpty.]! !
!TypeContextAppliers methodsFor: 'updating / restoration' stamp: 'JFGO 6/26/2024 18:33:02' prior: 50538665!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	self halt.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ 
		newContext := self buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aMessageNode isIfNil ifTrue: [ 
		newContext := self buildContextForIfNilMessagesWith: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !
!TypesWithContextAppliersTest methodsFor: 'equals nil type context' stamp: 'JFGO 6/26/2024 18:37:38'!
test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining
	
	self withMessageName: #ifNotNilMessageRejects
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: Array.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'disjunction context' stamp: 'JFGO 6/26/2024 18:38:19' prior: 50546519!
test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining
	
	self withMessageName: #disjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].
	! !

self receiverOrCascadeReceiver!

self receiverOrCascadeReceiver isMessageNode!
!TypeContextAppliers methodsFor: 'updating / restoration' stamp: 'JFGO 6/26/2024 18:46:53' prior: 50546497!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ 
		newContext := self buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aMessageNode isIfNil ifTrue: [ 
		newContext := self buildContextForIfNilMessagesWith: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 18:53:03' prior: 50538846!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	self halt.
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 18:53:34' prior: 50546571!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	self halt.
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 18:58:13' prior: 50546623!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	self halt.
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 19:02:08' prior: 50546675!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	self halt.
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments first withBlockRejecting: false.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

condition receiver!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 19:02:53' prior: 50546728!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments first withBlockRejecting: false.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

condition arguments first!

condition arguments first!

condition arguments!

condition receiver !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 19:04:43' prior: 50546789!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments second withBlockRejecting: false.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

condition arguments second!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/26/2024 19:06:01'!
ERROR!

condition arguments second!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 19:08:31' prior: 50546852!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments second firstArgument withBlockRejecting: false.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/26/2024 19:08:47'!
ERROR!

condition arguments second!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 19:09:56' prior: 50546919!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: false.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

condition arguments second statements first!

----SNAPSHOT----(26 June 2024 19:11:11) CuisUniversity-6169.image priorSource: 6874683!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/27/2024 18:23:00' prior: 50546985!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: false.
		"DisjunctionContextApplier"
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/27/2024 18:29:02' prior: 50547050!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: false.
		"DisjunctionContextApplier "
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!classDefinition: #DisjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/27/2024 18:36:23'!
TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/27/2024 18:33:47' prior: 50547112!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: false.
		DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/27/2024 18:36:56'!
ERROR!
!DisjunctionContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 6/27/2024 18:37:13'!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier ! !
!DisjunctionContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 6/27/2024 18:37:54' prior: 50547254!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier 
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier ! !

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/27/2024 18:37:55'!
ERROR!

!classDefinition: #DisjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/27/2024 18:38:14'!
TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: 'leftContextApplier_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #DisjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/27/2024 18:38:14'!
TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: 'leftContextApplier_CHANGE_ME rightContextApplier_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #DisjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/27/2024 18:38:15'!
TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: 'leftContextApplier_CHANGE_ME rightContextApplier_CHANGE_ME generalContextApplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!DisjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 6/27/2024 18:38:15'!
initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier 
	self shouldBeImplemented.
	leftContextApplier_CHANGE_ME := leftContextApplier.
	rightContextApplier_CHANGE_ME := rightContextApplier.
	generalContextApplier := aGeneralContextApplier.! !
!DisjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 6/27/2024 18:39:48' prior: 50547321!
initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: previousContextApplier
	
	! !

TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #DisjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/27/2024 18:46:45'!
TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!DisjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 6/27/2024 19:08:32' prior: 50547335!
initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/27/2024 19:17:48' prior: 50547184!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: false.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/27/2024 19:17:50'!
ERROR!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:18:19' overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:19:15' prior: 50547443 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := leftContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := rightContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:20:28' prior: 50547450 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := leftContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := rightContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	self halt.
	^OrderedCollection new.! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:35:31'!
rawTypesOver: aContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	| liveTypes rawTypes |
	liveTypes := aContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	liveTypes liveTypesDo: [:aLiveType | rawTypes add: aLiveType liveClass].
	
	^rawTypes.! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:35:52' prior: 50547482!
rawTypesOver: aContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	| liveTypes rawTypes |
	rawTypes := OrderedCollection new.
	liveTypes := aContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	liveTypes liveTypesDo: [:aLiveType | rawTypes add: aLiveType liveClass].
	
	^rawTypes.! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:37:24' prior: 50547466 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	^OrderedCollection new.! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:38:31' prior: 50547513 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	^leftTypes addAll: rightTypes .! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:49:46' prior: 50547531 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	^RawToLiveTypesAdapter new adapt: (leftTypes addAll: rightTypes ).! !

leftTypes addAll: rightTypes!

leftTypes addAllLast: rightTypes!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:51:57' prior: 50547549 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	leftTypes addAll: rightTypes.
	^RawToLiveTypesAdapter new adapt: leftTypes .! !

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/27/2024 19:52:09'!
ERROR!
!DisjunctionContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 6/27/2024 19:53:24' overrides: 50538660!
previous
	^previousContext.! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/27/2024 19:53:28'!
PASSED!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:53:41' prior: 50547570 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	leftTypes addAll: rightTypes.
	^RawToLiveTypesAdapter new adapt: leftTypes .! !

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/27/2024 19:53:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'disjunction contexts' stamp: 'JFGO 6/27/2024 19:54:46'!
disjunctionCastSameTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1:= 1.

(v1 class = String or: [v1 isString]) ifTrue:[ v1 isEmpty.]
! !
!TypesWithContextAppliersTest methodsFor: 'disjunction context' stamp: 'JFGO 6/27/2024 20:01:21'!
test43DisjunctionOnSameTypesCollectsDoesntRepeatThem
	
	self withMessageName: #disjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'disjunction context' stamp: 'JFGO 6/27/2024 20:01:34' prior: 50548125!
test43DisjunctionOnSameTypesCollectsDoesntRepeatThem
	
	self withMessageName: #disjunctionCastSameTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].
	! !

!testRun: #TypesWithContextAppliersTest #test43DisjunctionOnSameTypesCollectsDoesntRepeatThem stamp: 'JFGO 6/27/2024 20:06:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test43DisjunctionOnSameTypesCollectsDoesntRepeatThem stamp: 'JFGO 6/27/2024 20:06:49'!
PASSED!

l1 := OrderedCollection new.!

l1 add: String.!

l1 add: String.!

l1!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 20:08:01' prior: 50547811 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	leftTypes addAll: rightTypes.
	^RawToLiveTypesAdapter new adapt: leftTypes .! !

l1 addAll:l1!

l1 addAll:l1!

l1 addAll:l1!

l1 := OrderedCollection new.!

l1 add: String.!

l1 addAll:l1!
!TypesWithContextAppliersTest methodsFor: 'disjunction context' stamp: 'JFGO 6/27/2024 20:11:14' prior: 50548140!
test43DisjunctionOnSameTypesCollectsDoesntRepeatThem
	"TODO. Borrar este test, pasa de una por el rawAdapter"
	self withMessageName: #disjunctionCastSameTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].
	! !

----QUIT----(27 June 2024 20:11:18) CuisUniversity-6169.image priorSource: 6892655!

----STARTUP---- (29 June 2024 18:41:59) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!TypesWithContextAppliersTest methodsFor: 'disjunction context' stamp: 'JFGO 6/29/2024 19:02:52'!
test44NegatedDisjunctionRejectsCastedTypes
	"TODO. Borrar este test, pasa de una por el rawAdapter"
	self withMessageName: #disjunctionNegated
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'disjunction context' stamp: 'JFGO 6/29/2024 19:03:08' prior: 50548207!
test44NegatedDisjunctionRejectsCastedTypes
	
	self withMessageName: #disjunctionNegated
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	! !
!TypesWithContextAppliersTestMethods methodsFor: 'disjunction contexts' stamp: 'JFGO 6/29/2024 19:05:26'!
disjunctionNegated

	| v1 |
	v1:= OrderedCollection new.
	v1:= 'some string'.
	v1:= 1.

	(v1 class = OrderedCollection or: [v1 isString]) not ifTrue:[ v1 factorial.]
! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/29/2024 19:06:58' prior: 50547374!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: true.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: true.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/29/2024 19:30:07'!
m5

| v1 |
v1:= OrderedCollection new.
v1:= 'hola'.
v1:= 1.


(v1 class = OrderedCollection and: [v1 isString] ) not ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m5.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/29/2024 19:31:02' prior: 50548307!
m5

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.



(v1 class = OrderedCollection and: [v1 isString] ) not ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m5. !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/29/2024 19:36:12' prior: 50548318!
m5

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


"tautologias"
(v1 class = OrderedCollection and: [v1 isString] ) not ifTrue:[ ^'entro'. ].
^'no entro'.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/29/2024 19:36:39' prior: 50548242!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/29/2024 19:39:00'!
PASSED!

----SNAPSHOT----(29 June 2024 19:44:46) CuisUniversity-6169.image priorSource: 6929582!
!DisjunctionContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 6/30/2024 12:39:00'!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier ! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 6/30/2024 12:39:00' prior: 50548338!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: false.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!methodRemoval: DisjunctionContextApplier class #withLeftApplier:withRightContextApplier:withPreviousContext: stamp: 'JFGO 6/30/2024 12:39:00'!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier 
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/30/2024 12:39:18' prior: 50548424!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!DisjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 6/30/2024 12:40:10'!
initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	! !
!DisjunctionContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 6/30/2024 12:40:10' prior: 50548411!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting ! !

!methodRemoval: DisjunctionContextApplier #initializeWithLeftApplier:withRightContextApplier:withPreviousContext: stamp: 'JFGO 6/30/2024 12:40:10'!
initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	!

!classDefinition: #DisjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/30/2024 12:41:00'!
TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier shouldReject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!DisjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 6/30/2024 12:40:57' prior: 50548571!
initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	shouldReject:= isRejecting .
	! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 12:41:58' prior: 50548164 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	shouldReject ifFalse:[
		leftTypes addAll: rightTypes.
	] ifTrue:[
		leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: leftTypes .! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 12:44:51' prior: 50548639 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	shouldReject ifFalse:[
		leftTypes addAll: rightTypes.
	] ifTrue:[
		leftTypes := leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: leftTypes .! !

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 6/30/2024 12:45:54'!
PASSED!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 12:46:06' prior: 50548661 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	shouldReject ifFalse:[
		leftTypes addAll: rightTypes.
	] ifTrue:[
		leftTypes := leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: leftTypes .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test43DisjunctionOnSameTypesCollectsDoesntRepeatThem stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!methodRemoval: TypesWithContextAppliersTest #test43DisjunctionOnSameTypesCollectsDoesntRepeatThem stamp: 'JFGO 6/30/2024 12:46:26'!
test43DisjunctionOnSameTypesCollectsDoesntRepeatThem
	"TODO. Borrar este test, pasa de una por el rawAdapter"
	self withMessageName: #disjunctionCastSameTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].
	!

!methodRemoval: TypesWithContextAppliersTestMethods #disjunctionCastSameTypes stamp: 'JFGO 6/30/2024 12:46:33'!
disjunctionCastSameTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1:= 1.

(v1 class = String or: [v1 isString]) ifTrue:[ v1 isEmpty.]
!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 12:47:32' prior: 50548687 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	shouldReject ifFalse:[
		leftTypes := leftTypes union: rightTypes.
	] ifTrue:[
		leftTypes := leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: leftTypes .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 12:48:29' prior: 50549023 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	shouldReject ifFalse:[
		types := leftTypes union: rightTypes.
	] ifTrue:[
		types := leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: types .! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 12:59:28'!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.



(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m6.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:00:31' prior: 50549354!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 isCollection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m6.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:01:28' prior: 50549365!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 class = Collection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ].
! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:02:10' prior: 50549377!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 class = Collection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection  ) ifTrue:[ ^v1 isEmpty. ].
! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:02:16' prior: 50549387!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 class = Collection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m6.!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 13:03:04' prior: 50549332 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	shouldReject ifFalse:[
		types := leftTypes union: rightTypes.
	] ifTrue:[
		types := leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: types .! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 13:05:30' prior: 50549409 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	shouldReject ifFalse:[
		types := leftTypes union: rightTypes.
	] ifTrue:[
		types := leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: types .! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:06:38' prior: 50549397!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 class = Collection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 class = Collection] ) ifTrue:[ ^v1 isEmpty. ].! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:33:05'!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


v1 class = Collection  ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m7.!

TypesWithContextAppliersTestMethods new perform: #m7.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:33:41' prior: 50549466!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


v1 class isCollection  ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m7.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:33:55' prior: 50549478!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


v1 isCollection  ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m7.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:34:44' prior: 50549488!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


v1 class = Collection  ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m7.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:35:55' prior: 50549498!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


v1 isCollection  ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m7.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:36:40' prior: 50549508!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


(v1 isKindOf:Collection ) ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m7.!

TypesWithContextAppliersTestMethods new perform: #m7.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:37:21' prior: 50549518!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


(v1 isKindOf:Collection ) ifTrue:[ v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m7.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:37:39' prior: 50549530!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


(v1 isKindOf:Collection ) ifTrue:[ v1 isEmpty. ].! !

TypesWithContextAppliersTestMethods new perform: #m7.!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 6/30/2024 13:38:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/30/2024 13:38:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 6/30/2024 13:38:12'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:45:28' prior: 50549454!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 class = Collection  ifTrue:[ ^v1 isEmpty. ].
v1 isCollection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 class = Collection] ) ifTrue:[ ^v1 isEmpty. ].! !

TypesWithContextAppliersTestMethods new perform: #m6.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:47:57' prior: 50549837!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 class = Collection  ifTrue:[ ^v1 isEmpty. ].
v1 isCollection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 class = Collection] ) ifTrue:[ ^v1 isEmpty. ]. "No pasa cualquier coleccion. Si v1 es Array no entra en este if. Solo entra si efectivamente v1 es OC o su clase es Collection".! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:52:22' prior: 50549853!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 class = Collection  ifTrue:[ ^v1 isEmpty. ].
v1 isCollection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ]. "Aca si pasa cualquier coleccion. Si v1 es Array (o string como este ejemplo), entrara efectivamente en el if"
(v1 class = OrderedCollection or: [v1 class = Collection] ) ifTrue:[ ^v1 isEmpty. ]. "No pasa cualquier coleccion. Si v1 es Array no entra en este if. Solo entra si efectivamente v1 es OC o su clase es Collection".! !
!TypesWithContextAppliersTest methodsFor: 'disjunction / conjunction context' stamp: 'JFGO 6/30/2024 13:59:42'!
test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining
	
	self withMessageName: #conjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].
	! !
!TypesWithContextAppliersTestMethods methodsFor: 'disjunction / conjunction contexts' stamp: 'JFGO 6/30/2024 14:06:13'!
conjunctionCastDifferentTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1:= 1.

(v1 isCollection and: [v1 class = String]) ifTrue:[ v1 isEmpty.]! !
!TypesWithContextAppliersTest methodsFor: 'disjunction / conjunction context' stamp: 'JFGO 6/30/2024 14:09:59' prior: 50549892!
test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining
	
	self withMessageName: #conjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].
	! !

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/30/2024 14:10:00'!
FAILURE!

!classDefinition: #ConjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/30/2024 14:16:33'!
Object subclass: #ConjunctionContextApplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/30/2024 14:16:23' prior: 50548504!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

TypeContextAppliers subclass: #conjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier shouldReject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

TypeContextAppliers subclass: #ConjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier shouldReject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #ConjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/30/2024 14:20:27'!
TypeContextAppliers subclass: #ConjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier shouldReject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!ConjunctionContextApplier class methodsFor: 'no messages' stamp: 'JFGO 6/30/2024 14:20:45'!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting ! !
!ConjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 6/30/2024 14:21:34'!
initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	shouldReject:= isRejecting .
	! !
!ConjunctionContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 6/30/2024 14:21:52' overrides: 50538660!
previous
	^previousContext.! !
!ConjunctionContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 6/30/2024 14:22:24'!
rawTypesOver: aContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	| liveTypes rawTypes |
	rawTypes := OrderedCollection new.
	liveTypes := aContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	liveTypes liveTypesDo: [:aLiveType | rawTypes add: aLiveType liveClass].
	
	^rawTypes.! !
!ConjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 14:22:49' overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	shouldReject ifFalse:[
		types := leftTypes union: rightTypes.
	] ifTrue:[
		types := leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: types .! !
!ConjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 14:23:14' prior: 50550103 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	types := leftTypes intersection: rightTypes.
	
	^RawToLiveTypesAdapter new adapt: types .! !

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/30/2024 14:23:26'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/30/2024 14:23:58' prior: 50549944!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

condition arguments!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/30/2024 14:25:05' prior: 50550149!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

condition arguments first statements first!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/30/2024 14:25:19' prior: 50550233!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/30/2024 14:25:25'!
PASSED!

----SNAPSHOT----(30 June 2024 14:25:37) CuisUniversity-6169.image priorSource: 6936222!

----SNAPSHOT----(30 June 2024 14:35:29) CuisUniversity-6169.image priorSource: 7000122!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:15:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:15:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'disjunction / conjunction contexts' stamp: 'JFGO 7/2/2024 18:22:39'!
conjunctionNegated

	| v1 |
	v1:= OrderedCollection new.
	v1:= 'some string'.
	v1:= Array new.

	(v1 class = OrderedCollection and: [v1 isString]) not ifTrue:[ v1 isEmpty.]
! !
!TypesWithContextAppliersTest methodsFor: 'disjunction / conjunction context' stamp: 'JFGO 7/2/2024 18:24:11'!
test46NegatedConjunctionAllowsAllPreviousTypes
	
	self withMessageName: #conjunctionNegated
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: Array.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'disjunction / conjunction context' stamp: 'JFGO 7/2/2024 18:24:21' prior: 50550644!
test46NegatedConjunctionAllowsAllPreviousTypes
	
	self withMessageName: #conjunctionNegated
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: Array.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].
	! !

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:24:32'!
FAILURE!
!ConjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:31:47' prior: 50550125 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	
	shouldReject ifFalse:[
		types := leftTypes intersection: rightTypes.
	] ifTrue:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!
!ConjunctionContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 7/2/2024 18:36:16'!
forSelector: logicalSelector withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting ! !
!DisjunctionContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 7/2/2024 18:36:16'!
forSelector: logicalSelector withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting ! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 7/2/2024 18:36:16' prior: 50550318!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier forSelector: #Or withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier forSelector: #Or withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!methodRemoval: ConjunctionContextApplier class #withLeftApplier:withRightContextApplier:withPreviousContext:isRejecting: stamp: 'JFGO 7/2/2024 18:36:16'!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting !

!methodRemoval: DisjunctionContextApplier class #withLeftApplier:withRightContextApplier:withPreviousContext:isRejecting: stamp: 'JFGO 7/2/2024 18:36:16'!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:36:43' prior: 50551021!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier forSelector: #Or withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier forSelector: #And withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!ConjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 7/2/2024 18:37:15'!
forSelector: aLogicalSelector initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	shouldReject:= isRejecting .
	! !
!ConjunctionContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 7/2/2024 18:37:15' prior: 50550991!
forSelector: logicalSelector withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new forSelector: aLogicalSelector initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting ! !

!methodRemoval: ConjunctionContextApplier #initializeWithLeftApplier:withRightContextApplier:withPreviousContext:rejecting: stamp: 'JFGO 7/2/2024 18:37:15'!
initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	shouldReject:= isRejecting .
	!
!ConjunctionContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 7/2/2024 18:37:24' prior: 50551235!
forSelector: logicalSelector withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new forSelector: logicalSelector initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting ! !

!classDefinition: #ConjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 7/2/2024 18:37:43'!
TypeContextAppliers subclass: #ConjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier shouldReject selector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!ConjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 7/2/2024 18:37:40' prior: 50551219!
forSelector: aLogicalSelector initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	shouldReject:= isRejecting .
	selector:= aLogicalSelector .
	! !
!ConjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:41:17' prior: 50550676 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	
	(shouldReject not and:[selector = #and]) ifTrue:[
		types := leftTypes intersection: rightTypes.
	] ifFalse:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:41:19'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:41:19'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:41:38' prior: 50551135!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier forSelector: #Or withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier forSelector: #and withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:41:59' prior: 50551557!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier forSelector: #or: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier forSelector: #and: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:42:01'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:42:01'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:42:03'!
FAILURE!
!ConjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:44:56' prior: 50551312 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	
	(shouldReject not and:[selector = #and:]) or: (shouldReject and: [selector = #or:]) ifTrue:[
		types := leftTypes intersection: rightTypes.
	] ifFalse:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !
!ConjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:45:06' prior: 50551952 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	
	((shouldReject not and:[selector = #and:]) or: (shouldReject and: [selector = #or:])) ifTrue:[
		types := leftTypes intersection: rightTypes.
	] ifFalse:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!classRenamed: #ConjunctionContextApplier as: #LogicalContextApplier stamp: 'JFGO 7/2/2024 18:45:19'!
Smalltalk renameClassNamed: #ConjunctionContextApplier as: #LogicalContextApplier!
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 7/2/2024 18:45:19' prior: 50551641!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #or: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #and: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!classRemoval: #DisjunctionContextApplier stamp: 'JFGO 7/2/2024 18:45:32'!
TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier shouldReject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:47:36'!
contextFor: condition whenLogicalOperatorwithBlockRejecting: blockIsOnRejectingCondition
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #or: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #and: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:49:22' prior: 50552230!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	(condition isOr or: [condition isAnd]) ifTrue:[ 
		^self contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
		
	].
		
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:49:32' prior: 50552362!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	(condition isOr or: [condition isAnd]) ifTrue:[ 
		^self contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
	].
		
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:49:41'!
contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #or: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #and: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	! !

!methodRemoval: TypeContextAppliers #contextFor:whenLogicalOperatorwithBlockRejecting: stamp: 'JFGO 7/2/2024 18:49:41'!
contextFor: condition whenLogicalOperatorwithBlockRejecting: blockIsOnRejectingCondition
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #or: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #and: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:50:30' prior: 50552475!
contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| leftContextApplier |
	leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
	condition isOr ifTrue:[ | rightContextApplier |
		
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #or: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | rightContextApplier |
		
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #and: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:50:57' prior: 50552775!
contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| leftContextApplier |
	leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
	condition isOr ifTrue:[ | rightContextApplier |
		
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: condition selectorSymbol withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | rightContextApplier |
		
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: condition selectorSymbol withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:51:37' prior: 50553033!
contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| leftContextApplier rightContextApplier |
	leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
	condition isOr ifTrue:[ 
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.	
	].
	
	condition isAnd ifTrue:[ 
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
	].
	^LogicalContextApplier forSelector: condition selectorSymbol withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
	! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:52:17'!
shouldIntersect

	^ (shouldReject not and:[selector = #and:]) or: (shouldReject and: [selector = #or:])! !
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:52:17' prior: 50551977 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	
	(self shouldIntersect) ifTrue:[
		types := leftTypes intersection: rightTypes.
	] ifFalse:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:54:23'!
liveTypesWith: leftTypes and:rightTypes
		
	
	| types |
	(self shouldIntersect) ifTrue:[
		types := leftTypes intersection: rightTypes.
	] ifFalse:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:54:27' prior: 50553570!
liveTypesWith: leftTypes and:rightTypes
		
	| types |
	(self shouldIntersect) ifTrue:[
		types := leftTypes intersection: rightTypes.
	] ifFalse:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:54:50' prior: 50553549 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	
	^self liveTypesWith: leftTypes and: rightTypes .! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

----SNAPSHOT----(2 July 2024 18:56:03) CuisUniversity-6169.image priorSource: 7000211!

----QUIT----(2 July 2024 18:56:49) CuisUniversity-6169.image priorSource: 7109814!

----STARTUP---- (2 July 2024 19:01:01) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


!classDefinition: #ParseNodeTypesDisplay category: #LiveTyping stamp: 'JFGO 7/2/2024 19:13:14'!
Object subclass: #ParseNodeTypesDisplay
	instanceVariableNames: 'parseNodeToAnalize methodNodeOwner definingClass methodToAnalyze types incompleteTypeInfoReasons typeInfo labels lines selectedIndex icons typesIndexLimit actions contextBlockNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping'!
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/2/2024 19:13:11' prior: 50540293!
calculateTypesWithContext

	incompleteTypeInfoReasons := Set new.
	self halt.
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withNode: methodNodeOwner withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/2/2024 19:16:48' prior: 50546430!
m1

| v1 |
v1:= 'hola'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1 + 1.]. 

! !
!NotImplementedMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/2/2024 19:22:46'!
typesOfVariableNamed: aVariableName withNode: aMethodNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	^ (ContextAppliersMethodVisitor for: self with: aMethodNode on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons) types.! !
!NotImplementedMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/2/2024 19:22:57' prior: 50553877!
typesOfVariableNamed: aVariableName withNode: aMethodNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	self halt.
	^ (ContextAppliersMethodVisitor for: self with: aMethodNode on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons) types.! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/30/2024 18:54:11' prior: 50553855!
calculateTypesWithContext

	incompleteTypeInfoReasons := Set new.
		
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withNode: methodNodeOwner withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !

(ContextAppliersMethodVisitor for: self with: aMethodNode on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons)!
!NotImplementedMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/2/2024 19:27:15' prior: 50553890!
typesOfVariableNamed: aVariableName withNode: aMethodNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	^(ContextAppliersMethodVisitor for: self with: aMethodNode on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons) types.! !

!classDefinition: #TypesWithContextAppliersTestMethods category: #'LiveTypingTypeChecker-ContextAppliers-Tests' stamp: 'JFGO 7/2/2024 19:29:18'!
Object subclass: #TypesWithContextAppliersTestMethods
	instanceVariableNames: 'instance1 vInstance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers-Tests'!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/2/2024 19:29:17'!
m8

vInstance := OrderedCollection new.
vInstance := 'hola'.! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/2/2024 19:30:35'!
m9

self m8.
vInstance isString ifTrue:[vInstance isEmpty].! !

TypesWithContextAppliersTestMethods new perform: #m9.!

----SNAPSHOT----(2 July 2024 19:31:25) CuisUniversity-6169.image priorSource: 7109902!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/3/2024 18:52:23'!
m10

| v1 |
v1:= OrderedCollection new.
v1:= Array new.
v1:= 'hola'.



(v1 class = OrderedCollection xor: [v1 isString not] ) ifTrue:[ ^'entro'. ].
^'no entro'.! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/3/2024 18:52:27' prior: 50553963!
m10

| v1 |
v1:= OrderedCollection new.

v1:= 'hola'.
v1:= Array new.



(v1 class = OrderedCollection xor: [v1 isString not] ) ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m10!

TypesWithContextAppliersTestMethods new perform: #m10!

v1 class = OrderedCollection!

v1 isString!

v1 isString not!

v1 class = OrderedCollection xor: [v1 isString not]!
!MessageNode methodsFor: '*LiveTyping' stamp: 'JFGO 7/3/2024 19:11:33'!
isManyOr

	^self selectorSymbol = #or:or: or:[self selectorSymbol = #or:or:or:]or:[self selectorSymbol = #or:or:or:or:]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker-checking' stamp: 'JFGO 7/3/2024 19:12:39'!
isManyAnd

	^self selectorSymbol = #and:and: or:[self selectorSymbol = #and:and:and:]or:[self selectorSymbol = #and:and:and:and:]! !
!TypesWithContextAppliersTestMethods methodsFor: 'disjunction / conjunction contexts' stamp: 'JFGO 7/3/2024 19:22:16'!
manyDisjunctionCastDifferentTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1 := Array new.
v1 := Set new.
v1:= 1.

(v1 class = String or: [v1 class = OrderedCollection] or: [v1 class = Array] or: [v1 class = Set]) ifTrue:[ v1 isEmpty.]! !
!TypesWithContextAppliersTest methodsFor: 'disjunction / conjunction context' stamp: 'JFGO 7/3/2024 19:24:14'!
test47ManyDisjunctionCollectsEachOneAndRejectsRemaining
	
	self withMessageName: #manyDisjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 4.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
		self assert: types includes: Array.
		self assert: types includes: Set.
	].
	! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/3/2024 19:25:38' prior: 50552419!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	(condition isOr or: [condition isAnd]) ifTrue:[ 
		^self contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isManyOr ifTrue:[
	].	
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/3/2024 19:25:51'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/3/2024 19:25:51'!
FAILURE!
!TypesWithContextAppliersTestMethods methodsFor: 'disjunction / conjunction contexts' stamp: 'JFGO 7/3/2024 19:26:14' prior: 50554002!
manyDisjunctionCastDifferentTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1 := Array new.
v1 := Set new.
v1:= 1.
v1:= Date today.

(v1 class = String or: [v1 class = OrderedCollection] or: [v1 class = Array] or: [v1 class = Set]) ifTrue:[ v1 isEmpty.]! !

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/3/2024 19:26:18'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/3/2024 19:26:18'!
FAILURE!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/3/2024 19:28:57' prior: 50554031!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	(condition isOr or: [condition isAnd]) ifTrue:[ 
		^self contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isManyOr ifTrue:[
		self halt.
	].	
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

condition arguments!

condition!

self selectorSymbol !

TypeContextAppliers subclass: #ManyLogicalContextApplier
	instanceVariableNames: 'previousContext contextAppliers shouldReject selector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #ManyLogicalContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 7/3/2024 19:33:19'!
TypeContextAppliers subclass: #ManyLogicalContextApplier
	instanceVariableNames: 'previousContext contextAppliers shouldReject selector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!ManyLogicalContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 7/3/2024 19:35:17'!
forSelector: logicalSelector withAppliers: aCollectionOfContextAppliers withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new forSelector: logicalSelector initializeWithAppliers: aCollectionOfContextAppliers withPreviousContext: aGeneralContextApplier rejecting: isRejecting ! !

#or:or:or asString!

'or' in: (#or:or:or asString)!

(#or:or:or asString) includes: 'or'.!

'oror' includes: 'or'!

(#or:or:or asString) beginsWith: 'or'.!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/3/2024 19:45:45'!
contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| contextAppliers |
	contextAppliers := OrderedCollection new.
	condition arguments do: [|argument| 
		contextAppliers add: (self contextFor: argument withBlockRejecting: blockIsOnRejectingCondition).
	].
	
	
	
	
	^ManyLogicalContextApplier forSelector: #or:  withAppliers: contextAppliers withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
	! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/3/2024 19:46:04' prior: 50554215!
contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| contextAppliers |
	contextAppliers := OrderedCollection new.
	condition arguments do: [:argument | 
		contextAppliers add: (self contextFor: argument withBlockRejecting: blockIsOnRejectingCondition).
	].
	
	
	
	
	^ManyLogicalContextApplier forSelector: #or:  withAppliers: contextAppliers withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
	! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/3/2024 19:46:19' prior: 50554119!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	(condition isOr or: [condition isAnd]) ifTrue:[ 
		^self contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isManyOr ifTrue:[
		^self contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
	].	
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/3/2024 19:46:55' prior: 50554233!
contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| contextAppliers |
	contextAppliers := OrderedCollection new.
	self halt.
	condition arguments do: [:argument | 
		contextAppliers add: (self contextFor: argument statements first withBlockRejecting: blockIsOnRejectingCondition).
	].
	
	
	
	
	^ManyLogicalContextApplier forSelector: #or:  withAppliers: contextAppliers withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
	! !

argument statements first!

----SNAPSHOT----(3 July 2024 19:47:49) CuisUniversity-6169.image priorSource: 7113878!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/4/2024 16:28:21'!
ERROR!
!ManyLogicalContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 7/4/2024 16:29:13' prior: 50554197!
forSelector: logicalSelector withAppliers: aCollectionOfContextAppliers withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeForSelector: logicalSelector initializeWithAppliers: aCollectionOfContextAppliers withPreviousContext: aGeneralContextApplier rejecting: isRejecting ! !

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/4/2024 16:29:23'!
ERROR!

!classDefinition: #ManyLogicalContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 7/4/2024 16:29:44'!
TypeContextAppliers subclass: #ManyLogicalContextApplier
	instanceVariableNames: 'previousContext contextAppliers shouldReject selector logicalSelector_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #ManyLogicalContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 7/4/2024 16:29:44'!
TypeContextAppliers subclass: #ManyLogicalContextApplier
	instanceVariableNames: 'previousContext contextAppliers shouldReject selector logicalSelector_CHANGE_ME collectionOfContextAppliers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #ManyLogicalContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 7/4/2024 16:29:44'!
TypeContextAppliers subclass: #ManyLogicalContextApplier
	instanceVariableNames: 'previousContext contextAppliers shouldReject selector logicalSelector_CHANGE_ME collectionOfContextAppliers generalContextApplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #ManyLogicalContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 7/4/2024 16:29:44'!
TypeContextAppliers subclass: #ManyLogicalContextApplier
	instanceVariableNames: 'previousContext contextAppliers shouldReject selector logicalSelector_CHANGE_ME collectionOfContextAppliers generalContextApplier isRejecting_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!ManyLogicalContextApplier methodsFor: 'initialization' stamp: 'JFGO 7/4/2024 16:29:44'!
initializeForSelector: logicalSelector initializeWithAppliers: aCollectionOfContextAppliers withPreviousContext: aGeneralContextApplier rejecting: isRejecting 
	self shouldBeImplemented.
	logicalSelector_CHANGE_ME := logicalSelector.
	collectionOfContextAppliers := aCollectionOfContextAppliers.
	generalContextApplier := aGeneralContextApplier.
	isRejecting_CHANGE_ME := isRejecting.! !
!ManyLogicalContextApplier methodsFor: 'initialization' stamp: 'JFGO 7/4/2024 16:30:10' prior: 50554410!
initializeForSelector: logicalSelector initializeWithAppliers: aCollectionOfContextAppliers withPreviousContext: aGeneralContextApplier rejecting: isRejecting 
	
	selector := logicalSelector.
	collectionOfContextAppliers := aCollectionOfContextAppliers.
	generalContextApplier := aGeneralContextApplier.
	isRejecting_CHANGE_ME := isRejecting.! !
!ManyLogicalContextApplier methodsFor: 'initialization' stamp: 'JFGO 7/4/2024 16:30:39' prior: 50554426!
initializeForSelector: logicalSelector initializeWithAppliers: aCollectionOfContextAppliers withPreviousContext: aGeneralContextApplier rejecting: isRejecting 
	
	selector := logicalSelector.
	contextAppliers := aCollectionOfContextAppliers.
	previousContext := aGeneralContextApplier.
	shouldReject := isRejecting.! !

TypeContextAppliers subclass: #ManyLogicalContextApplier
	instanceVariableNames: 'previousContext contextAppliers shouldReject selector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #ManyLogicalContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 7/4/2024 16:31:18'!
TypeContextAppliers subclass: #ManyLogicalContextApplier
	instanceVariableNames: 'previousContext contextAppliers shouldReject selector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/4/2024 16:31:29'!
ERROR!
!ManyLogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/4/2024 16:31:44' overrides: 50538642!
liveTypesFor: aParseNode in: aCompiledMethod addingIncompleteTypeInfoTo: anIncompleteTypeInfoReasons 
	self shouldBeImplemented.! !
!ManyLogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/4/2024 16:31:52' prior: 50554478 overrides: 50538642!
liveTypesFor: aParseNode in: aCompiledMethod addingIncompleteTypeInfoTo: anIncompleteTypeInfoReasons 
	! !
!ManyLogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/4/2024 16:38:23' prior: 50554486 overrides: 50538642!
liveTypesFor: aParseNode in: aCompiledMethod addingIncompleteTypeInfoTo: anIncompleteTypeInfoReasons 
	| previousApplier |
	previousApplier := contextAppliers first.
	contextAppliers collect: [:currentContextApplier | 
			
	] from: 2 to: contextAppliers size! !
!ManyLogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/4/2024 16:48:18' prior: 50554494 overrides: 50538642!
liveTypesFor: aParseNode in: aCompiledMethod addingIncompleteTypeInfoTo: anIncompleteTypeInfoReasons 
	| previousApplier types|
	types := OrderedCollection new.
	previousApplier := contextAppliers first.
	contextAppliers collect: [:currentContextApplier | | currentTypes lca | 
			lca := LogicalContextApplier forSelector: selector withLeftApplier: previousApplier withRightContextApplier: currentContextApplier withPreviousContext: self isRejecting: shouldReject .
			currentTypes := lca liveTypesFor: aParseNode in: aCompiledMethod addingIncompleteTypeInfoTo: anIncompleteTypeInfoReasons .
			types union: currentTypes.
	] from: 2 to: contextAppliers size! !
!ManyLogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/4/2024 16:52:17' prior: 50554506 overrides: 50538642!
liveTypesFor: aParseNode in: aCompiledMethod addingIncompleteTypeInfoTo: anIncompleteTypeInfoReasons 
	| previousApplier types|
	types := OrderedCollection new.
	previousApplier := contextAppliers first.
	2 to: contextAppliers size do: [ :index | | currentTypes lca currentContextApplier | 
			currentContextApplier := contextAppliers at: index.
			lca := LogicalContextApplier forSelector: selector withLeftApplier: previousApplier withRightContextApplier: currentContextApplier withPreviousContext: self isRejecting: shouldReject .
			currentTypes := lca liveTypesFor: aParseNode in: aCompiledMethod addingIncompleteTypeInfoTo: anIncompleteTypeInfoReasons .
			types union: currentTypes.
	].! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/4/2024 16:57:00' prior: 50554312!
contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| contextAppliers |
	contextAppliers := OrderedCollection new.
	self halt.
	condition arguments do: [:argument | 
		contextAppliers add: (self contextFor: argument statements first withBlockRejecting: blockIsOnRejectingCondition).
	].
	
	
	
	
	^LogicalContextApplier forSelector: #or:  withAppliers: contextAppliers withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
	! !

!classRemoval: #ManyLogicalContextApplier stamp: 'JFGO 7/4/2024 16:57:07'!
TypeContextAppliers subclass: #ManyLogicalContextApplier
	instanceVariableNames: 'previousContext contextAppliers shouldReject selector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!TypesWithContextAppliersTest methodsFor: 'disjunction / conjunction context' stamp: 'JFGO 7/4/2024 16:58:58' prior: 50554014!
test47ManyDisjunctionCollectsEachOneAndRejectsRemaining
	
	"self withMessageName: #manyDisjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 4.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
		self assert: types includes: Array.
		self assert: types includes: Set.
	]."
	! !

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 16:59:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/4/2024 16:59:02'!
PASSED!

!classDefinition: #LogicalContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 7/4/2024 17:00:36'!
TypeContextAppliers subclass: #LogicalContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier shouldReject selector contextApplierCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!LogicalContextApplier methodsFor: 'initialization' stamp: 'JFGO 7/4/2024 17:00:34'!
initializeForSelector: aLogicalSelector withAppliers: aContextApplierCollection withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	contextApplierCollection := aContextApplierCollection .
	previousContext := aPreviousContextApplier .
	shouldReject:= isRejecting .
	selector:= aLogicalSelector .
	! !

!methodRemoval: LogicalContextApplier #forSelector:initializeWithLeftApplier:withRightContextApplier:withPreviousContext:rejecting: stamp: 'JFGO 7/4/2024 17:00:47'!
forSelector: aLogicalSelector initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	shouldReject:= isRejecting .
	selector:= aLogicalSelector .
	!
!LogicalContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 7/4/2024 17:01:29' prior: 50551267!
forSelector: logicalSelector withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	| contextAppliers |
	^self new initializeForSelector: logicalSelector withAppliers: contextAppliers withPreviousContext: aGeneralContextApplier rejecting: isRejecting .! !
!LogicalContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 7/4/2024 17:02:17' prior: 50554876!
forSelector: logicalSelector withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aPreviousContextApplier isRejecting: isRejecting  
	
	| contextAppliers |
	contextAppliers := OrderedCollection with: leftContextApplier with: rightContextApplier .
	^self new initializeForSelector: logicalSelector withAppliers: contextAppliers withPreviousContext: aPreviousContextApplier rejecting: isRejecting .! !

TypeContextAppliers subclass: #LogicalContextApplier
	instanceVariableNames: 'previousContext shouldReject selector contextApplierCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #LogicalContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 7/4/2024 17:02:34'!
TypeContextAppliers subclass: #LogicalContextApplier
	instanceVariableNames: 'previousContext shouldReject selector contextApplierCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/4/2024 17:04:50' prior: 50553593 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| types leftTypes rightTypes |
	types:=OrderedCollection new.
	
	contextApplierCollection do: [:aContextApplier | | currentTypes | 
		currentTypes := self rawTypesOver: aContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	].
	
	^self liveTypesWith: leftTypes and: rightTypes .! !
!LogicalContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 7/4/2024 17:06:31'!
rawTypesWith: previousTypes and:currentTypes
		
	| types |
	(self shouldIntersect) ifTrue:[
		types := previousTypes intersection: currentTypes.
	] ifFalse:[
		types := previousTypes union: currentTypes.
	].
	
	^types .! !
!LogicalContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 7/4/2024 17:06:58'!
liveTypesOf: types
	
	
	^RawToLiveTypesAdapter new adapt: types .! !

!methodRemoval: LogicalContextApplier #liveTypesWith:and: stamp: 'JFGO 7/4/2024 17:07:06'!
liveTypesWith: leftTypes and:rightTypes
		
	| types |
	(self shouldIntersect) ifTrue:[
		types := leftTypes intersection: rightTypes.
	] ifFalse:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .!
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/4/2024 17:07:19' prior: 50554928 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| types leftTypes rightTypes |
	types:=OrderedCollection new.
	
	contextApplierCollection do: [:aContextApplier | | currentTypes | 
		currentTypes := self rawTypesOver: aContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	].
	
	^self liveTypesOf: types.! !
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/4/2024 17:07:41' prior: 50554971 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| types |
	types:=OrderedCollection new.
	
	contextApplierCollection do: [:aContextApplier | | currentTypes | 
		currentTypes := self rawTypesOver: aContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		self rawTypesWith: types and: currentTypes .
	].
	
	^self liveTypesOf: types.! !
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/4/2024 17:08:08' prior: 50554988 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| types |
	types:=OrderedCollection new.
	
	contextApplierCollection do: [:aContextApplier | | currentTypes | 
		currentTypes := self rawTypesOver: aContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		types:= self rawTypesWith: types and: currentTypes .
	].
	
	^self liveTypesOf: types.! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:08:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/4/2024 17:08:11'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:08:11'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:08:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/4/2024 17:08:14'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:08:40'!
FAILURE!
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/4/2024 17:09:41' prior: 50555005 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| types |
	types:=OrderedCollection new.
	self halt.
	contextApplierCollection do: [:aContextApplier | | currentTypes | 
		currentTypes := self rawTypesOver: aContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		types:= self rawTypesWith: types and: currentTypes .
	].
	
	^self liveTypesOf: types.! !
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/4/2024 17:13:50' prior: 50555258 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| types |
	types:=self rawTypesOver: contextApplierCollection first for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	2 to: contextApplierCollection size do: [:index | | currentTypes | 
		currentTypes := self rawTypesOver: (contextApplierCollection at: index) for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		types:= self rawTypesWith: types and: currentTypes .
	].
	
	^self liveTypesOf: types.! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:13:53'!
PASSED!

!methodRemoval: LogicalContextApplier #liveTypesOf: stamp: 'JFGO 7/4/2024 17:14:33'!
liveTypesOf: types
	
	
	^RawToLiveTypesAdapter new adapt: types .!
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/4/2024 17:14:39' prior: 50555276 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| types |
	types:=self rawTypesOver: contextApplierCollection first for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	2 to: contextApplierCollection size do: [:index | | currentTypes | 
		currentTypes := self rawTypesOver: (contextApplierCollection at: index) for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		types:= self rawTypesWith: types and: currentTypes .
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:14:41'!
PASSED!
!LogicalContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 7/4/2024 17:15:16'!
forSelector: logicalSelector withContextAppliers: aContextApplierCollection withPreviousContext: aPreviousContextApplier isRejecting: isRejecting  
	
	
	
	^self new initializeForSelector: logicalSelector withAppliers: aContextApplierCollection withPreviousContext: aPreviousContextApplier rejecting: isRejecting .! !
!TypesWithContextAppliersTest methodsFor: 'disjunction / conjunction context' stamp: 'JFGO 7/4/2024 17:15:37' prior: 50554585!
test47ManyDisjunctionCollectsEachOneAndRejectsRemaining
	
	self withMessageName: #manyDisjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 4.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
		self assert: types includes: Array.
		self assert: types includes: Set.
	].
	! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/4/2024 17:16:01' prior: 50554556!
contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| contextAppliers |
	contextAppliers := OrderedCollection new.
	self halt.
	condition arguments do: [:argument | 
		contextAppliers add: (self contextFor: argument statements first withBlockRejecting: blockIsOnRejectingCondition).
	].
	
	
	
	
	^LogicalContextApplier forSelector: #or:  withContextAppliers: contextAppliers withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
	! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/4/2024 17:16:04'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/4/2024 17:16:12' prior: 50555810!
contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| contextAppliers |
	contextAppliers := OrderedCollection new.
	
	condition arguments do: [:argument | 
		contextAppliers add: (self contextFor: argument statements first withBlockRejecting: blockIsOnRejectingCondition).
	].
	
	
	
	
	^LogicalContextApplier forSelector: #or:  withContextAppliers: contextAppliers withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
	! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/4/2024 17:16:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:16:16'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:16:16'!
FAILURE!
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/4/2024 17:17:08' prior: 50555530 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| types |
	self halt.
	types:=self rawTypesOver: contextApplierCollection first for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	2 to: contextApplierCollection size do: [:index | | currentTypes | 
		currentTypes := self rawTypesOver: (contextApplierCollection at: index) for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		types:= self rawTypesWith: types and: currentTypes .
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/4/2024 17:17:37' prior: 50556303 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| types |
	
	types:=self rawTypesOver: contextApplierCollection first for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	2 to: contextApplierCollection size do: [:index | | currentTypes | 
		currentTypes := self rawTypesOver: (contextApplierCollection at: index) for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		types:= self rawTypesWith: types and: currentTypes .
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/4/2024 17:17:54' prior: 50556052!
contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| contextAppliers |
	contextAppliers := OrderedCollection new.
	self halt.
	condition arguments do: [:argument | 
		contextAppliers add: (self contextFor: argument statements first withBlockRejecting: blockIsOnRejectingCondition).
	].
	
	
	
	
	^LogicalContextApplier forSelector: #or:  withContextAppliers: contextAppliers withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
	! !

condition arguments!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/4/2024 17:21:35' prior: 50556348!
contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| contextAppliers |
	contextAppliers := OrderedCollection new.
	contextAppliers add: (self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition).
	condition arguments do: [:argument | 
		contextAppliers add: (self contextFor: argument statements first withBlockRejecting: blockIsOnRejectingCondition).
	].
	
	
	
	
	^LogicalContextApplier forSelector: #or:  withContextAppliers: contextAppliers withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
	! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/4/2024 17:21:39'!
PASSED!

----SNAPSHOT----(4 July 2024 17:23:30) CuisUniversity-6169.image priorSource: 7125764!

TypesWithContextAppliersTestMethods new perform: #m10.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/5/2024 09:44:22' prior: 50553972!
m10

| v1 |
v1:= OrderedCollection new.

v1:= 'hola'.
v1:= Array new.



(v1 class = OrderedCollection xor: (v1 isString not) ) ifTrue:[ ^'entro'. ].
^'no entro'.! !

----QUIT----(5 July 2024 09:52:14) CuisUniversity-6169.image priorSource: 7198892!

----STARTUP---- (6 July 2024 12:07:53) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!TypesWithContextAppliersTestMethods methodsFor: 'disjunction / conjunction contexts' stamp: 'JFGO 7/6/2024 12:15:18'!
manyConjunctionCastDifferentTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1 := Array new.
v1 := Set new.
v1:= 1.
v1:= Date today.

((v1 class = Date) not and: [(v1 class = SmallInteger) not] and: [(v1 class = String) not]) ifTrue:[ v1 isEmpty.]! !
!TypesWithContextAppliersTest methodsFor: 'disjunction / conjunction context' stamp: 'JFGO 7/6/2024 12:16:31'!
test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining
	
	self withMessageName: #manyConjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: OrderedCollection.
		self assert: types includes: Array.
		self assert: types includes: Set.
	].
	! !

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 7/6/2024 12:16:37'!
FAILURE!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/6/2024 12:17:51' prior: 50554251!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	(condition isOr or: [condition isAnd]) ifTrue:[ 
		^self contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	(condition isManyOr or: [condition isManyAnd ]) ifTrue:[
		^self contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
	].	
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/6/2024 12:22:05' prior: 50556368!
contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| contextAppliers selector |
	contextAppliers := OrderedCollection new.
	contextAppliers add: (self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition).
	condition arguments do: [:argument | 
		contextAppliers add: (self contextFor: argument statements first withBlockRejecting: blockIsOnRejectingCondition).
	].
	
	condition isManyOr ifTrue:[ selector:= #or] ifFalse:[ selector:=#and		].
	
	
	^LogicalContextApplier forSelector: #or:  withContextAppliers: contextAppliers withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
	! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/6/2024 12:22:28' prior: 50556732!
contextFor: condition whenManyLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| contextAppliers selector |
	contextAppliers := OrderedCollection new.
	contextAppliers add: (self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition).
	condition arguments do: [:argument | 
		contextAppliers add: (self contextFor: argument statements first withBlockRejecting: blockIsOnRejectingCondition).
	].
	
	condition isManyOr ifTrue:[ selector:= #or:] ifFalse:[ selector:=#and:	].
	
	
	^LogicalContextApplier forSelector: selector  withContextAppliers: contextAppliers withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
	! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/6/2024 12:23:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 7/6/2024 12:23:17'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/6/2024 12:31:38' prior: 50553870!
m1

| v1 v2 v3 |
v1:= 'hola'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1 + 1]. 

v2:= 'Es un string'.
v3 := 15.

! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/6/2024 12:39:26' prior: 50557014!
m1

| v1 v2 v3 |
v1:= 'hola'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1 + 1]. 

v2:= 'Es un string'.
v3 := 15.

! !

TypesWithContextAppliersTestMethods new perform: #m1.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/6/2024 12:40:18' prior: 50557023!
m1

| v1 v2 v3 |
v1:= 'hola'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1 + 1]. 

v2:= 'Es un string'.
v3 := 15.



! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/6/2024 12:40:57' prior: 50557033!
m1

| v1 v2 v3 |
v1:= 'hola'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1.]. 

v2:= 'Es un string'.
v3 := 15.



! !
!LiveTypingSmalltalkCompleter methodsFor: '*LiveTypingGenerics' stamp: 'JFGO 7/6/2024 12:49:53' prior: 50535711!
commonSupertypeOrSelectorsOf: aNodeUnderCursor in: aMethodNode  
	
	| methodToAnalyze types liveTypes methodClass |
	self halt.
	methodClass := aMethodNode encoder classEncoding.
	methodToAnalyze := methodClass compiledMethodAt: aMethodNode selector ifAbsent: [ NotImplementedMethod class: methodClass selector: aMethodNode selector ].
	
	liveTypes := (aNodeUnderCursor typesIn: methodToAnalyze addingIncompleteTypeInfoTo: Set new).
	types := OrderedCollection new. 
	liveTypes classTypesDo: [:aClass | types add: aClass].
	
	^ VariableTypeInfo new initializeRawTypes: types asArray.
	
! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/6/2024 12:52:57' prior: 50557042!
m1

| v1 v2 v3 |
v1:= 'hola'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1 .]. 

v2:= 'Es un string'.
v3 := 15.



! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/6/2024 12:53:28' prior: 50557073!
m1

| v1 v2 v3 |
v1:= 'hola'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1 .]. 

v2:= 'Es un string'.
v3 := 15.



v2 isEmpty.
v3 factorial.! !

TypesWithContextAppliersTestMethods new perform: #m1.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/6/2024 12:54:03' prior: 50557082!
m1

| v1 v2 v3 |
v1:= 'hola'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1 .]. 

v2:= 'Es un string'.
v3 := 15.



v2 isEmpty.
v3 factorial.

! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/6/2024 12:54:25' prior: 50557093!
m1

| v1 v2 v3 |
v1:= 'hola'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1 .]. 

v2:= 'Es un string'.
v3 := 15.



v2 isEmpty.
v3 factorial.

! !
!CompiledMethod methodsFor: '*LiveTyping' stamp: 'JFGO 7/6/2024 12:55:52' prior: 50505786!
liveTypingAutoCompleterDocumentation
	
	| parametersTypeInfo |
 
	parametersTypeInfo := self methodVariablesTypes. 
	self halt.

	^ self 
		autoCompleterDocumentationAppendingToParameter: [ :aParameterName | 
			self parameterTypeAutoCompleterDocumentationOf: aParameterName using: parametersTypeInfo ]
		toReturn: [
			self caretAutoCompleterDocumentation append: self returnTypeAutoCompleterDocumentation ].
! !

TypesWithContextAppliersTestMethods new perform: #m1.!
!CompiledMethod methodsFor: '*LiveTyping' stamp: 'HAW 2/8/2019 18:34:33' prior: 50557111!
liveTypingAutoCompleterDocumentation
	
	| parametersTypeInfo |
 
	parametersTypeInfo := self methodVariablesTypes. 

	^ self 
		autoCompleterDocumentationAppendingToParameter: [ :aParameterName | 
			self parameterTypeAutoCompleterDocumentationOf: aParameterName using: parametersTypeInfo ]
		toReturn: [
			self caretAutoCompleterDocumentation append: self returnTypeAutoCompleterDocumentation ].
! !
!LiveTypingSmalltalkCompleter methodsFor: 'return type' stamp: 'JFGO 7/6/2024 12:59:07' prior: 50497777!
typeOfCascadeReceiverIn: methodNode at: aPosition 
	self halt.
	^methodNode 
		withTopParseNodeIncluding: aPosition 
		do: [ :aNodeUnderCursor | self commonSupertypeOrSelectorsOf: aNodeUnderCursor receiverOrCascadeReceiver in: methodNode ]
		ifAbsent: [ nil ].
		! !
!LiveTypingSmalltalkCompleter methodsFor: 'return type' stamp: 'JFGO 7/6/2024 12:59:18' prior: 50497767!
returnTypeOfNodeUnderCursorIn: methodNode at: aPosition
	self halt.
	^methodNode
		withParseNodeIncluding: aPosition 
		do: [ :aNodeUnderCursor | self commonSupertypeOrSelectorsOf: aNodeUnderCursor in: methodNode ]
		ifAbsent: [ nil ]! !
!LiveTypingSmalltalkCompleter methodsFor: 'return type' stamp: 'JFGO 7/6/2024 12:59:28' prior: 50497750!
returnTypeOfEnclosedExpresionIn: methodNode at: aPosition
	self halt.
	^ methodNode  
		withTopParseNodeIncluding: aPosition
		do: [ :aNodeUnderCursor | | nodeToAnalyze |
			nodeToAnalyze := aNodeUnderCursor isReturn ifTrue: [ aNodeUnderCursor expr ] ifFalse: [ aNodeUnderCursor ].
			nodeToAnalyze := self argumentOf: nodeToAnalyze ifPreviousIsBinaryMessageIn: methodNode.
			self commonSupertypeOrSelectorsOf: nodeToAnalyze in: methodNode ]
		ifAbsent: [ nil ]! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/6/2024 13:02:03' prior: 50557102!
m1

| v1 v2 v3 |
v1:= 'hola'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1 .]. 

v2:= 'Es un string'.
v3 := 15.



v2 isEmpty.
v3 factorial.

! !

TypesWithContextAppliersTestMethods new perform: #m1.!
!DynamicTypingSmalltalkCompleter methodsFor: 'selector documentation' stamp: 'JFGO 7/6/2024 13:03:47' prior: 16852107 overrides: 16952447!
documentationOf: aMethod
self halt.
	^aMethod dynamicTypingAutoCompleterDocumentation! !
!LiveTypingSmalltalkCompleter methodsFor: 'parse node manipulation' stamp: 'JFGO 7/6/2024 13:10:30' prior: 50497660!
withMethodNodeDo: doBlock ifError: anErrorBlock
self halt.
	^ self 
		withMethodNodeOf: parser source 
		do: doBlock 
		handlingSyntaxErrorOrIfError: anErrorBlock! !
!LiveTypingSmalltalkCompleter methodsFor: 'parse node manipulation' stamp: 'JFGO 7/6/2024 13:14:33' prior: 50497668!
withMethodNodeOf: aSourceCode do: doBlock handlingSyntaxErrorOrIfError: anErrorBlock
self halt.
	^self 
		withMethodNodeOf: aSourceCode
		do: doBlock 
		ifError: [ :anError |
			(anError isKindOf: SyntaxErrorNotification) 
				ifTrue: [ self tryToRecoverFromSyntaxError: anError withMethodNodeOf: aSourceCode do: doBlock ifError: anErrorBlock ]
				ifFalse: [ anErrorBlock value: anError ]]
	! !
!LiveTypingSmalltalkCompleter methodsFor: 'parse node manipulation' stamp: 'JFGO 7/6/2024 13:14:40' prior: 50497684!
withMethodNodeOf: aSourceCode do: doBlock ifError: anErrorBlock
self halt.
	^ [[ | methodNode noPattern |

		noPattern := (model is: #providesBindings) 
			or: [(model is: #hasTextProvider) 
				and: [ (model textProvider is: #providesBindings)
					and: [ (model textProvider is: #CodeProvider) not]]].
				
		methodNode := (parser classOrMetaClass ifNil: [ UndefinedObject ]) 
			methodNodeFor: aSourceCode
			noPattern: noPattern .
		doBlock value: methodNode ] 
		on: UndeclaredVariableReference 
		do: [  :anUndeclareVariableReference | anUndeclareVariableReference declareTempAndResume ]]
		on: Error - MessageNotUnderstood 
		do: anErrorBlock
		
	! !
!LiveTypingSmalltalkCompleter methodsFor: 'parse node manipulation' stamp: 'JFGO 7/6/2024 13:14:49' prior: 50497651!
tryToRecoverFromSyntaxErrorWithMethodNodeDo: doBlock ifError: anErrorBlock
	self halt.
	^ self withMethodNodeOf: self allSource do: doBlock ifError: anErrorBlock 
	! !
!LiveTypingSmalltalkCompleter methodsFor: 'parse node manipulation' stamp: 'JFGO 7/6/2024 13:14:55' prior: 50497635!
tryToRecoverFromSyntaxError: aSyntaxErrorNotification withMethodNodeOf: aSourceCode do: doBlock ifError: anErrorBlock
	self halt.
	^ aSyntaxErrorNotification errorMessage = 'right parenthesis expected' 
		ifTrue: [ self withMethodNodeOf: aSourceCode, ')' do: doBlock handlingSyntaxErrorOrIfError: anErrorBlock ]
		ifFalse: [ self withMethodNodeOf: self allSource do: doBlock ifError: anErrorBlock ]
	! !
!LiveTypingSmalltalkCompleter methodsFor: 'selector documentation' stamp: 'JFGO 7/6/2024 13:15:04' prior: 50497629 overrides: 16952447!
documentationOf: aMethod
self halt.
	^aMethod liveTypingAutoCompleterDocumentation! !
!LiveTypingSmalltalkCompleter methodsFor: 'return type' stamp: 'JFGO 7/6/2024 13:15:13' prior: 50497707!
argumentOf: nodeToAnalyze ifPreviousIsBinaryMessageIn: methodNode
		self halt.
	^(self isPreviousMessageSendBinary and: [ nodeToAnalyze isMessageNode and: [ nodeToAnalyze isInfix ]]) 
		ifTrue: [ self handleArgumentOf: nodeToAnalyze whenPreviousIsBinaryMessage: methodNode ]
		ifFalse: [ nodeToAnalyze ]

			
! !
!LiveTypingSmalltalkCompleter methodsFor: 'return type' stamp: 'JFGO 7/6/2024 13:15:19' prior: 50497738!
handleArgumentOf: nodeToAnalyze whenPreviousIsBinaryMessage: methodNode

	| argument |
self halt.
	argument := nodeToAnalyze arguments first.
	argument isMessageNode ifTrue: [ 
		methodNode 
			rangeForNode: argument selector 
			ifAbsent: [  argument := argument receiver  ]].

	^argument! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/6/2024 13:15:58' prior: 50557187!
m1

| v1 v2 v3 |
v1:= 'hola'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1 .]. 

v2:= 'Es un string'.
v3 := 15.



v2 isEmpty.
v3 factorial.
v3 
! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/6/2024 13:16:26'!
m11 

| var |
var := 'Un string'.
! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/6/2024 13:16:35' prior: 50557325!
m11 

| var |
var := 'Un string'.

! !

TypesWithContextAppliersTestMethods new perform: #m11.!
!DynamicTypingSmalltalkCompleter methodsFor: 'message entries - private' stamp: 'JFGO 7/6/2024 13:17:42' prior: 16852086 overrides: 16951994!
computeEntriesOfUnaryMessageReturnNamed: aSelector    
	self halt.
	self computeMessageEntriesForUnknowClass 
	! !
!DynamicTypingSmalltalkCompleter methodsFor: 'message entries - private' stamp: 'JFGO 7/6/2024 13:17:46' prior: 16852093 overrides: 16952120!
computeMessageEntriesOfCascadeReceiver   
	self halt.
	self computeMessageEntriesForUnknowClass
	
! !
!DynamicTypingSmalltalkCompleter methodsFor: 'message entries - private' stamp: 'JFGO 7/6/2024 13:17:52' prior: 16852100 overrides: 16952126!
computeMessageEntriesOfEnclosedExpressionReturn   
	self halt.
	self computeMessageEntriesForUnknowClass 
	
! !
!SmalltalkCompleter methodsFor: 'entries' stamp: 'JFGO 7/6/2024 13:18:15' prior: 16951892 overrides: 16784541!
computeEntries

	| allSource source contextClass specificModel separator fragmentStart fragmentEnd done |
self halt.
	specificModel := self textProviderOrModel.
	contextClass := self selectedClassOrMetaClassIn: specificModel.

	allSource := self allSource.
	(specificModel is: #CodeProvider)
		ifTrue: [source := allSource copyFrom: 1 to: position]
		ifFalse: [
			separator := String newLineString, String newLineString.
			fragmentStart := 1.
			done := false.
			[done] whileFalse: [
				fragmentEnd := allSource
					indexOfSubCollection: separator
					startingAt: fragmentStart
					ifAbsent: [allSource size].
				fragmentEnd >= position ifTrue: [
					source := allSource copyFrom: fragmentStart to: position.
					done := true ].
				fragmentStart := fragmentEnd+separator size ]].

	allRanges := self parse: source in: contextClass and: specificModel.
	currentRange := allRanges lastIfEmpty: [ ^entries := #() ].
	possibleInvalidSelectors := #().

	currentRange end = source size
		ifTrue: [ self computeEntriesOfMessageOrIdentifiersFor: source in: contextClass and: specificModel ]
	 	ifFalse: [ self computeMessageEntriesWithEmptyPrefixFor: source in: contextClass and: specificModel ].

	! !
!SmalltalkCompleter methodsFor: 'entries' stamp: 'JFGO 7/6/2024 13:18:44' prior: 16951942 overrides: 16784601!
selectedEntryFormatted

	| selectedEntry |
	self halt.
	selectedEntry := self entries at: menuMorph selected.
	^currentRange correspondsToSymbol
		ifTrue: [ '#', selectedEntry ]
		ifFalse: [ selectedEntry separateKeywords ]! !
!SmalltalkCompleter methodsFor: 'accessing' stamp: 'JFGO 7/6/2024 13:19:03' prior: 16952452!
allSource
self halt.
	^model actualContents string! !
!SmalltalkCompleter methodsFor: 'accessing' stamp: 'JFGO 7/6/2024 13:19:08' prior: 16952456!
possibleInvalidSelectors
	self halt.
	^ possibleInvalidSelectors! !

model actualContents!
!SmalltalkCompleter methodsFor: 'message entries - private' stamp: 'JFGO 7/6/2024 13:26:08' prior: 16952000!
computeMessageEntriesFor: allSource in: contextClass and: specificModel  
	
	| id rangeType |
self halt.
	canShowSelectorDocumentation := true.
	id := allSource copyFrom: currentRange start to: currentRange end.
	rangeType := currentRange rangeType.

	rangeType == #globalVar
		ifTrue: [ ^self computeMessageEntriesForClass: (Smalltalk at: id asSymbol) class ].
	rangeType == #self
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass ].
	rangeType == #super
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass superclass ].
	rangeType == #true 
		ifTrue: [ ^self computeMessageEntriesForClass: True ].
	rangeType == #false
		ifTrue: [ ^self computeMessageEntriesForClass: False ].
	rangeType == #nil
		ifTrue: [ ^self computeMessageEntriesForClass: UndefinedObject ].
	rangeType == #character
		ifTrue: [ ^self computeMessageEntriesForClass: (id first asciiValue ifNotNil: [Character] ifNil: [UnicodeCodePoint]) ].
	rangeType == #number
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #string
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #symbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #stringSymbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #instVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofInstVarNamed: id ].
	rangeType == #methodArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id ].
	rangeType == #tempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id ].
	rangeType == #blockArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockArgNamed: id ].
	rangeType == #blockTempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockTempVarNamed: id ].
	rangeType == #workspaceVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (specificModel classOfWorkspaceVarNamed: id) ].
	rangeType == #thisContext
		ifTrue: [ ^self computeMessageEntriesForClass: (specificModel classOfThisContext) ]. 
	rangeType == #classVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	rangeType == #poolConstant
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	(rangeType beginsWith: #blockEnd)
		ifTrue: [ ^self computeMessageEntriesForClass: BlockClosure ].
	rangeType == #arrayEnd
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	(rangeType beginsWith: #rightBrace)
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	rangeType == #unary
		ifTrue: [ ^self computeEntriesOfUnaryMessageReturnNamed: id ].
	(rangeType beginsWith: #rightParenthesis)
		ifTrue: [ ^self computeMessageEntriesOfEnclosedExpressionReturn].
	rangeType == #cascadeSeparator
		ifTrue: [ ^self computeMessageEntriesOfCascadeReceiver]. 

	self computeMessageEntriesForUnknowClass 
	
	! !
!SmalltalkCompleter methodsFor: 'accessing' stamp: 'JFGO 7/6/2024 13:30:08' prior: 50557414!
allSource

	^model actualContents string! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/6/2024 13:38:53' prior: 50557330!
m11 

| var |
var := 'Un string'.

var  ! !

----QUIT----(6 July 2024 13:39:01) CuisUniversity-6169.image priorSource: 7199333!

----STARTUP---- (8 July 2024 18:36:30) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


TypesWithContextAppliersTestMethods new perform: #m11.!
!SmalltalkCompleter methodsFor: 'message entries - private' stamp: 'JFGO 7/8/2024 19:32:37' prior: 50557426!
computeMessageEntriesFor: allSource in: contextClass and: specificModel  
	
	| id rangeType |

	canShowSelectorDocumentation := true.
	id := allSource copyFrom: currentRange start to: currentRange end.
	rangeType := currentRange rangeType.

	rangeType == #globalVar
		ifTrue: [ ^self computeMessageEntriesForClass: (Smalltalk at: id asSymbol) class ].
	rangeType == #self
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass ].
	rangeType == #super
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass superclass ].
	rangeType == #true 
		ifTrue: [ ^self computeMessageEntriesForClass: True ].
	rangeType == #false
		ifTrue: [ ^self computeMessageEntriesForClass: False ].
	rangeType == #nil
		ifTrue: [ ^self computeMessageEntriesForClass: UndefinedObject ].
	rangeType == #character
		ifTrue: [ ^self computeMessageEntriesForClass: (id first asciiValue ifNotNil: [Character] ifNil: [UnicodeCodePoint]) ].
	rangeType == #number
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #string
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #symbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #stringSymbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #instVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofInstVarNamed: id ].
	rangeType == #methodArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id ].
	rangeType == #tempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id ].
	rangeType == #blockArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockArgNamed: id ].
	rangeType == #blockTempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockTempVarNamed: id ].
	rangeType == #workspaceVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (specificModel classOfWorkspaceVarNamed: id) ].
	rangeType == #thisContext
		ifTrue: [ ^self computeMessageEntriesForClass: (specificModel classOfThisContext) ]. 
	rangeType == #classVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	rangeType == #poolConstant
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	(rangeType beginsWith: #blockEnd)
		ifTrue: [ ^self computeMessageEntriesForClass: BlockClosure ].
	rangeType == #arrayEnd
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	(rangeType beginsWith: #rightBrace)
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	rangeType == #unary
		ifTrue: [ ^self computeEntriesOfUnaryMessageReturnNamed: id ].
	(rangeType beginsWith: #rightParenthesis)
		ifTrue: [ ^self computeMessageEntriesOfEnclosedExpressionReturn].
	rangeType == #cascadeSeparator
		ifTrue: [ ^self computeMessageEntriesOfCascadeReceiver]. 

	self computeMessageEntriesForUnknowClass 
	
	! !

typeInfo!

method methodNode!

----SNAPSHOT----(8 July 2024 19:44:33) CuisUniversity-6169.image priorSource: 7228299!
!Browser methodsFor: '*LiveTyping' stamp: 'JFGO 7/10/2024 17:44:56' prior: 50504336 overrides: 16983606!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName  

	| typeInfo methodNode nodeEncoder sourceRanges |
	
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo .
	
! !

sourceRanges!

sourceRanges!

sourceRanges!
!SmalltalkCompleter methodsFor: 'entries' stamp: 'JFGO 7/10/2024 18:43:48' prior: 50557362 overrides: 16784541!
computeEntries

	| allSource source contextClass specificModel separator fragmentStart fragmentEnd done |
"self halt."
	specificModel := self textProviderOrModel.
	contextClass := self selectedClassOrMetaClassIn: specificModel.

	allSource := self allSource.
	(specificModel is: #CodeProvider)
		ifTrue: [source := allSource copyFrom: 1 to: position]
		ifFalse: [
			separator := String newLineString, String newLineString.
			fragmentStart := 1.
			done := false.
			[done] whileFalse: [
				fragmentEnd := allSource
					indexOfSubCollection: separator
					startingAt: fragmentStart
					ifAbsent: [allSource size].
				fragmentEnd >= position ifTrue: [
					source := allSource copyFrom: fragmentStart to: position.
					done := true ].
				fragmentStart := fragmentEnd+separator size ]].

	allRanges := self parse: source in: contextClass and: specificModel.
	currentRange := allRanges lastIfEmpty: [ ^entries := #() ].
	possibleInvalidSelectors := #().

	currentRange end = source size
		ifTrue: [ self computeEntriesOfMessageOrIdentifiersFor: source in: contextClass and: specificModel ]
	 	ifFalse: [ self computeMessageEntriesWithEmptyPrefixFor: source in: contextClass and: specificModel ].

	! !
!Browser methodsFor: '*LiveTyping' stamp: 'JFGO 7/10/2024 18:52:06'!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges |
	
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo .
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/10/2024 18:55:31'!
blockNodeFrom: sourceRanges in: aPosition

	| smallestRangeSize blockNodeWrappingAPosition |
	smallestRangeSize := SmallInteger maxVal.
	blockNodeWrappingAPosition := nil.
	
	sourceRanges associationsDo: [ :nodeAtRange |
		nodeAtRange key class = BlockNode ifTrue: [
				self withRangesOf: nodeAtRange including: aPosition do: [ :aRange | | currentNodeRangeSize |
					currentNodeRangeSize := aRange size.
					currentNodeRangeSize < smallestRangeSize ifTrue: [
						smallestRangeSize := currentNodeRangeSize.
						blockNodeWrappingAPosition := nodeAtRange key ]]
			]
		].
	
	^blockNodeWrappingAPosition
	
! !
!SmalltalkCompleter methodsFor: 'entries' stamp: 'JFGO 7/10/2024 18:55:50' prior: 50557404 overrides: 16784601!
selectedEntryFormatted

	| selectedEntry |
	
	selectedEntry := self entries at: menuMorph selected.
	^currentRange correspondsToSymbol
		ifTrue: [ '#', selectedEntry ]
		ifFalse: [ selectedEntry separateKeywords ]! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/10/2024 18:56:15' prior: 50557707!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges |
	
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	self blockNodeFrom: sourceRanges in: aRange.
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo .
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/10/2024 18:56:20' prior: 50557758!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges bn |
	
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	bn := self blockNodeFrom: sourceRanges in: aRange.
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo .
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/10/2024 18:57:27' prior: 50557778!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges bn |
	
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	bn := self blockNodeFrom: sourceRanges in: aRange.
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo .
	
! !
!SmalltalkCompleter methodsFor: 'message entries - private' stamp: 'JFGO 7/10/2024 18:59:09' prior: 50557544!
computeMessageEntriesFor: allSource in: contextClass and: specificModel  
	
	| id rangeType |

	canShowSelectorDocumentation := true.
	id := allSource copyFrom: currentRange start to: currentRange end.
	rangeType := currentRange rangeType.

	rangeType == #globalVar
		ifTrue: [ ^self computeMessageEntriesForClass: (Smalltalk at: id asSymbol) class ].
	rangeType == #self
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass ].
	rangeType == #super
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass superclass ].
	rangeType == #true 
		ifTrue: [ ^self computeMessageEntriesForClass: True ].
	rangeType == #false
		ifTrue: [ ^self computeMessageEntriesForClass: False ].
	rangeType == #nil
		ifTrue: [ ^self computeMessageEntriesForClass: UndefinedObject ].
	rangeType == #character
		ifTrue: [ ^self computeMessageEntriesForClass: (id first asciiValue ifNotNil: [Character] ifNil: [UnicodeCodePoint]) ].
	rangeType == #number
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #string
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #symbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #stringSymbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #instVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofInstVarNamed: id ].
	rangeType == #methodArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id ].
	rangeType == #tempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id inRange: currentRange ].
	rangeType == #blockArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockArgNamed: id ].
	rangeType == #blockTempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockTempVarNamed: id ].
	rangeType == #workspaceVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (specificModel classOfWorkspaceVarNamed: id) ].
	rangeType == #thisContext
		ifTrue: [ ^self computeMessageEntriesForClass: (specificModel classOfThisContext) ]. 
	rangeType == #classVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	rangeType == #poolConstant
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	(rangeType beginsWith: #blockEnd)
		ifTrue: [ ^self computeMessageEntriesForClass: BlockClosure ].
	rangeType == #arrayEnd
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	(rangeType beginsWith: #rightBrace)
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	rangeType == #unary
		ifTrue: [ ^self computeEntriesOfUnaryMessageReturnNamed: id ].
	(rangeType beginsWith: #rightParenthesis)
		ifTrue: [ ^self computeMessageEntriesOfEnclosedExpressionReturn].
	rangeType == #cascadeSeparator
		ifTrue: [ ^self computeMessageEntriesOfCascadeReceiver]. 

	self computeMessageEntriesForUnknowClass 
	
	! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/10/2024 18:59:22' prior: 50557799!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges bn |
	self halt.
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	bn := self blockNodeFrom: sourceRanges in: aRange.
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo .
	
! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/10/2024 19:02:51' prior: 50557531!
m11 

| var |
var := 'Un string'.

var ! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/10/2024 19:03:13'!
m12 

| var |
var := 'Un string'.

var isString ifTrue:[var isEmpty].! !

TypesWithContextAppliersTestMethods new perform: #m12.!

sourceRanges!

sourceRanges!
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/10/2024 19:11:30'!
withRangesOf: nodeAtRange including: aPosition do: aBlock

	| currentNodeRange ranges |

	currentNodeRange := nodeAtRange value.
	ranges := currentNodeRange isInterval ifTrue: [ Array with: currentNodeRange ] ifFalse: [ currentNodeRange ].

	ranges do: [ :aRange | (aRange includes: aPosition) ifTrue: [ aBlock value: aRange ]].! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/10/2024 19:11:42' prior: 50557947!
m12 

| var |
var := 'Un string'.

var isString ifTrue:[var ].! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/10/2024 19:15:08' prior: 50557920!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges bn |
	self halt.
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	bn := self blockNodeFrom: sourceRanges in: aRange start.
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo .
	
! !

TypesWithContextAppliersTestMethods new perform: #m11.!

----SNAPSHOT----(10 July 2024 19:24:34) CuisUniversity-6169.image priorSource: 7231759!
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 16:17:03'!
blockNodeFrom: sourceRanges in: aPosition ifAbsent: aBlockClosure 

	| smallestRangeSize blockNodeWrappingAPosition |
	smallestRangeSize := SmallInteger maxVal.
	blockNodeWrappingAPosition := nil.
	
	sourceRanges associationsDo: [ :nodeAtRange |
		nodeAtRange key class = BlockNode ifTrue: [
				self withRangesOf: nodeAtRange including: aPosition do: [ :aRange | | currentNodeRangeSize |
					currentNodeRangeSize := aRange size.
					currentNodeRangeSize < smallestRangeSize ifTrue: [
						smallestRangeSize := currentNodeRangeSize.
						blockNodeWrappingAPosition := nodeAtRange key ]]
			]
		].
	
	^blockNodeWrappingAPosition
	
! !
!Browser methodsFor: 'as yet unclassified' stamp: 'JFGO 7/11/2024 16:17:03' prior: 50557976!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges bn |
	self halt.
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	bn := self blockNodeFrom: sourceRanges in: aRange start ifAbsent: aBlock.
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo .
	
! !

!methodRemoval: Browser #blockNodeFrom:in: stamp: 'JFGO 7/11/2024 16:17:03'!
blockNodeFrom: sourceRanges in: aPosition

	| smallestRangeSize blockNodeWrappingAPosition |
	smallestRangeSize := SmallInteger maxVal.
	blockNodeWrappingAPosition := nil.
	
	sourceRanges associationsDo: [ :nodeAtRange |
		nodeAtRange key class = BlockNode ifTrue: [
				self withRangesOf: nodeAtRange including: aPosition do: [ :aRange | | currentNodeRangeSize |
					currentNodeRangeSize := aRange size.
					currentNodeRangeSize < smallestRangeSize ifTrue: [
						smallestRangeSize := currentNodeRangeSize.
						blockNodeWrappingAPosition := nodeAtRange key ]]
			]
		].
	
	^blockNodeWrappingAPosition
	
!
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 16:17:12' prior: 50558001!
blockNodeFrom: sourceRanges in: aPosition ifAbsent: aBlockClosure 

	| smallestRangeSize blockNodeWrappingAPosition |
	smallestRangeSize := SmallInteger maxVal.
	blockNodeWrappingAPosition := nil.
	
	sourceRanges associationsDo: [ :nodeAtRange |
		nodeAtRange key class = BlockNode ifTrue: [
				self withRangesOf: nodeAtRange including: aPosition do: [ :aRange | | currentNodeRangeSize |
					currentNodeRangeSize := aRange size.
					currentNodeRangeSize < smallestRangeSize ifTrue: [
						smallestRangeSize := currentNodeRangeSize.
						blockNodeWrappingAPosition := nodeAtRange key ]]
			]
		].
	
	^blockNodeWrappingAPosition ifNil: aBlockClosure ifNotNil: [ blockNodeWrappingAPosition ].
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 16:19:06' prior: 50558024!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges bn blockNodeContext |
	self halt.
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	blockNodeContext := self blockNodeFrom: sourceRanges in: aRange start ifAbsent: [anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo ].
	
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:30:28' prior: 50558092!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges blockNodeContext |
	self halt.
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	blockNodeContext := self blockNodeFrom: sourceRanges in: aRange start ifAbsent: [anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo ].
	
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:32:42'!
blockNodeFrom: sourceRanges in: aPosition do: aBlockClosureWhenFound ifAbsent: aBlockClosure 

	| smallestRangeSize blockNodeWrappingAPosition |
	smallestRangeSize := SmallInteger maxVal.
	blockNodeWrappingAPosition := nil.
	
	sourceRanges associationsDo: [ :nodeAtRange |
		nodeAtRange key class = BlockNode ifTrue: [
				self withRangesOf: nodeAtRange including: aPosition do: [ :aRange | | currentNodeRangeSize |
					currentNodeRangeSize := aRange size.
					currentNodeRangeSize < smallestRangeSize ifTrue: [
						smallestRangeSize := currentNodeRangeSize.
						blockNodeWrappingAPosition := nodeAtRange key ]]
			]
		].
	
	^blockNodeWrappingAPosition ifNil: aBlockClosure ifNotNil: [ blockNodeWrappingAPosition ].
	
! !
!Browser methodsFor: 'as yet unclassified' stamp: 'JFGO 7/11/2024 18:32:42' prior: 50558114!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges blockNodeContext |
	self halt.
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	blockNodeContext := self blockNodeFrom: sourceRanges in: aRange start do: aBlock ifAbsent: [anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo ].
	
	
! !

!methodRemoval: Browser #blockNodeFrom:in:ifAbsent: stamp: 'JFGO 7/11/2024 18:32:42'!
blockNodeFrom: sourceRanges in: aPosition ifAbsent: aBlockClosure 

	| smallestRangeSize blockNodeWrappingAPosition |
	smallestRangeSize := SmallInteger maxVal.
	blockNodeWrappingAPosition := nil.
	
	sourceRanges associationsDo: [ :nodeAtRange |
		nodeAtRange key class = BlockNode ifTrue: [
				self withRangesOf: nodeAtRange including: aPosition do: [ :aRange | | currentNodeRangeSize |
					currentNodeRangeSize := aRange size.
					currentNodeRangeSize < smallestRangeSize ifTrue: [
						smallestRangeSize := currentNodeRangeSize.
						blockNodeWrappingAPosition := nodeAtRange key ]]
			]
		].
	
	^blockNodeWrappingAPosition ifNil: aBlockClosure ifNotNil: [ blockNodeWrappingAPosition ].
	
!
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:34:27' prior: 50558162!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges |
	self halt.
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	self blockNodeFrom: sourceRanges in: aRange start do: 
		[:aContextBlockNode | anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo] 
	ifAbsent: 
		[anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo ].
	
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:34:45'!
withBlockNodeFrom: sourceRanges in: aPosition do: aBlockClosureWhenFound ifAbsent: aBlockClosure 

	| smallestRangeSize blockNodeWrappingAPosition |
	smallestRangeSize := SmallInteger maxVal.
	blockNodeWrappingAPosition := nil.
	
	sourceRanges associationsDo: [ :nodeAtRange |
		nodeAtRange key class = BlockNode ifTrue: [
				self withRangesOf: nodeAtRange including: aPosition do: [ :aRange | | currentNodeRangeSize |
					currentNodeRangeSize := aRange size.
					currentNodeRangeSize < smallestRangeSize ifTrue: [
						smallestRangeSize := currentNodeRangeSize.
						blockNodeWrappingAPosition := nodeAtRange key ]]
			]
		].
	
	^blockNodeWrappingAPosition ifNil: aBlockClosure ifNotNil: [ blockNodeWrappingAPosition ].
	
! !
!Browser methodsFor: 'as yet unclassified' stamp: 'JFGO 7/11/2024 18:34:45' prior: 50558209!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges |
	self halt.
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	self withBlockNodeFrom: sourceRanges in: aRange start do: 
		[:aContextBlockNode | anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo] 
	ifAbsent: 
		[anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo ].
	
	
! !

!methodRemoval: Browser #blockNodeFrom:in:do:ifAbsent: stamp: 'JFGO 7/11/2024 18:34:45'!
blockNodeFrom: sourceRanges in: aPosition do: aBlockClosureWhenFound ifAbsent: aBlockClosure 

	| smallestRangeSize blockNodeWrappingAPosition |
	smallestRangeSize := SmallInteger maxVal.
	blockNodeWrappingAPosition := nil.
	
	sourceRanges associationsDo: [ :nodeAtRange |
		nodeAtRange key class = BlockNode ifTrue: [
				self withRangesOf: nodeAtRange including: aPosition do: [ :aRange | | currentNodeRangeSize |
					currentNodeRangeSize := aRange size.
					currentNodeRangeSize < smallestRangeSize ifTrue: [
						smallestRangeSize := currentNodeRangeSize.
						blockNodeWrappingAPosition := nodeAtRange key ]]
			]
		].
	
	^blockNodeWrappingAPosition ifNil: aBlockClosure ifNotNil: [ blockNodeWrappingAPosition ].
	
!

currentCompiledMethod typeInfoOfVariableNamed: aName!
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:44:53' prior: 50558259!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges |
	
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	self withBlockNodeFrom: sourceRanges in: aRange start do: 
		[:aContextBlockNode | anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo] 
	ifAbsent: 
		[anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo ].
	
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:47:42' prior: 50558311!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges |
	
	"typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]."
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	typeInfo := self withBlockNodeFrom: sourceRanges in: aRange start do: 
		[:aContextBlockNode | currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]] 
	ifAbsent: 
		[currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]. ].
	
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:48:18' prior: 50558335!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges |
	
	"typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]."
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	typeInfo := self withBlockNodeFrom: sourceRanges in: aRange start do: 
		[:aContextBlockNode | currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]] 
	ifAbsent: 
		[currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]. ].
	
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:49:13' prior: 50558362!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges |
	
	"typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]."
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	typeInfo := self withBlockNodeFrom: sourceRanges in: aRange start do: 
		[:aContextBlockNode | currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]] 
	ifAbsent: 
		[currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]. ].
	
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo.	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:53:14' prior: 50558391!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges |
	
	typeInfo := currentCompiledMethod ifNotNil: [ self typeInfoWhenCompiledMethdodExists].
	
	
	
	
	
	
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	typeInfo := self withBlockNodeFrom: sourceRanges in: aRange start do: 
		[:aContextBlockNode | currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]] 
	ifAbsent: 
		[currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]. ].
	
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo.	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:53:26' prior: 50558420!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo methodNode nodeEncoder sourceRanges |
	
	typeInfo := currentCompiledMethod ifNotNil: [ self typeInfoWhenCompiledMethdodExists].
	
	
	
	
	
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:53:43' prior: 50558448!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo |
	
	typeInfo := currentCompiledMethod ifNotNil: [ self typeInfoWhenCompiledMethdodExists].
	
	
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo.	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:55:02'!
typeInfoWhenCompiledMethdodExists
	
	
	
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:55:59' prior: 50558470!
typeInfoWhenCompiledMethdodExists
	
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:56:31' prior: 50558459!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo |
	
	typeInfo := currentCompiledMethod ifNotNil: [ self typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange].
	
	
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo.	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:56:43'!
typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange
	
	
! !

!methodRemoval: Browser #typeInfoWhenCompiledMethdodExists stamp: 'JFGO 7/11/2024 18:56:46'!
typeInfoWhenCompiledMethdodExists
	
	
!
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 18:57:11' prior: 50558492!
typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange
	
		
	
	| methodNode nodeEncoder sourceRanges typeInfo |
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	typeInfo := self withBlockNodeFrom: sourceRanges in: aRange start do: 
		[:aContextBlockNode | currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]] 
	ifAbsent: 
		[currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]. ].	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:00:29' prior: 50558502!
typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange
	
		
	
	| methodNode nodeEncoder sourceRanges typeInfo |
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	typeInfo := self withBlockNodeFrom: sourceRanges in: aRange start do: 
		[:aContextBlockNode | ^currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]] 
	ifAbsent: 
		[^currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]. 
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:00:47' prior: 50558525!
typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange
	
		
	
	| methodNode nodeEncoder sourceRanges typeInfo |
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	typeInfo := self withBlockNodeFrom: sourceRanges in: aRange start do: 
		[:aContextBlockNode | currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]] 
	ifAbsent: 
		[currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]. 
	^typeInfo.
! !
!Browser methodsFor: '*LiveTyping' stamp: 'HAW 12/4/2019 15:59:47' prior: 50557647 overrides: 16983606!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName  

	| typeInfo |
	
	typeInfo := currentCompiledMethod ifNotNil: [ currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]].
		
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo .
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:04:34' prior: 50558480!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo |
	self halt.
	typeInfo := currentCompiledMethod ifNotNil: [ self typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange].
	
	
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo.	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:07:25'!
variableNodeNamed: aVariableName on: aMethodNode

	|  nodeEncoder sourceRanges variableNode  |

	variableNode:=nil.
	
	nodeEncoder := aMethodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: aMethodNode sourceText.
	sourceRanges associationsDo: [ :nodeAtRange |
			nodeAtRange key name = aVariableName ifTrue: [
					variableNode:= nodeAtRange key.
				]
			].

	variableNode notNil ifTrue: [^variableNode].
	! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:07:35' prior: 50558592!
variableNodeNamed: aVariableName on: aMethodNode

	|  nodeEncoder sourceRanges variableNode  |

	variableNode:=nil.
	
	nodeEncoder := aMethodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: aMethodNode sourceText.
	sourceRanges associationsDo: [ :nodeAtRange |
			nodeAtRange key name = aVariableName ifTrue: [
					variableNode:= nodeAtRange key.
				]
			].

	^variableNode.
	! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:09:02'!
variableNodeNamed: aVariableName from: sourceRanges

	|  variableNode  |

	variableNode:=nil.
		
	sourceRanges associationsDo: [ :nodeAtRange |
			nodeAtRange key name = aVariableName ifTrue: [
					variableNode:= nodeAtRange key.
				]
			].

	^variableNode.
	! !

!methodRemoval: Browser #variableNodeNamed:on: stamp: 'JFGO 7/11/2024 19:09:07'!
variableNodeNamed: aVariableName on: aMethodNode

	|  nodeEncoder sourceRanges variableNode  |

	variableNode:=nil.
	
	nodeEncoder := aMethodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: aMethodNode sourceText.
	sourceRanges associationsDo: [ :nodeAtRange |
			nodeAtRange key name = aVariableName ifTrue: [
					variableNode:= nodeAtRange key.
				]
			].

	^variableNode.
	!
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:09:33' prior: 50558546!
typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange
	
		
	
	| methodNode nodeEncoder sourceRanges typeInfo variableNode |
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	variableNode := self variableNodeNamed: aName from: sourceRanges .
	typeInfo := self withBlockNodeFrom: sourceRanges in: aRange start do: 
		[:aContextBlockNode | currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]] 
	ifAbsent: 
		[currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]. 
	^typeInfo.
! !
!CompiledMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:13:59'!
typeInfoOfVariable: aVariableNode withNode: aMethodNode withinBlockNode: contextBlock 
	
	| types |
	types := (ContextAppliersMethodVisitor for: self with: aMethodNode on: aVariableNode within: contextBlock addingIncompleteTypeInfoTo: Set new) types.
	^types.
	! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:15:12' prior: 50558652!
typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange
	
		
	
	| methodNode nodeEncoder sourceRanges typeInfo variableNode |
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	variableNode := self variableNodeNamed: aName from: sourceRanges .
	typeInfo := self withBlockNodeFrom: sourceRanges in: aRange start do: 
		[:aContextBlockNode | currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: aContextBlockNode ] 
	ifAbsent: 
		[currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]. 
	^typeInfo.
! !
!CompiledMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:15:37' prior: 50558675!
typeInfoOfVariable: aVariableNode withNode: aMethodNode withinBlockNode: contextBlock 
	
	| types |
	types := (ContextAppliersMethodVisitor for: self with: aMethodNode on: aVariableNode within: contextBlock addingIncompleteTypeInfoTo: Set new) types.
	^types. "TODO. ESTO NO ES TYPE INFO"
	! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:18:03' prior: 50558687!
typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange
	
	
	| methodNode nodeEncoder sourceRanges typeInfo variableNode |
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	variableNode := self variableNodeNamed: aName from: sourceRanges .
	typeInfo := self withBlockNodeFrom: sourceRanges in: aRange start do: 
		[:aContextBlockNode | currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: aContextBlockNode ] 
	ifAbsent: 
		[currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]. 
	^typeInfo.
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:21:34' prior: 50558233!
withBlockNodeFrom: sourceRanges in: aPosition do: aBlockClosureWhenFound ifAbsent: aBlockClosure 

	| smallestRangeSize blockNodeWrappingAPosition |
	smallestRangeSize := SmallInteger maxVal.
	blockNodeWrappingAPosition := nil.
	
	sourceRanges associationsDo: [ :nodeAtRange |
		nodeAtRange key class = BlockNode ifTrue: [
				self withRangesOf: nodeAtRange including: aPosition do: [ :aRange | | currentNodeRangeSize |
					currentNodeRangeSize := aRange size.
					currentNodeRangeSize < smallestRangeSize ifTrue: [
						smallestRangeSize := currentNodeRangeSize.
						blockNodeWrappingAPosition := nodeAtRange key ]]
			]
		].
	
	blockNodeWrappingAPosition ifNil: aBlockClosure ifNotNil: [ aBlockClosureWhenFound value: blockNodeWrappingAPosition ].
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:21:38' prior: 50558750!
withBlockNodeFrom: sourceRanges in: aPosition do: aBlockClosureWhenFound ifAbsent: aBlockClosure 

	| smallestRangeSize blockNodeWrappingAPosition |
	smallestRangeSize := SmallInteger maxVal.
	blockNodeWrappingAPosition := nil.
	
	sourceRanges associationsDo: [ :nodeAtRange |
		nodeAtRange key class = BlockNode ifTrue: [
				self withRangesOf: nodeAtRange including: aPosition do: [ :aRange | | currentNodeRangeSize |
					currentNodeRangeSize := aRange size.
					currentNodeRangeSize < smallestRangeSize ifTrue: [
						smallestRangeSize := currentNodeRangeSize.
						blockNodeWrappingAPosition := nodeAtRange key ]]
			]
		].
	
	blockNodeWrappingAPosition ifNil: aBlockClosure 
	ifNotNil: [ aBlockClosureWhenFound value: blockNodeWrappingAPosition ].
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:22:11' prior: 50558725!
typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange
	
	
	| methodNode nodeEncoder sourceRanges typeInfo variableNode |
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	variableNode := self variableNodeNamed: aName from: sourceRanges .
	typeInfo := self withBlockNodeFrom: sourceRanges in: aRange start 
	do:  [:aContextBlockNode | currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: aContextBlockNode ] 
	ifAbsent: 
		[currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]]. 
	^typeInfo.
! !

currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]!
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:23:41' prior: 50558804!
typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange
	
	
	| methodNode nodeEncoder sourceRanges typeInfo variableNode |
	methodNode := currentCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	variableNode := self variableNodeNamed: aName from: sourceRanges .
	typeInfo := self withBlockNodeFrom: sourceRanges in: aRange start 
	do:  [:aContextBlockNode | currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: aContextBlockNode ] 
	ifAbsent: 
		[currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ].]. 
	^typeInfo.
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/11/2024 19:23:52' prior: 50558777!
withBlockNodeFrom: sourceRanges in: aPosition do: aBlockClosureWhenFound ifAbsent: aBlockClosure 

	| smallestRangeSize blockNodeWrappingAPosition |
	smallestRangeSize := SmallInteger maxVal.
	blockNodeWrappingAPosition := nil.
	
	sourceRanges associationsDo: [ :nodeAtRange |
		nodeAtRange key class = BlockNode ifTrue: [
				self withRangesOf: nodeAtRange including: aPosition do: [ :aRange | | currentNodeRangeSize |
					currentNodeRangeSize := aRange size.
					currentNodeRangeSize < smallestRangeSize ifTrue: [
						smallestRangeSize := currentNodeRangeSize.
						blockNodeWrappingAPosition := nodeAtRange key ]]
			]
		].
	
	^blockNodeWrappingAPosition ifNil: aBlockClosure 
	ifNotNil: [ aBlockClosureWhenFound value: blockNodeWrappingAPosition ].
	
! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/11/2024 19:24:23' prior: 50557942!
m11 

| var |
var := 'Un string'.

var ! !

TypesWithContextAppliersTestMethods new perform: #m12.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/11/2024 19:24:49' prior: 50557970!
m12 

| var |
var := nil.

var isString ifTrue:[var ].! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/11/2024 19:25:58' prior: 50558891!
m12 

| var |
var := nil.

var isString ifTrue:[var  ].
var isInteger ifTrue:[var  ].! !

----SNAPSHOT----(11 July 2024 19:30:45) CuisUniversity-6169.image priorSource: 7243114!

----SNAPSHOT----(11 July 2024 19:33:47) CuisUniversity-6169.image priorSource: 7272056!
!SmalltalkCompleter methodsFor: 'entries' stamp: 'JFGO 7/12/2024 09:43:25' prior: 50557667 overrides: 16784541!
computeEntries

	| allSource source contextClass specificModel separator fragmentStart fragmentEnd done |
self halt.
	specificModel := self textProviderOrModel.
	contextClass := self selectedClassOrMetaClassIn: specificModel.

	allSource := self allSource.
	(specificModel is: #CodeProvider)
		ifTrue: [source := allSource copyFrom: 1 to: position]
		ifFalse: [
			separator := String newLineString, String newLineString.
			fragmentStart := 1.
			done := false.
			[done] whileFalse: [
				fragmentEnd := allSource
					indexOfSubCollection: separator
					startingAt: fragmentStart
					ifAbsent: [allSource size].
				fragmentEnd >= position ifTrue: [
					source := allSource copyFrom: fragmentStart to: position.
					done := true ].
				fragmentStart := fragmentEnd+separator size ]].

	allRanges := self parse: source in: contextClass and: specificModel.
	currentRange := allRanges lastIfEmpty: [ ^entries := #() ].
	possibleInvalidSelectors := #().

	currentRange end = source size
		ifTrue: [ self computeEntriesOfMessageOrIdentifiersFor: source in: contextClass and: specificModel ]
	 	ifFalse: [ self computeMessageEntriesWithEmptyPrefixFor: source in: contextClass and: specificModel ].

	! !

----QUIT----(15 July 2024 17:57:52) CuisUniversity-6169.image priorSource: 7272145!

----STARTUP---- (15 July 2024 17:58:24) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/15/2024 18:33:17' prior: 50558831!
typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange
	
	
	| methodNode |
	methodNode := currentCompiledMethod methodNode.
	methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[].
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/15/2024 18:37:28' prior: 50558956!
typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange
	
	
	| methodNode blockNodeContext nodeEncoder sourceRanges variableNode |
	methodNode := currentCompiledMethod methodNode.
	blockNodeContext:=methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[^currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ].].
	
	
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	variableNode := self variableNodeNamed: aName from: sourceRanges .
	^currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: blockNodeContext.
! !
!MethodNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/15/2024 19:09:18'!
variableNodeNamed: aVariableName

	|  variableNode  sourceRanges |

	variableNode:=nil.
	sourceRanges := self completeSourceRanges.
	sourceRanges associationsDo: [ :nodeAtRange |
			nodeAtRange key name = aVariableName ifTrue: [
					variableNode:= nodeAtRange key.
				]
			].

	^variableNode.
	! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/15/2024 19:10:11' prior: 50558966!
typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange
	
	
	| methodNode blockNodeContext variableNode |
	methodNode := currentCompiledMethod methodNode.
	blockNodeContext:=methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[^currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ].].
		
	variableNode := methodNode variableNodeNamed: aName.
	^currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: blockNodeContext.
! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/15/2024 19:12:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/15/2024 19:12:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/15/2024 19:12:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/15/2024 19:12:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 7/15/2024 19:12:06'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'methods and block nodes' stamp: 'JFGO 7/15/2024 19:13:10' prior: 50537824!
withMessageName: aMethodSelector calculateTypesOfNode: aVariableNodeName withinBlockWithCode: aStringBlockNode asserting: anAssertionBlock
	| compiledMethod blockToTest types variableNode methodNode |

	compiledMethod := self withPerformingCompiledMethodName: aMethodSelector.
	methodNode := compiledMethod methodNode.
	
	blockToTest := self blockNodeWithSourceCode: aStringBlockNode on: methodNode.
	"variableNode := self variableNodeNamed: aVariableNodeName on: methodNode ."
	variableNode := methodNode variableNodeNamed: aVariableNodeName.

	types := compiledMethod typesOfVariableNamed: variableNode withNode: methodNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	anAssertionBlock value: types.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/15/2024 19:14:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 7/15/2024 19:14:10'!
PASSED!

!methodRemoval: TypesWithContextAppliersTest #variableNodeNamed:on: stamp: 'JFGO 7/15/2024 19:14:19'!
variableNodeNamed: aVariableName on: aMethodNode

	|  nodeEncoder sourceRanges variableNode  |

	variableNode:=nil.
	
	nodeEncoder := aMethodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: aMethodNode sourceText.
	sourceRanges associationsDo: [ :nodeAtRange |
			nodeAtRange key name = aVariableName ifTrue: [
					variableNode:= nodeAtRange key.
				]
			].

	variableNode notNil ifTrue: [^variableNode].
	self failWith: 'Variable node not found'.!
!TypesWithContextAppliersTest methodsFor: 'methods and block nodes' stamp: 'JFGO 7/15/2024 19:14:26' prior: 50559327!
withMessageName: aMethodSelector calculateTypesOfNode: aVariableNodeName withinBlockWithCode: aStringBlockNode asserting: anAssertionBlock
	| compiledMethod blockToTest types variableNode methodNode |

	compiledMethod := self withPerformingCompiledMethodName: aMethodSelector.
	methodNode := compiledMethod methodNode.
	
	blockToTest := self blockNodeWithSourceCode: aStringBlockNode on: methodNode.
	variableNode := methodNode variableNodeNamed: aVariableNodeName.

	types := compiledMethod typesOfVariableNamed: variableNode withNode: methodNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	anAssertionBlock value: types.! !

----SNAPSHOT----(15 July 2024 19:18:31) CuisUniversity-6169.image priorSource: 7273556!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/16/2024 18:27:07' prior: 50558897!
m12 

| var |
var := Date today.

var isString ifTrue:[var ].
var isInteger ifTrue:[var  ].! !

TypesWithContextAppliersTestMethods new perform: #m12.!

typeInfo!
!CompiledMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/16/2024 18:48:53' prior: 50558712!
typeInfoOfVariable: aVariableNode withNode: aMethodNode withinBlockNode: contextBlock 
	
	| types |
	types := (ContextAppliersMethodVisitor for: self with: aMethodNode on: aVariableNode within: contextBlock addingIncompleteTypeInfoTo: Set new) types.
	^MethodVariableTypeInfo of: aVariableNode name in: self are: types
	
	! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/16/2024 18:54:20' prior: 50559705!
m12 

| var |
var := Date today.

var isString ifTrue:[var ].
var isInteger ifTrue:[var  ].! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/16/2024 19:22:05' prior: 50559728!
m12 

| var |
var := Date today.

var isString ifTrue:[var ].
var isInteger ifTrue:[var  ].! !

!classDefinition: #TypesWithContextAppliersTestMethods category: #'LiveTypingTypeChecker-ContextAppliers-Tests' stamp: 'JFGO 7/16/2024 19:25:04'!
Object subclass: #TypesWithContextAppliersTestMethods
	instanceVariableNames: 'instance1 vInstance vAutcomplete'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers-Tests'!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/16/2024 19:25:02' overrides: 16932297!
initialize
"THIS CAN BE DELETED"
vAutcomplete := 'testing'.
! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/16/2024 19:29:44' prior: 50559735!
m12 

vAutcomplete.! !

TypesWithContextAppliersTestMethods new perform: #m12.!
!SmalltalkCompleter methodsFor: 'message entries - private' stamp: 'JFGO 7/16/2024 19:32:01' prior: 50557820!
computeMessageEntriesFor: allSource in: contextClass and: specificModel  
	
	| id rangeType |

	canShowSelectorDocumentation := true.
	id := allSource copyFrom: currentRange start to: currentRange end.
	rangeType := currentRange rangeType.

	rangeType == #globalVar
		ifTrue: [ ^self computeMessageEntriesForClass: (Smalltalk at: id asSymbol) class ].
	rangeType == #self
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass ].
	rangeType == #super
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass superclass ].
	rangeType == #true 
		ifTrue: [ ^self computeMessageEntriesForClass: True ].
	rangeType == #false
		ifTrue: [ ^self computeMessageEntriesForClass: False ].
	rangeType == #nil
		ifTrue: [ ^self computeMessageEntriesForClass: UndefinedObject ].
	rangeType == #character
		ifTrue: [ ^self computeMessageEntriesForClass: (id first asciiValue ifNotNil: [Character] ifNil: [UnicodeCodePoint]) ].
	rangeType == #number
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #string
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #symbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #stringSymbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #instVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofInstVarNamed: id inRange: currentRange ].
	rangeType == #methodArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id ].
	rangeType == #tempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id inRange: currentRange ].
	rangeType == #blockArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockArgNamed: id ].
	rangeType == #blockTempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockTempVarNamed: id ].
	rangeType == #workspaceVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (specificModel classOfWorkspaceVarNamed: id) ].
	rangeType == #thisContext
		ifTrue: [ ^self computeMessageEntriesForClass: (specificModel classOfThisContext) ]. 
	rangeType == #classVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	rangeType == #poolConstant
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	(rangeType beginsWith: #blockEnd)
		ifTrue: [ ^self computeMessageEntriesForClass: BlockClosure ].
	rangeType == #arrayEnd
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	(rangeType beginsWith: #rightBrace)
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	rangeType == #unary
		ifTrue: [ ^self computeEntriesOfUnaryMessageReturnNamed: id ].
	(rangeType beginsWith: #rightParenthesis)
		ifTrue: [ ^self computeMessageEntriesOfEnclosedExpressionReturn].
	rangeType == #cascadeSeparator
		ifTrue: [ ^self computeMessageEntriesOfCascadeReceiver]. 

	self computeMessageEntriesForUnknowClass 
	
	! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/16/2024 19:32:13'!
computeMessageEntriesIn: aLiveTypingSmalltalkCompleter ofInstVarNamed: id inRange: aCurrentRange 
	self shouldBeImplemented.! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/16/2024 19:39:27' prior: 50559866!
computeMessageEntriesIn: anAutocompleter ofInstVarNamed: aName inRange: aCurrentRange 
	| typeInfo |
	
	typeInfo := self selectedClassOrMetaClass 
		ifNotNil: [ :selected |  selected typeInfoOfInstanceVariableNamed: aName ifAbsent: [ nil ] ].
		
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo ! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/16/2024 19:39:36' prior: 50559873!
computeMessageEntriesIn: anAutocompleter ofInstVarNamed: aName inRange: aCurrentRange 
	| typeInfo |
	self halt.
	typeInfo := self selectedClassOrMetaClass 
		ifNotNil: [ :selected |  selected typeInfoOfInstanceVariableNamed: aName ifAbsent: [ nil ] ].
		
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo ! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/16/2024 19:43:20' prior: 50559886!
computeMessageEntriesIn: anAutocompleter ofInstVarNamed: aName inRange: aRange 
	| typeInfo |
	self halt.
	typeInfo := self selectedClassOrMetaClass 
		ifNotNil: [ :selected |  selected typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange ].
		
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo ! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/16/2024 19:44:21' prior: 50559900!
computeMessageEntriesIn: anAutocompleter ofInstVarNamed: aName inRange: aRange 
	| typeInfo |
	self halt.
	typeInfo := self selectedClassOrMetaClass 
		ifNotNil: [ :selected |  currentCompiledMethod typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange ].
		
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo ! !

----SNAPSHOT----(16 July 2024 19:44:49) CuisUniversity-6169.image priorSource: 7297591!

sourceRanges keys!
!SmalltalkCompleter methodsFor: 'message entries - private' stamp: 'JFGO 7/17/2024 17:43:47' prior: 50559766!
computeMessageEntriesFor: allSource in: contextClass and: specificModel  
	
	| id rangeType |

	canShowSelectorDocumentation := true.
	id := allSource copyFrom: currentRange start to: currentRange end.
	rangeType := currentRange rangeType.

	rangeType == #globalVar
		ifTrue: [ ^self computeMessageEntriesForClass: (Smalltalk at: id asSymbol) class ].
	rangeType == #self
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass ].
	rangeType == #super
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass superclass ].
	rangeType == #true 
		ifTrue: [ ^self computeMessageEntriesForClass: True ].
	rangeType == #false
		ifTrue: [ ^self computeMessageEntriesForClass: False ].
	rangeType == #nil
		ifTrue: [ ^self computeMessageEntriesForClass: UndefinedObject ].
	rangeType == #character
		ifTrue: [ ^self computeMessageEntriesForClass: (id first asciiValue ifNotNil: [Character] ifNil: [UnicodeCodePoint]) ].
	rangeType == #number
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #string
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #symbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #stringSymbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #instVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id inRange: currentRange ].
	rangeType == #methodArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id ].
	rangeType == #tempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id inRange: currentRange ].
	rangeType == #blockArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockArgNamed: id ].
	rangeType == #blockTempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockTempVarNamed: id ].
	rangeType == #workspaceVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (specificModel classOfWorkspaceVarNamed: id) ].
	rangeType == #thisContext
		ifTrue: [ ^self computeMessageEntriesForClass: (specificModel classOfThisContext) ]. 
	rangeType == #classVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	rangeType == #poolConstant
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	(rangeType beginsWith: #blockEnd)
		ifTrue: [ ^self computeMessageEntriesForClass: BlockClosure ].
	rangeType == #arrayEnd
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	(rangeType beginsWith: #rightBrace)
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	rangeType == #unary
		ifTrue: [ ^self computeEntriesOfUnaryMessageReturnNamed: id ].
	(rangeType beginsWith: #rightParenthesis)
		ifTrue: [ ^self computeMessageEntriesOfEnclosedExpressionReturn].
	rangeType == #cascadeSeparator
		ifTrue: [ ^self computeMessageEntriesOfCascadeReceiver]. 

	self computeMessageEntriesForUnknowClass 
	
	! !

completeSourceRanges associations!

currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]!
!SmalltalkCompleter methodsFor: 'message entries - private' stamp: 'JFGO 7/17/2024 17:48:17' prior: 50559932!
computeMessageEntriesFor: allSource in: contextClass and: specificModel  
	
	| id rangeType |

	canShowSelectorDocumentation := true.
	id := allSource copyFrom: currentRange start to: currentRange end.
	rangeType := currentRange rangeType.

	rangeType == #globalVar
		ifTrue: [ ^self computeMessageEntriesForClass: (Smalltalk at: id asSymbol) class ].
	rangeType == #self
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass ].
	rangeType == #super
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass superclass ].
	rangeType == #true 
		ifTrue: [ ^self computeMessageEntriesForClass: True ].
	rangeType == #false
		ifTrue: [ ^self computeMessageEntriesForClass: False ].
	rangeType == #nil
		ifTrue: [ ^self computeMessageEntriesForClass: UndefinedObject ].
	rangeType == #character
		ifTrue: [ ^self computeMessageEntriesForClass: (id first asciiValue ifNotNil: [Character] ifNil: [UnicodeCodePoint]) ].
	rangeType == #number
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #string
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #symbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #stringSymbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #instVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofInstVarNamed: id inRange: currentRange ].
	rangeType == #methodArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id ].
	rangeType == #tempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id inRange: currentRange ].
	rangeType == #blockArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockArgNamed: id ].
	rangeType == #blockTempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockTempVarNamed: id ].
	rangeType == #workspaceVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (specificModel classOfWorkspaceVarNamed: id) ].
	rangeType == #thisContext
		ifTrue: [ ^self computeMessageEntriesForClass: (specificModel classOfThisContext) ]. 
	rangeType == #classVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	rangeType == #poolConstant
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	(rangeType beginsWith: #blockEnd)
		ifTrue: [ ^self computeMessageEntriesForClass: BlockClosure ].
	rangeType == #arrayEnd
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	(rangeType beginsWith: #rightBrace)
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	rangeType == #unary
		ifTrue: [ ^self computeEntriesOfUnaryMessageReturnNamed: id ].
	(rangeType beginsWith: #rightParenthesis)
		ifTrue: [ ^self computeMessageEntriesOfEnclosedExpressionReturn].
	rangeType == #cascadeSeparator
		ifTrue: [ ^self computeMessageEntriesOfCascadeReceiver]. 

	self computeMessageEntriesForUnknowClass 
	
	! !
!SmalltalkCompleter methodsFor: 'entries' stamp: 'JFGO 7/17/2024 17:54:24' prior: 50558909 overrides: 16784541!
computeEntries

	| allSource source contextClass specificModel separator fragmentStart fragmentEnd done |

	specificModel := self textProviderOrModel.
	contextClass := self selectedClassOrMetaClassIn: specificModel.

	allSource := self allSource.
	(specificModel is: #CodeProvider)
		ifTrue: [source := allSource copyFrom: 1 to: position]
		ifFalse: [
			separator := String newLineString, String newLineString.
			fragmentStart := 1.
			done := false.
			[done] whileFalse: [
				fragmentEnd := allSource
					indexOfSubCollection: separator
					startingAt: fragmentStart
					ifAbsent: [allSource size].
				fragmentEnd >= position ifTrue: [
					source := allSource copyFrom: fragmentStart to: position.
					done := true ].
				fragmentStart := fragmentEnd+separator size ]].

	allRanges := self parse: source in: contextClass and: specificModel.
	currentRange := allRanges lastIfEmpty: [ ^entries := #() ].
	possibleInvalidSelectors := #().

	currentRange end = source size
		ifTrue: [ self computeEntriesOfMessageOrIdentifiersFor: source in: contextClass and: specificModel ]
	 	ifFalse: [ self computeMessageEntriesWithEmptyPrefixFor: source in: contextClass and: specificModel ].

	! !
!SmalltalkCompleter methodsFor: 'message entries - private' stamp: 'JFGO 7/17/2024 17:54:42' prior: 50560036!
computeMessageEntriesFor: allSource in: contextClass and: specificModel  
	
	| id rangeType |
	self halt.
	canShowSelectorDocumentation := true.
	id := allSource copyFrom: currentRange start to: currentRange end.
	rangeType := currentRange rangeType.

	rangeType == #globalVar
		ifTrue: [ ^self computeMessageEntriesForClass: (Smalltalk at: id asSymbol) class ].
	rangeType == #self
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass ].
	rangeType == #super
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass superclass ].
	rangeType == #true 
		ifTrue: [ ^self computeMessageEntriesForClass: True ].
	rangeType == #false
		ifTrue: [ ^self computeMessageEntriesForClass: False ].
	rangeType == #nil
		ifTrue: [ ^self computeMessageEntriesForClass: UndefinedObject ].
	rangeType == #character
		ifTrue: [ ^self computeMessageEntriesForClass: (id first asciiValue ifNotNil: [Character] ifNil: [UnicodeCodePoint]) ].
	rangeType == #number
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #string
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #symbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #stringSymbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #instVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofInstVarNamed: id inRange: currentRange ].
	rangeType == #methodArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id ].
	rangeType == #tempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id inRange: currentRange ].
	rangeType == #blockArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockArgNamed: id ].
	rangeType == #blockTempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockTempVarNamed: id ].
	rangeType == #workspaceVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (specificModel classOfWorkspaceVarNamed: id) ].
	rangeType == #thisContext
		ifTrue: [ ^self computeMessageEntriesForClass: (specificModel classOfThisContext) ]. 
	rangeType == #classVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	rangeType == #poolConstant
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	(rangeType beginsWith: #blockEnd)
		ifTrue: [ ^self computeMessageEntriesForClass: BlockClosure ].
	rangeType == #arrayEnd
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	(rangeType beginsWith: #rightBrace)
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	rangeType == #unary
		ifTrue: [ ^self computeEntriesOfUnaryMessageReturnNamed: id ].
	(rangeType beginsWith: #rightParenthesis)
		ifTrue: [ ^self computeMessageEntriesOfEnclosedExpressionReturn].
	rangeType == #cascadeSeparator
		ifTrue: [ ^self computeMessageEntriesOfCascadeReceiver]. 

	self computeMessageEntriesForUnknowClass 
	
	! !

currentCompiledMethod typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange!
!SmalltalkCompleter methodsFor: 'message entries - private' stamp: 'JFGO 7/17/2024 17:56:48' prior: 50560178!
computeMessageEntriesFor: allSource in: contextClass and: specificModel  
	
	| id rangeType |
	self halt.
	canShowSelectorDocumentation := true.
	id := allSource copyFrom: currentRange start to: currentRange end.
	rangeType := currentRange rangeType.

	rangeType == #globalVar
		ifTrue: [ ^self computeMessageEntriesForClass: (Smalltalk at: id asSymbol) class ].
	rangeType == #self
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass ].
	rangeType == #super
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass superclass ].
	rangeType == #true 
		ifTrue: [ ^self computeMessageEntriesForClass: True ].
	rangeType == #false
		ifTrue: [ ^self computeMessageEntriesForClass: False ].
	rangeType == #nil
		ifTrue: [ ^self computeMessageEntriesForClass: UndefinedObject ].
	rangeType == #character
		ifTrue: [ ^self computeMessageEntriesForClass: (id first asciiValue ifNotNil: [Character] ifNil: [UnicodeCodePoint]) ].
	rangeType == #number
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #string
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #symbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #stringSymbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #instVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id inRange: currentRange ].
	rangeType == #methodArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id ].
	rangeType == #tempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id inRange: currentRange ].
	rangeType == #blockArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockArgNamed: id ].
	rangeType == #blockTempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockTempVarNamed: id ].
	rangeType == #workspaceVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (specificModel classOfWorkspaceVarNamed: id) ].
	rangeType == #thisContext
		ifTrue: [ ^self computeMessageEntriesForClass: (specificModel classOfThisContext) ]. 
	rangeType == #classVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	rangeType == #poolConstant
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	(rangeType beginsWith: #blockEnd)
		ifTrue: [ ^self computeMessageEntriesForClass: BlockClosure ].
	rangeType == #arrayEnd
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	(rangeType beginsWith: #rightBrace)
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	rangeType == #unary
		ifTrue: [ ^self computeEntriesOfUnaryMessageReturnNamed: id ].
	(rangeType beginsWith: #rightParenthesis)
		ifTrue: [ ^self computeMessageEntriesOfEnclosedExpressionReturn].
	rangeType == #cascadeSeparator
		ifTrue: [ ^self computeMessageEntriesOfCascadeReceiver]. 

	self computeMessageEntriesForUnknowClass 
	
	! !
!SmalltalkCompleter methodsFor: 'message entries - private' stamp: 'JFGO 7/17/2024 17:57:36' prior: 50560282!
computeMessageEntriesFor: allSource in: contextClass and: specificModel  
	
	| id rangeType |
	self halt.
	canShowSelectorDocumentation := true.
	id := allSource copyFrom: currentRange start to: currentRange end.
	rangeType := currentRange rangeType.

	rangeType == #globalVar
		ifTrue: [ ^self computeMessageEntriesForClass: (Smalltalk at: id asSymbol) class ].
	rangeType == #self
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass ].
	rangeType == #super
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass superclass ].
	rangeType == #true 
		ifTrue: [ ^self computeMessageEntriesForClass: True ].
	rangeType == #false
		ifTrue: [ ^self computeMessageEntriesForClass: False ].
	rangeType == #nil
		ifTrue: [ ^self computeMessageEntriesForClass: UndefinedObject ].
	rangeType == #character
		ifTrue: [ ^self computeMessageEntriesForClass: (id first asciiValue ifNotNil: [Character] ifNil: [UnicodeCodePoint]) ].
	rangeType == #number
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #string
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #symbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #stringSymbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #instVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofInstVarNamed: id inRange: currentRange ].
	rangeType == #methodArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id ].
	rangeType == #tempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id inRange: currentRange ].
	rangeType == #blockArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockArgNamed: id ].
	rangeType == #blockTempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockTempVarNamed: id ].
	rangeType == #workspaceVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (specificModel classOfWorkspaceVarNamed: id) ].
	rangeType == #thisContext
		ifTrue: [ ^self computeMessageEntriesForClass: (specificModel classOfThisContext) ]. 
	rangeType == #classVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	rangeType == #poolConstant
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	(rangeType beginsWith: #blockEnd)
		ifTrue: [ ^self computeMessageEntriesForClass: BlockClosure ].
	rangeType == #arrayEnd
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	(rangeType beginsWith: #rightBrace)
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	rangeType == #unary
		ifTrue: [ ^self computeEntriesOfUnaryMessageReturnNamed: id ].
	(rangeType beginsWith: #rightParenthesis)
		ifTrue: [ ^self computeMessageEntriesOfEnclosedExpressionReturn].
	rangeType == #cascadeSeparator
		ifTrue: [ ^self computeMessageEntriesOfCascadeReceiver]. 

	self computeMessageEntriesForUnknowClass 
	
	! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/17/2024 17:57:48' prior: 50559914!
computeMessageEntriesIn: anAutocompleter ofInstVarNamed: aName inRange: aRange 
	| typeInfo |
	self halt.
	typeInfo := self selectedClassOrMetaClass 
		ifNotNil: [ :selected |  self typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange ].
		
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo ! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 18:05:42' prior: 50559760!
m12 

vAutcomplete ! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/17/2024 18:07:16'!
typeInfoWhenCompiledMethdodExistsForInstVarNamed: aName inRange:aRange withClass: aClass
	
	
	| methodNode blockNodeContext variableNode |
	methodNode := currentCompiledMethod methodNode.
	blockNodeContext:=methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[^currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ].].
		
	variableNode := methodNode variableNodeNamed: aName.
	^currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: blockNodeContext.
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/17/2024 18:07:54'!
typeInfoForInstVarNamed: aName inRange:aRange withClass: aClass
	
	
	| methodNode blockNodeContext variableNode |
	methodNode := currentCompiledMethod methodNode.
	blockNodeContext:=methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[^currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ].].
		
	variableNode := methodNode variableNodeNamed: aName.
	^currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: blockNodeContext.
! !

!methodRemoval: Browser #typeInfoWhenCompiledMethdodExistsForInstVarNamed:inRange:withClass: stamp: 'JFGO 7/17/2024 18:07:54'!
typeInfoWhenCompiledMethdodExistsForInstVarNamed: aName inRange:aRange withClass: aClass
	
	
	| methodNode blockNodeContext variableNode |
	methodNode := currentCompiledMethod methodNode.
	blockNodeContext:=methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[^currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ].].
		
	variableNode := methodNode variableNodeNamed: aName.
	^currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: blockNodeContext.
!
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/17/2024 18:08:19'!
typeInfoForTempVarNamed: aName inRange:aRange
	
	
	| methodNode blockNodeContext variableNode |
	methodNode := currentCompiledMethod methodNode.
	blockNodeContext:=methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[^currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ].].
		
	variableNode := methodNode variableNodeNamed: aName.
	^currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: blockNodeContext.
! !
!Browser methodsFor: 'as yet unclassified' stamp: 'JFGO 7/17/2024 18:08:19' prior: 50560484!
computeMessageEntriesIn: anAutocompleter ofInstVarNamed: aName inRange: aRange 
	| typeInfo |
	self halt.
	typeInfo := self selectedClassOrMetaClass 
		ifNotNil: [ :selected |  self typeInfoForTempVarNamed: aName inRange:aRange ].
		
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo ! !
!Browser methodsFor: 'as yet unclassified' stamp: 'JFGO 7/17/2024 18:08:19' prior: 50558579!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo |
	self halt.
	typeInfo := currentCompiledMethod ifNotNil: [ self typeInfoForTempVarNamed: aName inRange:aRange].
	
	
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo.	
! !

!methodRemoval: Browser #typeInfoWhenCompiledMethdodExistsForTempVarNamed:inRange: stamp: 'JFGO 7/17/2024 18:08:19'!
typeInfoWhenCompiledMethdodExistsForTempVarNamed: aName inRange:aRange
	
	
	| methodNode blockNodeContext variableNode |
	methodNode := currentCompiledMethod methodNode.
	blockNodeContext:=methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[^currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ].].
		
	variableNode := methodNode variableNodeNamed: aName.
	^currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: blockNodeContext.
!
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/17/2024 18:08:55' prior: 50560578!
computeMessageEntriesIn: anAutocompleter ofInstVarNamed: aName inRange: aRange 
	| typeInfo |
	self halt.
	typeInfo := self selectedClassOrMetaClass 
		ifNotNil: [ :selected |  self typeInfoForInstVarNamed: aName inRange:aRange withClass: selected ].
		
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo ! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/17/2024 18:09:32' prior: 50560521!
typeInfoForInstVarNamed: aName inRange:aRange withClass: aClass
	
	
	| methodNode blockNodeContext variableNode |
	methodNode := currentCompiledMethod methodNode.
	blockNodeContext:=methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[^aClass typeInfoOfInstanceVariableNamed: aName ifAbsent: [ nil ].].
		
	variableNode := methodNode variableNodeNamed: aName.
	^currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: blockNodeContext.
! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 18:14:41' prior: 50560498!
m12 

vAutcomplete ! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 18:15:16' prior: 50559754 overrides: 16932297!
initialize
"THIS CAN BE DELETED"
vAutcomplete := Date today.
! !

TypesWithContextAppliersTestMethods new perform: #m12.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 18:16:37' prior: 50560656!
m12 

vAutcomplete class = Date ifTrue:[] ! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 18:16:47' prior: 50560670!
m12 

vAutcomplete class = Date ifTrue:[vAutcomplete] ! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 18:20:05' prior: 50560676!
m12 

vAutcomplete class = Date ifTrue:[vAutcomplete ] ! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 18:21:24' prior: 50560682!
m12 
|vTemp|
vTemp := nil.
vAutcomplete class = Date ifTrue:[vAutcomplete ] .
vTemp class = Date ifTrue:[vTemp  ] ! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/17/2024 18:40:29'!
typeInfoForNamed: aName inRange:aRange ifNoContextDo: aBlock
	
	
	| methodNode blockNodeContext variableNode |
	methodNode := currentCompiledMethod methodNode.
	blockNodeContext:=methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[^currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ].].
		
	variableNode := methodNode variableNodeNamed: aName.
	^currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: blockNodeContext.
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/17/2024 18:40:50' prior: 50560695!
typeInfoForNamed: aName inRange:aRange ifNoContextDo: aBlock
	
	
	| methodNode blockNodeContext variableNode |
	methodNode := currentCompiledMethod methodNode.
	blockNodeContext:=methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[^aBlock value].
		
	variableNode := methodNode variableNodeNamed: aName.
	^currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: blockNodeContext.
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/17/2024 18:41:35' prior: 50560560!
typeInfoForTempVarNamed: aName inRange:aRange
	
	
	self typeInfoForNamed: aName inRange: aRange ifNoContextDo: [^currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ].].
		
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/17/2024 18:41:39' prior: 50560731!
typeInfoForTempVarNamed: aName inRange:aRange
	
	
	^self typeInfoForNamed: aName inRange: aRange ifNoContextDo: [^currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ].].
		
	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/17/2024 18:41:51'!
typeInfoForVarNamed: aName inRange:aRange ifNoContextDo: aBlock
	
	
	| methodNode blockNodeContext variableNode |
	methodNode := currentCompiledMethod methodNode.
	blockNodeContext:=methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[^aBlock value].
		
	variableNode := methodNode variableNodeNamed: aName.
	^currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: blockNodeContext.
! !
!Browser methodsFor: 'as yet unclassified' stamp: 'JFGO 7/17/2024 18:41:51' prior: 50560741!
typeInfoForTempVarNamed: aName inRange:aRange
	
	
	^self typeInfoForVarNamed: aName inRange: aRange ifNoContextDo: [^currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ].].
		
	
! !

!methodRemoval: Browser #typeInfoForNamed:inRange:ifNoContextDo: stamp: 'JFGO 7/17/2024 18:41:51'!
typeInfoForNamed: aName inRange:aRange ifNoContextDo: aBlock
	
	
	| methodNode blockNodeContext variableNode |
	methodNode := currentCompiledMethod methodNode.
	blockNodeContext:=methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[^aBlock value].
		
	variableNode := methodNode variableNodeNamed: aName.
	^currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: blockNodeContext.
!
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/17/2024 18:42:18' prior: 50560637!
typeInfoForInstVarNamed: aName inRange:aRange withClass: aClass
	
	
	^self typeInfoForVarNamed: aName inRange: aRange ifNoContextDo: [^aClass typeInfoOfInstanceVariableNamed: aName ifAbsent: [ nil ].].
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/17/2024 18:46:27' prior: 50560623!
computeMessageEntriesIn: anAutocompleter ofInstVarNamed: aName inRange: aRange 
	| typeInfo |
	
	typeInfo := self selectedClassOrMetaClass 
		ifNotNil: [ :selected |  self typeInfoForInstVarNamed: aName inRange:aRange withClass: selected ].
		
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo ! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/17/2024 18:46:34' prior: 50560591!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo |
	
	typeInfo := currentCompiledMethod ifNotNil: [ self typeInfoForTempVarNamed: aName inRange:aRange].
	
	
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo.	
! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 18:51:37' prior: 50560688!
m12 
|vTemp|
vTemp := nil.
vAutcomplete class = Date ifTrue:[vAutcomplete  ] .
vTemp class = Date ifTrue:[vTemp ] ! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 18:51:48'!
mWithArgs: anArg
|vTemp|
vTemp := nil.
vAutcomplete class = Date ifTrue:[vAutcomplete  ] .
vTemp class = Date ifTrue:[vTemp ] ! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 18:53:04' prior: 50560836!
mWithArgs: anArg

! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 18:53:28' prior: 50560829!
m12 
|vTemp|
vTemp := nil.
vAutcomplete class = Date ifTrue:[vAutcomplete  ] .
vTemp class = Date ifTrue:[vTemp ] .
self mWithArgs: 'testing'.! !

TypesWithContextAppliersTestMethods new perform: #m12.!

TypesWithContextAppliersTestMethods new perform: #mWithArgs.!

TypesWithContextAppliersTestMethods new perform: #mWithArgs:.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 18:58:23' prior: 50560844!
mWithArgs: anArg

anArg.
anArg class = Date ifTrue:[anArg].! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 18:58:48' prior: 50560864!
mWithArgs: anArg

anArg .
anArg class = Date ifTrue:[anArg].! !

TypesWithContextAppliersTestMethods new perform: #m12.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 19:00:43' prior: 50560870!
mWithArgs: anArg

anArg .
anArg class = Date ifTrue:[anArg ].! !
!SmalltalkCompleter methodsFor: 'message entries - private' stamp: 'JFGO 7/17/2024 19:01:08' prior: 50560383!
computeMessageEntriesFor: allSource in: contextClass and: specificModel  
	
	| id rangeType |
	self halt.
	canShowSelectorDocumentation := true.
	id := allSource copyFrom: currentRange start to: currentRange end.
	rangeType := currentRange rangeType.

	rangeType == #globalVar
		ifTrue: [ ^self computeMessageEntriesForClass: (Smalltalk at: id asSymbol) class ].
	rangeType == #self
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass ].
	rangeType == #super
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass superclass ].
	rangeType == #true 
		ifTrue: [ ^self computeMessageEntriesForClass: True ].
	rangeType == #false
		ifTrue: [ ^self computeMessageEntriesForClass: False ].
	rangeType == #nil
		ifTrue: [ ^self computeMessageEntriesForClass: UndefinedObject ].
	rangeType == #character
		ifTrue: [ ^self computeMessageEntriesForClass: (id first asciiValue ifNotNil: [Character] ifNil: [UnicodeCodePoint]) ].
	rangeType == #number
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #string
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #symbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #stringSymbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #instVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofInstVarNamed: id inRange: currentRange ].
	rangeType == #methodArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id inRange: currentRange ].
	rangeType == #tempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id inRange: currentRange ].
	rangeType == #blockArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockArgNamed: id ].
	rangeType == #blockTempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockTempVarNamed: id ].
	rangeType == #workspaceVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (specificModel classOfWorkspaceVarNamed: id) ].
	rangeType == #thisContext
		ifTrue: [ ^self computeMessageEntriesForClass: (specificModel classOfThisContext) ]. 
	rangeType == #classVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	rangeType == #poolConstant
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	(rangeType beginsWith: #blockEnd)
		ifTrue: [ ^self computeMessageEntriesForClass: BlockClosure ].
	rangeType == #arrayEnd
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	(rangeType beginsWith: #rightBrace)
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	rangeType == #unary
		ifTrue: [ ^self computeEntriesOfUnaryMessageReturnNamed: id ].
	(rangeType beginsWith: #rightParenthesis)
		ifTrue: [ ^self computeMessageEntriesOfEnclosedExpressionReturn].
	rangeType == #cascadeSeparator
		ifTrue: [ ^self computeMessageEntriesOfCascadeReceiver]. 

	self computeMessageEntriesForUnknowClass 
	
	! !

TypesWithContextAppliersTestMethods new perform: #m12.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/17/2024 19:11:05' prior: 50560878!
mWithArgs: anArg

anArg .
anArg class = Date ifTrue:[|vBlockTemp| vBlockTemp := 'hola'. vBlockTemp ].
! !

currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ]!

----SNAPSHOT----(17 July 2024 19:22:15) CuisUniversity-6169.image priorSource: 7304856!
!SmalltalkCompleter methodsFor: 'message entries - private' stamp: 'JFGO 7/18/2024 16:34:25' prior: 50560884!
computeMessageEntriesFor: allSource in: contextClass and: specificModel  
	
	| id rangeType |
	
	canShowSelectorDocumentation := true.
	id := allSource copyFrom: currentRange start to: currentRange end.
	rangeType := currentRange rangeType.

	rangeType == #globalVar
		ifTrue: [ ^self computeMessageEntriesForClass: (Smalltalk at: id asSymbol) class ].
	rangeType == #self
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass ].
	rangeType == #super
		ifTrue: [ ^self computeMessageEntriesForClass: contextClass superclass ].
	rangeType == #true 
		ifTrue: [ ^self computeMessageEntriesForClass: True ].
	rangeType == #false
		ifTrue: [ ^self computeMessageEntriesForClass: False ].
	rangeType == #nil
		ifTrue: [ ^self computeMessageEntriesForClass: UndefinedObject ].
	rangeType == #character
		ifTrue: [ ^self computeMessageEntriesForClass: (id first asciiValue ifNotNil: [Character] ifNil: [UnicodeCodePoint]) ].
	rangeType == #number
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #string
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #symbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #stringSymbol
		ifTrue: [ ^self computeMessageEntriesForClass: (self classOfLiteral: id in: contextClass) ].
	rangeType == #instVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofInstVarNamed: id inRange: currentRange ].
	rangeType == #methodArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id inRange: currentRange ].
	rangeType == #tempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofTempVarNamed: id inRange: currentRange ].
	rangeType == #blockArg
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockArgNamed: id ].
	rangeType == #blockTempVar
		ifTrue: [ ^specificModel computeMessageEntriesIn: self ofBlockTempVarNamed: id ].
	rangeType == #workspaceVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (specificModel classOfWorkspaceVarNamed: id) ].
	rangeType == #thisContext
		ifTrue: [ ^self computeMessageEntriesForClass: (specificModel classOfThisContext) ]. 
	rangeType == #classVar
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	rangeType == #poolConstant
		ifTrue: [ ^self computeMessageEntriesForClassOrNil: (self classOfLocalBindingNamed: id in: contextClass) ].
	(rangeType beginsWith: #blockEnd)
		ifTrue: [ ^self computeMessageEntriesForClass: BlockClosure ].
	rangeType == #arrayEnd
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	(rangeType beginsWith: #rightBrace)
		ifTrue: [ ^self computeMessageEntriesForClass: Array ].
	rangeType == #unary
		ifTrue: [ ^self computeEntriesOfUnaryMessageReturnNamed: id ].
	(rangeType beginsWith: #rightParenthesis)
		ifTrue: [ ^self computeMessageEntriesOfEnclosedExpressionReturn].
	rangeType == #cascadeSeparator
		ifTrue: [ ^self computeMessageEntriesOfCascadeReceiver]. 

	self computeMessageEntriesForUnknowClass 
	
	! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/18/2024 16:38:54' prior: 50560816!
computeMessageEntriesIn: anAutocompleter ofTempVarNamed: aName inRange: aRange

	| typeInfo |
	
	typeInfo := currentCompiledMethod ifNotNil: [ self typeInfoForTempVarNamed: aName inRange:aRange].
		
	anAutocompleter computeMessageEntriesForTypeInfoOrNil: typeInfo.	
! !
!Browser methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 7/18/2024 16:39:22'!
typeInfoForVarNamed: aName inRange:aRange ifNoContextFoundDo: aBlock
	
	
	| methodNode blockNodeContext variableNode |
	methodNode := currentCompiledMethod methodNode.
	blockNodeContext:=methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[^aBlock value].
		
	variableNode := methodNode variableNodeNamed: aName.
	^currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: blockNodeContext.
! !
!Browser methodsFor: 'as yet unclassified' stamp: 'JFGO 7/18/2024 16:39:22' prior: 50560793!
typeInfoForInstVarNamed: aName inRange:aRange withClass: aClass
	
	
	^self typeInfoForVarNamed: aName inRange: aRange ifNoContextFoundDo: [^aClass typeInfoOfInstanceVariableNamed: aName ifAbsent: [ nil ].].
! !
!Browser methodsFor: 'as yet unclassified' stamp: 'JFGO 7/18/2024 16:39:22' prior: 50560767!
typeInfoForTempVarNamed: aName inRange:aRange
	
	
	^self typeInfoForVarNamed: aName inRange: aRange ifNoContextFoundDo: [^currentCompiledMethod typeInfoOfVariableNamed: aName ifAbsent: [ nil ].].
		
	
! !

!methodRemoval: Browser #typeInfoForVarNamed:inRange:ifNoContextDo: stamp: 'JFGO 7/18/2024 16:39:22'!
typeInfoForVarNamed: aName inRange:aRange ifNoContextDo: aBlock
	
	
	| methodNode blockNodeContext variableNode |
	methodNode := currentCompiledMethod methodNode.
	blockNodeContext:=methodNode parseBlockNodeWhenBranchIsIn: aRange start ifAbsent:[^aBlock value].
		
	variableNode := methodNode variableNodeNamed: aName.
	^currentCompiledMethod typeInfoOfVariable: variableNode withNode: methodNode withinBlockNode: blockNodeContext.
!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/18/2024 16:40:22' prior: 50560988!
mWithArgs: anArg

anArg class = Date ifTrue:[anArg].
anArg class = String ifTrue:[anArg].

! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/18/2024 16:42:03' prior: 50561166!
mWithArgs: anArg

anArg class = Date ifTrue:[anArg ].
anArg class = String ifTrue:[anArg].

! !

TypesWithContextAppliersTestMethods new perform: #m12.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/18/2024 16:43:04' prior: 50561173!
mWithArgs: anArg

anArg class = Date ifTrue:[anArg ].
anArg class = String ifTrue:[anArg].

! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/18/2024 16:43:38' prior: 50560849!
m12 
|vTemp vTemp2 |
vTemp := nil.
vAutcomplete class = Date ifTrue:[vAutcomplete  ] .
vTemp class = Date ifTrue:[vTemp ] .
self mWithArgs: 'testing'.

vTemp2:='hola'.
vTemp2:= OrderedCollection new.! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/18/2024 16:43:54' prior: 50561189!
m12 
|vTemp vTemp2 |
vTemp := nil.
vAutcomplete class = Date ifTrue:[vAutcomplete  ] .
vTemp class = Date ifTrue:[vTemp ] .
self mWithArgs: 'testing'.

vTemp2:='hola'.
vTemp2:= OrderedCollection new.

vTemp2 ! !

TypesWithContextAppliersTestMethods new perform: #m12.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/18/2024 16:44:27' prior: 50561200!
m12 
|vTemp vTemp2 |
vTemp := nil.
vAutcomplete class = Date ifTrue:[vAutcomplete  ] .
vTemp class = Date ifTrue:[vTemp ] .
self mWithArgs: 'testing'.

vTemp2:='hola'.
vTemp2:= OrderedCollection new.

vTemp2 ! !

!methodRemoval: Browser #variableNodeNamed:from: stamp: 'JFGO 7/18/2024 16:45:24'!
variableNodeNamed: aVariableName from: sourceRanges

	|  variableNode  |

	variableNode:=nil.
		
	sourceRanges associationsDo: [ :nodeAtRange |
			nodeAtRange key name = aVariableName ifTrue: [
					variableNode:= nodeAtRange key.
				]
			].

	^variableNode.
	!

!methodRemoval: Browser #withBlockNodeFrom:in:do:ifAbsent: stamp: 'JFGO 7/18/2024 16:55:59'!
withBlockNodeFrom: sourceRanges in: aPosition do: aBlockClosureWhenFound ifAbsent: aBlockClosure 

	| smallestRangeSize blockNodeWrappingAPosition |
	smallestRangeSize := SmallInteger maxVal.
	blockNodeWrappingAPosition := nil.
	
	sourceRanges associationsDo: [ :nodeAtRange |
		nodeAtRange key class = BlockNode ifTrue: [
				self withRangesOf: nodeAtRange including: aPosition do: [ :aRange | | currentNodeRangeSize |
					currentNodeRangeSize := aRange size.
					currentNodeRangeSize < smallestRangeSize ifTrue: [
						smallestRangeSize := currentNodeRangeSize.
						blockNodeWrappingAPosition := nodeAtRange key ]]
			]
		].
	
	^blockNodeWrappingAPosition ifNil: aBlockClosure 
	ifNotNil: [ aBlockClosureWhenFound value: blockNodeWrappingAPosition ].
	
!

!methodRemoval: Browser #withRangesOf:including:do: stamp: 'JFGO 7/18/2024 16:56:30'!
withRangesOf: nodeAtRange including: aPosition do: aBlock

	| currentNodeRange ranges |

	currentNodeRange := nodeAtRange value.
	ranges := currentNodeRange isInterval ifTrue: [ Array with: currentNodeRange ] ifFalse: [ currentNodeRange ].

	ranges do: [ :aRange | (aRange includes: aPosition) ifTrue: [ aBlock value: aRange ]].!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/18/2024 16:56:56' prior: 50558884!
m11 

| var |
var := 'Un string'.

var ! !

TypesWithContextAppliersTestMethods new perform: #m11.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/18/2024 16:57:14' prior: 50561274!
m11 

| var |
var := 'Un string'.

var  ! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 7/18/2024 16:57:44' prior: 50561213!
m12 
|vTemp vTemp2 |
vTemp := nil.
vAutcomplete class = Date ifTrue:[vAutcomplete  ] .
vTemp class = Date ifTrue:[vTemp ] .
self mWithArgs: 'testing'.

vTemp2:='hola'.
vTemp2:= OrderedCollection new.

vTemp2 ! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/18/2024 17:03:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test47ManyDisjunctionCollectsEachOneAndRejectsRemaining stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test48ManyConjunctionCollectsCommonTypesAndRejectsRemaining stamp: 'JFGO 7/18/2024 17:03:33'!
PASSED!