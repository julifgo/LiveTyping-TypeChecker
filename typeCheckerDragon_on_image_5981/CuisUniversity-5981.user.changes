

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (13 October 2023 18:58:38) as C:\Users\jgutierrez\OneDrive - HEXACTA S.A\Julian\isw1\Tesis\04_image_5981\CuisUniversity-5981.image!


Object subclass: #TypeCheckerDragon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!

!classDefinition: #TypeCheckerDragon category: 'LiveTypingDragon-TypeCheckingDragon' stamp: 'JFGO 10/13/2023 19:09:18'!
Object subclass: #TypeCheckerDragon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!

TestCase subclass: #TypeCheckerDragonTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon-Tests'!

!classDefinition: #TypeCheckerDragonTest category: 'LiveTypingDragon-TypeCheckingDragon-Tests' stamp: 'JFGO 10/13/2023 19:11:32'!
TestCase subclass: #TypeCheckerDragonTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon-Tests'!

Object subclass: #TypeCheckerDragonTestMethods
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon-Tests'!

!classDefinition: #TypeCheckerDragonTestMethods category: 'LiveTypingDragon-TypeCheckingDragon-Tests' stamp: 'JFGO 10/13/2023 19:11:46'!
Object subclass: #TypeCheckerDragonTestMethods
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon-Tests'!
!TypeCheckerDragonTestMethods methodsFor: 'no messages' stamp: 'JFGO 10/13/2023 19:13:06'!
emptyMethodEnableTyping
	"Actually, by default type checking will be enabled. Disable it manually from outside. Method name is for declarativity purposes"! !
!TypeCheckerDragonTest methodsFor: 'nil' stamp: 'JFGO 10/13/2023 19:13:23' overrides: 16961394!
setUp
	"Ensure that always this method initializes with live typing enabled. See test01 and test02"
	(TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping) initializeTypeInformation.
	
	! !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 10/13/2023 19:15:47'!
test01EmptyMethodDoesNotGenerateAlerts

	| methodToCheck typeChecker |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping.
	
	typeChecker := methodToCheck typeCheckDragon.
	
	self deny: typeChecker hasAlerts.
	! !

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 10/13/2023 19:16:02'!
ERROR!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 10/13/2023 19:17:25' prior: 50650385!
test01EmptyMethodDoesNotGenerateAlerts

	| methodToCheck typeChecker |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping.
	
	typeChecker := methodToCheck typeCheckDragon.
	
	self deny: typeChecker hasAlerts.
! !

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 10/13/2023 19:17:26'!
ERROR!
!CompiledMethod methodsFor: '*TypeChecking' stamp: 'JFGO 10/13/2023 19:17:40'!
typeCheckDragon
	self shouldBeImplemented.! !
!CompiledMethod methodsFor: '*TypeChecking' stamp: 'JFGO 10/13/2023 19:18:03' prior: 50650414!
typeCheckDragon
	! !

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 10/13/2023 19:18:06'!
ERROR!
!CompiledMethod methodsFor: '*TypeChecking' stamp: 'JFGO 10/13/2023 19:20:57' prior: 50650419!
typeCheckDragon
	^TypeCheckerDragon new.! !

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 10/13/2023 19:21:04'!
ERROR!
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 10/13/2023 19:21:33'!
hasAlerts
	self shouldBeImplemented.! !
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 10/13/2023 19:21:40' prior: 50650435!
hasAlerts
	^false.! !

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 10/13/2023 19:21:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 10/13/2023 19:21:42'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 10/13/2023 19:23:08'!
test02MethodThatDontCheckTypesGeneratesWarning

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping.
	methodToCkeck removeProperties .
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	"self assert: (typeChecker alerts anyOne isKindOf: TypeCheckingDragonWarning)."
	! !

!classDefinition: #TypeCheckerDragonAlert category: 'LiveTypingDragon-TypeCheckingDragon' stamp: 'JFGO 10/13/2023 19:23:49'!
Object subclass: #TypeCheckerDragonAlert
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 10/13/2023 19:23:37' prior: 50650451!
test02MethodThatDontCheckTypesGeneratesWarning

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping.
	methodToCkeck removeProperties .
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	self assert: (typeChecker alerts anyOne isKindOf: TypeCheckerDragonAlert).
	! !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 10/13/2023 19:24:04'!
test02MethodThatDontCheckTypesGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping.
	methodToCkeck removeProperties .
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	self assert: (typeChecker alerts anyOne isKindOf: TypeCheckerDragonAlert).
	! !

!methodRemoval: TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesWarning stamp: 'JFGO 10/13/2023 19:24:04'!
test02MethodThatDontCheckTypesGeneratesWarning

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping.
	methodToCkeck removeProperties .
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	self assert: (typeChecker alerts anyOne isKindOf: TypeCheckerDragonAlert).
	!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:24:36'!
FAILURE!
!CompiledMethod methodsFor: '*TypeChecking' stamp: 'JFGO 10/13/2023 19:31:33' prior: 50650427!
typeCheckDragon
	^(TypeCheckerDragon for: self) perform.! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:31:34'!
ERROR!
!TypeCheckerDragon class methodsFor: 'instance creation' stamp: 'JFGO 10/13/2023 19:31:41'!
for: aCompiledMethod 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCompiledMethod ! !
!TypeCheckerDragon class methodsFor: 'instance creation' stamp: 'JFGO 10/13/2023 19:31:50' prior: 50650538!
for: aCompiledMethod 
	^self new initializeFor: aCompiledMethod ! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:31:53'!
ERROR!

!classDefinition: #TypeCheckerDragon category: 'LiveTypingDragon-TypeCheckingDragon' stamp: 'JFGO 10/13/2023 19:32:06'!
Object subclass: #TypeCheckerDragon
	instanceVariableNames: 'compiledMethod'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!
!TypeCheckerDragon methodsFor: 'initialization' stamp: 'JFGO 10/13/2023 19:32:06'!
initializeFor: aCompiledMethod 
	self shouldBeImplemented.
	compiledMethod := aCompiledMethod.! !
!TypeCheckerDragon methodsFor: 'initialization' stamp: 'JFGO 10/13/2023 19:32:23' prior: 50650565!
initializeFor: aCompiledMethod 
	compiledMethod := aCompiledMethod asMethodReference.! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:32:24'!
ERROR!
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 10/13/2023 19:32:37'!
perform
	self shouldBeImplemented.! !
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 10/13/2023 19:32:54' prior: 50650582!
perform
	self typeCheck.
	^self.! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:32:55'!
ERROR!
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 10/13/2023 19:33:01'!
typeCheck
	self shouldBeImplemented.! !
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 10/13/2023 19:35:03' prior: 50650595!
typeCheck
	compiledMethod isAnnotatingTypes 
		ifTrue: [self typeCheckWhenDisabledTyping] 
		ifFalse: [ self typeCheckWhenDisabledTyping]! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:35:07'!
ERROR!
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 10/13/2023 19:35:24' prior: 50650600!
typeCheck
	compiledMethod isAnnotatingTypes 
		ifTrue: [self typeCheckWhenEnabledTyping] 
		ifFalse: [ self typeCheckWhenDisabledTyping]! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:35:27'!
ERROR!
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 10/13/2023 19:36:35'!
typeCheckWhenDisabledTyping
	^self generateAlertWithMessage: 'Method has live typing disabled'.! !
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 10/13/2023 19:36:58'!
typeCheckWhenEnabledTyping
	! !

!classDefinition: #TypeCheckerDragon category: 'LiveTypingDragon-TypeCheckingDragon' stamp: 'JFGO 10/13/2023 19:37:56'!
Object subclass: #TypeCheckerDragon
	instanceVariableNames: 'compiledMethod alerts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 10/13/2023 19:37:53'!
generateAlertWithMessage: anAlertMessage
	alerts add: (TypeCheckerDragonAlert new).! !
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 10/13/2023 19:38:10' prior: 50650440!
hasAlerts
	^alerts size > 0.! !
!TypeCheckerDragon methodsFor: 'initialization' stamp: 'JFGO 10/13/2023 19:38:30' prior: 50650572!
initializeFor: aCompiledMethod 
	compiledMethod := aCompiledMethod asMethodReference.
	alerts := OrderedCollection new.! !

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 10/13/2023 19:38:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:38:56'!
ERROR!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:38:56'!
ERROR!
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 10/13/2023 19:39:09'!
alerts
	self shouldBeImplemented.
	^alerts! !
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 10/13/2023 19:39:24' prior: 50650671!
alerts
	^alerts.! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:39:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 10/13/2023 19:39:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:39:29'!
PASSED!
!TypeCheckerDragon methodsFor: 'alerts' stamp: 'JFGO 10/13/2023 19:40:33' prior: 50650642!
generateAlertWithMessage: anAlertMessage
	alerts add: (TypeCheckerDragonAlert for: compiledMethod withMessage: anAlertMessage).! !

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 10/13/2023 19:40:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:40:41'!
ERROR!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:40:41'!
ERROR!
!TypeCheckerDragonAlert class methodsFor: 'instance creation' stamp: 'JFGO 10/13/2023 19:40:49'!
for: aCompiledMethod withMessage: anAlertMessage 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCompiledMethod withMessage: anAlertMessage ! !
!TypeCheckerDragonAlert class methodsFor: 'instance creation' stamp: 'JFGO 10/13/2023 19:41:03' prior: 50650710!
for: aCompiledMethod withMessage: anAlertMessage 
	^self new initializeFor: aCompiledMethod withMessage: anAlertMessage ! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:41:06'!
ERROR!

!classDefinition: #TypeCheckerDragonAlert category: 'LiveTypingDragon-TypeCheckingDragon' stamp: 'JFGO 10/13/2023 19:41:14'!
Object subclass: #TypeCheckerDragonAlert
	instanceVariableNames: 'compiledMethod'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!

!classDefinition: #TypeCheckerDragonAlert category: 'LiveTypingDragon-TypeCheckingDragon' stamp: 'JFGO 10/13/2023 19:41:14'!
Object subclass: #TypeCheckerDragonAlert
	instanceVariableNames: 'compiledMethod alertMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!
!TypeCheckerDragonAlert methodsFor: 'initialization' stamp: 'JFGO 10/13/2023 19:41:14'!
initializeFor: aCompiledMethod withMessage: anAlertMessage 
	self shouldBeImplemented.
	compiledMethod := aCompiledMethod.
	alertMessage := anAlertMessage.! !
!TypeCheckerDragonAlert methodsFor: 'initialization' stamp: 'JFGO 10/13/2023 19:41:23' prior: 50650751!
initializeFor: aCompiledMethod withMessage: anAlertMessage 
	compiledMethod := aCompiledMethod.
	alertMessage := anAlertMessage.! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/13/2023 19:41:25'!
PASSED!

1 size!

1 date!

5 factorial !

'5' factorial !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 10/13/2023 19:49:16'!
methodWithMessageNotUnderstood
	'120' factorial.! !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 10/13/2023 19:50:10'!
test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping.
	methodToCkeck removeProperties .
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	self assert: (typeChecker alerts anyOne isKindOf: TypeCheckerDragonAlert).
	! !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 10/13/2023 19:50:21' prior: 50650778!
test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	self assert: (typeChecker alerts anyOne isKindOf: TypeCheckerDragonAlert).
	! !

TypeCheckerDragonTestMethods new methodWithMessageNotUnderstood !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 10/13/2023 19:51:54' prior: 50650795!
test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	self assert: (typeChecker alerts anyOne isKindOf: TypeCheckerDragonAlert).
	"PEDIR MAS INFO SOBRE LA ALERTA".
	"ES ALERTA? TAL VEZ ES ERROR. Luego entre polimorfismo de mensajes de errores, warnings y alertas se arma la JERARQUIA de alerta".	! !

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 10/13/2023 19:51:59'!
FAILURE!

----SNAPSHOT----(13 October 2023 19:52:10) CuisUniversity-5981.image priorSource: 10197292!

----QUIT----(13 October 2023 19:52:21) CuisUniversity-5981.image priorSource: 10213983!

----STARTUP---- (14 October 2023 19:17:33) as C:\Users\jgutierrez\OneDrive - HEXACTA S.A\Julian\isw1\Tesis\04_image_5981\CuisUniversity-5981.image!


method := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.!
!TypeCheckerDragonTestMethods class methodsFor: 'no messages' stamp: 'JFGO 10/14/2023 19:21:44'!
printASTOn: aCompiledMethod 
	
	| stream |
	stream := String writeStream.
	
	aCompiledMethod methodNode nodePrintOn: stream indent: 0.
	^stream! !

TypeCheckerDragonTestMethods printASTOn: method!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 10/14/2023 19:23:45'!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	self assert: (typeChecker alerts anyOne isKindOf: TypeCheckerDragonAlert).
	"PEDIR MAS INFO SOBRE LA ALERTA".
	"ES ALERTA? TAL VEZ ES ERROR. Luego entre polimorfismo de mensajes de errores, warnings y alertas se arma la JERARQUIA de alerta".	! !

!methodRemoval: TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 10/14/2023 19:23:45'!
test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	self assert: (typeChecker alerts anyOne isKindOf: TypeCheckerDragonAlert).
	"PEDIR MAS INFO SOBRE LA ALERTA".
	"ES ALERTA? TAL VEZ ES ERROR. Luego entre polimorfismo de mensajes de errores, warnings y alertas se arma la JERARQUIA de alerta".	!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 10/14/2023 19:24:00'!
testXXMethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	self assert: (typeChecker alerts anyOne isKindOf: TypeCheckerDragonAlert).
	"PEDIR MAS INFO SOBRE LA ALERTA".
	"ES ALERTA? TAL VEZ ES ERROR. Luego entre polimorfismo de mensajes de errores, warnings y alertas se arma la JERARQUIA de alerta".	! !

!methodRemoval: TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 10/14/2023 19:24:00'!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	self assert: (typeChecker alerts anyOne isKindOf: TypeCheckerDragonAlert).
	"PEDIR MAS INFO SOBRE LA ALERTA".
	"ES ALERTA? TAL VEZ ES ERROR. Luego entre polimorfismo de mensajes de errores, warnings y alertas se arma la JERARQUIA de alerta".	!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 10/14/2023 19:24:11' prior: 50650902!
testXXMethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	"| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	self assert: (typeChecker alerts anyOne isKindOf: TypeCheckerDragonAlert)."
	"PEDIR MAS INFO SOBRE LA ALERTA".
	"ES ALERTA? TAL VEZ ES ERROR. Luego entre polimorfismo de mensajes de errores, warnings y alertas se arma la JERARQUIA de alerta".	! !

!testRun: #TypeCheckerDragonTest #testXXMethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 10/14/2023 19:24:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 10/14/2023 19:24:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 10/14/2023 19:24:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #testXXMethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 10/14/2023 19:24:12'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 10/14/2023 19:24:39'!
test03MethodWithLiteralNodeDoesNotGenerateAlerts

	| methodToCheck typeChecker |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping.
	
	typeChecker := methodToCheck typeCheckDragon.
	
	self deny: typeChecker hasAlerts.
! !

----SNAPSHOT----(14 October 2023 19:31:48) CuisUniversity-5981.image priorSource: 10214076!

!methodRemoval: TypeCheckerDragonTest #test03MethodWithLiteralNodeDoesNotGenerateAlerts stamp: 'JFGO 10/16/2023 17:31:08'!
test03MethodWithLiteralNodeDoesNotGenerateAlerts

	| methodToCheck typeChecker |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping.
	
	typeChecker := methodToCheck typeCheckDragon.
	
	self deny: typeChecker hasAlerts.
!
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 10/16/2023 17:32:43'!
m1: aNumber
	| v1 |
	v1:=5.
	^v1 + aNumber.! !
!TypeCheckerDragonTestMethods methodsFor: 'DELETE THIS' stamp: 'JFGO 10/16/2023 17:34:07'!
m2
	| v2 v3 |
	v2:=  120.
	v3 := v2 + 45.
	^v3.! !
!TypeCheckerDragonTestMethods methodsFor: 'DELETE THIS' stamp: 'JFGO 10/16/2023 17:34:24' prior: 50651013!
m2
	| v2 v3 |
	v2:=  self m1: 120.
	v3 := v2 + 45.
	^v3.! !

TypeCheckerDragonTestMethods printASTOn: method !

method := TypeCheckerDragonTestMethods >> #m1:. !

TypeCheckerDragonTestMethods printASTOn: method!

TypeCheckerDragonTestMethods printASTOn: method!

method := TypeCheckerDragonTestMethods >> #m2. !

TypeCheckerDragonTestMethods printASTOn: method!
!TypeCheckerDragonTestMethods methodsFor: 'DELETE THIS' stamp: 'JFGO 10/16/2023 17:47:23'!
m3
	45 + 'hola'.! !

method := TypeCheckerDragonTestMethods >> #m3. !

TypeCheckerDragonTestMethods printASTOn: method!

TypeCheckerDragonTestMethods new!

TypeCheckerDragonTestMethods new m3!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 10/16/2023 17:52:18'!
test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	"| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	self assert: (typeChecker alerts anyOne isKindOf: TypeCheckerDragonAlert)."
	"PEDIR MAS INFO SOBRE LA ALERTA".
	"ES ALERTA? TAL VEZ ES ERROR. Luego entre polimorfismo de mensajes de errores, warnings y alertas se arma la JERARQUIA de alerta".	! !

!methodRemoval: TypeCheckerDragonTest #testXXMethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 10/16/2023 17:52:18'!
testXXMethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	"| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	self assert: (typeChecker alerts anyOne isKindOf: TypeCheckerDragonAlert)."
	"PEDIR MAS INFO SOBRE LA ALERTA".
	"ES ALERTA? TAL VEZ ES ERROR. Luego entre polimorfismo de mensajes de errores, warnings y alertas se arma la JERARQUIA de alerta".	!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 10/16/2023 17:53:29' prior: 50651042!
test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	self assert: (typeChecker alerts anyOne isKindOf: TypeCheckerDragonAlert).
	"PEDIR MAS INFO SOBRE LA ALERTA".
	"ES ALERTA? TAL VEZ ES ERROR. Luego entre polimorfismo de mensajes de errores, warnings y alertas se arma la JERARQUIA de alerta".	! !

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 10/16/2023 17:55:45'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 10/16/2023 17:55:46'!
FAILURE!

ParseNodeVisitor subclass: #TypeCheckerDragonMethodVisitor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!

!classDefinition: #TypeCheckerDragonMethodVisitor category: 'LiveTypingDragon-TypeCheckingDragon' stamp: 'JFGO 10/16/2023 18:01:59'!
ParseNodeVisitor subclass: #TypeCheckerDragonMethodVisitor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!
!TypeCheckerDragonMethodVisitor class methodsFor: 'nil' stamp: 'JFGO 10/16/2023 18:03:29'!
s! !

!methodRemoval: TypeCheckerDragonMethodVisitor class #s stamp: 'JFGO 10/16/2023 18:03:31'!
s!
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 10/16/2023 18:04:08' prior: 50650629!
typeCheckWhenEnabledTyping
	(TypeCheckerDragonMethodVisitor for: compiledMethod) value.
	"return??"! !

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 10/16/2023 18:04:32'!
ERROR!
!TypeCheckerDragonMethodVisitor class methodsFor: 'instance creation' stamp: 'JFGO 10/16/2023 18:04:39'!
for: aCompiledMethod 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCompiledMethod ! !
!TypeCheckerDragonMethodVisitor class methodsFor: 'instance creation' stamp: 'JFGO 10/16/2023 18:04:46' prior: 50651148!
for: aCompiledMethod 
	self new initializeFor: aCompiledMethod ! !
!TypeCheckerDragonMethodVisitor class methodsFor: 'instance creation' stamp: 'JFGO 10/16/2023 18:04:48' prior: 50651157!
for: aCompiledMethod 
	^self new initializeFor: aCompiledMethod ! !

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 10/16/2023 18:04:50'!
ERROR!

!classDefinition: #TypeCheckerDragonMethodVisitor category: 'LiveTypingDragon-TypeCheckingDragon' stamp: 'JFGO 10/16/2023 18:05:02'!
ParseNodeVisitor subclass: #TypeCheckerDragonMethodVisitor
	instanceVariableNames: 'compiledMethod'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!
!TypeCheckerDragonMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 10/16/2023 18:05:02'!
initializeFor: aCompiledMethod 
	self shouldBeImplemented.
	compiledMethod := aCompiledMethod.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 10/16/2023 18:05:10' prior: 50651183!
initializeFor: aCompiledMethod 
	compiledMethod := aCompiledMethod.! !

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 10/16/2023 18:05:13'!
FAILURE!
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 10/16/2023 18:21:21' prior: 50651137!
typeCheckWhenEnabledTyping
	(TypeCheckerDragonMethodVisitor for: compiledMethod) visit.
	"return??"! !
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 10/16/2023 18:21:52' prior: 50651200!
typeCheckWhenEnabledTyping
	(TypeCheckerDragonMethodVisitor for: compiledMethod) visit.
	"return??"! !

!classDefinition: #TypeCheckerDragonMethodVisitor category: 'LiveTypingDragon-TypeCheckingDragon' stamp: 'JFGO 10/16/2023 18:23:52'!
ParseNodeVisitor subclass: #TypeCheckerDragonMethodVisitor
	instanceVariableNames: 'compiledMethod methodNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!
!TypeCheckerDragonMethodVisitor methodsFor: 'evaluating' stamp: 'JFGO 10/16/2023 18:23:50'!
visit
	self visitMethodNode: methodNode.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 10/16/2023 18:24:10' prior: 50651190!
initializeFor: aCompiledMethod 
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 10/16/2023 18:24:49' overrides: 16906943!
visitBlockNode: aBlockNode
	! !

aBlockNode!

self statements first!

self statements first!

self statements second!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 10/16/2023 18:38:52' prior: 50651236 overrides: 16906943!
visitBlockNode: aBlockNode
	"Por ahora, no hay evidencia de necesitar hacer algo más que visitar los statements del bloque, que lo hace super. De ser asi definitivamente, este mensaje no tiene razon de ser reimplementado y deberiamos borrarlo".
	super visitBlockNode: aBlockNode.! !

----SNAPSHOT----(16 October 2023 18:38:55) CuisUniversity-5981.image priorSource: 10218936!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 10/16/2023 18:40:25' overrides: 16906976!
visitMessageNode: aMessageNode
! !

aMessageNode!

self receiver!

self selector!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 10/16/2023 18:44:59' prior: 50651260 overrides: 16906976!
visitMessageNode: aMessageNode
	| receiver selector |
	receiver := aMessageNode receiver .
	selector := aMessageNode selector.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 10/16/2023 18:54:39' prior: 50651267 overrides: 16906976!
visitMessageNode: aMessageNode
	| receiver selector |
	receiver := aMessageNode receiver .
	selector := aMessageNode selector.
	"colaboradores del mensaje son necesarios? Es el ejemplo de 45+'hola'"
	"Deberiamos pedir los tipos del receiver a live typing y ver si el selector los sabe responder".
	! !

----SNAPSHOT----(16 October 2023 18:56:52) CuisUniversity-5981.image priorSource: 10227355!

----QUIT----(20 October 2023 12:17:02) CuisUniversity-5981.image priorSource: 10228365!

----STARTUP---- (1 November 2023 19:31:40) as C:\Users\jgutierrez\OneDrive - HEXACTA S.A\Julian\isw1\Tesis\04_image_5981\CuisUniversity-5981.image!

!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/1/2023 19:50:38' prior: 50651275 overrides: 16906976!
visitMessageNode: aMessageNode
	| receiver selector |
	receiver := aMessageNode receiver .
	selector := aMessageNode selector.
	"colaboradores del mensaje son necesarios? Es el ejemplo de 45+'hola'" "Si. visitArguments"
	"Deberiamos pedir los tipos del receiver a live typing y ver si el selector los sabe responder".
	! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/1/2023 19:54:51' prior: 50651299 overrides: 16906976!
visitMessageNode: aMessageNode
	| receiver selector |
	receiver := aMessageNode receiver .
	selector := aMessageNode selector.
	"colaboradores del mensaje son necesarios? Es el ejemplo de 45+'hola'" "Si. visitArguments"
	"Deberiamos pedir los tipos del receiver a live typing y ver si el selector los sabe responder".
	
	! !

receiver!

aMessageNode!

aMessageNode !

aMessageNode argumentsInEvaluationOrder !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/1/2023 20:04:20' prior: 50651313 overrides: 16906976!
visitMessageNode: aMessageNode
	| receiver selector |
	receiver := aMessageNode receiver .
	selector := aMessageNode selector.
	"colaboradores del mensaje son necesarios? Es el ejemplo de 45+'hola'" "Si. visitArguments"
	"Deberiamos pedir los tipos del receiver a live typing y ver si el selector los sabe responder".
	
	"aMessageNode receiverTypesIn:  addingIncompleteTypeInfoTo: "! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/1/2023 20:05:11' prior: 50651330 overrides: 16906976!
visitMessageNode: aMessageNode
	| receiver selector incompleteTypeInfo |
	receiver := aMessageNode receiver .
	selector := aMessageNode selector.
	"colaboradores del mensaje son necesarios? Es el ejemplo de 45+'hola'" "Si. visitArguments"
	"Deberiamos pedir los tipos del receiver a live typing y ver si el selector los sabe responder".
	incompleteTypeInfo := OrderedCollection new.
	aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/1/2023 20:05:22' prior: 50651346 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo |
	"receiver := aMessageNode receiver .
	selector := aMessageNode selector."
	"colaboradores del mensaje son necesarios? Es el ejemplo de 45+'hola'" "Si. visitArguments"
	"Deberiamos pedir los tipos del receiver a live typing y ver si el selector los sabe responder".
	incompleteTypeInfo := OrderedCollection new.
	aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/1/2023 20:06:22' prior: 50651365 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	"receiver := aMessageNode receiver .
	selector := aMessageNode selector."
	"colaboradores del mensaje son necesarios? Es el ejemplo de 45+'hola'" "Si. visitArguments"
	"Deberiamos pedir los tipos del receiver a live typing y ver si el selector los sabe responder".
	incompleteTypeInfo := OrderedCollection new.
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/1/2023 20:07:11' prior: 50651384 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	"receiver := aMessageNode receiver .
	selector := aMessageNode selector."
	"colaboradores del mensaje son necesarios? Es el ejemplo de 45+'hola'" "Si. visitArguments"
	"Deberiamos pedir los tipos del receiver a live typing y ver si el selector los sabe responder".
	incompleteTypeInfo := OrderedCollection new.
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	receiverTypes do: [:receiverType | .].! !

----SNAPSHOT----(1 November 2023 20:12:12) CuisUniversity-5981.image priorSource: 10228458!

!classDefinition: #TypeCheckerDragonMethodVisitor category: 'LiveTypingDragon-TypeCheckingDragon' stamp: 'JFGO 11/2/2023 19:00:07'!
ParseNodeVisitor subclass: #TypeCheckerDragonMethodVisitor
	instanceVariableNames: 'compiledMethod methodNode errors'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/2/2023 19:00:04'!
checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes 
	
	| implementorsFinder |
	
	implementorsFinder := AllActualLocalImplementors of: aMessageNode selectorSymbol forAll: receiverTypes.
	implementorsFinder value.
	
	implementorsFinder notImplementedIsEmpty ifFalse: [  
		errors add: (TypeCheckingError on: methodNode node: aMessageNode of: methodNode notImplemented: implementorsFinder notImplemented)].! !

!classDefinition: #TypeCheckerDragonMethodVisitor category: 'LiveTypingDragon-TypeCheckingDragon' stamp: 'JFGO 11/2/2023 19:00:39'!
ParseNodeVisitor subclass: #TypeCheckerDragonMethodVisitor
	instanceVariableNames: 'compiledMethod methodNode errors alerts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!
!TypeCheckerDragonMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 11/2/2023 19:00:35' prior: 50651229!
initializeFor: aCompiledMethod 
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	alerts := OrderedCollection new.! !

ParseNodeVisitor subclass: #TypeCheckerDragonMethodVisitor
	instanceVariableNames: 'compiledMethod methodNode alerts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!

!classDefinition: #TypeCheckerDragonMethodVisitor category: 'LiveTypingDragon-TypeCheckingDragon' stamp: 'JFGO 11/2/2023 19:00:46'!
ParseNodeVisitor subclass: #TypeCheckerDragonMethodVisitor
	instanceVariableNames: 'compiledMethod methodNode alerts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon'!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/2/2023 19:00:57' prior: 50651438!
checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes 
	
	| implementorsFinder |
	
	implementorsFinder := AllActualLocalImplementors of: aMessageNode selectorSymbol forAll: receiverTypes.
	implementorsFinder value.
	
	implementorsFinder notImplementedIsEmpty ifFalse: [  
		alerts add: (TypeCheckingError on: methodNode node: aMessageNode of: methodNode notImplemented: implementorsFinder notImplemented)].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/2/2023 19:03:29' prior: 50651492!
checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes 
	
	| implementorsFinder |
	
	implementorsFinder := AllActualLocalImplementors of: aMessageNode selectorSymbol forAll: receiverTypes.
	implementorsFinder value.
	
	implementorsFinder notImplementedIsEmpty ifFalse: [  
		alerts add: (TypeCheckerDragonAlert for: methodNode withMessage: '')].! !
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 11/2/2023 19:08:22' prior: 50651207!
typeCheckWhenEnabledTyping
	(TypeCheckerDragonMethodVisitor for: compiledMethod) visit.
	"return??"! !
!TypeCheckerDragonMethodVisitor class methodsFor: 'instance creation' stamp: 'JFGO 11/2/2023 19:09:29'!
for: aCompiledMethod collectingAlerts: anAlertCollection  
	^self new initializeFor: aCompiledMethod ! !
!TypeCheckerDragon class methodsFor: 'instance creation' stamp: 'JFGO 11/2/2023 19:09:29'!
for: aCompiledMethod collectingAlerts: anAlertCollection  
	^self new initializeFor: aCompiledMethod ! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 11/2/2023 19:09:29' prior: 50651524!
typeCheckWhenEnabledTyping
	(TypeCheckerDragonMethodVisitor for: compiledMethod collectingAlerts: alerts) visit.
	"return??"! !

!methodRemoval: TypeCheckerDragonMethodVisitor class #for: stamp: 'JFGO 11/2/2023 19:09:29'!
for: aCompiledMethod 
	^self new initializeFor: aCompiledMethod !

!methodRemoval: TypeCheckerDragon class #for: stamp: 'JFGO 11/2/2023 19:09:29'!
for: aCompiledMethod 
	^self new initializeFor: aCompiledMethod !
!TypeCheckerDragon class methodsFor: 'instance creation' stamp: 'JFGO 11/2/2023 19:10:02'!
for: aCompiledMethod   
	^self new initializeFor: aCompiledMethod ! !
!TypeCheckerDragon methodsFor: 'as yet unclassified' stamp: 'JFGO 11/2/2023 19:10:02' prior: 50651545!
typeCheckWhenEnabledTyping
	(TypeCheckerDragonMethodVisitor for: compiledMethod ) visit.
	"return??"! !

!methodRemoval: TypeCheckerDragon class #for:collectingAlerts: stamp: 'JFGO 11/2/2023 19:10:02'!
for: aCompiledMethod collectingAlerts: anAlertCollection  
	^self new initializeFor: aCompiledMethod !
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 11/2/2023 19:10:44' prior: 50651568!
typeCheckWhenEnabledTyping
	(TypeCheckerDragonMethodVisitor for: compiledMethod collectingAlerts: alerts) visit.
	"return??"! !
!TypeCheckerDragonMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 11/2/2023 19:11:34'!
initializeFor: aCompiledMethod collectionAlerts: anAlertCollection
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	alerts := anAlertCollection .! !
!TypeCheckerDragonMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 11/2/2023 19:11:40'!
initializeFor: aCompiledMethod collectingAlerts: anAlertCollection
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	alerts := anAlertCollection .! !

!methodRemoval: TypeCheckerDragonMethodVisitor #initializeFor:collectionAlerts: stamp: 'JFGO 11/2/2023 19:11:47'!
initializeFor: aCompiledMethod collectionAlerts: anAlertCollection
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	alerts := anAlertCollection .!

!methodRemoval: TypeCheckerDragonMethodVisitor #initializeFor: stamp: 'JFGO 11/2/2023 19:11:50'!
initializeFor: aCompiledMethod 
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	alerts := OrderedCollection new.!
!TypeCheckerDragonMethodVisitor class methodsFor: 'instance creation' stamp: 'JFGO 11/2/2023 19:12:02' prior: 50651531!
for: aCompiledMethod collectingAlerts: anAlertCollection  
	^self new initializeFor: aCompiledMethod collectingAlerts: anAlertCollection .! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/2/2023 19:12:52' prior: 50651509!
checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes 
	
	| implementorsFinder |
	
	implementorsFinder := AllActualLocalImplementors of: aMessageNode selectorSymbol forAll: receiverTypes.
	implementorsFinder value.
	
	implementorsFinder notImplementedIsEmpty ifFalse: [  
		alerts add: (TypeCheckerDragonAlert for: methodNode withMessage: 'Message Selector not implemented in Receiver')].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/2/2023 19:13:29' prior: 50651404 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	"receiver := aMessageNode receiver .
	selector := aMessageNode selector."
	"colaboradores del mensaje son necesarios? Es el ejemplo de 45+'hola'" "Si. visitArguments"
	"Deberiamos pedir los tipos del receiver a live typing y ver si el selector los sabe responder".
	incompleteTypeInfo := OrderedCollection new.
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	receiverTypes do: [:receiverType | self checkMessageSentIn: aMessageNode isImplementedInAll: receiverType .].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/2/2023 19:19:58' prior: 50651649 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	
	incompleteTypeInfo := OrderedCollection new.
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	self checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes .! !
!TypeCheckerDragonAlert methodsFor: 'initialization' stamp: 'JFGO 11/2/2023 19:22:47'!
message
	^alertMessage .! !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 19:23:06' prior: 50651085!
test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker alert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	alert:=typeChecker alerts anyOne.
	self assert: (alert isKindOf: TypeCheckerDragonAlert).
	"PEDIR MAS INFO SOBRE LA ALERTA".
	"ES ALERTA? TAL VEZ ES ERROR. Luego entre polimorfismo de mensajes de errores, warnings y alertas se arma la JERARQUIA de alerta".	! !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 19:23:18' prior: 50650492!
test02MethodThatDontCheckTypesGeneratesAlert

	| methodToCkeck typeChecker alert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping.
	methodToCkeck removeProperties .
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	alert:=typeChecker alerts anyOne.
	self assert: (alert isKindOf: TypeCheckerDragonAlert).
	! !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 19:23:38' prior: 50651711!
test02MethodThatDontCheckTypesGeneratesAlert

	| methodToCkeck typeChecker alert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping.
	methodToCkeck removeProperties .
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	alert:=typeChecker alerts anyOne.
	self assert: (alert isKindOf: TypeCheckerDragonAlert).
	self assert: '' equals: alert message .
	! !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 19:23:45' prior: 50651689!
test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker alert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	alert:=typeChecker alerts anyOne.
	self assert: (alert isKindOf: TypeCheckerDragonAlert).
	self assert: '' equals: alert message .
	"PEDIR MAS INFO SOBRE LA ALERTA".
	"ES ALERTA? TAL VEZ ES ERROR. Luego entre polimorfismo de mensajes de errores, warnings y alertas se arma la JERARQUIA de alerta".	! !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 19:24:05' prior: 50651746!
test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker alert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	alert:=typeChecker alerts anyOne.
	self assert: (alert isKindOf: TypeCheckerDragonAlert).
	self assert: '' equals: alert message .
	"PEDIR MAS INFO SOBRE LA ALERTA. NO HARIA FALTA EXPONER EL MENSAJE NI TENERLO HARDCODEADO".
	! !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 19:25:34' prior: 50651728!
test02MethodThatDontCheckTypesGeneratesAlert

	| methodToCkeck typeChecker alert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping.
	methodToCkeck removeProperties .
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	alert:=typeChecker alerts anyOne.
	self assert: (alert isKindOf: TypeCheckerDragonAlert).
	self assert: 'Method has live typing disabled' equals: alert message .
	! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/2/2023 19:25:37'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 19:26:16' prior: 50651769!
test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker alert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	alert:=typeChecker alerts anyOne.
	self assert: (alert isKindOf: TypeCheckerDragonAlert).
	self assert: 'Message Selector not implemented in Receiver' equals: alert message .
	"PEDIR MAS INFO SOBRE LA ALERTA. NO HARIA FALTA EXPONER EL MENSAJE NI TENERLO HARDCODEADO".
	! !
!TypeCheckerDragonMethodVisitor methodsFor: 'evaluating' stamp: 'JFGO 11/2/2023 19:27:09'!
accept
	self visitMethodNode: methodNode.! !

!methodRemoval: TypeCheckerDragonMethodVisitor #visit stamp: 'JFGO 11/2/2023 19:27:09'!
visit
	self visitMethodNode: methodNode.!
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 11/2/2023 19:27:23' prior: 50651581!
typeCheckWhenEnabledTyping
	(TypeCheckerDragonMethodVisitor for: compiledMethod collectingAlerts: alerts) accept.
	"return??"! !

implementorsFinder!

self notImplemented first!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:30:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/2/2023 19:30:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/2/2023 19:30:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:30:15'!
PASSED!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/2/2023 19:32:35'!
methodNestedWithMessageNotUnderstood
	120 asString factorial.! !
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/2/2023 19:32:56'!
methodWithMessageNestedNotUnderstood
	120 asString factorial.! !

!methodRemoval: TypeCheckerDragonTestMethods #methodNestedWithMessageNotUnderstood stamp: 'JFGO 11/2/2023 19:32:56'!
methodNestedWithMessageNotUnderstood
	120 asString factorial.!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 19:33:42'!
test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker alert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNestedNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: typeChecker hasAlerts.
	self assert: 1 equals: typeChecker alerts size.
	alert:=typeChecker alerts anyOne.
	self assert: (alert isKindOf: TypeCheckerDragonAlert).
	self assert: 'Message Selector not implemented in Receiver' equals: alert message .
	"PEDIR MAS INFO SOBRE LA ALERTA. NO HARIA FALTA EXPONER EL MENSAJE NI TENERLO HARDCODEADO".
	! !

aMessageNode selectorSymbol!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:35:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/2/2023 19:35:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/2/2023 19:35:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:35:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:35:57'!
PASSED!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/2/2023 19:41:30' prior: 50651875!
methodWithMessageNestedNotUnderstood
	"The first message is sending not to ('false' not) which is defined. The inner message is not, so this should force implement object recursion for receiver."
	'false' not not.! !
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/2/2023 19:41:41' prior: 50650773!
methodWithMessageNotUnderstood
	'false' not.! !

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:41:46'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/2/2023 19:44:13' prior: 50651672 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	aMessageNode receiver accept: self.
	incompleteTypeInfo := OrderedCollection new.
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	self checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes .! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:44:18'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 19:46:18'!
assertTypeChecker: aTypeChecker hasOneAlertWithMessage: anAlertMessage
	
	| alert |
	self assert: aTypeChecker hasAlerts.
	self assert: 1 equals: aTypeChecker alerts size.
	alert:=aTypeChecker alerts anyOne.
	self assert: (alert isKindOf: TypeCheckerDragonAlert).
	self assert: anAlertMessage equals: alert message .
	"PEDIR MAS INFO SOBRE LA ALERTA. NO HARIA FALTA EXPONER EL MENSAJE NI TENERLO HARDCODEADO".
	! !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 19:46:55' prior: 50651790!
test02MethodThatDontCheckTypesGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #emptyMethodEnableTyping.
	methodToCkeck removeProperties .
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Method has live typing disabled'.
	! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/2/2023 19:46:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/2/2023 19:46:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/2/2023 19:46:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:46:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:46:59'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 19:47:18' prior: 50651813!
test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	! !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 19:47:28' prior: 50651886!
test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNestedNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	! !

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/2/2023 19:47:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/2/2023 19:47:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:47:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:47:32'!
PASSED!

----SNAPSHOT----(2 November 2023 19:48:16) CuisUniversity-5981.image priorSource: 10232725!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/2/2023 19:55:41'!
methodWithMessageNestedNotUnderstoodOnReceiver
	"The first message is sending not to ('false' not) which is defined. The inner message is not, so this should force implement object recursion for receiver."
	'false' not not.! !

!methodRemoval: TypeCheckerDragonTestMethods #methodWithMessageNestedNotUnderstood stamp: 'JFGO 11/2/2023 19:55:41'!
methodWithMessageNestedNotUnderstood
	"The first message is sending not to ('false' not) which is defined. The inner message is not, so this should force implement object recursion for receiver."
	'false' not not.!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 19:55:53' prior: 50652039!
test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNestedNotUnderstoodOnReceiver.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:55:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/2/2023 19:55:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/2/2023 19:55:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:55:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/2/2023 19:55:54'!
PASSED!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/2/2023 20:16:30'!
methodWithMessageNestedNotUnderstoodOnSelector
	"TODO."! !
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/2/2023 20:21:01'!
methodWithReceiverWithNoTypes
	"The first message to be checked is (120 asString) size. Receiver will have no information."
	120 asString size.! !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 20:23:40'!
test05MethodWithMessageWithNoReceiverTypeGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNestedNotUnderstoodOnReceiver.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	! !
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/2/2023 20:23:48' prior: 50652143!
test05MethodWithMessageWithNoReceiverTypeGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithReceiverWithNoTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	! !

!classDefinition: #TypeCheckerDragonTestMethods category: 'LiveTypingDragon-TypeCheckingDragon-Tests' stamp: 'JFGO 11/2/2023 20:26:46'!
Object subclass: #TypeCheckerDragonTestMethods
	instanceVariableNames: 'nilVariableWithNoType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingDragon-TypeCheckingDragon-Tests'!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/2/2023 20:26:44' prior: 50652136!
methodWithReceiverWithNoTypes
	"The first message to be checked is (120 asString) size. Receiver will have no information."
	nilVariableWithNoType size.! !

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/2/2023 20:27:25'!
ERROR!

----SNAPSHOT----(2 November 2023 20:28:56) CuisUniversity-5981.image priorSource: 10253388!

!testRun: #MethodTypeCheckerTest #test01MethodNotAnnotatingTypesGeneratesWarning stamp: 'JFGO 11/3/2023 09:33:34'!
PASSED!

!testRun: #MethodTypeCheckerTest #test02EmptyMethodDoesNotGenerateWarningsOrErrors stamp: 'JFGO 11/3/2023 09:33:34'!
PASSED!

!testRun: #MethodTypeCheckerTest #test03MessageSendNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 11/3/2023 09:33:34'!
PASSED!

!testRun: #MethodTypeCheckerTest #test04MessageUnderstooodByReceiverDoesNotGenerateErrors stamp: 'JFGO 11/3/2023 09:33:34'!
PASSED!

!testRun: #MethodTypeCheckerTest #test05ErrorsWhenNoTypeImplementMessageSent stamp: 'JFGO 11/3/2023 09:33:34'!
PASSED!

!testRun: #MethodTypeCheckerTest #test06DifferentErrorsAreReported stamp: 'JFGO 11/3/2023 09:33:34'!
PASSED!

!testRun: #MethodTypeCheckerTest #test07ReceiverWithoutTypesGeneratesWarning stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test08GivesAWarningWhenReceiversTypeHasAnError stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test09WhenMethodHasNoReturnTypesAProblemIsAdded stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test10PrimitiveMethodsAreNotTypedChecked stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test11IfNotNilFiltersUndefinedObjectType stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test12IfNotNilDoesNotFiltersUndefinedObjectTypeForNotCheckedObject stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test13ComparingForNilWithIfTrueIfFalse stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test14ComparingForNilWithIfTrueIfFalseWhenNilFiltersOtherTypes stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test15ComparingForNilWithIfTrueIfFalseWhenNilKeepsUndefinedObject stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test16NestedIfNotNilFiltersUndefinedObjectType stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test17NestedIfNotNilDoesNotFilterUndefinedObjectWhenOutsideRightIfNotNil stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test18IfNilAssumesUndefinedObjectAsType stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test19NestedIfNilAssumesUndefinedObjectAsType stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test20NestedIfNilDoesUseUndefinedObjectWhenOutsideRightIfNil stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test21IfNilIfNotNilWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test22IfNotNilIfNilWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test23EqualsNilIfTrueIfFalseWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test24EqualsNilIfTrueWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test25IdenticalToNilIfTrueWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test26EqualsNilIfFalseWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test27IdenticalToNilIfFalseWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test28EqualsToNilIfFalseIfTrueWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test29IdenticalToNilIfFalseIfTrueWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test30nilEqualsToIfTrueIfFalseOrIfFalseIfTrueWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test31nilEqualsToIfTrueOrIfFalseWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32nilIdenticalToWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32_01_nilNotIdenticalOrEqualToWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test33NotEqualToNilWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test34NotIdenticalToNilWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:35'!
PASSED!

!testRun: #MethodTypeCheckerTest #test35isNilWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test36notNilWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test37TypeCastWithEqualOrIdenticalToWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test38TypeCastWithNotEqualOrNotIdenticalToWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test39TypeCastToUsingEqualOrIdenticalToWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test40TypeCastToUsingNotEqualOrNotIdenticalToWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test41TypeCastUsingIsKindOfToWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test42TypeCheckMessageWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test43TypeCheckMessageSentToSelfWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test44TypeCheckMessageWorksAsExpected stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test46TypeCastRejectsCanBeNested stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test47IsKindOfCastingAllowsSubtypes stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test48IfNotNilWithBlockArgumentFiltersUndefinedObject stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test49TypeCastWithBlockInRejectBlockKeepsCastingStrategy stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test50TypeCastWithoutBlockShouldFail stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test51NotNilAndFiltersUndefinedObject stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test52CascasdeMessageSendAreTypeChecked stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test53TypeCastWorksOnCascadeMessageSends stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test54IfNilWithReturnRejectsNilInNextColaborations stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test55TypeCheckMessageWithSubclassesReturningFalse stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test56Float_store_on_hasNoTypeErrors stamp: 'JFGO 11/3/2023 09:33:36'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test57TypeCheckMessageWithFalse_True_False_InSubclassesCastCorrectly stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test58TypeCheckMessageWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test59TypeCheckMessageWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test60TypeCastWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test61TypeCastWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test62ifNotNilifNotNilWithMoreThanAMessageSendAndNilAsValue stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test63orCheck stamp: 'JFGO 11/3/2023 09:33:36'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test64notNilAndIfTrue stamp: 'JFGO 11/3/2023 09:33:36'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test65isNilOr stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66DoesNotFailsWithMessageSendAsConditionOfIfTrueWithCascadeSend stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66orWithoutMessageAsReceiverShouldNotError stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test67andWithoutMessageAsReceiverShouldNotError stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!

!testRun: #MethodTypeCheckerTest #test68DoesNotFailsWithIfTrueSendInCascadeMode stamp: 'JFGO 11/3/2023 09:33:36'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'setup' stamp: 'JFGO 11/3/2023 09:38:04' prior: 50652158!
test05MethodWithMessageWithNoReceiverTypeGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithReceiverWithNoTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'XXXXXX'.
	! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/3/2023 09:45:55' prior: 50651952 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new.
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	self checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes .! !
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/3/2023 09:47:18' prior: 50652183!
methodWithReceiverWithNoTypes
	nilVariableWithNoType size.! !

----QUIT----(9 November 2023 16:47:39) CuisUniversity-5981.image priorSource: 10257407!

----STARTUP---- (14 November 2023 18:59:05) as C:\Users\jgutierrez\OneDrive - HEXACTA S.A\Julian\isw1\Tesis\04_image_5981\CuisUniversity-5981.image!


!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 18:59:34'!
ERROR!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 18:59:34'!
ERROR!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/14/2023 18:59:39'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/14/2023 18:59:39'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 18:59:39'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 18:59:39'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 18:59:39'!
ERROR!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 18:59:39'!
ERROR!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 18:59:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 18:59:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/14/2023 18:59:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/14/2023 18:59:53'!
PASSED!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/14/2023 19:05:23' prior: 50652073!
methodWithMessageNestedNotUnderstoodOnReceiver
	"The first message that visitor evaluates is the outer not sent to ('false' not) which is perfectly defined." 
	"The inner not message in the receiver it has a type problem, so this should force implement object recursion for receiver."
	'false' not not.! !

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 19:28:02'!
ERROR!
!TypeCheckerDragonTestMethods methodsFor: 'DELETE THIS' stamp: 'JFGO 11/14/2023 19:36:22'!
m4
	|temp|
	temp size.! !

method := TypeCheckerDragonTestMethods >> #m4. !

TypeCheckerDragonTestMethods printASTOn: method!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/14/2023 19:38:31' prior: 50652494!
methodWithReceiverWithNoTypes
	|tempNoTypes|
	tempNoTypes size.! !

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 19:39:32'!
ERROR!
!TypeCheckerDragon methodsFor: 'initialization' stamp: 'JFGO 11/14/2023 19:42:36' prior: 50650653!
initializeFor: aCompiledMethod 
	compiledMethod := aCompiledMethod " asMethodReference".
	alerts := OrderedCollection new.! !

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/14/2023 19:42:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/14/2023 19:42:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:42:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:42:47'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/14/2023 19:47:46' prior: 50652479 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. "TODO. Forzar que haya incompleteTypeInfo"
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	receiverTypes isEmpty ifTrue: [].
	self checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes .! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/14/2023 19:49:10' prior: 50652617 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. "TODO. Forzar que haya incompleteTypeInfo"
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	receiverTypes isEmpty 
		ifTrue: [alerts add: (TypeCheckerDragonAlert for: methodNode withMessage: 'Receiver has no types')]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes ].
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 19:49:15'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 19:49:15'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/14/2023 19:49:26' prior: 50652465!
test05MethodWithMessageWithNoReceiverTypeGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithReceiverWithNoTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 19:49:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/14/2023 19:49:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/14/2023 19:49:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:49:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:49:27'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 19:49:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:49:27'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 19:49:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/14/2023 19:49:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/14/2023 19:49:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:49:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:49:46'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 19:49:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:49:46'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:50:13'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:50:34'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:50:34'!
FAILURE!

alerts first!

alerts first message!

alerts second message!

self first!

self first!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/14/2023 19:54:00' prior: 50652635 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	(receiverTypes isEmpty and: [ incompleteTypeInfo isEmpty])
		ifTrue: [alerts add: (TypeCheckerDragonAlert for: methodNode withMessage: 'Receiver has no types')]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes ].
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:54:01'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/14/2023 19:54:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/14/2023 19:54:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:54:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:54:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 19:54:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/14/2023 19:54:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/14/2023 19:54:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:54:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/14/2023 19:54:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 19:54:10'!
PASSED!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/3/2023 09:47:18' prior: 50652582!
methodWithReceiverWithNoTypes
	nilVariableWithNoType size.! !

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/14/2023 19:55:10'!
PASSED!

----SNAPSHOT----(14 November 2023 19:55:49) CuisUniversity-5981.image priorSource: 10267133!

!methodRemoval: TypeCheckerDragonTestMethods #methodWithMessageNestedNotUnderstoodOnSelector stamp: 'JFGO 11/16/2023 18:15:23'!
methodWithMessageNestedNotUnderstoodOnSelector
	"TODO."!
!TypeCheckerDragonTestMethods methodsFor: 'DELETE THIS' stamp: 'JFGO 11/16/2023 18:18:39' prior: 50651018!
m2
	| v3 |
	
	v3 := self m1: (10 + 120).
	^v3.! !
!TypeCheckerDragonTestMethods methodsFor: 'DELETE THIS' stamp: 'JFGO 11/16/2023 18:19:05'!
methodReturnsInteger: aNumber
	| v1 |
	v1:=5.
	^v1 + aNumber.! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 11/16/2023 18:19:05' prior: 50652838!
m2
	| v3 |
	
	v3 := self methodReturnsInteger: (10 + 120).
	^v3.! !

!methodRemoval: TypeCheckerDragonTestMethods #m1: stamp: 'JFGO 11/16/2023 18:19:05'!
m1: aNumber
	| v1 |
	v1:=5.
	^v1 + aNumber.!
!TypeCheckerDragonTestMethods methodsFor: 'DELETE THIS' stamp: 'JFGO 11/16/2023 18:19:36'!
methodWithArgumentToResolve
	| v3 |
	
	v3 := self methodReturnsInteger: (10 + 120).
	^v3.! !

!methodRemoval: TypeCheckerDragonTestMethods #m2 stamp: 'JFGO 11/16/2023 18:19:36'!
m2
	| v3 |
	
	v3 := self methodReturnsInteger: (10 + 120).
	^v3.!
!TypeCheckerDragonTestMethods methodsFor: 'DELETE THIS' stamp: 'JFGO 11/16/2023 18:20:29'!
methodWithMessageArgumentToResolve
	| v3 |
	
	v3 := self methodReturnsInteger: (10 + 120).
	^v3.! !

!methodRemoval: TypeCheckerDragonTestMethods #methodWithArgumentToResolve stamp: 'JFGO 11/16/2023 18:20:29'!
methodWithArgumentToResolve
	| v3 |
	
	v3 := self methodReturnsInteger: (10 + 120).
	^v3.!

TypeCheckerDragonTestMethods printASTOn: method!

method := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve. !

TypeCheckerDragonTestMethods printASTOn: method!
!TypeCheckerDragonTestMethods methodsFor: 'DELETE THIS' stamp: 'JFGO 11/16/2023 18:25:54' prior: 50652870!
methodWithMessageArgumentToResolve
	self methodReturnsInteger: (10 + 120).
	! !
!TypeCheckerDragonTestMethods methodsFor: 'DELETE THIS' stamp: 'JFGO 11/16/2023 18:26:00' prior: 50652889!
methodWithMessageArgumentToResolve
	^self methodReturnsInteger: (10 + 120).
	! !

method := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve. !

method := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve. !

TypeCheckerDragonTestMethods printASTOn: method!
!TypeCheckerDragonTestMethods methodsFor: 'DELETE THIS' stamp: 'JFGO 11/16/2023 18:29:55' prior: 50652895!
methodWithMessageArgumentToResolve
	self methodReturnsInteger: (10 + 120).
	! !

method := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve. !

TypeCheckerDragonTestMethods printASTOn: method!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/16/2023 18:33:36'!
test06XXX

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithReceiverWithNoTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/16/2023 18:34:10' prior: 50652918!
test06XXX

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	! !

self statements !

self arguments!

self arguments first!

self arguments first class!

self arguments!

!testRun: #TypeCheckerDragonTest #test06XXX stamp: 'JFGO 11/16/2023 18:41:41'!
PASSED!
!TypeCheckerDragonTestMethods methodsFor: 'DELETE THIS' stamp: 'JFGO 11/16/2023 18:43:43' prior: 50652908!
methodWithMessageArgumentToResolve
	self methodReturnsInteger: ('10' factorial).
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/16/2023 18:44:56'!
test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	! !

!methodRemoval: TypeCheckerDragonTest #test06XXX stamp: 'JFGO 11/16/2023 18:45:05'!
test06XXX

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/16/2023 18:45:30' prior: 50652951!
test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'XXX'.
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/16/2023 18:49:05'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/16/2023 18:49:05'!
FAILURE!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/16/2023 18:53:47' prior: 50652753 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	(receiverTypes isEmpty and: [ incompleteTypeInfo isEmpty])
		ifTrue: [alerts add: (TypeCheckerDragonAlert for: methodNode withMessage: 'Receiver has no types')]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/16/2023 18:58:25' prior: 50652972!
test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/16/2023 18:58:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/16/2023 18:58:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/16/2023 18:58:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/16/2023 18:58:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/16/2023 18:58:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/16/2023 18:58:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/16/2023 18:58:26'!
PASSED!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/16/2023 19:00:21'!
methodSumsNumber: aNumber
	| v1 |
	v1:=5.
	^v1 + aNumber.! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 11/16/2023 19:00:21' prior: 50652944!
methodWithMessageArgumentToResolve
	self methodSumsNumber: ('10' factorial).
	! !

!methodRemoval: TypeCheckerDragonTestMethods #methodReturnsInteger: stamp: 'JFGO 11/16/2023 19:00:21'!
methodReturnsInteger: aNumber
	| v1 |
	v1:=5.
	^v1 + aNumber.!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/16/2023 19:00:57'!
methodSumsNumber: aNumber anotherNumber: anotherNumber 
	| v1 |
	v1:=5.
	^v1 + aNumber.! !
!TypeCheckerDragonTestMethods methodsFor: 'as yet unclassified' stamp: 'JFGO 11/16/2023 19:00:57' prior: 50653069!
methodWithMessageArgumentToResolve
	self methodSumsNumber: ('10' factorial) anotherNumber: 15.
	! !

!methodRemoval: TypeCheckerDragonTestMethods #methodSumsNumber: stamp: 'JFGO 11/16/2023 19:00:57'!
methodSumsNumber: aNumber
	| v1 |
	v1:=5.
	^v1 + aNumber.!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/16/2023 19:01:07' prior: 50653080!
methodSumsNumber: aNumber anotherNumber: anotherNumber 
	| v1 |
	v1:=5.
	^anotherNumber + aNumber.! !
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/16/2023 19:01:14' prior: 50653099!
methodSumsNumber: aNumber anotherNumber: anotherNumber 
	
	^anotherNumber + aNumber.! !
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/16/2023 19:02:07' prior: 50653087!
methodWithMessageArgumentToResolve
	self methodSumsNumber: ('10' factorial) anotherNumber: (15 size).
	! !

15!

15 size!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/16/2023 19:08:01' prior: 50653113!
methodWithMessageArgumentToResolve
	self methodSumsNumber: ('10' factorial) anotherNumber: ('5' factorial).
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/16/2023 19:10:13' prior: 50653019!
test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	self assert: 2 equals: typeChecker alerts size.
	typeChecker alerts do: [:alert | self assert: (alert isKindOf: TypeCheckerDragonAlert).
	self assert: 'Message Selector not implemented in Receiver' equals: alert message .].
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/16/2023 19:10:13'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/16/2023 19:10:26' prior: 50653129!
test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self assert: 2 equals: typeChecker alerts size.
	typeChecker alerts do: [:alert | self assert: (alert isKindOf: TypeCheckerDragonAlert).
	self assert: 'Message Selector not implemented in Receiver' equals: alert message .].
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/16/2023 19:10:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/16/2023 19:10:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/16/2023 19:10:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/16/2023 19:10:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/16/2023 19:10:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/16/2023 19:10:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/16/2023 19:10:27'!
PASSED!

15 size!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/16/2023 19:11:09' prior: 50653156!
test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self assert: 2 equals: typeChecker alerts size.
	typeChecker alerts do: [:alert | 
		self assert: (alert isKindOf: TypeCheckerDragonAlert).
		self assert: 'Message Selector not implemented in Receiver' equals: alert message .
	].
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/16/2023 19:11:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/16/2023 19:11:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/16/2023 19:11:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/16/2023 19:11:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/16/2023 19:11:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/16/2023 19:11:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/16/2023 19:11:10'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/16/2023 19:12:05'!
test07MethodWithInstanceNotIndexable

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/16/2023 19:12:18' prior: 50653253!
test07MethodWithInstanceNotIndexable

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'XXX'.
	
	! !
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/16/2023 19:12:36'!
methodInstanceNotIndexable
	15 size.! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/16/2023 19:12:43' prior: 50653264!
test07MethodWithInstanceNotIndexable

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodInstanceNotIndexable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'XXX'.
	
	! !

!testRun: #TypeCheckerDragonTest #test07MethodWithInstanceNotIndexable stamp: 'JFGO 11/16/2023 19:13:36'!
FAILURE!

----SNAPSHOT----(16 November 2023 20:04:56) CuisUniversity-5981.image priorSource: 10277667!

----SNAPSHOT----(16 November 2023 20:12:20) CuisUniversity-5981.image priorSource: 10292715!

15 size!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/17/2023 10:15:59' prior: 50653283!
test07MethodWithInstanceNotIndexable

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodInstanceNotIndexable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'XXX'.
	
	"FALSO POLIMORFISMO. NO CUBRIMOS ESTE CASO. AFUERA"! !

----SNAPSHOT----(17 November 2023 10:16:03) CuisUniversity-5981.image priorSource: 10292809!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 17:41:30' prior: 50653306!
test07MethodWithInstanceNotIndexable

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodInstanceNotIndexable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self deny: typeChecker hasAlerts .
	
	"FALSO POLIMORFISMO. NO CUBRIMOS ESTE CASO. AFUERA"! !

!testRun: #TypeCheckerDragonTest #test07MethodWithInstanceNotIndexable stamp: 'JFGO 11/23/2023 17:41:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/23/2023 17:41:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/23/2023 17:41:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 17:41:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 17:41:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/23/2023 17:41:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/23/2023 17:41:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithInstanceNotIndexable stamp: 'JFGO 11/23/2023 17:41:30'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 17:42:32' prior: 50653324!
test07MethodWithInstanceNotIndexable

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodInstanceNotIndexable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self deny: typeChecker hasAlerts .
	
	"FALSO POLIMORFISMO. NO CUBRIMOS ESTE CASO. AFUERA"! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 17:42:39'!
test07MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodInstanceNotIndexable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self deny: typeChecker hasAlerts .
	
	"FALSO POLIMORFISMO. NO CUBRIMOS ESTE CASO. AFUERA"! !

!methodRemoval: TypeCheckerDragonTest #test07MethodWithInstanceNotIndexable stamp: 'JFGO 11/23/2023 17:42:39'!
test07MethodWithInstanceNotIndexable

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodInstanceNotIndexable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self deny: typeChecker hasAlerts .
	
	"FALSO POLIMORFISMO. NO CUBRIMOS ESTE CASO. AFUERA"!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 17:43:21' prior: 50653383!
test07MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts
	"This is because the object is able to respond to the message even if it is for throwing an exception"

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodInstanceNotIndexable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self deny: typeChecker hasAlerts .
	
	"FALSO POLIMORFISMO. NO CUBRIMOS ESTE CASO. AFUERA"! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 17:43:25' prior: 50653410!
test07MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts
	"This is because the object is able to respond to the message even if it is for throwing an exception"

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodInstanceNotIndexable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self deny: typeChecker hasAlerts .
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 17:54:13'!
test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNestedNotUnderstoodOnReceiver.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	! !

!methodRemoval: TypeCheckerDragonTest #test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 17:54:13'!
test04MethodWithMessageNestedNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNestedNotUnderstoodOnReceiver.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	!

self value!

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 17:57:05'!
PASSED!

false not!

false not size!

false not factorial!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/23/2023 17:59:27'!
methodWithManyMessageNotUnderstood
	"The first message that visitor evaluates is factorial which is not understood by receiver that has also type problems" 
	"The inner not message in the receiver it has a type problem, so this should force implement object recursion for receiver."
	'false' not factorial.! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 18:00:20'!
test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNestedNotUnderstoodOnReceiver.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 18:00:33' prior: 50653494!
test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithManyMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 18:00:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/23/2023 18:00:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/23/2023 18:00:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 18:00:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 18:00:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 18:00:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/23/2023 18:00:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/23/2023 18:00:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 11/23/2023 18:00:33'!
PASSED!

self first!

!testRun: #TypeCheckerDragonTest #test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 18:08:01'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/23/2023 18:20:49' prior: 50652995 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverTypes isEmpty and: [ incompleteTypeInfo isEmpty])
		ifTrue: [alerts add: (TypeCheckerDragonAlert for: methodNode withMessage: 'Receiver has no types')]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !

!testRun: #TypeCheckerDragonTest #test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 18:23:07'!
ERROR!
!TypeCheckerDragonMethodVisitor methodsFor: 'alerts' stamp: 'JFGO 11/23/2023 18:25:06'!
addWarning: anIncompleteTypeInfoError node: aMessageNode
"TODO. We still don't know about warnings, this message is for coupling with incompleteTypeInfo"
! !
!TypeCheckerDragonMethodVisitor methodsFor: 'alerts' stamp: 'JFGO 11/23/2023 18:26:20' prior: 50653597!
addWarning: anIncompleteTypeInfoError node: aMessageNode
	alerts add: (TypeCheckerDragonAlert for: methodNode withMessage: 'Cannot deduce Receiver Type')
! !

!testRun: #TypeCheckerDragonTest #test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 18:27:51'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 18:30:12' prior: 50653510!
test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts

	| methodToCkeck typeChecker firstAlert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithManyMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: 2 equals: typeChecker alerts size.
	firstAlert := typeChecker alerts first.
	self assert: 'Message Selector not implemented in Receiver' equals: firstAlert message .
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 18:30:45' prior: 50653620!
test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts

	| methodToCkeck typeChecker firstAlert secondAlert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithManyMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: 2 equals: typeChecker alerts size.
	firstAlert := typeChecker alerts first.
	self assert: 'Message Selector not implemented in Receiver' equals: firstAlert message .
	secondAlert := typeChecker alerts second.
	self assert: 'Message Selector not implemented in Receiver' equals: secondAlert message .	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 18:31:16' prior: 50653638!
test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts

	| methodToCkeck typeChecker firstAlert secondAlert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithManyMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: 2 equals: typeChecker alerts size.
	firstAlert := typeChecker alerts first.
	self assert: 'Message Selector not implemented in Receiver' equals: firstAlert message .
	secondAlert := typeChecker alerts second.
	self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 18:31:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/23/2023 18:31:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/23/2023 18:31:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 18:31:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 18:31:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 18:31:17'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/23/2023 18:31:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/23/2023 18:31:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 11/23/2023 18:31:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 18:31:17'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 18:31:59' prior: 50651975!
assertTypeChecker: aTypeChecker hasOneAlertWithMessage: anAlertMessage
	
	| alert |
	self assert: aTypeChecker hasAlerts.
	self assert: aTypeChecker alerts size equals: 1.
	alert:=aTypeChecker alerts anyOne.
	self assert: (alert isKindOf: TypeCheckerDragonAlert).
	self assert: anAlertMessage equals: alert message .
	"PEDIR MAS INFO SOBRE LA ALERTA. NO HARIA FALTA EXPONER EL MENSAJE NI TENERLO HARDCODEADO".
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 18:32:05'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 18:32:08'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 18:32:08'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 18:33:51' prior: 50653443!
test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	| methodToCkeck typeChecker firstAlert secondAlert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNestedNotUnderstoodOnReceiver.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: 2 equals: typeChecker alerts size.
	firstAlert := typeChecker alerts first.
	self assert: 'Message Selector not implemented in Receiver' equals: firstAlert message .
	secondAlert := typeChecker alerts second.
	self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 18:33:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/23/2023 18:33:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/23/2023 18:33:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 18:33:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 18:33:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 18:33:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/23/2023 18:33:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/23/2023 18:33:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 11/23/2023 18:33:55'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 18:34:13'!
test08MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts
	"This is because the object is able to respond to the message even if it is for throwing an exception"

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodInstanceNotIndexable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self deny: typeChecker hasAlerts .
	! !

!methodRemoval: TypeCheckerDragonTest #test07MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 11/23/2023 18:34:13'!
test07MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts
	"This is because the object is able to respond to the message even if it is for throwing an exception"

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodInstanceNotIndexable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self deny: typeChecker hasAlerts .
	!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 18:34:18'!
test07MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self assert: 2 equals: typeChecker alerts size.
	typeChecker alerts do: [:alert | 
		self assert: (alert isKindOf: TypeCheckerDragonAlert).
		self assert: 'Message Selector not implemented in Receiver' equals: alert message .
	].
	
	! !

!methodRemoval: TypeCheckerDragonTest #test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/23/2023 18:34:18'!
test06MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self assert: 2 equals: typeChecker alerts size.
	typeChecker alerts do: [:alert | 
		self assert: (alert isKindOf: TypeCheckerDragonAlert).
		self assert: 'Message Selector not implemented in Receiver' equals: alert message .
	].
	
	!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 18:34:25'!
test06MethodWithMessageWithNoReceiverTypeGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithReceiverWithNoTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	! !

!methodRemoval: TypeCheckerDragonTest #test05MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/23/2023 18:34:25'!
test05MethodWithMessageWithNoReceiverTypeGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithReceiverWithNoTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 18:34:30'!
test05MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts

	| methodToCkeck typeChecker firstAlert secondAlert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithManyMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: 2 equals: typeChecker alerts size.
	firstAlert := typeChecker alerts first.
	self assert: 'Message Selector not implemented in Receiver' equals: firstAlert message .
	secondAlert := typeChecker alerts second.
	self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	
	! !

!methodRemoval: TypeCheckerDragonTest #test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 18:34:30'!
test04MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts

	| methodToCkeck typeChecker firstAlert secondAlert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithManyMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: 2 equals: typeChecker alerts size.
	firstAlert := typeChecker alerts first.
	self assert: 'Message Selector not implemented in Receiver' equals: firstAlert message .
	secondAlert := typeChecker alerts second.
	self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	
	!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/23/2023 18:35:54'!
addAlert

	^ alerts add: (TypeCheckerDragonAlert for: methodNode withMessage: 'Receiver has no types')! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/23/2023 18:35:54' prior: 50653567 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverTypes isEmpty and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlert]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/23/2023 18:37:08'!
addAlert: withMessage

	^ alerts add: (TypeCheckerDragonAlert for: methodNode withMessage: 'Receiver has no types')! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 11/23/2023 18:37:08' prior: 50653960 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverTypes isEmpty and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlert: 'Receiver has no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !

!methodRemoval: TypeCheckerDragonMethodVisitor #addAlert stamp: 'JFGO 11/23/2023 18:37:08'!
addAlert

	^ alerts add: (TypeCheckerDragonAlert for: methodNode withMessage: 'Receiver has no types')!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/23/2023 18:37:37' prior: 50653984!
addAlert: aStringMessage

	^ alerts add: (TypeCheckerDragonAlert for: methodNode withMessage: 'Receiver has no types')! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/23/2023 18:37:46'!
addAlertWithMessage: aStringMessage

	^ alerts add: (TypeCheckerDragonAlert for: methodNode withMessage: 'Receiver has no types')! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 11/23/2023 18:37:46' prior: 50653992 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverTypes isEmpty and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlertWithMessage: 'Receiver has no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !

!methodRemoval: TypeCheckerDragonMethodVisitor #addAlert: stamp: 'JFGO 11/23/2023 18:37:46'!
addAlert: aStringMessage

	^ alerts add: (TypeCheckerDragonAlert for: methodNode withMessage: 'Receiver has no types')!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/23/2023 18:38:00' prior: 50654030!
addAlertWithMessage: aStringMessage

	^ alerts add: (TypeCheckerDragonAlert for: methodNode withMessage: aStringMessage)! !
!TypeCheckerDragonMethodVisitor methodsFor: 'alerts' stamp: 'JFGO 11/23/2023 18:38:17' prior: 50653606!
addWarning: anIncompleteTypeInfoError node: aMessageNode
	self addAlertWithMessage: 'Cannot deduce Receiver Type'
! !

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/23/2023 18:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/23/2023 18:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 18:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 18:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 18:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/23/2023 18:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/23/2023 18:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 11/23/2023 18:44:57'!
PASSED!

----SNAPSHOT----(23 November 2023 18:45:00) CuisUniversity-5981.image priorSource: 10293386!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/23/2023 18:45:03' prior: 50653106!
methodSumsNumber: aNumber anotherNumber: anotherNumber 
	
	anotherNumber + aNumber.! !

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/23/2023 18:45:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/23/2023 18:45:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 18:45:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 18:45:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 18:45:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/23/2023 18:45:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/23/2023 18:45:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 11/23/2023 18:45:06'!
PASSED!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/23/2023 18:46:21'!
methodWithMessageWithNoReturnTypes
	(self methodSumsNumber: 1 anotherNumber: 1) factorial.
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:20:53'!
test09MessageSentToMethodWithNoReturnTypeGeneratesAlert
	"This is because the object is able to respond to the message even if it is for throwing an exception"

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodInstanceNotIndexable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self deny: typeChecker hasAlerts .
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:21:33' prior: 50654170!
test09MessageSentToMethodWithNoReturnTypeGeneratesAlert
	"This is because the object is able to respond to the message even if it is for throwing an exception"

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodInstanceNotIndexable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self deny: typeChecker hasAlerts .
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:26:40' prior: 50654186!
test09MessageSentToMethodWithNoReturnTypeGeneratesAlert
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageWithNoReturnTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self deny: typeChecker hasAlerts .
	! !

aMessageNode receiver!

!testRun: #TypeCheckerDragonTest #test09MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:28:12'!
ERROR!
!TypeCheckerDragonMethodVisitor methodsFor: 'alerts' stamp: 'JFGO 11/23/2023 19:29:33' prior: 50654079!
addWarning: anIncompleteTypeInfoError node: aMessageNode
"TODO. We still don't know about warnings, this message is for coupling with incompleteTypeInfo"
	self addAlertWithMessage: 'Cannot deduce Receiver Type'
! !

!testRun: #TypeCheckerDragonTest #test09MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:29:54'!
ERROR!
!TypeCheckerDragonMethodVisitor methodsFor: 'alerts' stamp: 'JFGO 11/23/2023 19:30:30'!
addProblem: anIncompleteTypeInfoError node: aMessageNode
"TODO. We still don't know about warnings, this message is for coupling with incompleteTypeInfo"
	self addAlertWithMessage: 'Cannot deduce Receiver Type'
! !

!testRun: #TypeCheckerDragonTest #test09MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:32:27'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test09MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:32:27'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:32:58' prior: 50654202!
test09MessageSentToMethodWithNoReturnTypeGeneratesAlert
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageWithNoReturnTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Method has live typing disabled'.
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:33:34' prior: 50654252!
test09MessageSentToMethodWithNoReturnTypeGeneratesAlert
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageWithNoReturnTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Cannot deduce Receiver Type'.
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:34:25' prior: 50654267!
test09MessageSentToMethodWithNoReturnTypeGeneratesAlert
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageWithNoReturnTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	"So far, this test does not generate value versus test03, but we are waiting definition of error vs warning vs problem"
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Cannot deduce Receiver Type'.
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:34:33' prior: 50654282!
test09MessageSentToMethodWithNoReturnTypeGeneratesAlert
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageWithNoReturnTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	"TODO. So far, this test does not generate value versus test03, but we are waiting definition of error vs warning vs problem"
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Cannot deduce Receiver Type'.
	! !

!testRun: #TypeCheckerDragonTest #test09MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:34:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/23/2023 19:34:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/23/2023 19:34:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 19:34:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 19:34:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 19:34:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:34:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/23/2023 19:34:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 11/23/2023 19:34:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:34:35'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:38:33'!
test03PrimitiveMethodsDontCheckTypes

	| methodToCheck typeChecker |
	
	methodToCheck := Array >> #elementsForwardIdentityTo:.
	
	typeChecker := methodToCheck typeCheckDragon.
	
	self deny: typeChecker hasAlerts.
! !

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 11/23/2023 19:38:40'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 11/23/2023 19:38:40'!
FAILURE!
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 11/23/2023 19:39:59' prior: 50650612!
typeCheck
	compiledMethod isPrimitive ifTrue: [^self].
	compiledMethod isAnnotatingTypes 
		ifTrue: [self typeCheckWhenEnabledTyping] 
		ifFalse: [ self typeCheckWhenDisabledTyping]! !

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 11/23/2023 19:40:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 11/23/2023 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/23/2023 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/23/2023 19:40:04'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 11/23/2023 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/23/2023 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 11/23/2023 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/23/2023 19:40:04'!
FAILURE!

compiledMethod isPrimitive!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/23/2023 19:40:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 19:41:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 11/23/2023 19:41:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 19:41:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/23/2023 19:41:28'!
PASSED!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/23/2023 19:42:21' prior: 50650368!
emptyMethodEnableTyping
	"Actually, by default type checking will be enabled. Disable it manually from outside. Method name is for declarativity purposes"
	1 + 1.! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/23/2023 19:42:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/23/2023 19:42:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/23/2023 19:42:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 19:42:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 11/23/2023 19:42:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 19:42:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 19:42:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:42:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/23/2023 19:42:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 11/23/2023 19:42:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:42:27'!
PASSED!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/23/2023 19:43:00'!
emptyMethodPrimitive! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:43:18' prior: 50654360!
test03PrimitiveMethodsDontCheckTypes

	| methodToCheck typeChecker |
	
	methodToCheck := Array >> #elementsForwardIdentityTo:.
	methodToCheck := Array >> #s.
	
	typeChecker := methodToCheck typeCheckDragon.
	
	self deny: typeChecker hasAlerts.
! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:43:42' prior: 50654519!
test03PrimitiveMethodsDontCheckTypes

	| methodToCheck typeChecker |
	
	"methodToCheck := Array >> #elementsForwardIdentityTo:."
	methodToCheck := Array >> #emptyMethodPrimitive.
	
	typeChecker := methodToCheck typeCheckDragon.
	
	self deny: typeChecker hasAlerts.
! !

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 11/23/2023 19:43:44'!
ERROR!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:44:12' prior: 50654531!
test03PrimitiveMethodsDontCheckTypes

	| methodToCheck typeChecker |
	
	"methodToCheck := Array >> #elementsForwardIdentityTo:."
	methodToCheck := TypeCheckerDragonTestMethods >> #emptyMethodPrimitive.
	
	typeChecker := methodToCheck typeCheckDragon.
	
	self deny: typeChecker hasAlerts.
! !

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 11/23/2023 19:44:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/23/2023 19:44:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/23/2023 19:44:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 19:44:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 11/23/2023 19:44:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 19:44:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 19:44:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:44:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/23/2023 19:44:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 11/23/2023 19:44:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:44:13'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:45:35'!
test10MessageSentToMethodWithNoReturnTypeGeneratesAlert
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageWithNoReturnTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	"TODO. So far, this test does not generate value versus test03, but we are waiting definition of error vs warning vs problem"
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Cannot deduce Receiver Type'.
	! !

!methodRemoval: TypeCheckerDragonTest #test09MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:45:35'!
test09MessageSentToMethodWithNoReturnTypeGeneratesAlert
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageWithNoReturnTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	"TODO. So far, this test does not generate value versus test03, but we are waiting definition of error vs warning vs problem"
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Cannot deduce Receiver Type'.
	!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:45:39'!
test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts
	"This is because the object is able to respond to the message even if it is for throwing an exception"

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodInstanceNotIndexable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self deny: typeChecker hasAlerts .
	! !

!methodRemoval: TypeCheckerDragonTest #test08MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 11/23/2023 19:45:39'!
test08MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts
	"This is because the object is able to respond to the message even if it is for throwing an exception"

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodInstanceNotIndexable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self deny: typeChecker hasAlerts .
	!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:45:43'!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self assert: 2 equals: typeChecker alerts size.
	typeChecker alerts do: [:alert | 
		self assert: (alert isKindOf: TypeCheckerDragonAlert).
		self assert: 'Message Selector not implemented in Receiver' equals: alert message .
	].
	
	! !

!methodRemoval: TypeCheckerDragonTest #test07MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/23/2023 19:45:43'!
test07MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageArgumentToResolve.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	
	self assert: 2 equals: typeChecker alerts size.
	typeChecker alerts do: [:alert | 
		self assert: (alert isKindOf: TypeCheckerDragonAlert).
		self assert: 'Message Selector not implemented in Receiver' equals: alert message .
	].
	
	!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:45:47'!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithReceiverWithNoTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	! !

!methodRemoval: TypeCheckerDragonTest #test06MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/23/2023 19:45:47'!
test06MethodWithMessageWithNoReceiverTypeGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithReceiverWithNoTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:45:51'!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts

	| methodToCkeck typeChecker firstAlert secondAlert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithManyMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: 2 equals: typeChecker alerts size.
	firstAlert := typeChecker alerts first.
	self assert: 'Message Selector not implemented in Receiver' equals: firstAlert message .
	secondAlert := typeChecker alerts second.
	self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	
	! !

!methodRemoval: TypeCheckerDragonTest #test05MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/23/2023 19:45:51'!
test05MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts

	| methodToCkeck typeChecker firstAlert secondAlert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithManyMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: 2 equals: typeChecker alerts size.
	firstAlert := typeChecker alerts first.
	self assert: 'Message Selector not implemented in Receiver' equals: firstAlert message .
	secondAlert := typeChecker alerts second.
	self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	
	!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:45:55'!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	| methodToCkeck typeChecker firstAlert secondAlert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNestedNotUnderstoodOnReceiver.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: 2 equals: typeChecker alerts size.
	firstAlert := typeChecker alerts first.
	self assert: 'Message Selector not implemented in Receiver' equals: firstAlert message .
	secondAlert := typeChecker alerts second.
	self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	! !

!methodRemoval: TypeCheckerDragonTest #test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 19:45:55'!
test04MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	| methodToCkeck typeChecker firstAlert secondAlert |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNestedNotUnderstoodOnReceiver.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: 2 equals: typeChecker alerts size.
	firstAlert := typeChecker alerts first.
	self assert: 'Message Selector not implemented in Receiver' equals: firstAlert message .
	secondAlert := typeChecker alerts second.
	self assert: 'Cannot deduce Receiver Type' equals: secondAlert message .	
	!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:46:02'!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	! !

!methodRemoval: TypeCheckerDragonTest #test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/23/2023 19:46:02'!
test03MethodWithMessageNotUnderstoodByReceiverGeneratesAlert

	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstood.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Message Selector not implemented in Receiver'.
	!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:51:51'!
test11MessageNotUnderstoodAssignedToVariable
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageWithNoReturnTypes.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self deny: typeChecker hasAlerts.
	! !
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/23/2023 19:52:47'!
methodWithMessageNotUnderstoodAssignedToVariable
	! !
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 11/23/2023 19:53:11' prior: 50654866!
methodWithMessageNotUnderstoodAssignedToVariable
	| v1 |
	v1:= 'false' not.! !

method := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstoodAssignedToVariable.!

TypeCheckerDragonTestMethods printASTOn: method !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/23/2023 19:54:53' prior: 50654854!
test11MessageNotUnderstoodAssignedToVariable
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstoodAssignedToVariable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self deny: typeChecker hasAlerts.
	! !

!testRun: #TypeCheckerDragonTest #test11MessageNotUnderstoodAssignedToVariable stamp: 'JFGO 11/23/2023 19:57:13'!
FAILURE!
!TypeCheckerDragon methodsFor: 'typeChecking' stamp: 'JFGO 11/23/2023 19:57:55' prior: 50651844!
typeCheckWhenEnabledTyping
	(TypeCheckerDragonMethodVisitor for: compiledMethod collectingAlerts: alerts) accept.
	^self.! !

anAssignmentNode value!

anAssignmentNode variable !

----SNAPSHOT----(23 November 2023 20:00:08) CuisUniversity-5981.image priorSource: 10318973!

!methodRemoval: TypeCheckerDragonTest #test11MessageNotUnderstoodAssignedToVariable stamp: 'JFGO 11/23/2023 20:00:35'!
test11MessageNotUnderstoodAssignedToVariable
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithMessageNotUnderstoodAssignedToVariable.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self deny: typeChecker hasAlerts.
	!

----SNAPSHOT----(23 November 2023 20:01:04) CuisUniversity-5981.image priorSource: 10344210!

----QUIT----(24 November 2023 09:47:44) CuisUniversity-5981.image priorSource: 10344696!

----STARTUP---- (27 November 2023 19:06:46) as C:\Users\jgutierrez\OneDrive - HEXACTA S.A\Julian\isw1\Tesis\LiveTyping-TypeChecker\typeCheckerDragon_on_image_5981\CuisUniversity-5981.image!


----QUIT----(27 November 2023 19:08:40) CuisUniversity-5981.image priorSource: 10344790!

----STARTUP---- (27 November 2023 19:13:00) as C:\Users\jgutierrez\OneDrive - HEXACTA S.A\Julian\isw1\Tesis\LiveTyping-TypeChecker\typeCheckerDragon_on_image_5981\CuisUniversity-5981.image!


!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/27/2023 19:32:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/27/2023 19:32:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/27/2023 19:32:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 11/27/2023 19:32:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/27/2023 19:32:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/27/2023 19:32:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/27/2023 19:32:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/27/2023 19:32:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/27/2023 19:32:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 11/27/2023 19:32:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 11/27/2023 19:32:14'!
PASSED!

----SNAPSHOT----(27 November 2023 19:32:33) CuisUniversity-5981.image priorSource: 10345072!
!TypeCheckerDragonTestMethods methodsFor: 'DELETE THIS' stamp: 'JFGO 11/27/2023 19:50:05'!
m2
	| col |
	col:= OrderedCollection with: 1 with: 'string'.
	col do:[:item | ].! !

method := TypeCheckerDragonTestMethods >> #m2.!

TypeCheckerDragonTestMethods printASTOn: method!

TypeCheckerDragonTestMethods new m2!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/27/2023 20:06:21'!
test11MethodWithCollectionXXX
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #m2.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self fail.
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/27/2023 20:06:33' prior: 50655002!
test11MethodWithCollectionXXX
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #m2.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self deny: typeChecker hasAlerts.
	! !

aMessageNode receiver!

aMessageNode argumentsInEvaluationOrder!

self first!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/27/2023 20:19:38' prior: 50654039 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverTypes isEmpty and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlertWithMessage: 'Receiver has no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes ].
	
	"aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self]."! !

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/27/2023 20:19:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/27/2023 20:19:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 11/27/2023 20:19:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/27/2023 20:19:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/27/2023 20:19:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/27/2023 20:19:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/27/2023 20:19:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/27/2023 20:19:44'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 11/27/2023 20:19:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 11/27/2023 20:19:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionXXX stamp: 'JFGO 11/27/2023 20:19:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/27/2023 20:19:44'!
FAILURE!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 11/27/2023 20:19:58' prior: 50655026 overrides: 16906976!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverTypes |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverTypes:=aMessageNode receiverTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverTypes isEmpty and: [ incompleteTypeInfo isEmpty])
		ifTrue: [self addAlertWithMessage: 'Receiver has no types']
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedInAll: receiverTypes ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonTestMethods methodsFor: 'DELETE THIS' stamp: 'JFGO 11/27/2023 20:20:35' prior: 50654991!
m2
	| col |
	col:= OrderedCollection with: 1 with: 'string'.
	col do:[:item | item factorial].! !

TypeCheckerDragonTestMethods new m2!

aMessageNode argumentsInEvaluationOrder!

self first!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/27/2023 20:29:49'!
test11MethodWithCollectionIteratingGeneratesAlertForItemsWhenGenericsNotInstalled
	"TODO: This test should only pass when LiveTypingGenerics is weather disabled or not installed at all. Is it possible to control that here?"
	"i.e if it exists and it's installed, disable it just for this test"
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #m2.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self deny: typeChecker hasAlerts.
	! !

!methodRemoval: TypeCheckerDragonTest #test11MethodWithCollectionXXX stamp: 'JFGO 11/27/2023 20:31:26'!
test11MethodWithCollectionXXX
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #m2.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self deny: typeChecker hasAlerts.
	!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/27/2023 20:31:36' prior: 50655137!
test11MethodWithCollectionIteratingGeneratesAlertForItemsWhenGenericsNotInstalled
	"TODO: This test should only pass when LiveTypingGenerics is weather disabled or not installed at all. Is it possible to control that here?"
	"i.e if it exists and it's installed, disable it just for this test"
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #m2.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	! !
!TypeCheckerDragonTestMethods methodsFor: 'collections generics' stamp: 'JFGO 11/27/2023 20:32:57'!
methodWithCollectionWithNoTypeError
	| col |
	col:= OrderedCollection with: 1 with: 2.
	col do:[:item | item factorial].! !
!TypeCheckerDragonTestMethods methodsFor: 'collections generics' stamp: 'JFGO 11/27/2023 20:33:30'!
methodWithCollectionWithErrorTypeOnIteration
	| col |
	col:= OrderedCollection with: 1 with: 'string'.
	col do:[:item | item factorial].! !
!TypeCheckerDragonTest methodsFor: 'as yet unclassified' stamp: 'JFGO 11/27/2023 20:33:30' prior: 50655166!
test11MethodWithCollectionIteratingGeneratesAlertForItemsWhenGenericsNotInstalled
	"TODO: This test should only pass when LiveTypingGenerics is weather disabled or not installed at all. Is it possible to control that here?"
	"i.e if it exists and it's installed, disable it just for this test"
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithCollectionWithErrorTypeOnIteration.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	! !

!methodRemoval: TypeCheckerDragonTestMethods #m2 stamp: 'JFGO 11/27/2023 20:33:30'!
m2
	| col |
	col:= OrderedCollection with: 1 with: 'string'.
	col do:[:item | item factorial].!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionIteratingGeneratesAlertForItemsWhenGenericsNotInstalled stamp: 'JFGO 11/27/2023 20:33:45'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionIteratingGeneratesAlertForItemsWhenGenericsNotInstalled stamp: 'JFGO 11/27/2023 20:33:45'!
FAILURE!

self alerts first message!

self alerts second message!
!TypeCheckerDragonTestMethods methodsFor: 'collections generics' stamp: 'JFGO 11/27/2023 20:37:05' prior: 50655186!
methodWithCollectionWithNoTypeError
	| col |
	"col:= OrderedCollection with: 1 with: 2."
	"TODO. Tener n elementos del mismo tipo con error genera n errores iguales. Podemos identificar un error duplicado y no agregarlo a la lista?"
	col:= OrderedCollection with: 1.
	col do:[:item | item factorial].! !

!testRun: #TypeCheckerDragonTest #test01EmptyMethodDoesNotGenerateAlerts stamp: 'JFGO 11/27/2023 20:37:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesAlert stamp: 'JFGO 11/27/2023 20:37:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 11/27/2023 20:37:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesAlert stamp: 'JFGO 11/27/2023 20:37:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 11/27/2023 20:37:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 11/27/2023 20:37:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 11/27/2023 20:37:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 11/27/2023 20:37:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 11/27/2023 20:37:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesAlert stamp: 'JFGO 11/27/2023 20:37:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionIteratingGeneratesAlertForItemsWhenGenericsNotInstalled stamp: 'JFGO 11/27/2023 20:37:07'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionIteratingGeneratesAlertForItemsWhenGenericsNotInstalled stamp: 'JFGO 11/27/2023 20:37:07'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/27/2023 20:37:43' prior: 50655201!
test11MethodWithCollectionIteratingGeneratesAlertForItemsWhenGenericsNotInstalled
	"TODO: This test should only pass when LiveTypingGenerics is weather disabled or not installed at all. Is it possible to control that here?"
	"i.e if it exists and it's installed, disable it just for this test"
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithCollectionWithNoTypeError.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assertTypeChecker: typeChecker hasOneAlertWithMessage: 'Receiver has no types'.
	! !

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionIteratingGeneratesAlertForItemsWhenGenericsNotInstalled stamp: 'JFGO 11/27/2023 20:37:46'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionIteratingGeneratesAlertForItemsWhenGenericsNotInstalled stamp: 'JFGO 11/27/2023 20:37:46'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionIteratingGeneratesAlertForItemsWhenGenericsNotInstalled stamp: 'JFGO 11/27/2023 20:38:03'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionIteratingGeneratesAlertForItemsWhenGenericsNotInstalled stamp: 'JFGO 11/27/2023 20:38:03'!
FAILURE!

self alerts first message!

self alerts second message!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/27/2023 20:40:04'!
test12MethodWithCollectionIteratingGeneratesAlertForItemsWithErrorTypes
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithCollectionWithNoTypeError.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: true. "TODO."
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/27/2023 20:40:18' prior: 50655348!
test12MethodWithCollectionIteratingGeneratesAlertForItemsWithErrorTypes
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithCollectionWithErrorTypeOnIteration.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: true. "TODO."
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 11/27/2023 20:41:31' prior: 50655361!
test12MethodWithCollectionIteratingGeneratesAlertForItemsWithErrorTypes
	
	| methodToCkeck typeChecker |
	
	methodToCkeck := TypeCheckerDragonTestMethods >> #methodWithCollectionWithErrorTypeOnIteration.
	
	
	typeChecker := methodToCkeck typeCheckDragon.
	
	self assert: true. "TODO. Instalar Generics y ver que onda"
	! !

----QUIT----(27 November 2023 20:41:35) CuisUniversity-5981.image priorSource: 10346784!