

----STARTUP---- (30 May 2024 19:00:14) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


----End fileIn of C:\Users\juli_\Tesis\TESIS-LAST\windows64\LiveTypingGenerics.pck.st----!

----End fileIn of C:\Users\juli_\Tesis\TESIS-LAST\windows64\LiveTypingTypeChecker.pck.st----!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/30/2024 19:06:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 5/30/2024 19:06:42'!
PASSED!

!testRun: #FlowGraphCreationTest #test01onVarToVarAssigmentAssignorFlowsToAssignee stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test02ThereIsAlwaysANodeForReturnValue stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test03onAssigmentToAssigmentAllVarsAreLinked stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test04onVarReturnItFlowsToReturnNode stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test05CanTrackAMethodThroughMessageSends stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test06TrackedMethodIsLinkedToVarsOnAssigment stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test07CanTrackMultipleMethodThroughMessageSends stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test08TrackedMethodsAreLinkedToVarsOnAssigment stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test09InstVarsAreAlwaysAddedToGraph stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #FlowGraphCreationTest #test10WhenVarIsConnectedToReturnValueItsNeighborsAreAlsoConnected stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test01CanAddAGenericType stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test02GenericsDoesNotRepeat stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test03GenericsCannotBeAlteredFromOuterScope stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test04CanSaveASelectorForAGeneric stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test05TracedMethodsCanBeRecovered stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test06TracedMethodsCantBeModifiedExternally stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test07ATracedMethodCanBeDeleted stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test08AGenericCanBeDeleted stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test09CanSaveAGetterSelectorForAGeneric stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test10GetterSelectorsCantBeModifiedExternally stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test11CanStoreAndRetrieveTracedMethodRefs stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test12CanStoreAndRetrieveMultipleTracedMethodRefs stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test13AnalysisCanBeInitializedRecursively stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test14RecursiveAnalysisHasRecursiveTracedMethods stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test15GraphsAreDeletedWhenAllAnalysisFinish stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test16CanStoreGenericTypeConstructors stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test17SaveASelectorForAGenericWithMultipleParams stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #GAStorageTest #test18AGetterMethodCanBeDeleted stamp: 'JFGO 5/30/2024 19:07:00'!
PASSED!

!testRun: #InferenceTest #test01GenericClassesAreReplacedByGenericTypeInstances stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test02GenericClassesAreMergedWithTheirGenericTypes stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test03LiteralCollectionOneLiteralElement stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test04LiteralCollectionLiteralElementsOfDifferentType stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test05LiteralCollectionElementsFromVariable stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test06LiteralCollectionElementsFromMethodCall stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test07LiteralCollectionElementsFromMethodCallWithArgumentsTypesFromContext stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test08LiteralCollectionElementsFromRecursiveMethod stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test09LiteralCollectionFlowingInMultipleVariables stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test10LiteralCollectionFlowingInMultipleVariablesArgumentInMethod stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test11LiteralCollectionFlowingInMultipleVariablesEachReceivingMessages stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test12LiteralCollectionFlowingInMultipleVariablesEachReceivingMessagesBeforeAndAfterAssigment stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test13LiteralCollectionFlowingInMultipleVariablesArgumentInMultipleMethod stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test14LiteralCollectionFlowingInMultipleVariablesMultipleArgumentsInMethod stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test15LiteralCollectionFlowingToNonSelfMethod stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test16LiteralCollectionFlowingToSuperMethod stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test17GenericTypeReturningParameterFromGetter stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test18MethodReturningGenericType stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test19InstanceVariableUsedOnlyWithinCurrentClass stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test20InstanceVariableExposedByGetterAssignToVariable stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test21InstanceVariableExposedByMultipleGettersAssignToVariable stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test22InstanceVariableMessageSendsToGetters stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test23InstanceVariableGettersUsedAsArguments stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test24InstanceVariableFlowingToOtherVariables stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test25CollectionContainingAnotherCollection stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test26CollectionContainingMultipleCollections stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test27CollectionAssignedFromMethodCallAndNotUsedAfter stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test28ReturnResultOfMethodCall stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test29MethodCallOnMultipleClassesWithSameProtocol stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test30MethodCallInsideGenericClasses stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test31CascadeMessageSends stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test32ArgumentCollectsInfoFromCalls stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test33ArgumentCollectsInfoFromCallsAndCurrentMethod stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test34GenericTypeConstructorFromArguments stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test35GenericTypeConstructorFromArgumentParameters stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test36TraceReturnValueWhenMethodReturnsArgument stamp: 'JFGO 5/30/2024 19:07:01'!
PASSED!

!testRun: #InferenceTest #test37AddingFromOtherCollectionParameters stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test38CollectionFromLiteralNode stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test39CollectionWithMultipleParameters stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test40GetterForGenericWithMultipleParameters stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test41ArgumentCollectsInfoFromCallsWithMultipleParameters stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test42ArgumentCollectsInfoFromCallsAndCurrentMethodWithMultipleParameters stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test43ReturnTypeOfSetterMethodIsLastArgument stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test44CollectionIsDetectedWhenReturnedFromMethodAndAssignedToVariable stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #InferenceTest #test45ArgumentCollectsInfoCurrentMethodWithNoCallers stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test001SameType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test002DifferentType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test003SameHierarchy stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test004CommonSupertypeIsObject stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test005SameGeneric stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test006SameGenericDifferentOrder stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test007GenericsHandleSystemTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test008NestedGenerics stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test009GenericSupertypeWithSameGenerics stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test010GenericSupertypeWithCommonGenerics stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test011FixedAgainstGenericType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test012FixedAgainstGenericTypeInList stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test013GenericAgainstFixedTypeInList stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test014NestedGenerics stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test015NestedGenericsWithDifferentDepth stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test016EmptyTypeAgainstSelf stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test017EmptyTypeAgainstFixedType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test018EmptyTypeAgainstGenericType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test019UnionTypeCollectsTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test020UnionTypeAgainstSelf stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test021UnionTypeAgainstInnerElement stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test022ConvertionAccordingToReceiver stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test023ConvertionToArray stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test024EnumeratingClassTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test025EnumeratingLiveTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #LiveTypeTests #test026EnumeratingLiveAndClassTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test001EmptyRawTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test002AllClasses stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test003AnEmptyCollectionsContentType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test004ClassesAndCollectionsContentType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test005ACollectionsContentTypeWithTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test006SeveralCollectionsContentTypesWithTypes stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test007CreateFixedType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test008CreateEmptyType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test009CreateGenericType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test010CreateGenericNestedType stamp: 'JFGO 5/30/2024 19:07:02'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test011CreateGenericNonEmptyType stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test012CreateGenericMultipleNestedType stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test001TooltipForEmptyCollection stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test002TooltipForSingleItemCollection stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test003TooltipForTwoItemsWhenSupertypeIsObject stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test004TooltipForTwoItemsWithCommonSupertype stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test005TooltipForVariableWithCollectionAndSomeOtherType stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test006TooltipForMergedCollections stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test007TooltipForSameCollectionsWithSameTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test008TooltipForSameCollectionsWithCommonSuperTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test009TooltipForSameCollectionsWithNoSuperTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test010TooltipForCommonSuperCollectionsWithCommonSuperTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test011TooltipForNestedCollections stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test012TooltipForCommonSuperCollectionsWithNoSuperTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test013TooltipForCommonSuperCollectionsRepeatedWithNoSuperTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test014TooltipForCommonSuperCollectionsWithEmptyCollections stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test015TooltipForCommonSuperCollectionsWithAnEmptyCollection stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test016TooltipForCommonSuperCollectionsAndNoCollection stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test017TooltipForCommonSuperTypeAndNoCommonType stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test018TooltipForCommonSuperCollectionsAndNoCollection stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test019TooltipForNestedCollectionsOneOfThemEmpty stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test020TooltipForNestedCollectionsBothSameTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test021TooltipForNestedCollectionsEachNoCommonInnerType stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test022TooltipForNestedCommonSuperCollectionsNoCommonInnerType stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test023TooltipForNestedNoCommonSupertype stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test024TooltipForNestedRepeatedTypeDifferentInners stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test025TooltipForNestedCommonTypesAndIntruder stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test026TooltipForNestedCommontTypesWithTwoLevelIntruder stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test027TooltipForAwfullyComplexInnerCollections stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test028TooltipOnlyOneType stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test029TooltipCommonSuperTypeSingleClasses stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test030TooltipNoTypes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test031TooltipNoCommonSuperTypeSingleClasses stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TooltipTests #test032TooltipForCollectionWithTwoParameters stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeFlowGraphTest #test01IsCreatedEmpty stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeFlowGraphTest #test02AddingANodeIncreasesTheirCount stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeFlowGraphTest #test03AddingAnEdgeIncreasesTheirCount stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeFlowGraphTest #test04CannotLinkInexistantNodes stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeFlowGraphTest #test05CanAccessNodesButCantDirectlyAddToResult stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeFlowGraphTest #test06CheckingConnectionOnAssociatedUndirectedGraph stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test001Empty stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test002Fixed stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test003GenericSingleValue stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test004MultipleFixed stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test005GenericMultipleValues stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test006MultipleFixedWithNoCommonSupertype stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test007MultipleGenerics stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test008GenericEmptyValue stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test009MultipleGenericsEmptyValue stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeNodeTests #test010EmptyAndFixed stamp: 'JFGO 5/30/2024 19:07:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/30/2024 19:07:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 5/30/2024 19:07:11'!
PASSED!

----QUIT----(30 May 2024 19:07:20) CuisUniversity-6169.image priorSource: 6245038!

----STARTUP---- (31 May 2024 09:29:27) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 09:35:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 09:35:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 5/31/2024 09:35:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 5/31/2024 09:35:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 5/31/2024 09:35:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 5/31/2024 09:35:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 5/31/2024 09:35:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 5/31/2024 09:35:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 5/31/2024 09:35:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 5/31/2024 09:35:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 5/31/2024 09:35:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 5/31/2024 09:35:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 5/31/2024 09:35:29'!
PASSED!

!methodRemoval: IsTypeMessageContextApplier #JFGO2liveTypesFor:in:addingIncompleteTypeInfoTo: stamp: 'JFGO 5/31/2024 09:58:27'!
JFGO2liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	(self shouldApplyTo: aParseNode) ifTrue: [ | implementors |
		implementors := Smalltalk allImplementorsOf: messageSelector .
		implementors := implementors select: [:aMethodReference | aMethodReference compiledMethod isReturnSpecialTrue ]. 
		implementors := implementors collect: [:aMethodReference | aMethodReference actualClass].
		^RawToLiveTypesAdapter new adapt: implementors .
	]
	ifFalse:[^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.].!

!methodRemoval: IsTypeMessageContextApplier #JFGOliveTypesFor:in:addingIncompleteTypeInfoTo: stamp: 'JFGO 5/31/2024 09:58:30'!
JFGOliveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	(self shouldApplyTo: aParseNode) ifTrue: [ | originalTypes |
		originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		^self filterLiveTypesFrom: originalTypes .
	]
	ifFalse:[^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.].!

!methodRemoval: IsTypeMessageContextApplier #filterLiveTypesFrom: stamp: 'JFGO 5/31/2024 09:58:37'!
filterLiveTypesFrom: aTypeList
	| filteredLiveTypes |
	filteredLiveTypes := OrderedCollection new.
	aTypeList liveTypesDo: [ :aLiveType | 
		(aLiveType liveClass lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  (self shouldAddTypeFor: method) ifTrue: [filteredLiveTypes add: aLiveType]].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .!

!methodRemoval: IsTypeMessageContextApplier #shouldAddTypeFor: stamp: 'JFGO 5/31/2024 09:58:45'!
shouldAddTypeFor: aCompiledMethod
	| methodReturnFalseAndRejecting methodReturnTrueAndCasting |
	methodReturnFalseAndRejecting := typeShouldFilter and: [ aCompiledMethod isReturnSpecialFalse ].
	methodReturnTrueAndCasting := typeShouldFilter not and: [ aCompiledMethod isReturnSpecialTrue ].
	
	^methodReturnFalseAndRejecting or: [methodReturnTrueAndCasting ].!
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 09:59:17'!
is: aType subclassOfAny: implementors
	^implementors anySatisfy:[:anImplementorType | anImplementorType withAllSubclasses anySatisfy: [:aSubclass | aSubclass = aType ]. ].
		
	! !
!IsTypeMessageContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 5/31/2024 09:59:17' prior: 50539147 overrides: 50538967!
liveTypesCastingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| implementors subclassesTypes originalTypes |
	
	implementors := self implementorsReturningTrue.
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	subclassesTypes := originalTypes select: [:aType | self is: aType subclassOfAny: implementors.].
	subclassesTypes isEmpty ifTrue:[
		^RawToLiveTypesAdapter new adapt: implementors .
	] ifFalse:[
		^RawToLiveTypesAdapter new adapt: subclassesTypes .
	].
		
	! !

!methodRemoval: IsTypeMessageContextApplier #isType:subclassOfAny: stamp: 'JFGO 5/31/2024 09:59:17'!
isType: aType subclassOfAny: implementors
	^implementors anySatisfy:[:anImplementorType | anImplementorType withAllSubclasses anySatisfy: [:aSubclass | aSubclass = aType ]. ].
		
	!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/31/2024 10:00:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/31/2024 10:00:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/31/2024 10:00:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:00:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/31/2024 10:00:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 5/31/2024 10:00:49'!
PASSED!
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:01:19' prior: 50539170 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	"originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo."
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	originalTypes liveTypesDo: [ :aLiveType | 
		(aLiveType liveClass lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aLiveType]].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:02:14' prior: 50542124 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	"originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo."
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	originalTypes do: [ :aType | 
		(aType liveClass lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:02:19' prior: 50542151 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	"originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo."
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:02:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/31/2024 10:02:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/31/2024 10:02:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/31/2024 10:02:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:02:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:02:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:02:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:02:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:02:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 5/31/2024 10:02:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 5/31/2024 10:02:29'!
PASSED!
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:02:54' prior: 50542177 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

----End fileIn of C:\Users\juli_\Tesis\TESIS-LAST\windows64\Packages\TerseGuide.pck.st----!
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:04:14' prior: 50542481 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ].
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:a :b].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:07:39' prior: 50545423 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ].
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | (aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [result add: aType]].].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:07:49' prior: 50545447 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	"originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ]."
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | (aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [result add: aType]].].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:07:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:07:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:07:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:07:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:07:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:07:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:07:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:07:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:07:57'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 5/31/2024 10:07:57'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 5/31/2024 10:07:57'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 5/31/2024 10:07:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:08:02'!
ERROR!
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:09:00' prior: 50545476 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	"originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ]."
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | true].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:09:44' prior: 50545716 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	"originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ]."
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | (aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:10:21' prior: 50545741 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	"originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ]."
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | (aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [result add: aType]].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:11:04'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:11:51'!
ERROR!
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:13:07' prior: 50545770 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := OrderedCollection new.
	"originalTypes do: [ :aType | 
		(aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [filteredLiveTypes add: aType]].
		 ]."
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | (aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [result add: aType]. result.].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:13:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/31/2024 10:13:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/31/2024 10:13:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/31/2024 10:13:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 5/31/2024 10:13:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 5/31/2024 10:13:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 5/31/2024 10:13:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 5/31/2024 10:13:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 5/31/2024 10:13:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 5/31/2024 10:13:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 5/31/2024 10:13:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 5/31/2024 10:13:24'!
PASSED!
!IsTypeMessageContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 5/31/2024 10:13:39' prior: 50545807 overrides: 50538975!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes filteredLiveTypes |
	
	originalTypes := self originalRawTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	filteredLiveTypes := originalTypes inject: OrderedCollection new into: [:result :aType | (aType lookupSelector: messageSelector ) 
			ifNotNil: [ :method |  method isReturnSpecialFalse ifTrue: [result add: aType]. result.].
		 ].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

----QUIT----(31 May 2024 10:14:58) CuisUniversity-6169.image priorSource: 6713515!

----STARTUP---- (25 June 2024 18:38:13) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 6/25/2024 18:44:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 6/25/2024 18:44:36'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/25/2024 19:14:43'!
m1

| v1 |
v1:= 'hola'.
! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/25/2024 19:15:36' prior: 50546425!
m1

| v1 |
v1:= 'hola'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1 + 1.].
! !

TypesWithContextAppliersTestMethods new perform: #m1.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/25/2024 19:18:23'!
m2

| v1 |
v1:= 1.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = SmallInteger ifTrue:[ v1 + 1.].
! !

TypesWithContextAppliersTestMethods new perform: #m2.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/25/2024 19:19:40'!
m3

| v1 |
v1:= '1'.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = String ifTrue:[ v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m3.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/25/2024 19:20:09' prior: 50546448!
m3

| v1 |
v1:= 1.
v1 isInteger ifTrue:[ v1 + 1 .].
v1 class = String ifTrue:[ v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m3.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/25/2024 19:25:40'!
m4

| v1 |
v1:= 'hola'.
v1:= 1.
v1 < 5 ifTrue:[ v1 + 1 .].
v1 class = String ifTrue:[ v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m4.!

'hola' < 'bb'!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/25/2024 19:29:13' prior: 50546466!
m4

| v1 |
v1:= 'hola'.
v1:= 1.
v1 < 5 ifTrue:[ v1 + 1 .].
v1 = 5 ifTrue:[ v1 + 1 .].
v1 class = String ifTrue:[ v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m4.!

----SNAPSHOT----(25 June 2024 19:32:51) CuisUniversity-6169.image priorSource: 6863629!
!TypesWithContextAppliersTestMethods methodsFor: 'disjunction contexts' stamp: 'JFGO 6/26/2024 18:28:46'!
disjunctionCastDifferentTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1:= 1.

(v1 class = String or: [v1 class = OrderedCollection]) ifTrue:[ v1 isEmpty.]! !
!TypeContextAppliers methodsFor: 'updating / restoration' stamp: 'JFGO 6/26/2024 18:33:02' prior: 50538665!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	self halt.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ 
		newContext := self buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aMessageNode isIfNil ifTrue: [ 
		newContext := self buildContextForIfNilMessagesWith: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !
!TypesWithContextAppliersTest methodsFor: 'equals nil type context' stamp: 'JFGO 6/26/2024 18:37:38'!
test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining
	
	self withMessageName: #ifNotNilMessageRejects
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: Array.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'disjunction context' stamp: 'JFGO 6/26/2024 18:38:19' prior: 50546519!
test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining
	
	self withMessageName: #disjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].
	! !

self receiverOrCascadeReceiver!

self receiverOrCascadeReceiver isMessageNode!
!TypeContextAppliers methodsFor: 'updating / restoration' stamp: 'JFGO 6/26/2024 18:46:53' prior: 50546497!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ 
		newContext := self buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aMessageNode isIfNil ifTrue: [ 
		newContext := self buildContextForIfNilMessagesWith: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 18:53:03' prior: 50538846!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	self halt.
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 18:53:34' prior: 50546571!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	self halt.
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 18:58:13' prior: 50546623!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	self halt.
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 19:02:08' prior: 50546675!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	self halt.
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments first withBlockRejecting: false.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

condition receiver!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 19:02:53' prior: 50546728!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments first withBlockRejecting: false.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

condition arguments first!

condition arguments first!

condition arguments!

condition receiver !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 19:04:43' prior: 50546789!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments second withBlockRejecting: false.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

condition arguments second!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/26/2024 19:06:01'!
ERROR!

condition arguments second!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 19:08:31' prior: 50546852!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments second firstArgument withBlockRejecting: false.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/26/2024 19:08:47'!
ERROR!

condition arguments second!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/26/2024 19:09:56' prior: 50546919!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: false.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

condition arguments second statements first!

----SNAPSHOT----(26 June 2024 19:11:11) CuisUniversity-6169.image priorSource: 6874683!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/27/2024 18:23:00' prior: 50546985!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: false.
		"DisjunctionContextApplier"
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/27/2024 18:29:02' prior: 50547050!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: false.
		"DisjunctionContextApplier "
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!classDefinition: #DisjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/27/2024 18:36:23'!
TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/27/2024 18:33:47' prior: 50547112!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: false.
		DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/27/2024 18:36:56'!
ERROR!
!DisjunctionContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 6/27/2024 18:37:13'!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier ! !
!DisjunctionContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 6/27/2024 18:37:54' prior: 50547254!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier 
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier ! !

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/27/2024 18:37:55'!
ERROR!

!classDefinition: #DisjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/27/2024 18:38:14'!
TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: 'leftContextApplier_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #DisjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/27/2024 18:38:14'!
TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: 'leftContextApplier_CHANGE_ME rightContextApplier_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #DisjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/27/2024 18:38:15'!
TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: 'leftContextApplier_CHANGE_ME rightContextApplier_CHANGE_ME generalContextApplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!DisjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 6/27/2024 18:38:15'!
initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier 
	self shouldBeImplemented.
	leftContextApplier_CHANGE_ME := leftContextApplier.
	rightContextApplier_CHANGE_ME := rightContextApplier.
	generalContextApplier := aGeneralContextApplier.! !
!DisjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 6/27/2024 18:39:48' prior: 50547321!
initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: previousContextApplier
	
	! !

TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #DisjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/27/2024 18:46:45'!
TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!DisjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 6/27/2024 19:08:32' prior: 50547335!
initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/27/2024 19:17:48' prior: 50547184!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: false.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: false.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/27/2024 19:17:50'!
ERROR!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:18:19' overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:19:15' prior: 50547443 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := leftContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := rightContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:20:28' prior: 50547450 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := leftContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := rightContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	self halt.
	^OrderedCollection new.! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:35:31'!
rawTypesOver: aContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	| liveTypes rawTypes |
	liveTypes := aContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	liveTypes liveTypesDo: [:aLiveType | rawTypes add: aLiveType liveClass].
	
	^rawTypes.! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:35:52' prior: 50547482!
rawTypesOver: aContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	| liveTypes rawTypes |
	rawTypes := OrderedCollection new.
	liveTypes := aContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	liveTypes liveTypesDo: [:aLiveType | rawTypes add: aLiveType liveClass].
	
	^rawTypes.! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:37:24' prior: 50547466 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	^OrderedCollection new.! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:38:31' prior: 50547513 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	^leftTypes addAll: rightTypes .! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:49:46' prior: 50547531 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	^RawToLiveTypesAdapter new adapt: (leftTypes addAll: rightTypes ).! !

leftTypes addAll: rightTypes!

leftTypes addAllLast: rightTypes!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:51:57' prior: 50547549 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	leftTypes addAll: rightTypes.
	^RawToLiveTypesAdapter new adapt: leftTypes .! !

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/27/2024 19:52:09'!
ERROR!
!DisjunctionContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 6/27/2024 19:53:24' overrides: 50538660!
previous
	^previousContext.! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 6/27/2024 19:53:27'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/27/2024 19:53:28'!
PASSED!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 19:53:41' prior: 50547570 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	leftTypes addAll: rightTypes.
	^RawToLiveTypesAdapter new adapt: leftTypes .! !

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/27/2024 19:53:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/27/2024 19:53:45'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'disjunction contexts' stamp: 'JFGO 6/27/2024 19:54:46'!
disjunctionCastSameTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1:= 1.

(v1 class = String or: [v1 isString]) ifTrue:[ v1 isEmpty.]
! !
!TypesWithContextAppliersTest methodsFor: 'disjunction context' stamp: 'JFGO 6/27/2024 20:01:21'!
test43DisjunctionOnSameTypesCollectsDoesntRepeatThem
	
	self withMessageName: #disjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'disjunction context' stamp: 'JFGO 6/27/2024 20:01:34' prior: 50548125!
test43DisjunctionOnSameTypesCollectsDoesntRepeatThem
	
	self withMessageName: #disjunctionCastSameTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].
	! !

!testRun: #TypesWithContextAppliersTest #test43DisjunctionOnSameTypesCollectsDoesntRepeatThem stamp: 'JFGO 6/27/2024 20:06:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test43DisjunctionOnSameTypesCollectsDoesntRepeatThem stamp: 'JFGO 6/27/2024 20:06:49'!
PASSED!

l1 := OrderedCollection new.!

l1 add: String.!

l1 add: String.!

l1!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/27/2024 20:08:01' prior: 50547811 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	leftTypes addAll: rightTypes.
	^RawToLiveTypesAdapter new adapt: leftTypes .! !

l1 addAll:l1!

l1 addAll:l1!

l1 addAll:l1!

l1 := OrderedCollection new.!

l1 add: String.!

l1 addAll:l1!
!TypesWithContextAppliersTest methodsFor: 'disjunction context' stamp: 'JFGO 6/27/2024 20:11:14' prior: 50548140!
test43DisjunctionOnSameTypesCollectsDoesntRepeatThem
	"TODO. Borrar este test, pasa de una por el rawAdapter"
	self withMessageName: #disjunctionCastSameTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].
	! !

----QUIT----(27 June 2024 20:11:18) CuisUniversity-6169.image priorSource: 6892655!

----STARTUP---- (29 June 2024 18:41:59) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!TypesWithContextAppliersTest methodsFor: 'disjunction context' stamp: 'JFGO 6/29/2024 19:02:52'!
test44NegatedDisjunctionRejectsCastedTypes
	"TODO. Borrar este test, pasa de una por el rawAdapter"
	self withMessageName: #disjunctionNegated
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'disjunction context' stamp: 'JFGO 6/29/2024 19:03:08' prior: 50548207!
test44NegatedDisjunctionRejectsCastedTypes
	
	self withMessageName: #disjunctionNegated
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	! !
!TypesWithContextAppliersTestMethods methodsFor: 'disjunction contexts' stamp: 'JFGO 6/29/2024 19:05:26'!
disjunctionNegated

	| v1 |
	v1:= OrderedCollection new.
	v1:= 'some string'.
	v1:= 1.

	(v1 class = OrderedCollection or: [v1 isString]) not ifTrue:[ v1 factorial.]
! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/29/2024 19:06:58' prior: 50547374!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: true.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: true.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/29/2024 19:30:07'!
m5

| v1 |
v1:= OrderedCollection new.
v1:= 'hola'.
v1:= 1.


(v1 class = OrderedCollection and: [v1 isString] ) not ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m5.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/29/2024 19:31:02' prior: 50548307!
m5

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.



(v1 class = OrderedCollection and: [v1 isString] ) not ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m5. !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/29/2024 19:36:12' prior: 50548318!
m5

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


"tautologias"
(v1 class = OrderedCollection and: [v1 isString] ) not ifTrue:[ ^'entro'. ].
^'no entro'.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/29/2024 19:36:39' prior: 50548242!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/29/2024 19:39:00'!
PASSED!

----SNAPSHOT----(29 June 2024 19:44:46) CuisUniversity-6169.image priorSource: 6929582!
!DisjunctionContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 6/30/2024 12:39:00'!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier ! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 6/30/2024 12:39:00' prior: 50548338!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: false.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!methodRemoval: DisjunctionContextApplier class #withLeftApplier:withRightContextApplier:withPreviousContext: stamp: 'JFGO 6/30/2024 12:39:00'!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier 
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/30/2024 12:39:18' prior: 50548424!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!DisjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 6/30/2024 12:40:10'!
initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	! !
!DisjunctionContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 6/30/2024 12:40:10' prior: 50548411!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting ! !

!methodRemoval: DisjunctionContextApplier #initializeWithLeftApplier:withRightContextApplier:withPreviousContext: stamp: 'JFGO 6/30/2024 12:40:10'!
initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	!

!classDefinition: #DisjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/30/2024 12:41:00'!
TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier shouldReject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!DisjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 6/30/2024 12:40:57' prior: 50548571!
initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	shouldReject:= isRejecting .
	! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 12:41:58' prior: 50548164 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	shouldReject ifFalse:[
		leftTypes addAll: rightTypes.
	] ifTrue:[
		leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: leftTypes .! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 12:44:51' prior: 50548639 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	shouldReject ifFalse:[
		leftTypes addAll: rightTypes.
	] ifTrue:[
		leftTypes := leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: leftTypes .! !

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 6/30/2024 12:45:54'!
PASSED!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 12:46:06' prior: 50548661 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	shouldReject ifFalse:[
		leftTypes addAll: rightTypes.
	] ifTrue:[
		leftTypes := leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: leftTypes .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 6/30/2024 12:46:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test43DisjunctionOnSameTypesCollectsDoesntRepeatThem stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 6/30/2024 12:46:10'!
PASSED!

!methodRemoval: TypesWithContextAppliersTest #test43DisjunctionOnSameTypesCollectsDoesntRepeatThem stamp: 'JFGO 6/30/2024 12:46:26'!
test43DisjunctionOnSameTypesCollectsDoesntRepeatThem
	"TODO. Borrar este test, pasa de una por el rawAdapter"
	self withMessageName: #disjunctionCastSameTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].
	!

!methodRemoval: TypesWithContextAppliersTestMethods #disjunctionCastSameTypes stamp: 'JFGO 6/30/2024 12:46:33'!
disjunctionCastSameTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1:= 1.

(v1 class = String or: [v1 isString]) ifTrue:[ v1 isEmpty.]
!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 12:47:32' prior: 50548687 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	shouldReject ifFalse:[
		leftTypes := leftTypes union: rightTypes.
	] ifTrue:[
		leftTypes := leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: leftTypes .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 6/30/2024 12:47:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 6/30/2024 12:47:35'!
PASSED!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 12:48:29' prior: 50549023 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	shouldReject ifFalse:[
		types := leftTypes union: rightTypes.
	] ifTrue:[
		types := leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: types .! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 12:59:28'!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.



(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m6.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:00:31' prior: 50549354!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 isCollection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m6.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:01:28' prior: 50549365!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 class = Collection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ].
! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:02:10' prior: 50549377!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 class = Collection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection  ) ifTrue:[ ^v1 isEmpty. ].
! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:02:16' prior: 50549387!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 class = Collection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m6.!
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 13:03:04' prior: 50549332 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	self halt.
	shouldReject ifFalse:[
		types := leftTypes union: rightTypes.
	] ifTrue:[
		types := leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: types .! !
!DisjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 13:05:30' prior: 50549409 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	shouldReject ifFalse:[
		types := leftTypes union: rightTypes.
	] ifTrue:[
		types := leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: types .! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:06:38' prior: 50549397!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 class = Collection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 class = Collection] ) ifTrue:[ ^v1 isEmpty. ].! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:33:05'!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


v1 class = Collection  ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m7.!

TypesWithContextAppliersTestMethods new perform: #m7.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:33:41' prior: 50549466!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


v1 class isCollection  ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m7.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:33:55' prior: 50549478!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


v1 isCollection  ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m7.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:34:44' prior: 50549488!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


v1 class = Collection  ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m7.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:35:55' prior: 50549498!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


v1 isCollection  ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m7.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:36:40' prior: 50549508!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


(v1 isKindOf:Collection ) ifTrue:[ ^'entro'. ].
^'no entro'.! !

TypesWithContextAppliersTestMethods new perform: #m7.!

TypesWithContextAppliersTestMethods new perform: #m7.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:37:21' prior: 50549518!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


(v1 isKindOf:Collection ) ifTrue:[ v1 isEmpty. ].
! !

TypesWithContextAppliersTestMethods new perform: #m7.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:37:39' prior: 50549530!
m7

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= Array new.


(v1 isKindOf:Collection ) ifTrue:[ v1 isEmpty. ].! !

TypesWithContextAppliersTestMethods new perform: #m7.!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 6/30/2024 13:38:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 6/30/2024 13:38:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/30/2024 13:38:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 6/30/2024 13:38:12'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:45:28' prior: 50549454!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 class = Collection  ifTrue:[ ^v1 isEmpty. ].
v1 isCollection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 class = Collection] ) ifTrue:[ ^v1 isEmpty. ].! !

TypesWithContextAppliersTestMethods new perform: #m6.!
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:47:57' prior: 50549837!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 class = Collection  ifTrue:[ ^v1 isEmpty. ].
v1 isCollection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 class = Collection] ) ifTrue:[ ^v1 isEmpty. ]. "No pasa cualquier coleccion. Si v1 es Array no entra en este if. Solo entra si efectivamente v1 es OC o su clase es Collection".! !
!TypesWithContextAppliersTestMethods methodsFor: 'PLAYGROUND-DELETE' stamp: 'JFGO 6/30/2024 13:52:22' prior: 50549853!
m6

| v1 |
v1:= OrderedCollection new.
v1:= 1.
v1:= 'hola'.


v1 class = Collection  ifTrue:[ ^v1 isEmpty. ].
v1 isCollection  ifTrue:[ ^v1 isEmpty. ].
(v1 class = OrderedCollection or: [v1 isCollection] ) ifTrue:[ ^v1 isEmpty. ]. "Aca si pasa cualquier coleccion. Si v1 es Array (o string como este ejemplo), entrara efectivamente en el if"
(v1 class = OrderedCollection or: [v1 class = Collection] ) ifTrue:[ ^v1 isEmpty. ]. "No pasa cualquier coleccion. Si v1 es Array no entra en este if. Solo entra si efectivamente v1 es OC o su clase es Collection".! !
!TypesWithContextAppliersTest methodsFor: 'disjunction / conjunction context' stamp: 'JFGO 6/30/2024 13:59:42'!
test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining
	
	self withMessageName: #conjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].
	! !
!TypesWithContextAppliersTestMethods methodsFor: 'disjunction / conjunction contexts' stamp: 'JFGO 6/30/2024 14:06:13'!
conjunctionCastDifferentTypes

| v1 |
v1:= OrderedCollection new.
v1:= 'some string'.
v1:= 1.

(v1 isCollection and: [v1 class = String]) ifTrue:[ v1 isEmpty.]! !
!TypesWithContextAppliersTest methodsFor: 'disjunction / conjunction context' stamp: 'JFGO 6/30/2024 14:09:59' prior: 50549892!
test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining
	
	self withMessageName: #conjunctionCastDifferentTypes
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].
	! !

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/30/2024 14:10:00'!
FAILURE!

!classDefinition: #ConjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/30/2024 14:16:33'!
Object subclass: #ConjunctionContextApplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/30/2024 14:16:23' prior: 50548504!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

TypeContextAppliers subclass: #conjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier shouldReject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

TypeContextAppliers subclass: #ConjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier shouldReject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #ConjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 6/30/2024 14:20:27'!
TypeContextAppliers subclass: #ConjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier shouldReject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!ConjunctionContextApplier class methodsFor: 'no messages' stamp: 'JFGO 6/30/2024 14:20:45'!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting ! !
!ConjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 6/30/2024 14:21:34'!
initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	shouldReject:= isRejecting .
	! !
!ConjunctionContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 6/30/2024 14:21:52' overrides: 50538660!
previous
	^previousContext.! !
!ConjunctionContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 6/30/2024 14:22:24'!
rawTypesOver: aContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	| liveTypes rawTypes |
	rawTypes := OrderedCollection new.
	liveTypes := aContextApplier liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	liveTypes liveTypesDo: [:aLiveType | rawTypes add: aLiveType liveClass].
	
	^rawTypes.! !
!ConjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 14:22:49' overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	shouldReject ifFalse:[
		types := leftTypes union: rightTypes.
	] ifTrue:[
		types := leftTypes intersection: rightTypes.
	].
	^RawToLiveTypesAdapter new adapt: types .! !
!ConjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 6/30/2024 14:23:14' prior: 50550103 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	types := leftTypes intersection: rightTypes.
	
	^RawToLiveTypesAdapter new adapt: types .! !

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/30/2024 14:23:26'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/30/2024 14:23:58' prior: 50549944!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

condition arguments!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/30/2024 14:25:05' prior: 50550149!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		self halt.
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

condition arguments first statements first!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 6/30/2024 14:25:19' prior: 50550233!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 6/30/2024 14:25:25'!
PASSED!

----SNAPSHOT----(30 June 2024 14:25:37) CuisUniversity-6169.image priorSource: 6936222!

----SNAPSHOT----(30 June 2024 14:35:29) CuisUniversity-6169.image priorSource: 7000122!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:15:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:15:14'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:15:15'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'disjunction / conjunction contexts' stamp: 'JFGO 7/2/2024 18:22:39'!
conjunctionNegated

	| v1 |
	v1:= OrderedCollection new.
	v1:= 'some string'.
	v1:= Array new.

	(v1 class = OrderedCollection and: [v1 isString]) not ifTrue:[ v1 isEmpty.]
! !
!TypesWithContextAppliersTest methodsFor: 'disjunction / conjunction context' stamp: 'JFGO 7/2/2024 18:24:11'!
test46NegatedConjunctionAllowsAllPreviousTypes
	
	self withMessageName: #conjunctionNegated
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: Array.
	].
	! !
!TypesWithContextAppliersTest methodsFor: 'disjunction / conjunction context' stamp: 'JFGO 7/2/2024 18:24:21' prior: 50550644!
test46NegatedConjunctionAllowsAllPreviousTypes
	
	self withMessageName: #conjunctionNegated
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]'
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: Array.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].
	! !

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:24:32'!
FAILURE!
!ConjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:31:47' prior: 50550125 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	
	shouldReject ifFalse:[
		types := leftTypes intersection: rightTypes.
	] ifTrue:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:31:49'!
PASSED!
!ConjunctionContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 7/2/2024 18:36:16'!
forSelector: logicalSelector withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting ! !
!DisjunctionContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 7/2/2024 18:36:16'!
forSelector: logicalSelector withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting ! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 7/2/2024 18:36:16' prior: 50550318!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^DisjunctionContextApplier forSelector: #Or withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier forSelector: #Or withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!methodRemoval: ConjunctionContextApplier class #withLeftApplier:withRightContextApplier:withPreviousContext:isRejecting: stamp: 'JFGO 7/2/2024 18:36:16'!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting !

!methodRemoval: DisjunctionContextApplier class #withLeftApplier:withRightContextApplier:withPreviousContext:isRejecting: stamp: 'JFGO 7/2/2024 18:36:16'!
withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:36:43' prior: 50551021!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier forSelector: #Or withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier forSelector: #And withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!ConjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 7/2/2024 18:37:15'!
forSelector: aLogicalSelector initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	shouldReject:= isRejecting .
	! !
!ConjunctionContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 7/2/2024 18:37:15' prior: 50550991!
forSelector: logicalSelector withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new forSelector: aLogicalSelector initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting ! !

!methodRemoval: ConjunctionContextApplier #initializeWithLeftApplier:withRightContextApplier:withPreviousContext:rejecting: stamp: 'JFGO 7/2/2024 18:37:15'!
initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	shouldReject:= isRejecting .
	!
!ConjunctionContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 7/2/2024 18:37:24' prior: 50551235!
forSelector: logicalSelector withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier isRejecting: isRejecting  
	
	^self new forSelector: logicalSelector initializeWithLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: aGeneralContextApplier rejecting: isRejecting ! !

!classDefinition: #ConjunctionContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 7/2/2024 18:37:43'!
TypeContextAppliers subclass: #ConjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier shouldReject selector'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!ConjunctionContextApplier methodsFor: 'initialization' stamp: 'JFGO 7/2/2024 18:37:40' prior: 50551219!
forSelector: aLogicalSelector initializeWithLeftApplier: aLeftContextApplier withRightContextApplier: aRightContextApplier withPreviousContext: aPreviousContextApplier rejecting: isRejecting 
	leftContextApplier := aLeftContextApplier .
	rightContextApplier := aRightContextApplier .
	previousContext := aPreviousContextApplier .
	shouldReject:= isRejecting .
	selector:= aLogicalSelector .
	! !
!ConjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:41:17' prior: 50550676 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	
	(shouldReject not and:[selector = #and]) ifTrue:[
		types := leftTypes intersection: rightTypes.
	] ifFalse:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:41:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:41:19'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:41:19'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:41:19'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:41:38' prior: 50551135!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier forSelector: #Or withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier forSelector: #and withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:41:59' prior: 50551557!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier forSelector: #or: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^ConjunctionContextApplier forSelector: #and: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:42:01'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:42:01'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:42:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:42:03'!
FAILURE!
!ConjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:44:56' prior: 50551312 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	
	(shouldReject not and:[selector = #and:]) or: (shouldReject and: [selector = #or:]) ifTrue:[
		types := leftTypes intersection: rightTypes.
	] ifFalse:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !
!ConjunctionContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:45:06' prior: 50551952 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	
	((shouldReject not and:[selector = #and:]) or: (shouldReject and: [selector = #or:])) ifTrue:[
		types := leftTypes intersection: rightTypes.
	] ifFalse:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:45:08'!
PASSED!

!classRenamed: #ConjunctionContextApplier as: #LogicalContextApplier stamp: 'JFGO 7/2/2024 18:45:19'!
Smalltalk renameClassNamed: #ConjunctionContextApplier as: #LogicalContextApplier!
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 7/2/2024 18:45:19' prior: 50551641!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #or: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #and: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !

!classRemoval: #DisjunctionContextApplier stamp: 'JFGO 7/2/2024 18:45:32'!
TypeContextAppliers subclass: #DisjunctionContextApplier
	instanceVariableNames: 'previousContext leftContextApplier rightContextApplier shouldReject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:47:36'!
contextFor: condition whenLogicalOperatorwithBlockRejecting: blockIsOnRejectingCondition
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #or: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #and: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:49:22' prior: 50552230!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	(condition isOr or: [condition isAnd]) ifTrue:[ 
		^self contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
		
	].
		
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:49:32' prior: 50552362!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	(condition isOr or: [condition isAnd]) ifTrue:[ 
		^self contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition .
	].
		
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].

	condition isIsKindOfWithLiteralBehavior ifTrue: [
		^IsKindOfTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isComparingToNil ifTrue:[
		^self contextFor: condition whenComparingObjectToNilWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isIsTypeMessageWithBooleanReturning ifTrue:[
		^self contextFor: condition whenSendingIsTypeMessageWithBlockRejecting: blockIsOnRejectingCondition.
	].

	
	^GeneralContextApplier new.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:49:41'!
contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #or: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #and: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	! !

!methodRemoval: TypeContextAppliers #contextFor:whenLogicalOperatorwithBlockRejecting: stamp: 'JFGO 7/2/2024 18:49:41'!
contextFor: condition whenLogicalOperatorwithBlockRejecting: blockIsOnRejectingCondition
	
	condition isOr ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #or: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | leftContextApplier rightContextApplier |
		leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #and: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:50:01'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:50:30' prior: 50552475!
contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| leftContextApplier |
	leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
	condition isOr ifTrue:[ | rightContextApplier |
		
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #or: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | rightContextApplier |
		
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: #and: withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:50:33'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:50:57' prior: 50552775!
contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| leftContextApplier |
	leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
	condition isOr ifTrue:[ | rightContextApplier |
		
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: condition selectorSymbol withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	
	condition isAnd ifTrue:[ | rightContextApplier |
		
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
		^LogicalContextApplier forSelector: condition selectorSymbol withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
		
	].
	! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:50:58'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 7/2/2024 18:51:37' prior: 50553033!
contextFor: condition whenLogicalOperatorWithBlockRejecting: blockIsOnRejectingCondition
	
	| leftContextApplier rightContextApplier |
	leftContextApplier := self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition.
	condition isOr ifTrue:[ 
		rightContextApplier := self contextFor: condition arguments second statements first withBlockRejecting: blockIsOnRejectingCondition.	
	].
	
	condition isAnd ifTrue:[ 
		rightContextApplier := self contextFor: condition arguments first statements first withBlockRejecting: blockIsOnRejectingCondition.
	].
	^LogicalContextApplier forSelector: condition selectorSymbol withLeftApplier: leftContextApplier withRightContextApplier: rightContextApplier withPreviousContext: self isRejecting: blockIsOnRejectingCondition.
	! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:51:43'!
PASSED!
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:52:17'!
shouldIntersect

	^ (shouldReject not and:[selector = #and:]) or: (shouldReject and: [selector = #or:])! !
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:52:17' prior: 50551977 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes types |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	
	(self shouldIntersect) ifTrue:[
		types := leftTypes intersection: rightTypes.
	] ifFalse:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:54:23'!
liveTypesWith: leftTypes and:rightTypes
		
	
	| types |
	(self shouldIntersect) ifTrue:[
		types := leftTypes intersection: rightTypes.
	] ifFalse:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:54:27' prior: 50553570!
liveTypesWith: leftTypes and:rightTypes
		
	| types |
	(self shouldIntersect) ifTrue:[
		types := leftTypes intersection: rightTypes.
	] ifFalse:[
		types := leftTypes union: rightTypes.
	].
	
	^RawToLiveTypesAdapter new adapt: types .! !
!LogicalContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 7/2/2024 18:54:50' prior: 50553549 overrides: 50538642!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| leftTypes rightTypes |
	leftTypes := self rawTypesOver: leftContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	rightTypes := self rawTypesOver: rightContextApplier for: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.	
	
	
	^self liveTypesWith: leftTypes and: rightTypes .! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test25IsKindOfForChildTypesFixesType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test26IsKindOfCastingSupertypeKeepsSubtypes stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test27IsKindOfRejectingSupertypeExcludeAllSubtypes stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28IsIsTypeMessageCastType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test28_1IsIsTypeMessageReturnsOriginalTypesWhenSubclassesOfCastType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test29IsIsTypeMessageWhenRejectingTypeShouldFilter stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test30IsIsTypeMessageOnDIfferentVariableShouldntFilter stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test31IsIsTypeMessageOnDIfferentTypesShouldRemoveAll stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test32IsNilMessageIfTrueCastToNil stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test33ObjectEqualsToNilCastToNil stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test34ObjectEqualsToNilIfFalseRejectsNilType stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test35NilEqualsToObjectCastToNil stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test36ObjectDistinctToNilCastOnFalseRejectsOnTrue stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test37IsNilMessageIfFalseRejectsNil stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test38notNilMessageIfTrueRejectsNil stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test39NotNilMessageIfFalseCastToNil stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test40IfNilMessageCastToNil stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test41IfNotNilKeepsPreviousTypes stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test42DisjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test44NegatedDisjunctionRejectsCastedTypes stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test45ConjunctionOnDifferentTypesCollectsThemAndRejectsRemaining stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test46NegatedConjunctionAllowsAllPreviousTypes stamp: 'JFGO 7/2/2024 18:54:56'!
PASSED!

----SNAPSHOT----(2 July 2024 18:56:03) CuisUniversity-6169.image priorSource: 7000211!

----QUIT----(2 July 2024 18:56:49) CuisUniversity-6169.image priorSource: 7109814!