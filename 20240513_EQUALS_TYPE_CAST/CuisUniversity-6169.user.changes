

----STARTUP---- (27 March 2024 14:26:54) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


!testRun: #ActualImplementorsTest #test01WhenIsImplementedOnlyInRootReturnsThatImplementorOnly stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test02ReturnsImplementorsOfSuperclasses stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test03IfNotImplementedInRootOrSuperclassesDoesNotIncludeSubclassesImplementations stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test04IncludesSubclassesImplementations stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test05DoesNotIncludeImplementorsOfSubclassesNotDefinedInSuperclass stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test06DoesNotIncludeImplementorsOfSiblingsWhenNotDefinedInSuperclass stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test07ReturnsAllSubclassesImplementorsOfTheHighestImplementorClass stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test08highestClassImplementingSelectorReturnsHighgestClass stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualImplementorsTest #test09WhenNoHighestClassImplementingSelectorIfNoneBlockIsEvaluated stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test01SurelyRecognizeTypeSenderWhenSentToInstanceVariable stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test02SurelyRecognizeTypeSenderWhenSentToTemporaryVariable stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test03SurelyRecognizeTypeSenderInACollaboration stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test04RecognizeTypeSendersToInstancesOfSubClasses stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test05RecognizeTypeSendersToLiteralTrue stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test06RecognizeTypeSendersToLiteralFalse stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test07RecognizeTypeSendersToThisContext stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test08RecognizeTypeSendersToSelf stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test09RecognizeTypeSendersToSuper stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test09_01 stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test10RecognizeTypeSendersToSelfOfMessageImplementedInSuperclass stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test11RecognizeTypeSendersToReturnsOfMessageSend stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test12RecognizeTypeSendersOfChainedMessageSends stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test13RecognizeTypeSendersToReturnOfMessageSendNoMatterThePrecedence stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test14RecognizeTypeSendersToClasses stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test15RecognizeTypeSendersToVariablesReferencingClasses stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test16RecognizeTypeSendersToAnyLiteral stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test17CanRecognizePossibleTypeSenders stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test18RecognizeTypeSendersWhenReturnTypeIsSelfType stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test19RecognizeTypeSendersWhenReturnTypeIsClassType stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test20SurelySendWhenReceiverTypeIsSuperclassOfImplementorType stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test21ActualSendersWorksWithCascadeMessageSends stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!testRun: #ActualSendersTest #test22ActualSendersDoesNotHangWhenReceiverIsTempVarInMethodWithoutTypes stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:32'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32' prior: 50526953!
m3 | x | self m1: 1. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:32'!
m1!

!testRun: #AddParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:32'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:32'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32'!
m3 | x | self m1: 1 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32'!
m1: p1 m2: p2 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:32' prior: 50526994!
m3 | x | self m1: 1 m2: 2 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'JFGO 3/27/2024 14:37:32'!
m1: p1 m3: p3!

!testRun: #AddParameterWithActualScopeTest #test01_01_DoesNotChangePossibleMessageSendWhenInstructedToDoSoWithKeywordMessages stamp: 'JFGO 3/27/2024 14:37:32'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #AddParameterWithActualScopeTest #test02CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 3/27/2024 14:37:33'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m1: p1 m3: p3! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1 m3: 3! !

!testRun: #AddParameterWithActualScopeTest #test02_01_CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsForKeywordMessage stamp: 'JFGO 3/27/2024 14:37:33'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:33'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:33'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:33' prior: 50527144!
m3 | x | x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:33'!
m1!

!testRun: #AddParameterWithActualScopeTest #test03AddParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 3/27/2024 14:37:33'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:34'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34' prior: 50527203!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:34'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:34'!
m1!

!testRun: #AddParameterWithActualScopeTest #test04AddParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 3/27/2024 14:37:34'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34' prior: 50527267!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:34'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:34'!
m1!

!testRun: #AddParameterWithActualScopeTest #test05AddParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 3/27/2024 14:37:34'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:34' prior: 50527332!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:34'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:34'!
m1!

!testRun: #AddParameterWithActualScopeTest #test06AddParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 3/27/2024 14:37:34'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:34'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35' prior: 50527386!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:35'!
m1!

!testRun: #AddParameterWithActualScopeTest #test07AddParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 3/27/2024 14:37:35'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35' prior: 50527434!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:35'!
m1!

!testRun: #AddParameterWithActualScopeTest #test08AddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 3/27/2024 14:37:35'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m3 self m1. ClassOfSender new m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35' prior: 50527494!
m3 self m1: 1. ClassOfSender new m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:35'!
m1!

!testRun: #AddParameterWithActualScopeTest #test09AddParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 3/27/2024 14:37:35'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:35'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m3 |x| self m1. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:35' prior: 50527540!
m3 |x| self m1: 1. x m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 3/27/2024 14:37:35'!
m1!

!testRun: #AddParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenAddingParameterToMethodWithSureAndPossibleSenders stamp: 'JFGO 3/27/2024 14:37:35'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:36'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:36'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:36'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:36'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:36'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:36'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #AddParameterWithActualScopeTest #test11CanNotAddParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:36'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:36'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:36'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:36'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:36'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:36'!
m3 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:36'!
m1: p1 m2: p2 ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:36' prior: 50527642!
m3 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'JFGO 3/27/2024 14:37:36'!
m1: p1!

!testRun: #AddParameterWithActualScopeTest #test13AddLastParameterCorrectly stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:36'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 3/27/2024 14:37:36'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AdditionalMethodStateTest #test01topBlockTempsMapReturnsTheTempsMapOfTheMethod stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test02MethodWithNoParametersNoTemporariesAreInitializedCorrectly stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test03MethodWithOnlyOneArgumentAreInitializedCorrectly stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test04rawTypesOfInvalidVariableNameEvaluatesIfAbsentBlock stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test05MethodWithOnlyOneTempTwoArgumentsAreInitializedCorrectly stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test06MethodWithRemoveVectorVariablesAreInitializedCorrectly stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test07RemoteVectorRawTypesIsNilWhenMethodHasNoVariableInRemoteVector stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test08VariableRawTypesIsNilWhenMethodHasNoVariableButHasInRemoteVector stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #AdditionalMethodStateTest #test09CanGetRawTypesWhenMethodHasNoVariableButHasInRemoteVector stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #ClosureVariablesTest #testOneArrayForTypesIsCreatedWhenAMethodHasNoClosures stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test01TypeConvertionForAClassReturnsSameClass stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test02TypeConvertionForSelfTypeReturnsReceiversType stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test03TypeConvertionForClassTypeReturnsReceiversTypeClass stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test04ClassMessageSendChainsClassType stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test05TypeConvertionForInstanceTypeReturnsMetaclassSoleInstance stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test06newTypeIsMetaclassSoleInstance stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test07InstanceTypeReturnsClassWhenIsKindOfOfBehaviorButNotMeta stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test08InstanceTypeErrorsWhenUsedWithNoBehavior stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #DynamicTypesTest #test09ClassTypeForMetamodelIsMetaclass stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test01TypeCollectionOfInstanceVariableDefinedInLeafClassDoesNotTraverseHierarchy stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test02TypeCollectionIncludesSubclasses stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test03TypeCollectionDoesNotIncludeSuperclassesAndSiblings stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test05TypeCollectionIncludesAllSubclasses stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test06IsNotMegamorphicIfTypesSizeIsLessToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test07IsMegamorphicIfTypesSizeIsEqualToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test08IsNotMegamorphicIfDoesNotFillRawTypesForLocalTypeInfo stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test09IsMegamorphicIfFillsRawTypesOfDefiningClassForLocalTypeInfo stamp: 'JFGO 3/27/2024 14:37:36'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test10IsMegamorphicIfFillsRawTypesOfNotDefiningClassForLocalTypeInfo stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test11IsTypesEmptyOfNonLocalTypeInfoTakesCareOfHierarchy stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test12IsTypesEmptyForLocalTypeInfoOnlyCheckOnLocalRawTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 3/27/2024 14:37:37'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 3/27/2024 14:37:37'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #InstanceVariableTypeInfoTest #test13RemovingAClassRemovesItAndItsClassFromInstanceVariableRawTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test14InstVarAtPutKeepTypeInfo stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test01InstanceVariablesTypesIsInitializedWithAnArrayOfClassInstSize stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test02InitializeInstanceVariablesTypesWithAllInstancesStoreCurrentClassInstancesTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test03TypesOfDifferentInstVarsAreStoredCorrectly stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test04MoreThanOneTypeAreStoredCorrectlyInDifferentInstVars stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test05TypesAreStoredUpToInstVarTypesSize stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test06NoTypesAreStoredWhenInstVarTypesIsNil stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test07CommonSupertypeOfReturnsSupertypeOfStoredTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test08CommonSupertypeIfNoTypesEvaluatesAlternativeBlockWhenNoTypeHasBeenStore stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test09EvaluatesIfAbsentBlockWhenAskTypeInfoForNonExistingInstVar stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test01KeepTypesOfLocalTemporariesI stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test02KeepTypesOfRemoteTemporaries stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test03KeepTypesOfParameters stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test04KeepReturnTopTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test05KeepReturnConstantTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test06KeepReturnReceiverTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test07KeepReturnFromClosureTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test08KeepReturnTypeWhenUnwind stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test09BlockReturnDoesNotAffectMethodReturn stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test10KeepTypesOfParametersWhenSendingValueWithArguments stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test11BlockWithParametersDoNotAffectMethodParameters stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables_WithSelectorsOfInstVarTypes stamp: 'JFGO 3/27/2024 14:37:37'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'JFGO 3/27/2024 14:37:38'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 3/27/2024 14:37:38'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsOfTempVarTypes stamp: 'JFGO 3/27/2024 14:37:38'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'JFGO 3/27/2024 14:37:38'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 3/27/2024 14:37:38'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test045_AutocompletesEntriesFor_patternUnary_containsExactlyTwoMethods stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test046_AutocompletesEntriesFor_patternUnary_notContainsAnyMethod stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test047_AutocompletesEntriesFor_patternUnary_doesNotAutocompleteMethodOfSameClass stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test048_AutocompletesEntriesFor_patternKeyword_containsExactlyOneMethod stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test049_AutocompletesEntriesFor_patternKeyword_notContainsAnyMethod stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test050_AutocompletesEntriesFor_patternKeyword_doesNotAutocompleteMethodOfSameClass stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test051_AutocompletesEntriesFor_patternBinary_containsExactlyOneMethod stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test052_AutocompletesEntriesFor_patternBinary_notContainsAnyMethod stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test053_AutocompletesEntriesFor_patternBinary_doestNotAutocompleteMethodOfSameClass stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #testMessages stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ArrayWithArrayAndOtherObjects stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArray stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayOfArray stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayWithManyElements stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBinaryInParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlock stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfBlock stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfEvaluatedBlock stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndExpresionInParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndLiteralArray stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndMoreThanOneUnaryAfterExpresionInParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBlock stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBrace stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterCharacter stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterLiteralArray stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterStringSymbol stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterSymbol stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUnaryInProtoObject stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterUnary stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteMessageAfterUnary stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryInParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithMoreThanOneUnary stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithOneUnary stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ClosedAndUnclosedParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionInManyParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionWithMoreThanOneParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_LFBeforeParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_SpaceBeforeParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnaryAfterExpresionInParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedArrayAfterClosedArray stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedBlockAfterBlock stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedDoubleParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_selfInProtoObject stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_ExpresionInParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_MoreThanOneUnaryMessage stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_OnlyRightParenthesis stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test01CanSignalItWithAMethod stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test02IsResumable stamp: 'JFGO 3/27/2024 14:37:39'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 3/27/2024 14:37:39'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 3/27/2024 14:37:39'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test01RemovingAClassRemovesItFromMethodVariableRawTypesForParameter stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 3/27/2024 14:37:40'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 3/27/2024 14:37:40'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test02RemovingAClassRemovesItsClassFromMethodVariableRawTypesForParameter stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 3/27/2024 14:37:40'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 3/27/2024 14:37:40'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test03RemovingAClassRemovesItFromMethodVariablesRawTypes stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 3/27/2024 14:37:40'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 3/27/2024 14:37:40'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test04RemovingAClassRemovesItFromMethodVariableRemoteVectorRawTypes stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test01ActualSendersIsEmpty stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test02CategoryIsNil stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test03CompiledMethodSignalsError stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test04CompiledMethodIfAbsentEvaluatesIfAbsentBlock stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test05doesOnlySurelySendReturnsFalse stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test06dynamicTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test07IsNotValid stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test08liveTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test09rangesOASentSelectorWhenSendToReceiverTypesIsEmpty stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test10FailsWhenAsItsSourceCode stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #NotImplementedMethodTest #test11StringVersionStartsWithNotImplemented stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!testRun: #PossibleSenderTest #test01StringVersionBeginsWithPossible stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:40'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:40'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:40'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:40'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:40' prior: 50528505!
m3 | x | self m1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:40'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 3/27/2024 14:37:40'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!testRun: #RemoveParameterWithActualScopeTest #test02CanNotRemoveParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 3/27/2024 14:37:41'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m3 | x | x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41' prior: 50528604!
m3 | x | x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test03RemovesParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 3/27/2024 14:37:41'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:41'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41' prior: 50528665!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test04RemovesParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 3/27/2024 14:37:41'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:41' prior: 50528731!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test05RemovesParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 3/27/2024 14:37:42'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42' prior: 50528798!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test06RemovesParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 3/27/2024 14:37:42'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42' prior: 50528855!
m3 | x | self m1. false ifTrue: [ x m1]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test07RemovesParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 3/27/2024 14:37:42'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:42' prior: 50528905!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 3/27/2024 14:37:42'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test08RemovesParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 3/27/2024 14:37:42'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m3 self m1: 1. ClassOfSender new m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43' prior: 50528967!
m3 self m1. ClassOfSender new m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:43'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test09RemovesParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 3/27/2024 14:37:43'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m3 |x| self m1: 1. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43' prior: 50529016!
m3 |x| self m1. x m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 3/27/2024 14:37:43'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRemovingParameterToMethodWithSureAndPossibleSenders stamp: 'JFGO 3/27/2024 14:37:43'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:43'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1; printString! !

!testRun: #RemoveParameterWithActualScopeTest #test11CanNotRemoveParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 3/27/2024 14:37:43'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:43'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 3/27/2024 14:37:44'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:44'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m1: p1 m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m3 self m1: 1 m2: 2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44' prior: 50529120!
m3 self m2: 2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'JFGO 3/27/2024 14:37:44'!
m1: p1 m2: p2!

!testRun: #RemoveParameterWithActualScopeTest #test13RemovesOtherThanLastParameterCorrectly stamp: 'JFGO 3/27/2024 14:37:44'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:44'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44' prior: 50529167!
m3 | x | self m2. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:44'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test01DoesNotRenamesPossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 3/27/2024 14:37:44'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:44'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #RenameSelectorWithActualScopeTest #test02CanNotRenameWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 3/27/2024 14:37:44'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:44'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45' prior: 50529266!
m3 | x | x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:45'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test03RenamesWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 3/27/2024 14:37:45'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:45'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45' prior: 50529326!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:45'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:45'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test04RenamesWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 3/27/2024 14:37:45'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45' prior: 50529392!
m3 | x y | x := self. y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:45'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:45'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test05RenamesDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 3/27/2024 14:37:45'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:45' prior: 50529458!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:45'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:45'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test06RenamesDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 3/27/2024 14:37:46'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46' prior: 50529513!
m3 | x | self m2. false ifTrue: [ x m2 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:46'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test07RenamePossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 3/27/2024 14:37:46'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46' prior: 50529562!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 3/27/2024 14:37:46'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test08RenamesWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 3/27/2024 14:37:46'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m3 self m1. ClassOfSender new m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:46' prior: 50529623!
m3 self m2. ClassOfSender new m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:46'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test09RenamesOnlyValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 3/27/2024 14:37:46'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:47'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:47'!
m3 |x| self m1. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:47'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:47' prior: 50529670!
m3 |x| self m2. x m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 3/27/2024 14:37:47'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRenamingAMethodWithSureAndPossibleSenders stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:47'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:47'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 14:37:47'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #RenameSelectorWithActualScopeTest #test11CanNotRenameWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 3/27/2024 14:37:47'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test01QuickReturnSelfMethodsReturnSelfTypeAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test02QuickReturnTrueMethodsReturnTrueReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test03QuickReturnFalseMethodsReturnFalseAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test04QuickReturnNilMethodsReturnUndefinedObjectAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test05QuickReturnMinusOneMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test06QuickReturnZeroMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test07QuickReturnOneMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test08QuickReturnTwoMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test09QuickReturnOfFirstInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test10QuickReturnOfSecondInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test11classMethodReturnsClassTypeAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test12newMethodReturnsInstanceTypeAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!testRun: #ReturnTypeInfoTest #test13yourselfMethodReturnsSelfTypeAsReturnType stamp: 'JFGO 3/27/2024 14:37:47'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 3/27/2024 14:37:47'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 3/27/2024 14:37:47'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #ReturnTypeInfoTest #test14RemovingAClassRemovesItAndItsClassFromMethodReturnType stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ReturnTypeInfoTest #test15ReturnTypesOfAbstractMethodsIncludesSubclassesImplementationsTypes stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ReturnTypeInfoTest #test16ReturnTypesOfAbstractMethodWorksWhenNotImplementedInAllSubclasses stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test01IsEmptyWhenAllTypesAreNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test02StoresAddedTypes stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test03StoresSameTypeOnce stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test04StoresMoreThanOneTypeCorrectly stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test05DoesNotStoreTypesWhenContainerIsNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test06CommonSupertypeOfSiblingsClassesReturnsRightSuperclass stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test07CommonSupertypeOnSameHierarchyIsMostTopClass stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test08CommonSupertypeOnSameHierarchyIsNotAffectedByAddingOrder stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test09ObjectIsCommonSupertypeWhenClassesAreNotSiblings stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test10ProtoObjectIsCommonSupertypeWhenThereAreNoTypesStored stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test11ProtoObjectIsCommonSupertypeWhenCointainerIsNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test12CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenIsEmpty stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test13CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenContainerIsNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test14UndefinedObjectIsNotConsideredWhenLookingForCommonSupertype stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test15StoresTypesIsTrueWhenContainerIsNotNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test16StoresTypesIsFalseWhenContainerIsNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test17IsMegamorphicWhenContainerIsFull stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test18IsNotMegamorphicWhenContainerIsNotFull stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test19CommonSelectorsPreviousToSameOnlyTypeIsEmpty stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test20CommonSelectorsPreviousToSuperclassOfOnlyAddedTypeAreAddedTypeSelectors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test21CommonSelectorsPreviousToSuperclassSuperclassOfOnlyAddedTypeAreAddedTypeUpToSuperclassSelectors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test22CommonSelectorsPreviousToInvalidSuperclassRaisesError stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test23CommonSelectorsPreviousToSuperclassOfSiblingTypesAreSiblingsCommonSelectors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test24CommonSelectorsPreviousToOnSameHierarchyReturnsCommonSuperclassesSelectors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test25CommonSelectorsPreviousToAddedSSupertypeOnSameHierarchyIsEmpty stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test26CommonSelectorsPreviousToWhenNotStoringTypesIsEmpty stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test27CommonSelectorsPreviousToIfInvalidSupertypeEvaluatesInvalidBlock stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test28CommonSelectorsPreviousToIfInvalidSupertypeWithManyTypesEvaluatesInvalidBlock stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test29CommonSelectosGoesUpToIncludingProtoObject stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test30CommonSupertypeIfGenericEvaluatesIfGenericBlockForObject stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test31CommonSupertypeIfGenericEvaluatesIfGenericBlockForProtoObject stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test32WithCommonSupertypeDoIfGenericEvaluatesDoBlockWhenNoGenericSupertype stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test33WithCommonSupertypeDoIfGenericEvaluatesGenericBlockWhenGenericSupertype stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test34AddingATypeWhenNoMoreSpaceEvaluatesIsFullBlock stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test35TypeIsNotMoreInTypesWhenRemoved stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test36RemovingTypeWhenTypesIsEmptyEvaluatesIfAbsent stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test37RemovingNotIncludedTypeEvaluatesIfAbsent stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test38RemovingLastAddedTypeWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test39RemoveTypeSignalExceptionWhenTypeNotFound stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #VariableTypeInfoTest #test40TypesDoEvaluatesBlockOnEachType stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test04ProblemsDetectIfNone stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test05ProblemsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test07ErrorsDetectIfNone stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test10WarningsDetectIfNone stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test15HasErrorsOrWarnings stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test01MethodNotAnnotatingTypesGeneratesWarning stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test02EmptyMethodDoesNotGenerateWarningsOrErrors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test03MessageSendNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test04MessageUnderstooodByReceiverDoesNotGenerateErrors stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test05ErrorsWhenNoTypeImplementMessageSent stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test06DifferentErrorsAreReported stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test07ReceiverWithoutTypesGeneratesWarning stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test08GivesAWarningWhenReceiversTypeHasAnError stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test09WhenMethodHasNoReturnTypesAProblemIsAdded stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test10PrimitiveMethodsAreNotTypedChecked stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test11IfNotNilFiltersUndefinedObjectType stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test12IfNotNilDoesNotFiltersUndefinedObjectTypeForNotCheckedObject stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test13ComparingForNilWithIfTrueIfFalse stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test14ComparingForNilWithIfTrueIfFalseWhenNilFiltersOtherTypes stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test15ComparingForNilWithIfTrueIfFalseWhenNilKeepsUndefinedObject stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test16NestedIfNotNilFiltersUndefinedObjectType stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test17NestedIfNotNilDoesNotFilterUndefinedObjectWhenOutsideRightIfNotNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test18IfNilAssumesUndefinedObjectAsType stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test19NestedIfNilAssumesUndefinedObjectAsType stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test20NestedIfNilDoesUseUndefinedObjectWhenOutsideRightIfNil stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test21IfNilIfNotNilWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test22IfNotNilIfNilWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test23EqualsNilIfTrueIfFalseWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test24EqualsNilIfTrueWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test25IdenticalToNilIfTrueWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test26EqualsNilIfFalseWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test27IdenticalToNilIfFalseWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test28EqualsToNilIfFalseIfTrueWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test29IdenticalToNilIfFalseIfTrueWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test30nilEqualsToIfTrueIfFalseOrIfFalseIfTrueWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test31nilEqualsToIfTrueOrIfFalseWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32nilIdenticalToWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32_01_nilNotIdenticalOrEqualToWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test33NotEqualToNilWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test34NotIdenticalToNilWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test35isNilWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test36notNilWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test37TypeCastWithEqualOrIdenticalToWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test38TypeCastWithNotEqualOrNotIdenticalToWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test39TypeCastToUsingEqualOrIdenticalToWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test40TypeCastToUsingNotEqualOrNotIdenticalToWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test41TypeCastUsingIsKindOfToWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test42TypeCheckMessageWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test43TypeCheckMessageSentToSelfWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test44TypeCheckMessageWorksAsExpected stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test46TypeCastRejectsCanBeNested stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test47IsKindOfCastingAllowsSubtypes stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test48IfNotNilWithBlockArgumentFiltersUndefinedObject stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test49TypeCastWithBlockInRejectBlockKeepsCastingStrategy stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test50TypeCastWithoutBlockShouldFail stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test51NotNilAndFiltersUndefinedObject stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test52CascasdeMessageSendAreTypeChecked stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test53TypeCastWorksOnCascadeMessageSends stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test54IfNilWithReturnRejectsNilInNextColaborations stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test55TypeCheckMessageWithSubclassesReturningFalse stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test56Float_store_on_hasNoTypeErrors stamp: 'JFGO 3/27/2024 14:37:48'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test57TypeCheckMessageWithFalse_True_False_InSubclassesCastCorrectly stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test58TypeCheckMessageWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test59TypeCheckMessageWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test60TypeCastWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test61TypeCastWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test62ifNotNilifNotNilWithMoreThanAMessageSendAndNilAsValue stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test63orCheck stamp: 'JFGO 3/27/2024 14:37:48'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test64notNilAndIfTrue stamp: 'JFGO 3/27/2024 14:37:48'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test65isNilOr stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66DoesNotFailsWithMessageSendAsConditionOfIfTrueWithCascadeSend stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66orWithoutMessageAsReceiverShouldNotError stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test67andWithoutMessageAsReceiverShouldNotError stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

!testRun: #MethodTypeCheckerTest #test68DoesNotFailsWithIfTrueSendInCascadeMode stamp: 'JFGO 3/27/2024 14:37:48'!
PASSED!

----End fileIn of C:\Users\juli_\Tesis\TESIS-LAST\windows64\LiveTypingGenerics.pck.st----!

!testRun: #FlowGraphCreationTest #test01onVarToVarAssigmentAssignorFlowsToAssignee stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test02ThereIsAlwaysANodeForReturnValue stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test03onAssigmentToAssigmentAllVarsAreLinked stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test04onVarReturnItFlowsToReturnNode stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test05CanTrackAMethodThroughMessageSends stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test06TrackedMethodIsLinkedToVarsOnAssigment stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test07CanTrackMultipleMethodThroughMessageSends stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test08TrackedMethodsAreLinkedToVarsOnAssigment stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test09InstVarsAreAlwaysAddedToGraph stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #FlowGraphCreationTest #test10WhenVarIsConnectedToReturnValueItsNeighborsAreAlsoConnected stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test01CanAddAGenericType stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test02GenericsDoesNotRepeat stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test03GenericsCannotBeAlteredFromOuterScope stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test04CanSaveASelectorForAGeneric stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test05TracedMethodsCanBeRecovered stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test06TracedMethodsCantBeModifiedExternally stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test07ATracedMethodCanBeDeleted stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test08AGenericCanBeDeleted stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test09CanSaveAGetterSelectorForAGeneric stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test10GetterSelectorsCantBeModifiedExternally stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test11CanStoreAndRetrieveTracedMethodRefs stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test12CanStoreAndRetrieveMultipleTracedMethodRefs stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test13AnalysisCanBeInitializedRecursively stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test14RecursiveAnalysisHasRecursiveTracedMethods stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test15GraphsAreDeletedWhenAllAnalysisFinish stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test16CanStoreGenericTypeConstructors stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test17SaveASelectorForAGenericWithMultipleParams stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #GAStorageTest #test18AGetterMethodCanBeDeleted stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test01GenericClassesAreReplacedByGenericTypeInstances stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test02GenericClassesAreMergedWithTheirGenericTypes stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test03LiteralCollectionOneLiteralElement stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test04LiteralCollectionLiteralElementsOfDifferentType stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test05LiteralCollectionElementsFromVariable stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test06LiteralCollectionElementsFromMethodCall stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test07LiteralCollectionElementsFromMethodCallWithArgumentsTypesFromContext stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test08LiteralCollectionElementsFromRecursiveMethod stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test09LiteralCollectionFlowingInMultipleVariables stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test10LiteralCollectionFlowingInMultipleVariablesArgumentInMethod stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test11LiteralCollectionFlowingInMultipleVariablesEachReceivingMessages stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test12LiteralCollectionFlowingInMultipleVariablesEachReceivingMessagesBeforeAndAfterAssigment stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test13LiteralCollectionFlowingInMultipleVariablesArgumentInMultipleMethod stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test14LiteralCollectionFlowingInMultipleVariablesMultipleArgumentsInMethod stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test15LiteralCollectionFlowingToNonSelfMethod stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test16LiteralCollectionFlowingToSuperMethod stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test17GenericTypeReturningParameterFromGetter stamp: 'JFGO 3/27/2024 14:41:38'!
PASSED!

!testRun: #InferenceTest #test18MethodReturningGenericType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test19InstanceVariableUsedOnlyWithinCurrentClass stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test20InstanceVariableExposedByGetterAssignToVariable stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test21InstanceVariableExposedByMultipleGettersAssignToVariable stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test22InstanceVariableMessageSendsToGetters stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test23InstanceVariableGettersUsedAsArguments stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test24InstanceVariableFlowingToOtherVariables stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test25CollectionContainingAnotherCollection stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test26CollectionContainingMultipleCollections stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test27CollectionAssignedFromMethodCallAndNotUsedAfter stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test28ReturnResultOfMethodCall stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test29MethodCallOnMultipleClassesWithSameProtocol stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test30MethodCallInsideGenericClasses stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test31CascadeMessageSends stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test32ArgumentCollectsInfoFromCalls stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test33ArgumentCollectsInfoFromCallsAndCurrentMethod stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test34GenericTypeConstructorFromArguments stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test35GenericTypeConstructorFromArgumentParameters stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test36TraceReturnValueWhenMethodReturnsArgument stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test37AddingFromOtherCollectionParameters stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test38CollectionFromLiteralNode stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test39CollectionWithMultipleParameters stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test40GetterForGenericWithMultipleParameters stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test41ArgumentCollectsInfoFromCallsWithMultipleParameters stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test42ArgumentCollectsInfoFromCallsAndCurrentMethodWithMultipleParameters stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test43ReturnTypeOfSetterMethodIsLastArgument stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test44CollectionIsDetectedWhenReturnedFromMethodAndAssignedToVariable stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #InferenceTest #test45ArgumentCollectsInfoCurrentMethodWithNoCallers stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test001SameType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test002DifferentType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test003SameHierarchy stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test004CommonSupertypeIsObject stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test005SameGeneric stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test006SameGenericDifferentOrder stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test007GenericsHandleSystemTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test008NestedGenerics stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test009GenericSupertypeWithSameGenerics stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test010GenericSupertypeWithCommonGenerics stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test011FixedAgainstGenericType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test012FixedAgainstGenericTypeInList stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test013GenericAgainstFixedTypeInList stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test014NestedGenerics stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test015NestedGenericsWithDifferentDepth stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test016EmptyTypeAgainstSelf stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test017EmptyTypeAgainstFixedType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test018EmptyTypeAgainstGenericType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test019UnionTypeCollectsTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test020UnionTypeAgainstSelf stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test021UnionTypeAgainstInnerElement stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test022ConvertionAccordingToReceiver stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test023ConvertionToArray stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test024EnumeratingClassTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test025EnumeratingLiveTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #LiveTypeTests #test026EnumeratingLiveAndClassTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test001EmptyRawTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test002AllClasses stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test003AnEmptyCollectionsContentType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test004ClassesAndCollectionsContentType stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test005ACollectionsContentTypeWithTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test006SeveralCollectionsContentTypesWithTypes stamp: 'JFGO 3/27/2024 14:41:39'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test007CreateFixedType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test008CreateEmptyType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test009CreateGenericType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test010CreateGenericNestedType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test011CreateGenericNonEmptyType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #RawToLiveTypesAdapterTests #test012CreateGenericMultipleNestedType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test001TooltipForEmptyCollection stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test002TooltipForSingleItemCollection stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test003TooltipForTwoItemsWhenSupertypeIsObject stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test004TooltipForTwoItemsWithCommonSupertype stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test005TooltipForVariableWithCollectionAndSomeOtherType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test006TooltipForMergedCollections stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test007TooltipForSameCollectionsWithSameTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test008TooltipForSameCollectionsWithCommonSuperTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test009TooltipForSameCollectionsWithNoSuperTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test010TooltipForCommonSuperCollectionsWithCommonSuperTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test011TooltipForNestedCollections stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test012TooltipForCommonSuperCollectionsWithNoSuperTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test013TooltipForCommonSuperCollectionsRepeatedWithNoSuperTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test014TooltipForCommonSuperCollectionsWithEmptyCollections stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test015TooltipForCommonSuperCollectionsWithAnEmptyCollection stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test016TooltipForCommonSuperCollectionsAndNoCollection stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test017TooltipForCommonSuperTypeAndNoCommonType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test018TooltipForCommonSuperCollectionsAndNoCollection stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test019TooltipForNestedCollectionsOneOfThemEmpty stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test020TooltipForNestedCollectionsBothSameTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test021TooltipForNestedCollectionsEachNoCommonInnerType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test022TooltipForNestedCommonSuperCollectionsNoCommonInnerType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test023TooltipForNestedNoCommonSupertype stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test024TooltipForNestedRepeatedTypeDifferentInners stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test025TooltipForNestedCommonTypesAndIntruder stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test026TooltipForNestedCommontTypesWithTwoLevelIntruder stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test027TooltipForAwfullyComplexInnerCollections stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test028TooltipOnlyOneType stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test029TooltipCommonSuperTypeSingleClasses stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test030TooltipNoTypes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test031TooltipNoCommonSuperTypeSingleClasses stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TooltipTests #test032TooltipForCollectionWithTwoParameters stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeFlowGraphTest #test01IsCreatedEmpty stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeFlowGraphTest #test02AddingANodeIncreasesTheirCount stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeFlowGraphTest #test03AddingAnEdgeIncreasesTheirCount stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeFlowGraphTest #test04CannotLinkInexistantNodes stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeFlowGraphTest #test05CanAccessNodesButCantDirectlyAddToResult stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeFlowGraphTest #test06CheckingConnectionOnAssociatedUndirectedGraph stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test001Empty stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test002Fixed stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test003GenericSingleValue stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test004MultipleFixed stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test005GenericMultipleValues stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test006MultipleFixedWithNoCommonSupertype stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test007MultipleGenerics stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test008GenericEmptyValue stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test009MultipleGenericsEmptyValue stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

!testRun: #TypeNodeTests #test010EmptyAndFixed stamp: 'JFGO 3/27/2024 14:41:40'!
PASSED!

----End fileIn of C:\Users\juli_\Tesis\TESIS-LAST\windows64\LiveTypingTypeChecker.pck.st----!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 14:41:53'!
PASSED!
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:28:42' prior: 50541834!
receiverLiveTypesRejectingObjectFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes filteredTypes |
	originalTypes := previousContext receiverLiveTypesFor: aVariableNode In:  compiledMethod.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	filteredTypes := OrderedCollection new.
	(RawToLiveTypesAdapter new adapt: filteredLiveTypes) classTypesDo: [:aClass | filteredTypes add:aClass].
	
	^filteredTypes asArray .
	
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:28:58' prior: 50542358!
receiverLiveTypesRejectingObjectFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes filteredTypes |
	originalTypes := previousContext receiverLiveTypesFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	filteredTypes := OrderedCollection new.
	(RawToLiveTypesAdapter new adapt: filteredLiveTypes) classTypesDo: [:aClass | filteredTypes add:aClass].
	
	^filteredTypes asArray .
	
! !

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesRejectingObjectFor:In: stamp: 'JFGO 3/27/2024 15:29:23'!
receiverLiveTypesRejectingObjectFor: aVariableNode In:  compiledMethod
	


	| originalTypes filteredLiveTypes filteredTypes |
	originalTypes := previousContext receiverLiveTypesFor: aVariableNode In:  compiledMethod.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	filteredTypes := OrderedCollection new.
	(RawToLiveTypesAdapter new adapt: filteredLiveTypes) classTypesDo: [:aClass | filteredTypes add:aClass].
	
	^filteredTypes asArray .
	
!
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:29:33' prior: 50541818!
receiverLiveTypesFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aVariableNode In: compiledMethod ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:29:42' prior: 50542421!
receiverLiveTypesFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:29:49'!
receiverLiveTypesCastingObjectFor: aVariableNode In:  compiledMethoda ddingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^Array with: type.
	
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:29:50' prior: 50541810!
receiverLiveTypesCastingObjectFor: aVariableNode In:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^Array with: type.
	
! !

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesCastingObjectFor:In:ddingIncompleteTypeInfoTo: stamp: 'JFGO 3/27/2024 15:29:52'!
receiverLiveTypesCastingObjectFor: aVariableNode In:  compiledMethoda ddingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^Array with: type.
	
!

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesFor:In: stamp: 'JFGO 3/27/2024 15:29:55'!
receiverLiveTypesFor: aVariableNode In:  compiledMethod
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aVariableNode In: compiledMethod ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aVariableNode In: compiledMethod ]
!

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesCastingObjectFor:In: stamp: 'JFGO 3/27/2024 15:29:56'!
receiverLiveTypesCastingObjectFor: aVariableNode In:  compiledMethod
	


	^Array with: type.
	
!
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:30:12'!
receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
! !
!EqualsTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 15:30:12' prior: 50542379!
receiverLiveTypesRejectingObjectFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes filteredTypes |
	originalTypes := previousContext receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	filteredTypes := OrderedCollection new.
	(RawToLiveTypesAdapter new adapt: filteredLiveTypes) classTypesDo: [:aClass | filteredTypes add:aClass].
	
	^filteredTypes asArray .
	
! !

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesFor:In:addingIncompleteTypeInfoTo: stamp: 'JFGO 3/27/2024 15:30:12'!
receiverLiveTypesFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
!
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:30:20'!
receiverLiveTypesRejectingObjectFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes filteredTypes |
	originalTypes := previousContext receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	filteredTypes := OrderedCollection new.
	(RawToLiveTypesAdapter new adapt: filteredLiveTypes) classTypesDo: [:aClass | filteredTypes add:aClass].
	
	^filteredTypes asArray .
	
! !
!EqualsTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 15:30:20' prior: 50542496!
receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aVariableNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aVariableNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
! !

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesRejectingObjectFor:In:addingIncompleteTypeInfoTo: stamp: 'JFGO 3/27/2024 15:30:20'!
receiverLiveTypesRejectingObjectFor: aVariableNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes filteredTypes |
	originalTypes := previousContext receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	filteredTypes := OrderedCollection new.
	(RawToLiveTypesAdapter new adapt: filteredLiveTypes) classTypesDo: [:aClass | filteredTypes add:aClass].
	
	^filteredTypes asArray .
	
!
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:30:29'!
receiverLiveTypesCastingObjectFor: aVariableNode in:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^Array with: type.
	
! !
!EqualsTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 15:30:29' prior: 50542573!
receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aVariableNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aVariableNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
! !

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesCastingObjectFor:In:addingIncompleteTypeInfoTo: stamp: 'JFGO 3/27/2024 15:30:29'!
receiverLiveTypesCastingObjectFor: aVariableNode In:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^Array with: type.
	
!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 15:30:35'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:30:35'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 15:30:41'!
ERROR!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 3/27/2024 15:31:03' prior: 50540781 overrides: 16919312!
visitBlockNode: aBlockNode
	"TODO. Cuando inicializamos el visitor, podemos inicializar el contextApplier y ahorrar el ifNil. El blockNode no parece usarse.. sacarlo y correr tests"
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	(aBlockNode equivalentTo: blockNode) ifTrue:[
		types:= contextApplier receiverLiveTypesFor: variableName in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
	].
	super visitBlockNode: aBlockNode.
	! !

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 15:31:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:31:06'!
ERROR!
!GeneralContextApplier methodsFor: 'LiveTyping-Variable Nodes' stamp: 'JFGO 3/27/2024 15:31:43'!
receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aVariableNode typesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !

!methodRemoval: GeneralContextApplier #receiverLiveTypesFor:In: stamp: 'JFGO 3/27/2024 15:31:45'!
receiverLiveTypesFor: aVariableNode In:  compiledMethod
	^ aVariableNode typesIn: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 15:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:31:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 15:37:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:37:41'!
ERROR!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 15:37:41'!
ERROR!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 15:37:41'!
ERROR!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:37:41'!
ERROR!
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:30:20' prior: 50542551!
receiverLiveTypesRejectingObjectFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes filteredTypes |
	originalTypes := previousContext receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	filteredTypes := OrderedCollection new.
	(RawToLiveTypesAdapter new adapt: filteredLiveTypes) classTypesDo: [:aClass | filteredTypes add:aClass].
	
	^filteredTypes asArray .
	
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:40:11' prior: 50542612!
receiverLiveTypesCastingObjectFor: aVariableNode in:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^FixedType for: type.
	
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:40:55' prior: 50542778!
receiverLiveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := previousContext receiverLiveTypesFor: aParseNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:41:25' prior: 50542621!
receiverLiveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping-VariableNodes' stamp: 'JFGO 3/27/2024 15:41:35' prior: 50542801!
receiverLiveTypesCastingObjectFor: aParseNode in:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^FixedType for: type.
	
! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 15:41:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:41:38'!
ERROR!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 15:41:38'!
ERROR!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 15:41:38'!
ERROR!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:41:38'!
ERROR!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:41:43'!
ERROR!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 15:44:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:44:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 15:44:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 15:44:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:44:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:44:18'!
ERROR!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 3/27/2024 15:44:30' prior: 50540710 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=contextApplier receiverLiveTypesFor: aMessageNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation on: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	self visitMessageNodeArguments:aMessageNode.! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:44:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 15:44:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 15:44:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 15:44:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 15:44:36'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:44:36'!
ERROR!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:44:39'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:44:58'!
ERROR!
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 3/27/2024 15:45:16' prior: 50542810!
receiverLiveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := previousContext receiverLiveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:45:17'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 15:45:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 15:45:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 15:45:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:45:23'!
FAILURE!
!GeneralContextApplier methodsFor: 'LiveTyping-Message Nodes' stamp: 'JFGO 3/27/2024 15:46:02' prior: 50542686!
receiverLiveTypesFor: aMessageNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	^ aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !
!GeneralContextApplier methodsFor: 'LiveTyping-Message Nodes' stamp: 'JFGO 3/27/2024 15:31:43' prior: 50543187!
receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aVariableNode typesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !
!GeneralContextApplier methodsFor: 'LiveTyping-Message Nodes' stamp: 'JFGO 3/27/2024 15:47:13' prior: 50543197!
receiverLiveTypesFor: aVariableNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aVariableNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 15:47:15'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:47:15'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 15:47:16'!
ERROR!

!methodRemoval: GeneralContextApplier #receiverLiveTypesFor:In:addingIncompleteTypeInfoTo: stamp: 'JFGO 3/27/2024 15:48:09'!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	^ aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.!
!GeneralContextApplier methodsFor: 'LiveTyping-Message Nodes' stamp: 'JFGO 3/27/2024 15:48:18' prior: 50543207!
receiverLiveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aParseNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:48:21'!
PASSED!

----SNAPSHOT----(27 March 2024 15:48:27) CuisUniversity-6169.image priorSource: 6245038!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 15:50:41'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:50:41'!
ERROR!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 15:50:47'!
PASSED!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 3/27/2024 15:52:44' prior: 50542659 overrides: 16919312!
visitBlockNode: aBlockNode
	"TODO. Cuando inicializamos el visitor, podemos inicializar el contextApplier y ahorrar el ifNil. El blockNode no parece usarse.. sacarlo y correr tests"
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier receiverLiveTypesFor: variableName in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
	].
	super visitBlockNode: aBlockNode.
	! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 3/27/2024 15:54:54' prior: 50543394 overrides: 16919312!
visitBlockNode: aBlockNode
	"TODO. Cuando inicializamos el visitor, podemos inicializar el contextApplier y ahorrar el ifNil. El blockNode no parece usarse.. sacarlo y correr tests"
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier receiverLiveTypesFor: variableName in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		(RawToLiveTypesAdapter new adapt: liveTypes) classTypesDo: [:aClass | types add:aClass].
	].
	super visitBlockNode: aBlockNode.
	! !

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:55:00'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:55:00'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:55:58'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:55:58'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:56:16'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:56:16'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:56:46'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:56:46'!
ERROR!
!TempVariableNode methodsFor: 'as yet unclassified' stamp: 'JFGO 3/27/2024 15:56:56'!
receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo 
	self shouldBeImplemented.! !

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:57:17'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:57:18'!
ERROR!
!TempVariableNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 3/27/2024 15:58:40' prior: 50543470!
receiverLiveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo 
	^self liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !
!TempVariableNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 3/27/2024 15:58:50' prior: 50543486!
receiverLiveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo 
	^self typesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:59:04'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 15:59:04'!
ERROR!

(RawToLiveTypesAdapter new adapt: liveTypes)!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 3/27/2024 16:00:15' prior: 50543414 overrides: 16919312!
visitBlockNode: aBlockNode
	"TODO. Cuando inicializamos el visitor, podemos inicializar el contextApplier y ahorrar el ifNil. El blockNode no parece usarse.. sacarlo y correr tests"
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier receiverLiveTypesFor: variableName in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		liveTypes classTypesDo: [:aClass | types add:aClass].
	].
	super visitBlockNode: aBlockNode.
	! !

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 16:00:21'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 16:00:21'!
ERROR!
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 3/27/2024 16:00:45' prior: 50540819!
initializeFor: aCompiledMethod on: aVariableName within: aBlockNode 
	compiledMethod := aCompiledMethod.
	variableName := aVariableName.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 3/27/2024 16:01:08' prior: 50543514 overrides: 16919312!
visitBlockNode: aBlockNode
	"TODO. Cuando inicializamos el visitor, podemos inicializar el contextApplier y ahorrar el ifNil. El blockNode no parece usarse.. sacarlo y correr tests"
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier receiverLiveTypesFor: variableName in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	! !

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 16:01:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 16:01:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 16:01:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 3/27/2024 16:01:20'!
PASSED!

----QUIT----(27 March 2024 16:01:24) CuisUniversity-6169.image priorSource: 6773267!

----STARTUP---- (9 April 2024 19:57:30) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 19:57:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 19:57:51'!
PASSED!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/9/2024 20:03:10' prior: 50543556 overrides: 16919312!
visitBlockNode: aBlockNode
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier receiverLiveTypesFor: variableName in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	! !

!classDefinition: #ContextAppliersMethodVisitor category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/9/2024 20:24:07'!
ParseNodeVisitor subclass: #ContextAppliersMethodVisitor
	instanceVariableNames: 'compiledMethod parseNode blockNode methodNode types contextApplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 4/9/2024 20:24:07' prior: 50543812 overrides: 16919312!
visitBlockNode: aBlockNode
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier receiverLiveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	! !
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 4/9/2024 20:24:07' prior: 50543544!
initializeFor: aCompiledMethod on: aVariableName within: aBlockNode 
	compiledMethod := aCompiledMethod.
	parseNode := aVariableName.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.! !
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/9/2024 20:24:15' prior: 50543866!
initializeFor: aCompiledMethod on: aParseNode within: aBlockNode 
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 20:24:22'!
PASSED!
!GeneralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/9/2024 20:27:24'!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aParseNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !

!methodRemoval: GeneralContextApplier #liveTypesFor:in:addingIncompleteTypeInfoTo: stamp: 'JFGO 4/9/2024 20:27:36'!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aParseNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .!
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/9/2024 20:28:09'!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
! !
!GeneralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/9/2024 20:28:09'!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aParseNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !
!EqualsTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 4/9/2024 20:28:10' prior: 50543098!
receiverLiveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !
!ContextAppliersMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 4/9/2024 20:28:10' prior: 50543845 overrides: 16919312!
visitBlockNode: aBlockNode
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	! !

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesFor:in:addingIncompleteTypeInfoTo: stamp: 'JFGO 4/9/2024 20:28:10'!
receiverLiveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [^self receiverLiveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
!

!methodRemoval: GeneralContextApplier #receiverLiveTypesFor:in:addingIncompleteTypeInfoTo: stamp: 'JFGO 4/9/2024 20:28:10'!
receiverLiveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aParseNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/9/2024 20:28:32' prior: 50542993 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=contextApplier liveTypesFor: aMessageNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation on: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	self visitMessageNodeArguments:aMessageNode.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 20:28:37'!
PASSED!

!methodRemoval: GeneralContextApplier class #for: stamp: 'JFGO 4/9/2024 20:43:43'!
for: aBlockNode 
		
	^self new initializeFor: aBlockNode !

!methodRemoval: GeneralContextApplier #initializeFor: stamp: 'JFGO 4/9/2024 20:43:54'!
initializeFor: aBlockNode 
	blockNode := aBlockNode.!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/9/2024 20:44:03' prior: 50544024 overrides: 16919312!
visitBlockNode: aBlockNode
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier new.].
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/9/2024 20:44:12' prior: 50540696 overrides: 16919312!
visitBlockNode: aBlockNode
	"TODO. Cuando inicializamos el visitor, podemos inicializar el contextApplier y ahorrar el ifNil. El blockNode no parece usarse.. sacarlo y correr tests"
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier new.].
	super visitBlockNode: aBlockNode.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 20:44:15'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/9/2024 20:44:40' prior: 50540627!
initializeFor: aCompiledMethod collectingIssues: anIssuesCollection
	compiledMethod := aCompiledMethod.
	methodNode := compiledMethod methodNode .
	issues := anIssuesCollection .
	contextApplier := GeneralContextApplier new.
	! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/9/2024 20:44:53' prior: 50544201 overrides: 16919312!
visitBlockNode: aBlockNode
	super visitBlockNode: aBlockNode.! !
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/9/2024 20:45:05' prior: 50543877!
initializeFor: aCompiledMethod on: aParseNode within: aBlockNode 
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/9/2024 20:45:13' prior: 50544181 overrides: 16919312!
visitBlockNode: aBlockNode
	
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: OrderedCollection new.
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 4/9/2024 20:45:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/9/2024 20:45:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/9/2024 20:45:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 4/9/2024 20:45:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 20:45:16'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/9/2024 20:49:42'!
test01TypeCastIfTrueCorrectlyAppliesCastedType

| compiledMethod blockToTest blockToTestString types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrue.
blockToTestString:= '[ v1 factorial. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

types := compiledMethod typesOfVariableNamed: 'v1' withinBlockNode: blockToTest.

self assert:types size equals: 1.
self assert: types first equals: SmallInteger.! !

!methodRemoval: TypesWithContextAppliersTest #test01MethodCastToTypeReturnsJustCastedType stamp: 'JFGO 4/9/2024 20:49:42'!
test01MethodCastToTypeReturnsJustCastedType

| compiledMethod blockToTest blockToTestString types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrue.
blockToTestString:= '[ v1 factorial. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

types := compiledMethod typesOfVariableNamed: 'v1' withinBlockNode: blockToTest.

self assert:types size equals: 1.
self assert: types first equals: SmallInteger.!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/9/2024 20:50:29'!
test02TypeCastIfFalseReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalse.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalse.
blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !

!methodRemoval: TypesWithContextAppliersTest #test02MethodCastToRejectReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 20:50:29'!
test02MethodCastToRejectReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalse.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalse.
blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.!
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 4/9/2024 20:50:51'!
test14TypeCastIfFalseReturnsAllTypesButRejected
	self performMethodWithClass: TypesWithContextAppliersTestMethods andSelector: #typeCastIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !

!methodRemoval: TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 4/9/2024 20:50:51'!
test14TypeCastIfFalseCorrectlyRejectsCastedType
	self performMethodWithClass: TypesWithContextAppliersTestMethods andSelector: #typeCastIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	!

Object subclass: #ParseNodeTypesDisplay
	instanceVariableNames: 'parseNodeToAnalize methodNodeOwner definingClass methodToAnalyze types incompleteTypeInfoReasons typeInfo labels lines selectedIndex icons typesIndexLimit actions contextBlockNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping'!

!classDefinition: #ParseNodeTypesDisplay category: #LiveTyping stamp: 'JFGO 4/9/2024 20:55:53'!
Object subclass: #ParseNodeTypesDisplay
	instanceVariableNames: 'parseNodeToAnalize methodNodeOwner definingClass methodToAnalyze types incompleteTypeInfoReasons typeInfo labels lines selectedIndex icons typesIndexLimit actions contextBlockNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTyping'!
!ContextAppliersMethodVisitor class methodsFor: 'instance creation' stamp: 'JFGO 4/9/2024 21:00:52'!
for: aCompiledMethod on: aVariableName within: aBlockNode incompleteTypeInfoReasons: addingIncompleteTypeInfoTo 
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode ! !

!methodRemoval: ContextAppliersMethodVisitor class #for:on:within: stamp: 'JFGO 4/9/2024 21:00:52'!
for: aCompiledMethod on: aVariableName within: aBlockNode
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode !
!ContextAppliersMethodVisitor class methodsFor: 'instance creation' stamp: 'JFGO 4/9/2024 21:01:11'!
for: aCompiledMethod on: aVariableName within: aBlockNode  
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode ! !

!methodRemoval: ContextAppliersMethodVisitor class #for:on:within:incompleteTypeInfoReasons: stamp: 'JFGO 4/9/2024 21:01:11'!
for: aCompiledMethod on: aVariableName within: aBlockNode incompleteTypeInfoReasons: addingIncompleteTypeInfoTo 
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode !
!ContextAppliersMethodVisitor class methodsFor: 'instance creation' stamp: 'JFGO 4/9/2024 21:01:43'!
for: aCompiledMethod on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons   
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode ! !

!methodRemoval: ContextAppliersMethodVisitor class #for:on:within: stamp: 'JFGO 4/9/2024 21:01:43'!
for: aCompiledMethod on: aVariableName within: aBlockNode  
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode !
!CompiledMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/9/2024 21:02:35' prior: 50541965!
typesOfVariableNamed: aVariableName withinBlockNode: blockToTest 
	^ (ContextAppliersMethodVisitor for: self on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new) types.! !
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/9/2024 21:03:08'!
initializeFor: aCompiledMethod on: aParseNode within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.! !
!ContextAppliersMethodVisitor class methodsFor: 'as yet unclassified' stamp: 'JFGO 4/9/2024 21:03:08' prior: 50544581!
for: aCompiledMethod on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons   
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons ! !

!methodRemoval: ContextAppliersMethodVisitor #initializeFor:on:within: stamp: 'JFGO 4/9/2024 21:03:08'!
initializeFor: aCompiledMethod on: aParseNode within: aBlockNode 
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.!
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/9/2024 21:03:56' prior: 50544608!
initializeFor: aCompiledMethod on: aParseNode within: aBlockNode addingIncompleteTypeInfoTo: aIncompleteTypeInfoReasonsList
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.
	! !

!classDefinition: #ContextAppliersMethodVisitor category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/9/2024 21:04:00'!
ParseNodeVisitor subclass: #ContextAppliersMethodVisitor
	instanceVariableNames: 'compiledMethod parseNode blockNode methodNode types contextApplier incompleteTypeInfoReasons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/9/2024 21:03:58' prior: 50544647!
initializeFor: aCompiledMethod on: aParseNode within: aBlockNode addingIncompleteTypeInfoTo: aIncompleteTypeInfoReasonsList
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.
	incompleteTypeInfoReasons := aIncompleteTypeInfoReasonsList.! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/9/2024 21:04:20' prior: 50544319 overrides: 16919312!
visitBlockNode: aBlockNode
	
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons .
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	! !
!CompiledMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/9/2024 21:05:21'!
typesOfVariableNamed: aVariableName withinBlockNode: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	^ (ContextAppliersMethodVisitor for: self on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new) types.! !

!methodRemoval: CompiledMethod #typesOfVariableNamed:withinBlockNode: stamp: 'JFGO 4/9/2024 21:05:21'!
typesOfVariableNamed: aVariableName withinBlockNode: blockToTest 
	^ (ContextAppliersMethodVisitor for: self on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new) types.!
!CompiledMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/9/2024 21:05:28' prior: 50544708!
typesOfVariableNamed: aVariableName withinBlockNode: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	^ (ContextAppliersMethodVisitor for: self on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons) types.! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/9/2024 21:06:08' prior: 50544451!
test02TypeCastIfFalseReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalse.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalse.
blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/9/2024 21:06:24' prior: 50544410!
test01TypeCastIfTrueCorrectlyAppliesCastedType

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrue.
blockToTestString:= '[ v1 factorial. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types first equals: SmallInteger.! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/9/2024 21:06:44' prior: 50544768!
test01TypeCastIfTrueCorrectlyAppliesCastedType

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrue.
blockToTestString:= '[ v1 factorial. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types first equals: SmallInteger.! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/9/2024 21:06:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/9/2024 21:06:49'!
PASSED!
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/9/2024 21:07:59' prior: 50542244!
calculateTypesWithContext

	"self halt."
	"incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray ."
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/9/2024 21:08:56' prior: 50544824!
calculateTypesWithContext

	"self halt."
	"incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray ."
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	! !

----QUIT----(9 April 2024 21:12:51) CuisUniversity-6169.image priorSource: 6786421!

----STARTUP---- (12 April 2024 15:57:10) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/12/2024 16:00:22' prior: 50544841!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/12/2024 16:00:30' prior: 50544866!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:05:59'!
PASSED!
!GeneralContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:09:15'!
updateOn: aPreviousContextApplier For: aMessageNode visiting: aBlockNode
	
	| newContext contextUpdated|
	
	contextUpdated := false.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: aPreviousContextApplier.
		
		^newContext
				
	].
	^self .! !
!GeneralContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:09:35' prior: 50544978!
updateOn: aPreviousContextApplier For: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: aPreviousContextApplier.
		
		^newContext
				
	].
	^self .! !
!GeneralContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:13:23'!
updatefor: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		^newContext
				
	].
	^self .! !

!methodRemoval: GeneralContextApplier #updateOn:For:visiting: stamp: 'JFGO 4/12/2024 16:13:27'!
updateOn: aPreviousContextApplier For: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: aPreviousContextApplier.
		
		^newContext
				
	].
	^self .!
!GeneralContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:13:38'!
updateFor: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		^newContext
				
	].
	^self .! !

!methodRemoval: GeneralContextApplier #updatefor:visiting: stamp: 'JFGO 4/12/2024 16:13:38'!
updatefor: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		^newContext
				
	].
	^self .!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/12/2024 16:15:44' prior: 50540806!
visitMessageNodeArguments:aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | | shouldRestore | 
		shouldRestore := self updateContextApplierFor: aMessageNode visiting: argumentBlock.
		argumentBlock accept: self.
		shouldRestore ifTrue: [self restorePreviousContext].
		
		contextApplier := contextApplier updateFor: aMessageNode visiting: argumentBlock.
	].! !
!GeneralContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:24:50'!
updateFor: aMessageNode visiting: aBlockNode withVisitor: aVisitor
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aVisitor proceedWithContextupdated: newContext toVisit: aBlockNode.
		
				
	].
	! !
!ContextAppliersMethodVisitor methodsFor: 'context' stamp: 'JFGO 4/12/2024 16:25:44'!
proceedWithContextupdated: newContext toVisit: aBlockNode.
	aBlockNode accept: self.
	self restorePreviousContext .! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/12/2024 16:26:11' prior: 50545146!
visitMessageNodeArguments:aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		"shouldRestore := self updateContextApplierFor: aMessageNode visiting: argumentBlock.
		argumentBlock accept: self.
		shouldRestore ifTrue: [self restorePreviousContext]."
		
		contextApplier updateFor: aMessageNode visiting: argumentBlock.
	].! !
!GeneralContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:28:21'!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aBlockWhenContextUpdated value: newContext.
				
	].
	aBlockWhenContextNotUpdated value.! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/12/2024 16:29:27' prior: 50545198!
visitMessageNodeArguments:aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		"shouldRestore := self updateContextApplierFor: aMessageNode visiting: argumentBlock.
		argumentBlock accept: self.
		shouldRestore ifTrue: [self restorePreviousContext]."
		
		contextApplier updateFor: aMessageNode visiting: argumentBlock ifUpdated: [] ifNotUpdated:[].
	].! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/12/2024 16:31:24' prior: 50545245!
visitMessageNodeArguments:aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		"shouldRestore := self updateContextApplierFor: aMessageNode visiting: argumentBlock.
		argumentBlock accept: self.
		shouldRestore ifTrue: [self restorePreviousContext]."
		
		contextApplier updateFor: aMessageNode visiting: argumentBlock 
			ifUpdated: 	[:newContext | 
				contextApplier:= newContext. 
				argumentBlock accept: self.
				self restorePreviousContext .
				] 
			ifNotUpdated:[ argumentBlock accept: self.				].
	].! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:31:27'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:31:27'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:31:30'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:32:41'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:32:53'!
ERROR!

!methodRemoval: GeneralContextApplier #updateFor:visiting:withVisitor: stamp: 'JFGO 4/12/2024 16:33:20'!
updateFor: aMessageNode visiting: aBlockNode withVisitor: aVisitor
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aVisitor proceedWithContextupdated: newContext toVisit: aBlockNode.
		
				
	].
	!

!methodRemoval: GeneralContextApplier #updateFor:visiting: stamp: 'JFGO 4/12/2024 16:33:21'!
updateFor: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		^newContext
				
	].
	^self .!
!GeneralContextApplier methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:39:05' prior: 50545213!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:39:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:39:09'!
PASSED!

!methodRemoval: ContextAppliersMethodVisitor #updateContextApplierFor:visiting: stamp: 'JFGO 4/12/2024 16:39:22'!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	
	| newContext contextUpdated|
	
	contextUpdated := false.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: contextApplier.
		contextApplier := newContext.
		contextUpdated := true.
				
	].
	^contextUpdated .
	

	!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:39:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:39:25'!
PASSED!

!methodRemoval: ContextAppliersMethodVisitor #proceedWithContextupdated:toVisit: stamp: 'JFGO 4/12/2024 16:40:31'!
proceedWithContextupdated: newContext toVisit: aBlockNode.
	aBlockNode accept: self.
	self restorePreviousContext .!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/12/2024 16:40:45' prior: 50545261!
visitMessageNodeArguments:aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		contextApplier updateFor: aMessageNode visiting: argumentBlock 
			ifUpdated: 	[:newContext | 
				contextApplier:= newContext. 
				argumentBlock accept: self.
				self restorePreviousContext .
				] 
			ifNotUpdated:[ argumentBlock accept: self.				].
	].! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:40:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:40:50'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/12/2024 16:43:09' prior: 50540736!
visitMessageNodeArguments: aMessageNode
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		contextApplier updateFor: aMessageNode visiting: argumentBlock 
			ifUpdated: 	[:newContext | 
				contextApplier:= newContext. 
				argumentBlock accept: self.
				self restorePreviousContext .
			] 
			ifNotUpdated:[ argumentBlock accept: self.				].
	].! !

!methodRemoval: TypeCheckerDragonMethodVisitor #updateContextApplierFor:visiting: stamp: 'JFGO 4/12/2024 16:43:17'!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	
	| newContext contextUpdated|
	
	contextUpdated := false.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: contextApplier.
		contextApplier := newContext.
		contextUpdated := true.
				
	].
	^contextUpdated .
	

	!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/12/2024 16:43:19'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:43:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/12/2024 16:43:19'!
ERROR!

GeneralContextApplier subclass: #EqualsTypeContextApplier
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldCast previousContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #EqualsTypeContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/12/2024 16:43:50'!
GeneralContextApplier subclass: #EqualsTypeContextApplier
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldCast previousContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:44:57'!
PASSED!

Object subclass: #TypeContextAppliers
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldCast previousContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #TypeContextAppliers category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/12/2024 16:46:05'!
Object subclass: #TypeContextAppliers
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldCast previousContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

TypeContextAppliers subclass: #GeneralContextApplier
	instanceVariableNames: 'blockNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

Object subclass: #TypeContextAppliers
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #TypeContextAppliers category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/12/2024 16:46:51'!
Object subclass: #TypeContextAppliers
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

TypeContextAppliers subclass: #GeneralContextApplier
	instanceVariableNames: 'blockNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #GeneralContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/12/2024 16:46:58'!
TypeContextAppliers subclass: #GeneralContextApplier
	instanceVariableNames: 'blockNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

TypeContextAppliers subclass: #EqualsTypeContextApplier
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldCast previousContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #EqualsTypeContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/12/2024 16:47:06'!
TypeContextAppliers subclass: #EqualsTypeContextApplier
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldCast previousContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!methodRemoval: GeneralContextApplier #updateFor:visiting:ifUpdated:ifNotUpdated: stamp: 'JFGO 4/12/2024 16:47:40'!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.!
!TypeContextAppliers methodsFor: 'nil' stamp: 'JFGO 4/12/2024 16:47:45'!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !
!TypeContextAppliers methodsFor: 'updating / restoration' stamp: 'JFGO 4/12/2024 16:48:21'!
previous
	self subclassResponsibility .! !
!TypeContextAppliers methodsFor: 'LiveTyping' stamp: 'JFGO 4/12/2024 16:49:27'!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	self subclassResponsibility .! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:49:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:49:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/12/2024 16:49:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/12/2024 16:49:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/12/2024 16:49:52'!
PASSED!

----SNAPSHOT----(12 April 2024 16:51:18) CuisUniversity-6169.image priorSource: 6822663!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/12/2024 17:18:56'!
typeCastIfTrueIfFalseManyVariables
	|v1 v2 |
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v2 := Date today.
	v1 class = SmallInteger ifTrue: [v1 factorial] ifFalse: [v1 isEmpty].! !

----End fileIn of C:\Users\juli_\Tesis\TESIS-LAST\windows64\Packages\TerseGuide.pck.st----!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/12/2024 17:46:14' prior: 50545987!
typeCastIfTrueIfFalseManyVariables
	|v1 v2 |
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v2 := Date today.
	v1 class = SmallInteger ifTrue: [v2 month] ifFalse: [v2 year].! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/12/2024 17:46:52'!
test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalse.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalse.
blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/12/2024 17:47:25' prior: 50548925!
test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalse.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalse.
blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/12/2024 17:47:35' prior: 50548952!
test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalse.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalse.
blockToTestString:= '[ v2 year. ]'.
"blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String."! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/12/2024 17:48:00' prior: 50548979!
test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseManyVariables.
blockToTestString:= '[ v2 year. ]'.
"blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String."! !

----QUIT----(12 April 2024 17:48:09) CuisUniversity-6169.image priorSource: 6858623!

----STARTUP---- (13 April 2024 17:50:11) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 17:57:10' prior: 50548916!
typeCastIfTrueIfFalseManyVariables
	|v1 v2 |
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v2 := 5.
	v2 := Date today.
	v1 class = SmallInteger ifTrue: [v2 month] ifFalse: [v2 year].! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 17:57:51' prior: 50549006!
test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseManyVariables.
blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.! !

objectToApply!

objectToApply = aParseNode!

objectToApply = aParseNode!

objectToApply == aParseNode!

objectToApply = aParseNode!

objectToApply!

aParseNode!

aParseNode!

objectToApply equivalentTo: aParseNode.!
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/13/2024 18:22:51' prior: 50543980 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	

	(objectToApply equivalentTo: aParseNode) ifTrue:[
		self shouldCast 
			ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
			ifFalse: [^self receiverLiveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ].
	] ifFalse: [
		previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/13/2024 18:22:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/13/2024 18:22:56'!
PASSED!
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/13/2024 18:25:27' prior: 50549086 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	"TODO. Revisar el equivalentTo:. Estamos comparando el objecto que generó el equalsContextApplier vs sobre el que quiero preguntar tipos. Ambos vienen de parseNode"
	(objectToApply equivalentTo: aParseNode) ifTrue:[
		self shouldCast 
			ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
			ifFalse: [^self receiverLiveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ].
	] ifFalse: [
		previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/13/2024 18:31:29' prior: 50549116 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	"TODO. Revisar el equivalentTo:. Estamos comparando el objecto que generó el equalsContextApplier vs sobre el que quiero preguntar tipos. Ambos vienen de parseNode"
	(objectToApply equivalentTo: aParseNode) ifTrue:[
		self shouldCast 
			ifTrue: [  ^self receiverLiveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
			ifFalse: [^self receiverLiveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ].
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/13/2024 18:31:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/13/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/13/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/13/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/13/2024 18:31:48'!
PASSED!

----SNAPSHOT----(13 April 2024 18:32:23) CuisUniversity-6169.image priorSource: 6956241!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 18:33:03' prior: 50549051!
test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseManyVariables.
blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.

blockToTestString:= '[ v2 month. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.! !

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/13/2024 18:33:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/13/2024 18:33:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/13/2024 18:33:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/13/2024 18:33:05'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 18:33:30' prior: 50549196!
test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseManyVariables.

"ifFalse branch"
blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.

"ifTrueBranch"
blockToTestString:= '[ v2 month. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.! !

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/13/2024 18:33:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/13/2024 18:33:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/13/2024 18:33:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/13/2024 18:33:31'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 18:40:29'!
test00NotTDDButEvidenceOfTheEquivalentToIssue

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrue.
blockToTestString:= '[ v1 factorial. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types first equals: SmallInteger.! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 18:42:35'!
typeCastIfFalseIfTrueEquivalentToIssue
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	
	v1 class = String ifFalse: [v1 isEmpty] ifTrue: [v1 isEmpty] .! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 18:43:35' prior: 50549318!
test00NotTDDButEvidenceOfTheEquivalentToIssue

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalseIfTrueEquivalentToIssue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalseIfTrueEquivalentToIssue.
blockToTestString:= '[ v1 isEmpty ]'. "Mas alla de como tome aca el bloque, nunca es equals a ninguno de los mensajes"
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types first equals: String.! !

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/13/2024 18:43:36'!
FAILURE!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 18:44:20' prior: 50549352!
test00NotTDDButEvidenceOfTheEquivalentToIssue

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalseIfTrueEquivalentToIssue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalseIfTrueEquivalentToIssue.
blockToTestString:= '[ v1 isEmpty. ]'. "Mas alla de como tome aca el bloque, nunca es equals a ninguno de los mensajes"
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types first equals: String.! !

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/13/2024 18:44:22'!
ERROR!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/13/2024 18:46:08' prior: 50544691 overrides: 16919312!
visitBlockNode: aBlockNode
	
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons .
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	] ifFalse: [
		super visitBlockNode: aBlockNode.
	]
	! !

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/13/2024 18:46:10'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/13/2024 18:46:14'!
ERROR!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/13/2024 18:51:34' prior: 50549418 overrides: 16919312!
visitBlockNode: aBlockNode
	
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons .
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	
	! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 18:52:55' prior: 50549385!
test00NotTDDButEvidenceOfTheEquivalentToIssue

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalseIfTrueEquivalentToIssue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalseIfTrueEquivalentToIssue.
blockToTestString:= '[ v1 isEmpty. ]'. "Mas alla de como tome aca el bloque, nunca es equals a ninguno de los mensajes"
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

"types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types first equals: String."
self assert: true.! !

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/13/2024 18:53:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/13/2024 18:53:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/13/2024 18:53:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/13/2024 18:53:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/13/2024 18:53:00'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 18:55:55'!
typeCastIfTrueIfFalseNestedManyVariables
	|v1 v2 |
	
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	
	v2 := 5.
	v2 := Date today.
	
	v1 class = SmallInteger ifTrue: [
		v2 class = SmallInteger ifFalse: [ v2 month.			]
	].! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 18:56:48' prior: 50549513!
typeCastIfTrueIfFalseNestedManyVariables
	|v1 v2 |
	
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	
	v2 := 5.
	v2 := Date today.
	
	v1 class = SmallInteger ifTrue: [
		v2 class = SmallInteger ifFalse: [ 
				v2 month.		
				v1 asFloat.
			]
	].! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 18:57:29'!
test03TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseManyVariables.

"ifFalse branch"
blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.

"ifTrueBranch"
blockToTestString:= '[ v2 month. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.! !

!methodRemoval: TypesWithContextAppliersTest #test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/13/2024 18:57:29'!
test03TypeCastIfTureIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseManyVariables.

"ifFalse branch"
blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.

"ifTrueBranch"
blockToTestString:= '[ v2 month. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 18:58:37'!
test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseManyVariables.

"ifFalse branch"
blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.

"ifTrueBranch"
blockToTestString:= '[ v2 month. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 18:58:52' prior: 50549624!
test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseManyVariables.


blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.
! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 18:59:29' prior: 50549667!
test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseNestedManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseNestedManyVariables.


blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.
! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 19:01:33' prior: 50549695!
test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseNestedManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseNestedManyVariables.


blockToTestString:= '[ 
					v2 month.		
					v1 asFloat.
				]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self getVariableNodeNamed: 'v1' on: compiledMethod .
v2Node := self getVariableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 19:04:18' prior: 50549723!
test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseNestedManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseNestedManyVariables.


blockToTestString:= '[ v2 month.	 v1 asFloat.				]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self getVariableNodeNamed: 'v1' on: compiledMethod .
v2Node := self getVariableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
! !

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/13/2024 19:04:27'!
FAILURE!

sourceRanges!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 19:05:18' prior: 50549760!
test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseNestedManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseNestedManyVariables.


blockToTestString:= '[ v2 month.	 v1 asFloat. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self getVariableNodeNamed: 'v1' on: compiledMethod .
v2Node := self getVariableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
! !

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/13/2024 19:05:25'!
FAILURE!

sourceRanges!

self value!

self key!

self keys!

self keys at: 1!

self keys at: 2!

self keys at: 3!

self keys at: 4!

self keys at: 5!

self keys at: 6!

self keys at: 7!

self keys at: 8!

self keys at: 9!

self keys at: 10!

self keys at: 11!

self keys at: 12!

self keys at: 13!

self keys at: 14!

self keys at: 15!

self keys at: 16!

self keys at: 17!

self keys at: 18!

self keys at: 19!

self keys at: 20!

self keys at: 21!

self keys at: 22!

self keys at: 23!

self keys at: 24!

sourceRanges!

self keys at: 25!

self keys at: 26!

self keys at: 24!

(self keys at: 24) class!

(self keys at: 24) printSourceCode !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 19:08:23' prior: 50549802!
test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseNestedManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseNestedManyVariables.


blockToTestString:= '[
 	v2 month.
 	v1 asFloat. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self getVariableNodeNamed: 'v1' on: compiledMethod .
v2Node := self getVariableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
! !

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/13/2024 19:08:33'!
FAILURE!

sourceRanges!

self keys at:24!

self keys at:25!

self keys at:26!

self keys at:27!

self keys at:28!

self keys at:24!

self keys at:23!

self keys at:25!

self keys at:26!

self keys at:27!

self keys at:22!

self keys at:21!

self keys at:20!

self keys at:19!

self keys at:18!

self keys at:17!

self keys at:16!

self keys at:15!

self keys at:14!

self keys at:13!

self keys at:12!

self keys at:11!

self keys at:10!

self keys at:9!

self keys at:8!

self keys at:7!

self keys at:27!

self keys at:26!

self keys at:25!

self keys at:24!

self keys at:23!

self keys at:22!

self keys at:21!

self keys at:20!

self keys at:28!

self printSourceCode !

self printSourceCode !

self printSourceCode = '[v2 month.v1 asFloat. ]'.!

self printString!

self printSourceCode !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 19:12:45' prior: 50549863!
test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseNestedManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseNestedManyVariables.


blockToTestString:=  '[
 	v2 month.
 	v1 asFloat. ]' .
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self getVariableNodeNamed: 'v1' on: compiledMethod .
v2Node := self getVariableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 19:13:08' prior: 50549525!
typeCastIfTrueIfFalseNestedManyVariables
	|v1 v2 |
	
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	
	v2 := 5.
	v2 := Date today.
	
	v1 class = SmallInteger ifTrue: [
		v2 class = SmallInteger ifFalse: [ v2 month.		
				v1 asFloat.
			]
	].! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 19:13:40' prior: 50549966!
typeCastIfTrueIfFalseNestedManyVariables
	|v1 v2 |
	
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	
	v2 := 5.
	v2 := Date today.
	
	v1 class = SmallInteger ifTrue: [
		v2 class = SmallInteger ifFalse: [v2 month.	v1 asFloat.]
	].! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 19:13:59' prior: 50549929!
test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseNestedManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseNestedManyVariables.


blockToTestString:= '[ v2 month.	 v1 asFloat. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self getVariableNodeNamed: 'v1' on: compiledMethod .
v2Node := self getVariableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
! !

sourceRanges!

self printSourceCode!

self printSourceCode !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 19:16:25' prior: 50549990!
test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseNestedManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseNestedManyVariables.


blockToTestString:= '[
 	v2 month.
 	v1 asFloat. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self getVariableNodeNamed: 'v1' on: compiledMethod .
v2Node := self getVariableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
! !

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/13/2024 19:16:32'!
FAILURE!

sourceRanges!

self printSourceCode!

nodeAtRange key printSourceCode = blockNodeCodeString!

blockNodeCodeString!

nodeAtRange key printSourceCode!

self asString!

self asString!

blockNodeCodeString!

self asString!

self asString!

nodeAtRange key printSourceCode!

self asString!
!TypesWithContextAppliersTest methodsFor: 'methods and block nodes' stamp: 'JFGO 4/13/2024 19:21:16' prior: 50541337!
getBlockNodeWithSourceCode: blockNodeCodeString on: aCompiledMethod

	|  nodeEncoder methodNode sourceRanges blockToTest  |

	blockToTest:=nil.
	
	methodNode:=aCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	sourceRanges associationsDo: [ :nodeAtRange |
			(nodeAtRange key class = BlockNode and: [nodeAtRange key printSourceCode = blockNodeCodeString asUnicodeString])ifTrue: [
					blockToTest:= nodeAtRange key.
				]
			].

	blockToTest notNil ifTrue: [^blockToTest].

	self failWith: 'Block node not found'.! !

nodeAtRange key printSourceCode!

blockNodeCodeString asUnicodeString!

nodeAtRange key printSourceCode = blockNodeCodeString asUnicodeString!

nodeAtRange key printSourceCode!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/13/2024 19:23:25' prior: 50550029!
test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseNestedManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseNestedManyVariables.


blockToTestString:= '[
	v2 month.
	v1 asFloat. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self getVariableNodeNamed: 'v1' on: compiledMethod .
v2Node := self getVariableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
! !
!TypesWithContextAppliersTest methodsFor: 'methods and block nodes' stamp: 'JFGO 3/13/2024 17:29:42' prior: 50550080!
getBlockNodeWithSourceCode: blockNodeCodeString on: aCompiledMethod

	|  nodeEncoder methodNode sourceRanges blockToTest  |

	blockToTest:=nil.
	
	methodNode:=aCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	sourceRanges associationsDo: [ :nodeAtRange |
			(nodeAtRange key class = BlockNode and: [nodeAtRange key printSourceCode = blockNodeCodeString])ifTrue: [
					blockToTest:= nodeAtRange key.
				]
			].

	blockToTest notNil ifTrue: [^blockToTest].

	self failWith: 'Block node not found'.! !

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/13/2024 19:32:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/13/2024 19:32:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/13/2024 19:32:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/13/2024 19:32:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/13/2024 19:32:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/13/2024 19:32:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/13/2024 19:32:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/13/2024 19:32:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/13/2024 19:32:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/13/2024 19:32:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/13/2024 19:32:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/13/2024 19:32:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/13/2024 19:32:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/13/2024 19:32:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/13/2024 19:32:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/13/2024 19:32:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/13/2024 19:32:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/13/2024 19:32:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/13/2024 19:32:54'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/13/2024 19:32:55'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/13/2024 19:32:55'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/13/2024 19:32:55'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/13/2024 19:32:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/13/2024 19:32:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/13/2024 19:32:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/13/2024 19:32:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/13/2024 19:32:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/13/2024 19:34:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/13/2024 19:34:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/13/2024 19:34:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/13/2024 19:34:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/13/2024 19:34:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/13/2024 19:34:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/13/2024 19:34:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/13/2024 19:34:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/13/2024 19:34:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/13/2024 19:34:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/13/2024 19:34:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/13/2024 19:34:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/13/2024 19:34:49'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/13/2024 19:34:50'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/13/2024 19:34:50'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/13/2024 19:34:50'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/13/2024 19:34:52'!
FAILURE!

----QUIT----(13 April 2024 19:38:52) CuisUniversity-6169.image priorSource: 6961325!

----STARTUP---- (15 April 2024 18:25:19) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 18:29:16'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 18:29:16'!
FAILURE!

contextApplier!

				contextApplier:= newContext. !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/15/2024 18:37:46' prior: 50545468!
visitMessageNodeArguments: aMessageNode
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		contextApplier updateFor: aMessageNode visiting: argumentBlock 	ifUpdated: 	[:newContext | 
				contextApplier:= newContext. 
				argumentBlock accept: self.
				self restorePreviousContext .
			] 
			ifNotUpdated:[ argumentBlock accept: self.				].
	].! !

self receiverLiveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo!

self receiverOrCascadeReceiver!
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/15/2024 19:11:21'!
receiverLiveTypesFor: aMessageNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^self liveTypesFor: aMessageNode receiverOrCascadeReceiver in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .
! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/15/2024 19:12:03'!
liveTypesCastingObjectFor: aParseNode in:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^FixedType for: type.
	
! !
!EqualsTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 4/15/2024 19:12:03' prior: 50549143 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	"TODO. Revisar el equivalentTo:. Estamos comparando el objecto que generó el equalsContextApplier vs sobre el que quiero preguntar tipos. Ambos vienen de parseNode"
	(objectToApply equivalentTo: aParseNode) ifTrue:[
		self shouldCast 
			ifTrue: [  ^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
			ifFalse: [^self receiverLiveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ].
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesCastingObjectFor:in:addingIncompleteTypeInfoTo: stamp: 'JFGO 4/15/2024 19:12:03'!
receiverLiveTypesCastingObjectFor: aParseNode in:  compiledMethoda addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^FixedType for: type.
	
!
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/15/2024 19:12:14'!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !
!EqualsTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 4/15/2024 19:12:14' prior: 50550408 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	"TODO. Revisar el equivalentTo:. Estamos comparando el objecto que generó el equalsContextApplier vs sobre el que quiero preguntar tipos. Ambos vienen de parseNode"
	(objectToApply equivalentTo: aParseNode) ifTrue:[
		self shouldCast 
			ifTrue: [  ^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
			ifFalse: [^self liveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ].
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesRejectingObjectFor:in:addingIncompleteTypeInfoTo: stamp: 'JFGO 4/15/2024 19:12:14'!
receiverLiveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/15/2024 19:13:08' prior: 50544071 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=contextApplier receiverLiveTypesFor: aMessageNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation on: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	self visitMessageNodeArguments:aMessageNode.! !

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/15/2024 19:13:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 19:13:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/15/2024 19:13:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/15/2024 19:13:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/15/2024 19:13:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 19:15:37'!
ERROR!
!GeneralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/15/2024 19:16:42'!
receiverLiveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aParseNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 19:18:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/15/2024 19:19:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/15/2024 19:19:01'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/15/2024 19:19:01'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/15/2024 19:20:32'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/15/2024 19:20:32'!
FAILURE!

aMessageNode receiverOrCascadeReceiver!

aMessageNode selectorSymbol!

self receiverOrCascadeReceiver!
!GeneralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/15/2024 19:34:59' prior: 50543995 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| aTypeCastApplier |
	^ aParseNode typesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo castingWith: aTypeCastApplier new.! !
!GeneralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/9/2024 20:28:09' prior: 50550658 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aParseNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !
!GeneralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/9/2024 20:28:09' prior: 50550670 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aParseNode receiverLiveTypesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !
!GeneralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/15/2024 19:36:38' prior: 50550680 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^ aParseNode typesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo castingWith: NoTypeCastApplier new ! !

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/15/2024 19:36:40'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/15/2024 19:36:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/15/2024 19:36:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/15/2024 19:36:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 19:36:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/15/2024 19:36:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/15/2024 19:36:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/15/2024 19:36:57'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 4/15/2024 19:49:22'!
test17XX

	self performMethodWithClass: TypesWithContextAppliersTestMethods andSelector: #typeCastIfTrueIfFalseNestedManyVariables typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].

	! !

!testRun: #TypeCheckerDragonTest #test17XX stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17XX stamp: 'JFGO 4/15/2024 19:49:24'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 4/15/2024 19:50:06'!
test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable

	self performMethodWithClass: TypesWithContextAppliersTestMethods andSelector: #typeCastIfTrueIfFalseNestedManyVariables typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].

	! !

!methodRemoval: TypeCheckerDragonTest #test17XX stamp: 'JFGO 4/15/2024 19:50:06'!
test17XX

	self performMethodWithClass: TypesWithContextAppliersTestMethods andSelector: #typeCastIfTrueIfFalseNestedManyVariables typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].

	!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/15/2024 19:50:11'!
PASSED!
!GeneralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/15/2024 19:54:17' prior: 50550690 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	"TODO. El argumento castingWith se viene arrastrando de la version previa. Eliminar"
	^ aParseNode typesIn: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo castingWith: NoTypeCastApplier new ! !
!GeneralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/15/2024 20:00:51' prior: 50550558!
receiverLiveTypesFor: aMessageNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^self liveTypesFor: aMessageNode receiverOrCascadeReceiver in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/15/2024 20:00:54'!
PASSED!
!TypeContextAppliers methodsFor: 'LiveTyping' stamp: 'JFGO 4/15/2024 20:01:10'!
receiverLiveTypesFor: aMessageNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^self liveTypesFor: aMessageNode receiverOrCascadeReceiver in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .! !

!methodRemoval: GeneralContextApplier #receiverLiveTypesFor:in:addingIncompleteTypeInfoTo: stamp: 'JFGO 4/15/2024 20:01:14'!
receiverLiveTypesFor: aMessageNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^self liveTypesFor: aMessageNode receiverOrCascadeReceiver in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .!

!methodRemoval: EqualsTypeContextApplier #receiverLiveTypesFor:in:addingIncompleteTypeInfoTo: stamp: 'JFGO 4/15/2024 20:01:18'!
receiverLiveTypesFor: aMessageNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	^self liveTypesFor: aMessageNode receiverOrCascadeReceiver in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo .
!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/15/2024 20:01:21'!
PASSED!
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/15/2024 20:13:14' prior: 50544885!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	"types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/15/2024 20:15:35' prior: 50551241!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/15/2024 20:21:37'!
typeCastForParseNodeClass

	|v1|
	v1 := Date today.
	v1 := 5.
	
	v1 class = SmallInteger ifFalse: [				v1 class.			].
			! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/15/2024 20:21:56' prior: 50551260!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	"types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/15/2024 20:15:35' prior: 50551287!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/15/2024 20:23:16'!
test05TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseNestedManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseNestedManyVariables.


blockToTestString:= '[
	v2 month.
	v1 asFloat. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self getVariableNodeNamed: 'v1' on: compiledMethod .
v2Node := self getVariableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/15/2024 20:24:08' prior: 50551325!
test05TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalse.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalse.
blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: OrderedCollection.
self assert: types includes: String.
! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/15/2024 20:25:03' prior: 50551361!
test05TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalse.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalse.
blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: Date class.! !

!testRun: #TypesWithContextAppliersTest #test05TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/15/2024 20:28:46'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test05TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/15/2024 20:28:46'!
FAILURE!

sourceRanges!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/15/2024 20:30:25' prior: 50551279!
typeCastForParseNodeClass

	|v1|
	v1 := Date today.
	v1 := 5.
	
	v1 class = SmallInteger ifFalse: [v1 class].
			! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/15/2024 20:30:32' prior: 50551421!
typeCastForParseNodeClass

	|v1|
	v1 := Date today.
	v1 := 5.
	
	v1 class = SmallInteger ifFalse: [v1 class.].
			! !

!testRun: #TypesWithContextAppliersTest #test05TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/15/2024 20:30:35'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test05TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/15/2024 20:30:35'!
FAILURE!

sourceRanges!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/15/2024 20:32:02' prior: 50551387!
test05TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastForParseNodeClass.
TypesWithContextAppliersTestMethods new perform: #typeCastForParseNodeClass.
blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: Date class.! !

!testRun: #TypesWithContextAppliersTest #test05TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/15/2024 20:34:54'!
FAILURE!
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/15/2024 20:15:35' prior: 50551306!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/15/2024 20:21:56' prior: 50551475!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	"types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/15/2024 20:35:51' prior: 50551494!
calculateTypesWithContext

	self halt.
	incompleteTypeInfoReasons := Set new.
	"types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/15/2024 20:35:59' prior: 50551513!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	"types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/15/2024 20:15:35' prior: 50551532!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/15/2024 20:40:17' prior: 50551445!
test05TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastForParseNodeClass.
TypesWithContextAppliersTestMethods new perform: #typeCastForParseNodeClass.
blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1 class' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: Date class.! !

!testRun: #TypesWithContextAppliersTest #test05TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/15/2024 20:40:20'!
FAILURE!

sourceRanges!

self name!

self name!

self name!

self name!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/15/2024 20:49:28' prior: 50551570!
test05TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastForParseNodeClass.
TypesWithContextAppliersTestMethods new perform: #typeCastForParseNodeClass.
blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: '{v1 class}' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: Date class.! !

!testRun: #TypesWithContextAppliersTest #test05TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/15/2024 20:51:01'!
FAILURE!

aMessageNode receiver arguments first key value!

aMessageNode receiver receiver receiver!

!testRun: #TypesWithContextAppliersTest #test05TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/15/2024 20:59:21'!
FAILURE!

self liveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo!

----QUIT----(15 April 2024 21:04:29) CuisUniversity-6169.image priorSource: 6998480!

----STARTUP---- (17 April 2024 18:28:28) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/17/2024 18:32:09' prior: 50551551!
calculateTypesWithContext

	self halt.
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/17/2024 18:32:20' prior: 50551649!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!TypeContextAppliers methodsFor: 'updating / restoration' stamp: 'JFGO 4/17/2024 18:34:18' prior: 50545791!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		self halt.
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !

		aMessageNode receiver.!

		aMessageNode receiver arguments.!

		aMessageNode receiver !

		aMessageNode receiver class!
!TypeContextAppliers methodsFor: 'updating / restoration' stamp: 'JFGO 4/17/2024 19:03:08' prior: 50551687!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		self halt.
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/17/2024 19:03:26' prior: 50551602!
test05TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastForParseNodeClass.
TypesWithContextAppliersTestMethods new perform: #typeCastForParseNodeClass.
blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: '{v1 class}' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

"self assert:types size equals: 1.
self assert: types includes: Date class."
self assert: true.! !
!TypeContextAppliers methodsFor: 'updating / restoration' stamp: 'JFGO 4/17/2024 19:03:50' prior: 50551723!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/17/2024 19:03:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/17/2024 19:03:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/17/2024 19:03:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/17/2024 19:03:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/17/2024 19:03:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/17/2024 19:03:52'!
PASSED!

!classRenamed: #EqualsTypeContextApplier as: #EqualsClassTypeContextApplier stamp: 'JFGO 4/17/2024 19:04:10'!
Smalltalk renameClassNamed: #EqualsTypeContextApplier as: #EqualsClassTypeContextApplier!
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 4/17/2024 19:04:10' prior: 50551782!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/17/2024 19:04:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/17/2024 19:04:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/17/2024 19:04:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/17/2024 19:04:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/17/2024 19:04:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/17/2024 19:04:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/17/2024 19:04:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/17/2024 19:04:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/17/2024 19:04:28'!
PASSED!
!TypeContextAppliers methodsFor: 'updating / restoration' stamp: 'JFGO 4/17/2024 19:05:47' prior: 50551847!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !
!TypeContextAppliers methodsFor: 'updating / restoration' stamp: 'JFGO 4/17/2024 19:07:44' prior: 50551977!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ 
		newContext := self buildContextForIfWithMessageNodeAsCondition.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/17/2024 19:08:24'!
xx
| shouldReject aBlockNode aMessageNode newContext selectorSymbol |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject :=  selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/17/2024 19:08:24' prior: 50552024!
xx
| shouldReject aBlockNode aMessageNode newContext selectorSymbol |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject :=  selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/17/2024 19:09:13' prior: 50552048!
xx


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/17/2024 19:10:20'!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode
| shouldReject newContext |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/17/2024 19:10:32' prior: 50552075!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode
| shouldReject newContext |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
			
		^newContext.


! !

!methodRemoval: TypeContextAppliers #xx stamp: 'JFGO 4/17/2024 19:10:37'!
xx


!
!TypeContextAppliers methodsFor: 'updating / restoration' stamp: 'JFGO 4/17/2024 19:10:56' prior: 50552009!
updateFor: aMessageNode visiting: aBlockNode ifUpdated: aBlockWhenContextUpdated ifNotUpdated: aBlockWhenContextNotUpdated
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ 
		newContext := self buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode.
		aBlockWhenContextUpdated value: newContext.
		^self.
				
	].
	aBlockWhenContextNotUpdated value.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/17/2024 19:12:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/17/2024 19:12:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/17/2024 19:12:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/17/2024 19:12:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/17/2024 19:12:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/17/2024 19:12:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/17/2024 19:12:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/17/2024 19:12:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/17/2024 19:12:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/17/2024 19:12:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/17/2024 19:12:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/17/2024 19:12:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/17/2024 19:12:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/17/2024 19:12:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/17/2024 19:12:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/17/2024 19:12:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/17/2024 19:12:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/17/2024 19:12:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/17/2024 19:12:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/17/2024 19:12:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/17/2024 19:12:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/17/2024 19:12:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/17/2024 19:12:25'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/17/2024 19:16:17' prior: 50552100!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
		
	


! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/17/2024 19:16:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/17/2024 19:16:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/17/2024 19:16:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/17/2024 19:16:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/17/2024 19:16:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/17/2024 19:16:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/17/2024 19:16:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/17/2024 19:16:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/17/2024 19:16:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/17/2024 19:16:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/17/2024 19:16:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/17/2024 19:16:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/17/2024 19:16:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/17/2024 19:16:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/17/2024 19:16:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/17/2024 19:16:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/17/2024 19:16:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/17/2024 19:16:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/17/2024 19:16:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/17/2024 19:16:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/17/2024 19:16:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/17/2024 19:16:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/17/2024 19:16:31'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/17/2024 19:17:15'!
test0XTypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastForParseNodeClass.
TypesWithContextAppliersTestMethods new perform: #typeCastForParseNodeClass.
blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: '{v1 class}' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

"self assert:types size equals: 1.
self assert: types includes: Date class."
self assert: true.! !

!methodRemoval: TypesWithContextAppliersTest #test05TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/17/2024 19:17:15'!
test05TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastForParseNodeClass.
TypesWithContextAppliersTestMethods new perform: #typeCastForParseNodeClass.
blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: '{v1 class}' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

"self assert:types size equals: 1.
self assert: types includes: Date class."
self assert: true.!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/17/2024 19:19:59'!
test03TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalseIfTrue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalseIfTrue.
blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/17/2024 19:20:05'!
test04TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseManyVariables.

"ifFalse branch"
blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.

"ifTrueBranch"
blockToTestString:= '[ v2 month. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.! !

!methodRemoval: TypesWithContextAppliersTest #test03TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/17/2024 19:20:05'!
test03TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseManyVariables.

"ifFalse branch"
blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.

"ifTrueBranch"
blockToTestString:= '[ v2 month. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/17/2024 19:20:17'!
test05TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseNestedManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseNestedManyVariables.


blockToTestString:= '[
	v2 month.
	v1 asFloat. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self getVariableNodeNamed: 'v1' on: compiledMethod .
v2Node := self getVariableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
! !

!methodRemoval: TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/17/2024 19:20:17'!
test04TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseNestedManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseNestedManyVariables.


blockToTestString:= '[
	v2 month.
	v1 asFloat. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self getVariableNodeNamed: 'v1' on: compiledMethod .
v2Node := self getVariableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/17/2024 19:22:14'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals type context' stamp: 'JFGO 4/17/2024 19:25:09'!
test06TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastForParseNodeClass.
TypesWithContextAppliersTestMethods new perform: #typeCastForParseNodeClass.
blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: '{v1 class}' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

"self assert:types size equals: 1.
self assert: types includes: Date class."
self assert: true.! !

!methodRemoval: TypesWithContextAppliersTest #test0XTypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/17/2024 19:25:09'!
test0XTypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastForParseNodeClass.
TypesWithContextAppliersTestMethods new perform: #typeCastForParseNodeClass.
blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: '{v1 class}' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

"self assert:types size equals: 1.
self assert: types includes: Date class."
self assert: true.!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/17/2024 19:25:29' prior: 50552615!
test06TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastForParseNodeClass.
TypesWithContextAppliersTestMethods new perform: #typeCastForParseNodeClass.
blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: '{v1 class}' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: Date class.
! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/17/2024 19:28:41' prior: 50552243!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	self halt.
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
		
	


! !
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/17/2024 19:40:54'!
shouldApplyTo:aParseNode
	
	"TODO. Revisar el equivalentTo:. Estamos comparando el objecto que generó el equalsContextApplier vs sobre el que quiero preguntar tipos. Ambos vienen de parseNode"
	(objectToApply equivalentTo: aParseNode)

! !

anObjectToCast!

anObjectToCast!
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/17/2024 19:49:39' prior: 50552724!
shouldApplyTo:aParseNode
	
	"TODO. Revisar el equivalentTo:. Estamos comparando el objecto que generó el equalsContextApplier vs sobre el que quiero preguntar tipos. Ambos vienen de parseNode"
	
	(aParseNode isVariableNode and: [(objectToApply equivalentTo: aParseNode)]) 
	or: [	aParseNode isReceiverClassMessageSend.	].

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/17/2024 19:50:24' prior: 50552694!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
		
	


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/17/2024 19:51:03' prior: 50552750!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !
!EqualsClassTypeContextApplier methodsFor: 'checking' stamp: 'JFGO 4/17/2024 19:52:50' prior: 50552736!
shouldApplyTo:aParseNode
	
	"TODO. Revisar el equivalentTo:. Estamos comparando el objecto que generó el equalsContextApplier vs sobre el que quiero preguntar tipos. Ambos vienen de parseNode"
	
	^(aParseNode isVariableNode and: [(objectToApply equivalentTo: aParseNode)]) 
	or: [	aParseNode isReceiverClassMessageSend.	].

! !
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/17/2024 19:53:14' prior: 50550461 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	self halt.
	(self shouldApplyTo:aParseNode) ifTrue:[
		self shouldCast 
			ifTrue: [  ^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
			ifFalse: [^self liveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ].
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !
!EqualsClassTypeContextApplier methodsFor: 'checking' stamp: 'JFGO 4/17/2024 19:56:54' prior: 50552811!
shouldApplyTo:aParseNode
	
	"TODO. Revisar el equivalentTo:. Estamos comparando el objecto que generó el equalsContextApplier vs sobre el que quiero preguntar tipos. Ambos vienen de parseNode"
	
	^(aParseNode isVariableNode and: [(objectToApply equivalentTo: aParseNode)]) 
	or: [	aParseNode isMessageNode and: [ aParseNode isClassMessageSend ]].

! !

self liveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo!

self typeName!

previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo!

	previousContext liveTypesFor: aParseNode receiver in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.!

type!
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 4/17/2024 20:05:37' prior: 50550443!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType liveClass = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !

aLiveType liveClass!

aLiveType liveClass!

type!

aLiveType liveClass = type!

aLiveType liveClass!

aLiveType liveClass thisClass!

aLiveType!

aLiveType liveClass!

class!

aLiveType liveClass!

LiveType for: type.!

aLiveType!

FixedType for: type.!

aLiveType liveClass = FixedType for: type!

(FixedType for: type)!

aLiveType liveClass = (FixedType for: type)!

aLiveType = (FixedType for: type)!
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 4/17/2024 20:12:30' prior: 50552874!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes liveType |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	liveType := FixedType for: type.
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType = liveType].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !

FixedType for: type class!
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 4/17/2024 20:13:48' prior: 50552904!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes liveType |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	liveType := FixedType for: type.
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType = liveType].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !
!EqualsClassTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 4/17/2024 20:15:19' prior: 50541855!
initializeToApply: aType on: anObjectToApply shouldCast: shouldCast withPreviousContext: anotherContextApplier
	type := aType class.
	objectToApply := anObjectToApply.
	typeShouldCast:= shouldCast.
	previousContext := anotherContextApplier .
	! !

!testRun: #TypesWithContextAppliersTest #test06TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/17/2024 20:15:26'!
PASSED!
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/17/2024 20:15:59' prior: 50552826 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	(self shouldApplyTo:aParseNode) ifTrue:[
		self shouldCast 
			ifTrue: [  ^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
			ifFalse: [^self liveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ].
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !

!testRun: #TypesWithContextAppliersTest #test06TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/17/2024 20:16:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/17/2024 20:16:06'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/17/2024 20:16:06'!
FAILURE!
!EqualsClassTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 4/17/2024 20:18:39' prior: 50552943!
initializeToApply: aType on: anObjectToApply shouldCast: shouldCast withPreviousContext: anotherContextApplier
	(anObjectToApply isMessageNode and: [true]) ifTrue: [].
	type := aType class.
	objectToApply := anObjectToApply.
	typeShouldCast:= shouldCast.
	previousContext := anotherContextApplier .
	! !
!EqualsClassTypeContextApplier methodsFor: 'checking' stamp: 'JFGO 4/17/2024 20:20:09'!
isParseNodeClassMessageSend: aParseNode
	^aParseNode isMessageNode and: [ aParseNode isClassMessageSend ].

! !
!EqualsClassTypeContextApplier methodsFor: 'checking' stamp: 'JFGO 4/17/2024 20:20:30' prior: 50552847!
shouldApplyTo:aParseNode
	
	"TODO. Revisar el equivalentTo:. Estamos comparando el objecto que generó el equalsContextApplier vs sobre el que quiero preguntar tipos. Ambos vienen de parseNode"
	
	^(aParseNode isVariableNode and: [(objectToApply equivalentTo: aParseNode)]) 
	or: [	self isParseNodeClassMessageSend: aParseNode].

! !
!EqualsClassTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 4/17/2024 20:22:02' prior: 50552994!
initializeToApply: aType on: anObjectToApply shouldCast: shouldCast withPreviousContext: anotherContextApplier
	(self isParseNodeClassMessageSend: anObjectToApply) ifTrue: [type := aType class.] ifFalse:[type := aType].
	objectToApply := anObjectToApply.
	typeShouldCast:= shouldCast.
	previousContext := anotherContextApplier .
	! !

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/17/2024 20:22:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/17/2024 20:22:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/17/2024 20:22:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/17/2024 20:22:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/17/2024 20:22:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/17/2024 20:22:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/17/2024 20:22:05'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test06TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/17/2024 20:22:05'!
FAILURE!
!EqualsClassTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 4/17/2024 20:22:28' prior: 50553028!
initializeToApply: aType on: anObjectToApply shouldCast: shouldCast withPreviousContext: anotherContextApplier
self halt.
	(self isParseNodeClassMessageSend: anObjectToApply) ifTrue: [type := aType class.] ifFalse:[type := aType].
	objectToApply := anObjectToApply.
	typeShouldCast:= shouldCast.
	previousContext := anotherContextApplier .
	! !
!EqualsClassTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 4/17/2024 20:23:04' prior: 50553077!
initializeToApply: aType on: anObjectToApply shouldCast: shouldCast withPreviousContext: anotherContextApplier

	type:= aType.
	objectToApply := anObjectToApply.
	typeShouldCast:= shouldCast.
	previousContext := anotherContextApplier .
	! !

!testRun: #TypesWithContextAppliersTest #test06TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/17/2024 20:23:09'!
FAILURE!
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 4/17/2024 20:23:51' prior: 50552924!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes liveType |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	(self isParseNodeClassMessageSend: aParseNode) ifTrue: [liveType := FixedType for: type class.] ifFalse:[liveType := FixedType for: type.].
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType = liveType].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/17/2024 20:23:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/17/2024 20:23:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/17/2024 20:23:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/17/2024 20:23:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/17/2024 20:23:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/17/2024 20:23:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/17/2024 20:23:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/17/2024 20:23:59'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/17/2024 20:23:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/17/2024 20:23:59'!
FAILURE!

----SNAPSHOT----(17 April 2024 20:24:25) CuisUniversity-6169.image priorSource: 7039695!
!EqualsClassTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 2/25/2024 14:30:06' prior: 50553092!
initializeToApply: aType on: anObjectToApply shouldCast: shouldCast withPreviousContext: anotherContextApplier
	type := aType.
	objectToApply := anObjectToApply.
	typeShouldCast:= shouldCast.
	previousContext := anotherContextApplier .
	! !

----SNAPSHOT----(17 April 2024 20:24:50) CuisUniversity-6169.image priorSource: 7091686!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/18/2024 17:31:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/18/2024 17:31:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:31:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/18/2024 17:31:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/18/2024 17:31:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/18/2024 17:31:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/18/2024 17:31:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/18/2024 17:31:53'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/18/2024 17:31:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/18/2024 17:31:54'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/18/2024 17:32:19'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:33:47'!
test035TypeCastIfFalseNestedReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalseNested.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalseNested.
blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:34:50' prior: 50553396!
test035TypeCastIfFalseNestedReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalseNested.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalseNested.
blockToTestString:= '[ v1 not. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: True.! !

!testRun: #TypesWithContextAppliersTest #test035TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:34:52'!
FAILURE!
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/18/2024 17:38:26' prior: 50552959 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	self halt.
	(self shouldApplyTo:aParseNode) ifTrue:[
		self shouldCast 
			ifTrue: [  ^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
			ifFalse: [^self liveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ].
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/18/2024 17:40:26' prior: 50553453 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	(self shouldApplyTo:aParseNode) ifTrue:[
		self shouldCast 
			ifTrue: [  ^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
			ifFalse: [^self liveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ].
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/18/2024 17:41:07' prior: 50549444 overrides: 16919312!
visitBlockNode: aBlockNode
	
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		self halt.
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons .
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	
	! !

aLiveType!

aLiveType typeName!

aLiveType typeName = liveType typeName!

aLiveType typeName!

aLiveType typeName = liveType typeName!
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping-private' stamp: 'JFGO 4/18/2024 17:47:06' prior: 50553108!
liveTypesRejectingObjectFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes liveType |
	originalTypes := previousContext liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	(self isParseNodeClassMessageSend: aParseNode) ifTrue: [liveType := FixedType for: type class.] ifFalse:[liveType := FixedType for: type.].
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = liveType typeName].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .
	
! !

!testRun: #TypesWithContextAppliersTest #test035TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:47:17'!
PASSED!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/18/2024 17:47:28' prior: 50553496 overrides: 16919312!
visitBlockNode: aBlockNode
	
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons .
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	
	! !

!testRun: #TypesWithContextAppliersTest #test035TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:47:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/18/2024 17:47:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/18/2024 17:47:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:47:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test035TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:47:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/18/2024 17:47:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/18/2024 17:47:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/18/2024 17:47:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/18/2024 17:47:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test035TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:47:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/18/2024 17:47:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/18/2024 17:47:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:47:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test035TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:47:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/18/2024 17:47:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/18/2024 17:47:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/18/2024 17:47:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/18/2024 17:47:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/18/2024 17:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/18/2024 17:47:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/18/2024 17:47:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/18/2024 17:47:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/18/2024 17:47:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/18/2024 17:47:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/18/2024 17:47:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/18/2024 17:47:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/18/2024 17:47:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/18/2024 17:47:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/18/2024 17:47:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/18/2024 17:47:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/18/2024 17:47:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/18/2024 17:47:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:47:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/18/2024 17:47:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/18/2024 17:47:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/18/2024 17:47:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/18/2024 17:47:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/18/2024 17:47:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:47:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test035TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:47:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/18/2024 17:47:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/18/2024 17:47:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/18/2024 17:47:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/18/2024 17:47:43'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:48:02'!
test07TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastForParseNodeClass.
TypesWithContextAppliersTestMethods new perform: #typeCastForParseNodeClass.
blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: '{v1 class}' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: Date class.
! !

!methodRemoval: TypesWithContextAppliersTest #test06TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/18/2024 17:48:02'!
test06TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastForParseNodeClass.
TypesWithContextAppliersTestMethods new perform: #typeCastForParseNodeClass.
blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: '{v1 class}' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: Date class.
!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:48:10'!
test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseNestedManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseNestedManyVariables.


blockToTestString:= '[
	v2 month.
	v1 asFloat. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self getVariableNodeNamed: 'v1' on: compiledMethod .
v2Node := self getVariableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
! !

!methodRemoval: TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/18/2024 17:48:10'!
test05TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseNestedManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseNestedManyVariables.


blockToTestString:= '[
	v2 month.
	v1 asFloat. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self getVariableNodeNamed: 'v1' on: compiledMethod .
v2Node := self getVariableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:48:17'!
test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseManyVariables.

"ifFalse branch"
blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.

"ifTrueBranch"
blockToTestString:= '[ v2 month. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.! !

!methodRemoval: TypesWithContextAppliersTest #test04TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/18/2024 17:48:17'!
test04TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfTrueIfFalseManyVariables.
TypesWithContextAppliersTestMethods new perform: #typeCastIfTrueIfFalseManyVariables.

"ifFalse branch"
blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.

"ifTrueBranch"
blockToTestString:= '[ v2 month. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:49:32'!
test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalseIfTrue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalseIfTrue.
blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !

!methodRemoval: TypesWithContextAppliersTest #test03TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/18/2024 17:49:32'!
test03TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalseIfTrue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalseIfTrue.
blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:49:39'!
test03TypeCastIfFalseNestedReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalseNested.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalseNested.
blockToTestString:= '[ v1 not. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: True.! !

!methodRemoval: TypesWithContextAppliersTest #test035TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:49:40'!
test035TypeCastIfFalseNestedReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalseNested.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalseNested.
blockToTestString:= '[ v1 not. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: True.!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/18/2024 17:49:51'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:51:20'!
withPerformingCompiledMethod: aMethodSelector

| compiledMethod |

compiledMethod := TypesWithContextAppliersTestMethods >> aMethodSelector.
TypesWithContextAppliersTestMethods new perform: aMethodSelector.
^compiledMethod.! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:51:52' prior: 50544791!
test01TypeCastIfTrueCorrectlyAppliesCastedType

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfTrue.

blockToTestString:= '[ v1 factorial. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types first equals: SmallInteger.! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/18/2024 17:51:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/18/2024 17:51:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/18/2024 17:51:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:51:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:51:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/18/2024 17:51:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/18/2024 17:51:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/18/2024 17:51:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/18/2024 17:51:59'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:52:14' prior: 50544742!
test02TypeCastIfFalseReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfFalse.

blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:52:45' prior: 50554085!
test03TypeCastIfFalseNestedReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfFalseNested.

blockToTestString:= '[ v1 not. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: True.! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:53:12' prior: 50554030!
test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfFalseIfTrue.

blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:53:30' prior: 50553943!
test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfTrueIfFalseManyVariables.

"ifFalse branch"
blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.

"ifTrueBranch"
blockToTestString:= '[ v2 month. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:53:50' prior: 50553870!
test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfTrueIfFalseNestedManyVariables.

blockToTestString:= '[
	v2 month.
	v1 asFloat. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self getVariableNodeNamed: 'v1' on: compiledMethod .
v2Node := self getVariableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/18/2024 17:54:09' prior: 50553819!
test07TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastForParseNodeClass.

blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self getVariableNodeNamed: '{v1 class}' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: Date class.
! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/18/2024 17:54:12'!
PASSED!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/18/2024 17:57:28' prior: 50553545 overrides: 16919312!
visitBlockNode: aBlockNode
	
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode = blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons .
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/18/2024 17:58:00' prior: 50551668!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	"types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !

c := TypesWithContextAppliersTestMethods >> #typeCastIfFalseIfTrueEquivalentToIssue.!

c!

c new perform: #typeCastIfFalseIfTrueEquivalentToIssue.!

TypesWithContextAppliersTestMethods new perform: #typeCastIfFalseIfTrueEquivalentToIssue.!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/18/2024 17:47:28' prior: 50554592 overrides: 16919312!
visitBlockNode: aBlockNode
	
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode equivalentTo: blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons .
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/18/2024 18:02:45' prior: 50554609!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/18/2024 18:02:50' prior: 50554654!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !

----SNAPSHOT----(18 April 2024 18:03:05) CuisUniversity-6169.image priorSource: 7092144!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/19/2024 10:24:58' prior: 50554253!
test01TypeCastIfTrueCorrectlyAppliesCastedType

	| compiledMethod blockToTest blockToTestString types variableNode |

	compiledMethod := self withPerformingCompiledMethod: #typeCastIfTrue.

	blockToTestString:= '[ v1 factorial. ]'.
	blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

	variableNode := self getVariableNodeNamed: 'v1' on: compiledMethod .

	types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	self assert:types size equals: 1.
	self assert: types first equals: SmallInteger.! !

----QUIT----(19 April 2024 10:27:49) CuisUniversity-6169.image priorSource: 7137289!

----STARTUP---- (22 April 2024 18:25:01) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!TypesWithContextAppliersTest methodsFor: 'methods and block nodes' stamp: 'JFGO 4/22/2024 18:56:00'!
variableNodeNamed: aVariableName on: aCompiledMethod

	|  nodeEncoder methodNode sourceRanges variableNode  |

	variableNode:=nil.
	
	methodNode:=aCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	sourceRanges associationsDo: [ :nodeAtRange |
			nodeAtRange key name = aVariableName ifTrue: [
					variableNode:= nodeAtRange key.
				]
			].

	variableNode notNil ifTrue: [^variableNode].

	self failWith: 'Variable node not found'.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:00' prior: 50554462!
test07TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastForParseNodeClass.

blockToTestString:= '[ v1 class. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: '{v1 class}' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: Date class.
! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:00' prior: 50554428!
test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfTrueIfFalseNestedManyVariables.

blockToTestString:= '[
	v2 month.
	v1 asFloat. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self variableNodeNamed: 'v1' on: compiledMethod .
v2Node := self variableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:00' prior: 50554387!
test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfTrueIfFalseManyVariables.

"ifFalse branch"
blockToTestString:= '[ v2 year. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.

"ifTrueBranch"
blockToTestString:= '[ v2 month. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:00' prior: 50554695!
test01TypeCastIfTrueCorrectlyAppliesCastedType

	| compiledMethod blockToTest blockToTestString types variableNode |

	compiledMethod := self withPerformingCompiledMethod: #typeCastIfTrue.

	blockToTestString:= '[ v1 factorial. ]'.
	blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

	variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

	types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	self assert:types size equals: 1.
	self assert: types first equals: SmallInteger.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:00' prior: 50554339!
test03TypeCastIfFalseNestedReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfFalseNested.

blockToTestString:= '[ v1 not. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: True.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:00' prior: 50549462!
test00NotTDDButEvidenceOfTheEquivalentToIssue

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalseIfTrueEquivalentToIssue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalseIfTrueEquivalentToIssue.
blockToTestString:= '[ v1 isEmpty. ]'. "Mas alla de como tome aca el bloque, nunca es equals a ninguno de los mensajes"
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

"types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types first equals: String."
self assert: true.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:00' prior: 50554315!
test02TypeCastIfFalseReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfFalse.

blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:00' prior: 50554362!
test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfFalseIfTrue.

blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self getBlockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !

!methodRemoval: TypesWithContextAppliersTest #getVariableNodeNamed:on: stamp: 'JFGO 4/22/2024 18:56:00'!
getVariableNodeNamed: aVariableName on: aCompiledMethod

	|  nodeEncoder methodNode sourceRanges variableNode  |

	variableNode:=nil.
	
	methodNode:=aCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	sourceRanges associationsDo: [ :nodeAtRange |
			nodeAtRange key name = aVariableName ifTrue: [
					variableNode:= nodeAtRange key.
				]
			].

	variableNode notNil ifTrue: [^variableNode].

	self failWith: 'Variable node not found'.!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 18:56:02'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'methods and block nodes' stamp: 'JFGO 4/22/2024 18:56:15'!
blockNodeWithSourceCode: blockNodeCodeString on: aCompiledMethod

	|  nodeEncoder methodNode sourceRanges blockToTest  |

	blockToTest:=nil.
	
	methodNode:=aCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	sourceRanges associationsDo: [ :nodeAtRange |
			(nodeAtRange key class = BlockNode and: [nodeAtRange key printSourceCode = blockNodeCodeString])ifTrue: [
					blockToTest:= nodeAtRange key.
				]
			].

	blockToTest notNil ifTrue: [^blockToTest].

	self failWith: 'Block node not found'.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:15' prior: 50554745!
test07TypeCastAppliesCorrectlyToParseNodeClass

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastForParseNodeClass.

blockToTestString:= '[ v1 class. ]'.
blockToTest := self blockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: '{v1 class}' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: Date class.
! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:15' prior: 50554768!
test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

| compiledMethod blockToTest blockToTestString v1Node v1Types v2Node v2Types |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfTrueIfFalseNestedManyVariables.

blockToTestString:= '[
	v2 month.
	v1 asFloat. ]'.
blockToTest := self blockNodeWithSourceCode: blockToTestString on: compiledMethod.

v1Node := self variableNodeNamed: 'v1' on: compiledMethod .
v2Node := self variableNodeNamed: 'v2' on: compiledMethod .

v1Types := compiledMethod typesOfVariableNamed: v1Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

v2Types := compiledMethod typesOfVariableNamed: v2Node withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert: v1Types size equals: 1.
self assert: v1Types includes: SmallInteger.

self assert: v2Types size equals: 1.
self assert: v2Types includes: Date.
! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:15' prior: 50554864!
test03TypeCastIfFalseNestedReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfFalseNested.

blockToTestString:= '[ v1 not. ]'.
blockToTest := self blockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types includes: True.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:15' prior: 50554941!
test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfFalseIfTrue.

blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self blockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:15' prior: 50554841!
test01TypeCastIfTrueCorrectlyAppliesCastedType

	| compiledMethod blockToTest blockToTestString types variableNode |

	compiledMethod := self withPerformingCompiledMethod: #typeCastIfTrue.

	blockToTestString:= '[ v1 factorial. ]'.
	blockToTest := self blockNodeWithSourceCode: blockToTestString on: compiledMethod.

	variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

	types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	self assert:types size equals: 1.
	self assert: types first equals: SmallInteger.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:15' prior: 50554917!
test02TypeCastIfFalseReturnsAllTypesButRejected

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfFalse.

blockToTestString:= '[ v1 isEmpty. ]'.
blockToTest := self blockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: OrderedCollection.
self assert: types includes: String.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:15' prior: 50554801!
test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := self withPerformingCompiledMethod: #typeCastIfTrueIfFalseManyVariables.

"ifFalse branch"
blockToTestString:= '[ v2 year. ]'.
blockToTest := self blockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.

"ifTrueBranch"
blockToTestString:= '[ v2 month. ]'.
blockToTest := self blockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: 'v2' on: compiledMethod .

types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 2.
self assert: types includes: Date.
self assert: types includes: SmallInteger.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 18:56:15' prior: 50554887!
test00NotTDDButEvidenceOfTheEquivalentToIssue

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalseIfTrueEquivalentToIssue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalseIfTrueEquivalentToIssue.
blockToTestString:= '[ v1 isEmpty. ]'. "Mas alla de como tome aca el bloque, nunca es equals a ninguno de los mensajes"
blockToTest := self blockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

"types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types first equals: String."
self assert: true.! !

!methodRemoval: TypesWithContextAppliersTest #getBlockNodeWithSourceCode:on: stamp: 'JFGO 4/22/2024 18:56:15'!
getBlockNodeWithSourceCode: blockNodeCodeString on: aCompiledMethod

	|  nodeEncoder methodNode sourceRanges blockToTest  |

	blockToTest:=nil.
	
	methodNode:=aCompiledMethod methodNode.
	nodeEncoder := methodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: methodNode sourceText.
	sourceRanges associationsDo: [ :nodeAtRange |
			(nodeAtRange key class = BlockNode and: [nodeAtRange key printSourceCode = blockNodeCodeString])ifTrue: [
					blockToTest:= nodeAtRange key.
				]
			].

	blockToTest notNil ifTrue: [^blockToTest].

	self failWith: 'Block node not found'.!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 18:56:19'!
PASSED!

!methodRemoval: TypesWithContextAppliersTest #test00NotTDDButEvidenceOfTheEquivalentToIssue stamp: 'JFGO 4/22/2024 18:57:03'!
test00NotTDDButEvidenceOfTheEquivalentToIssue

| compiledMethod blockToTest blockToTestString types variableNode |

compiledMethod := TypesWithContextAppliersTestMethods >> #typeCastIfFalseIfTrueEquivalentToIssue.
TypesWithContextAppliersTestMethods new perform: #typeCastIfFalseIfTrueEquivalentToIssue.
blockToTestString:= '[ v1 isEmpty. ]'. "Mas alla de como tome aca el bloque, nunca es equals a ninguno de los mensajes"
blockToTest := self blockNodeWithSourceCode: blockToTestString on: compiledMethod.

variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

"types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

self assert:types size equals: 1.
self assert: types first equals: String."
self assert: true.!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:00:27' prior: 50555242!
test02TypeCastIfFalseReturnsAllTypesButRejected

	| compiledMethod blockToTest blockToTestString types variableNode |

	compiledMethod := self withPerformingCompiledMethod: #typeCastIfFalse.

	blockToTestString:= '[ v1 isEmpty. ]'.
	blockToTest := self blockNodeWithSourceCode: blockToTestString on: compiledMethod.

	variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

	types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	self assert:types size equals: 2.
	self assert: types includes: OrderedCollection.
	self assert: types includes: String.! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:00:35' prior: 50555494!
test02TypeCastIfFalseReturnsAllTypesButRejected
	| compiledMethod blockToTest blockToTestString types variableNode |

	compiledMethod := self withPerformingCompiledMethod: #typeCastIfFalse.

	blockToTestString:= '[ v1 isEmpty. ]'.
	blockToTest := self blockNodeWithSourceCode: blockToTestString on: compiledMethod.

	variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

	types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	self assert:types size equals: 2.
	self assert: types includes: OrderedCollection.
	self assert: types includes: String.! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:00:45' prior: 50555219!
test01TypeCastIfTrueCorrectlyAppliesCastedType
	| compiledMethod blockToTest blockToTestString types variableNode |

	compiledMethod := self withPerformingCompiledMethod: #typeCastIfTrue.

	blockToTestString:= '[ v1 factorial. ]'.
	blockToTest := self blockNodeWithSourceCode: blockToTestString on: compiledMethod.

	variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

	types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	self assert:types size equals: 1.
	self assert: types first equals: SmallInteger.! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:05:27'!
withMessageName: aMethodSelector calculateTypesOfVariable: aVariableName withinBlockWithCode: aStringBlockNode asserting: anAssertionBlock
	| compiledMethod blockToTest blockToTestString types variableNode |

	compiledMethod := self withPerformingCompiledMethod: #typeCastIfTrue.

	blockToTestString:= '[ v1 factorial. ]'.
	blockToTest := self blockNodeWithSourceCode: blockToTestString on: compiledMethod.

	variableNode := self variableNodeNamed: 'v1' on: compiledMethod .

	types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	self assert:types size equals: 1.
	self assert: types first equals: SmallInteger.! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:10:57' prior: 50555567!
withMessageName: aMethodSelector calculateTypesOfVariable: aVariableName withinBlockWithCode: aStringBlockNode asserting: anAssertionBlock
	| compiledMethod blockToTest types variableNode |

	compiledMethod := self withPerformingCompiledMethod: aMethodSelector.
	"methodNode := compiledMethod methodNode."
	
	blockToTest := self blockNodeWithSourceCode: aStringBlockNode on: compiledMethod.

	variableNode := self variableNodeNamed: aVariableName on: compiledMethod .

	types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	anAssertionBlock value: types.! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:13:20' prior: 50555544!
test01TypeCastIfTrueCorrectlyAppliesCastedType
	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastIfTrue 
	calculateTypesOfVariable: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	].

	! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:13:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 19:13:31'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:16:41' prior: 50555519!
test02TypeCastIfFalseReturnsAllTypesButRejected
	| blockToTestString  |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalse 
	calculateTypesOfVariable: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


	! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:16:42' prior: 50555739!
test02TypeCastIfFalseReturnsAllTypesButRejected
	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalse 
	calculateTypesOfVariable: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


	! !

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:16:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:16:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:16:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:16:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 19:16:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 19:16:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 19:16:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 19:16:44'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:17:51' prior: 50555171!
test03TypeCastIfFalseNestedReturnsAllTypesButRejected

	| blockToTestString |

	blockToTestString:= '[ v1 not. ]'.
	
	self withMessageName: #typeCastIfFalseNested 
	calculateTypesOfVariable: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: True.
	].! !

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:17:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:17:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:17:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:17:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 19:17:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 19:17:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 19:17:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 19:17:54'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:19:28' prior: 50555194!
test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalseIfTrue 
	calculateTypesOfVariable: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].
! !

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 19:19:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:19:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:19:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:19:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 19:19:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 19:19:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 19:19:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 19:19:29'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:22:09' prior: 50555266!
test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

	| blockToTestString |
	
	"ifFalse branch"
	blockToTestString:= '[ v2 year. ]'.
	self withMessageName: #typeCastIfTrueIfFalseManyVariables 
	calculateTypesOfVariable: 'v2' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: Date.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrue branch"
	blockToTestString:= '[ v2 month. ]'.
	self withMessageName: #typeCastIfTrueIfFalseManyVariables 
	calculateTypesOfVariable: 'v2' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: Date.
		self assert: types includes: SmallInteger.
	].
! !

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 19:22:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:22:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:22:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:22:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 19:22:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 19:22:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 19:22:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 19:22:10'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:22:28' prior: 50555909!
test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

	| blockToTestString selector |
	
	selector:=#typeCastIfTrueIfFalseManyVariables .
	
	"ifFalse branch"
	blockToTestString:= '[ v2 year. ]'.
	self withMessageName: selector
	calculateTypesOfVariable: 'v2' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: Date.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrue branch"
	blockToTestString:= '[ v2 month. ]'.
	self withMessageName: #typeCastIfTrueIfFalseManyVariables 
	calculateTypesOfVariable: 'v2' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: Date.
		self assert: types includes: SmallInteger.
	].
! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:22:35' prior: 50555974!
test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

	| blockToTestString selector |
	
	selector:=#typeCastIfTrueIfFalseManyVariables .
	
	"ifFalse branch"
	blockToTestString:= '[ v2 year. ]'.
	self withMessageName: selector
	calculateTypesOfVariable: 'v2' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: Date.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrue branch"
	blockToTestString:= '[ v2 month. ]'.
	self withMessageName: selector
	calculateTypesOfVariable: 'v2' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: Date.
		self assert: types includes: SmallInteger.
	].
! !

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 19:22:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:22:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:22:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:22:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 19:22:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 19:22:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 19:22:36'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 19:22:36'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:24:54' prior: 50555138!
test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

	| blockToTestString |

	blockToTestString:= '[
	v2 month.
	v1 asFloat. ]'.
	
	self withMessageName: #typeCastIfTrueIfFalseNestedManyVariables 
	calculateTypesOfVariable: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert: types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	self withMessageName: #typeCastIfTrueIfFalseNestedManyVariables 
	calculateTypesOfVariable: 'v2' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert: types size equals: 1.	
		self assert: types includes: Date.
	].

! !

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 19:24:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:24:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:24:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:24:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 19:24:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 19:24:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 19:24:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 19:24:55'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:25:28' prior: 50556069!
test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

	| blockToTestString selector |

	blockToTestString:= '[
	v2 month.
	v1 asFloat. ]'.

	selector:=#typeCastIfTrueIfFalseNestedManyVariables.
	
	self withMessageName: selector
	calculateTypesOfVariable: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert: types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	self withMessageName: selector
	calculateTypesOfVariable: 'v2' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert: types size equals: 1.	
		self assert: types includes: Date.
	].

! !

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 19:25:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:25:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:25:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:25:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 19:25:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 19:25:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 19:25:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 19:25:41'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:27:58' prior: 50555115!
test07TypeCastAppliesCorrectlyToParseNodeClass

	| blockToTestString |

	blockToTestString:= '[ v1 class. ]'.
	
	self withMessageName: #typeCastForParseNodeClass 
	calculateTypesOfVariable: '{v1 class}' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: Date class.
	].


! !

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 19:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 19:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 19:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 19:27:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 19:27:59'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:28:26'!
withMessageName: aMethodSelector calculateTypesOfNode: aVariableName withinBlockWithCode: aStringBlockNode asserting: anAssertionBlock
	| compiledMethod blockToTest types variableNode |

	compiledMethod := self withPerformingCompiledMethod: aMethodSelector.
	"methodNode := compiledMethod methodNode."
	
	blockToTest := self blockNodeWithSourceCode: aStringBlockNode on: compiledMethod.

	variableNode := self variableNodeNamed: aVariableName on: compiledMethod .

	types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	anAssertionBlock value: types.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 19:28:26' prior: 50555755!
test02TypeCastIfFalseReturnsAllTypesButRejected
	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalse 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


	! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 19:28:26' prior: 50556189!
test07TypeCastAppliesCorrectlyToParseNodeClass

	| blockToTestString |

	blockToTestString:= '[ v1 class. ]'.
	
	self withMessageName: #typeCastForParseNodeClass 
	calculateTypesOfNode: '{v1 class}' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: Date class.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 19:28:26' prior: 50556129!
test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach

	| blockToTestString selector |

	blockToTestString:= '[
	v2 month.
	v1 asFloat. ]'.

	selector:=#typeCastIfTrueIfFalseNestedManyVariables.
	
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert: types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	self withMessageName: selector
	calculateTypesOfNode: 'v2' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert: types size equals: 1.	
		self assert: types includes: Date.
	].

! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 19:28:26' prior: 50555807!
test03TypeCastIfFalseNestedReturnsAllTypesButRejected

	| blockToTestString |

	blockToTestString:= '[ v1 not. ]'.
	
	self withMessageName: #typeCastIfFalseNested 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: True.
	].! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 19:28:26' prior: 50555857!
test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalseIfTrue 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].
! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 19:28:26' prior: 50556004!
test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition

	| blockToTestString selector |
	
	selector:=#typeCastIfTrueIfFalseManyVariables .
	
	"ifFalse branch"
	blockToTestString:= '[ v2 year. ]'.
	self withMessageName: selector
	calculateTypesOfNode: 'v2' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: Date.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrue branch"
	blockToTestString:= '[ v2 month. ]'.
	self withMessageName: selector
	calculateTypesOfNode: 'v2' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: Date.
		self assert: types includes: SmallInteger.
	].
! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 19:28:26' prior: 50555617!
test01TypeCastIfTrueCorrectlyAppliesCastedType
	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastIfTrue 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	].

	! !

!methodRemoval: TypesWithContextAppliersTest #withMessageName:calculateTypesOfVariable:withinBlockWithCode:asserting: stamp: 'JFGO 4/22/2024 19:28:26'!
withMessageName: aMethodSelector calculateTypesOfVariable: aVariableName withinBlockWithCode: aStringBlockNode asserting: anAssertionBlock
	| compiledMethod blockToTest types variableNode |

	compiledMethod := self withPerformingCompiledMethod: aMethodSelector.
	"methodNode := compiledMethod methodNode."
	
	blockToTest := self blockNodeWithSourceCode: aStringBlockNode on: compiledMethod.

	variableNode := self variableNodeNamed: aVariableName on: compiledMethod .

	types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	anAssertionBlock value: types.!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 19:28:29'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/22/2024 19:28:43' prior: 50556239!
withMessageName: aMethodSelector calculateTypesOfNode: aVariableNodeName withinBlockWithCode: aStringBlockNode asserting: anAssertionBlock
	| compiledMethod blockToTest types variableNode |

	compiledMethod := self withPerformingCompiledMethod: aMethodSelector.
	"methodNode := compiledMethod methodNode."
	
	blockToTest := self blockNodeWithSourceCode: aStringBlockNode on: compiledMethod.

	variableNode := self variableNodeNamed: aVariableNodeName on: compiledMethod .

	types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	anAssertionBlock value: types.! !
!TypesWithContextAppliersTest methodsFor: 'methods and block nodes' stamp: 'JFGO 4/22/2024 19:34:52' prior: 50555092!
blockNodeWithSourceCode: blockNodeCodeString on: aMethodNode

	|  nodeEncoder sourceRanges blockToTest  |

	blockToTest:=nil.
	
	nodeEncoder := aMethodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: aMethodNode sourceText.
	sourceRanges associationsDo: [ :nodeAtRange |
			(nodeAtRange key class = BlockNode and: [nodeAtRange key printSourceCode = blockNodeCodeString])ifTrue: [
					blockToTest:= nodeAtRange key.
				]
			].

	blockToTest notNil ifTrue: [^blockToTest].
	self failWith: 'Block node not found'.! !
!TypesWithContextAppliersTest methodsFor: 'methods and block nodes' stamp: 'JFGO 4/22/2024 19:35:50' prior: 50554724!
variableNodeNamed: aVariableName on: aMethodNode

	|  nodeEncoder sourceRanges variableNode  |

	variableNode:=nil.
	
	nodeEncoder := aMethodNode encoder.
	sourceRanges := nodeEncoder completeSourceRangesBasedOn: aMethodNode sourceText.
	sourceRanges associationsDo: [ :nodeAtRange |
			nodeAtRange key name = aVariableName ifTrue: [
					variableNode:= nodeAtRange key.
				]
			].

	variableNode notNil ifTrue: [^variableNode].
	self failWith: 'Variable node not found'.! !
!TypesWithContextAppliersTest methodsFor: 'methods and block nodes' stamp: 'JFGO 4/22/2024 19:36:47' prior: 50556520!
withMessageName: aMethodSelector calculateTypesOfNode: aVariableNodeName withinBlockWithCode: aStringBlockNode asserting: anAssertionBlock
	| compiledMethod blockToTest types variableNode methodNode |

	compiledMethod := self withPerformingCompiledMethod: aMethodSelector.
	methodNode := compiledMethod methodNode.
	
	blockToTest := self blockNodeWithSourceCode: aStringBlockNode on: methodNode.
	variableNode := self variableNodeNamed: aVariableNodeName on: methodNode .

	types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	anAssertionBlock value: types.! !
!TypesWithContextAppliersTest methodsFor: 'methods and block nodes' stamp: 'JFGO 4/22/2024 19:38:01'!
withCompiledMethodName: aMethodSelector

| compiledMethod |

compiledMethod := TypesWithContextAppliersTestMethods >> aMethodSelector.
TypesWithContextAppliersTestMethods new perform: aMethodSelector.
^compiledMethod.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 19:38:01' prior: 50556584!
withMessageName: aMethodSelector calculateTypesOfNode: aVariableNodeName withinBlockWithCode: aStringBlockNode asserting: anAssertionBlock
	| compiledMethod blockToTest types variableNode methodNode |

	compiledMethod := self withCompiledMethodName: aMethodSelector.
	methodNode := compiledMethod methodNode.
	
	blockToTest := self blockNodeWithSourceCode: aStringBlockNode on: methodNode.
	variableNode := self variableNodeNamed: aVariableNodeName on: methodNode .

	types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	anAssertionBlock value: types.! !

!methodRemoval: TypesWithContextAppliersTest #withPerformingCompiledMethod: stamp: 'JFGO 4/22/2024 19:38:01'!
withPerformingCompiledMethod: aMethodSelector

| compiledMethod |

compiledMethod := TypesWithContextAppliersTestMethods >> aMethodSelector.
TypesWithContextAppliersTestMethods new perform: aMethodSelector.
^compiledMethod.!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 19:38:09'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'methods and block nodes' stamp: 'JFGO 4/22/2024 19:38:37' prior: 50556608!
withCompiledMethodName: aMethodSelector

	| compiledMethod |

	compiledMethod := TypesWithContextAppliersTestMethods >> aMethodSelector.
	TypesWithContextAppliersTestMethods new perform: aMethodSelector.
	^compiledMethod.! !
!TypesWithContextAppliersTest methodsFor: 'methods and block nodes' stamp: 'JFGO 4/22/2024 19:39:48'!
withPerformingCompiledMethodName: aMethodSelector

	| compiledMethod |

	compiledMethod := TypesWithContextAppliersTestMethods >> aMethodSelector.
	TypesWithContextAppliersTestMethods new perform: aMethodSelector.
	^compiledMethod.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 19:39:48' prior: 50556619!
withMessageName: aMethodSelector calculateTypesOfNode: aVariableNodeName withinBlockWithCode: aStringBlockNode asserting: anAssertionBlock
	| compiledMethod blockToTest types variableNode methodNode |

	compiledMethod := self withPerformingCompiledMethodName: aMethodSelector.
	methodNode := compiledMethod methodNode.
	
	blockToTest := self blockNodeWithSourceCode: aStringBlockNode on: methodNode.
	variableNode := self variableNodeNamed: aVariableNodeName on: methodNode .

	types := compiledMethod typesOfVariableNamed: variableNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	anAssertionBlock value: types.! !

!methodRemoval: TypesWithContextAppliersTest #withCompiledMethodName: stamp: 'JFGO 4/22/2024 19:39:48'!
withCompiledMethodName: aMethodSelector

	| compiledMethod |

	compiledMethod := TypesWithContextAppliersTestMethods >> aMethodSelector.
	TypesWithContextAppliersTestMethods new perform: aMethodSelector.
	^compiledMethod.!
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/22/2024 19:54:31' prior: 50544674!
initializeFor: aMethodNode on: aParseNode within: aBlockNode addingIncompleteTypeInfoTo: aIncompleteTypeInfoReasonsList
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := aMethodNode.
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.
	incompleteTypeInfoReasons := aIncompleteTypeInfoReasonsList.! !
!ContextAppliersMethodVisitor class methodsFor: 'instance creation' stamp: 'JFGO 4/22/2024 19:54:48' prior: 50544623!
for: aMethodNode on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons   
	^self new initializeFor: aMethodNode on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons ! !
!CompiledMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/22/2024 19:57:43' prior: 50544730!
typesOfVariableNamed: aVariableName withinBlockNode: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	^ (ContextAppliersMethodVisitor for: self methodNode on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons) types.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 19:57:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:57:46'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:57:46'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 19:57:46'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 19:57:46'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 19:57:46'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 19:57:46'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 19:57:53'!
ERROR!
!CompiledMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/22/2024 20:08:32' prior: 50556839!
typesOfVariableNamed: aVariableName withinBlockNode: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	^ (ContextAppliersMethodVisitor for: self on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons) types.! !
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/9/2024 21:03:58' prior: 50556813!
initializeFor: aCompiledMethod on: aParseNode within: aBlockNode addingIncompleteTypeInfoTo: aIncompleteTypeInfoReasonsList
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.
	incompleteTypeInfoReasons := aIncompleteTypeInfoReasonsList.! !
!ContextAppliersMethodVisitor class methodsFor: 'instance creation' stamp: 'JFGO 4/9/2024 21:03:08' prior: 50556828!
for: aCompiledMethod on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons   
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons ! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 20:09:24'!
PASSED!
!ContextAppliersMethodVisitor class methodsFor: 'instance creation' stamp: 'JFGO 4/22/2024 20:10:27'!
for: aCompiledMethod with: aMethodNode on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons   
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons ! !
!CompiledMethod methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 20:10:27' prior: 50556958!
typesOfVariableNamed: aVariableName withinBlockNode: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	^ (ContextAppliersMethodVisitor for: self with: JFGO on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons) types.! !

!methodRemoval: ContextAppliersMethodVisitor class #for:on:within:addingIncompleteTypeInfoTo: stamp: 'JFGO 4/22/2024 20:10:27'!
for: aCompiledMethod on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons   
	^self new initializeFor: aCompiledMethod on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons !
!CompiledMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/22/2024 20:10:55' prior: 50557113!
typesOfVariableNamed: aVariableName withinBlockNode: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	^ (ContextAppliersMethodVisitor for: self with: self methodNode on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons) types.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 20:11:00'!
PASSED!
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/22/2024 20:11:47'!
initializeFor: aCompiledMethod with: aMethodNode on: aParseNode within: aBlockNode addingIncompleteTypeInfoTo: aIncompleteTypeInfoReasonsList
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.
	incompleteTypeInfoReasons := aIncompleteTypeInfoReasonsList.! !
!ContextAppliersMethodVisitor class methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 20:11:47' prior: 50557101!
for: aCompiledMethod with: aMethodNode on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons   
	^self new initializeFor: aCompiledMethod with: aMethodNode on: aVariableName within: aBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons ! !

!methodRemoval: ContextAppliersMethodVisitor #initializeFor:on:within:addingIncompleteTypeInfoTo: stamp: 'JFGO 4/22/2024 20:11:47'!
initializeFor: aCompiledMethod on: aParseNode within: aBlockNode addingIncompleteTypeInfoTo: aIncompleteTypeInfoReasonsList
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := compiledMethod methodNode .
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.
	incompleteTypeInfoReasons := aIncompleteTypeInfoReasonsList.!
!ContextAppliersMethodVisitor methodsFor: 'initialization' stamp: 'JFGO 4/22/2024 20:12:02' prior: 50557252!
initializeFor: aCompiledMethod with: aMethodNode on: aParseNode within: aBlockNode addingIncompleteTypeInfoTo: aIncompleteTypeInfoReasonsList
	compiledMethod := aCompiledMethod.
	parseNode := aParseNode.
	blockNode := aBlockNode.
	methodNode := aMethodNode.
	types:=OrderedCollection new.
	contextApplier := GeneralContextApplier new.
	incompleteTypeInfoReasons := aIncompleteTypeInfoReasonsList.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 20:14:01'!
PASSED!
!CompiledMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/22/2024 20:17:02'!
typesOfVariableNamed: aVariableName withNode: aMethodNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	^ (ContextAppliersMethodVisitor for: self with: self methodNode on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons) types.! !
!TypesWithContextAppliersTest methodsFor: 'as yet unclassified' stamp: 'JFGO 4/22/2024 20:17:02' prior: 50556778!
withMessageName: aMethodSelector calculateTypesOfNode: aVariableNodeName withinBlockWithCode: aStringBlockNode asserting: anAssertionBlock
	| compiledMethod blockToTest types variableNode methodNode |

	compiledMethod := self withPerformingCompiledMethodName: aMethodSelector.
	methodNode := compiledMethod methodNode.
	
	blockToTest := self blockNodeWithSourceCode: aStringBlockNode on: methodNode.
	variableNode := self variableNodeNamed: aVariableNodeName on: methodNode .

	types := compiledMethod typesOfVariableNamed: variableNode withNode: compiledMethod methodNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	anAssertionBlock value: types.! !

!methodRemoval: CompiledMethod #typesOfVariableNamed:withinBlockNode:addingIncompleteTypeInfoTo: stamp: 'JFGO 4/22/2024 20:17:02'!
typesOfVariableNamed: aVariableName withinBlockNode: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	^ (ContextAppliersMethodVisitor for: self with: self methodNode on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons) types.!
!TypesWithContextAppliersTest methodsFor: 'methods and block nodes' stamp: 'JFGO 4/22/2024 20:17:25' prior: 50557430!
withMessageName: aMethodSelector calculateTypesOfNode: aVariableNodeName withinBlockWithCode: aStringBlockNode asserting: anAssertionBlock
	| compiledMethod blockToTest types variableNode methodNode |

	compiledMethod := self withPerformingCompiledMethodName: aMethodSelector.
	methodNode := compiledMethod methodNode.
	
	blockToTest := self blockNodeWithSourceCode: aStringBlockNode on: methodNode.
	variableNode := self variableNodeNamed: aVariableNodeName on: methodNode .

	types := compiledMethod typesOfVariableNamed: variableNode withNode: methodNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: OrderedCollection new.

	anAssertionBlock value: types.! !
!CompiledMethod methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/22/2024 20:17:41' prior: 50557416!
typesOfVariableNamed: aVariableName withNode: aMethodNode withinBlockNode: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons  
	^ (ContextAppliersMethodVisitor for: self with: aMethodNode on: aVariableName within: blockToTest addingIncompleteTypeInfoTo: incompleteTypeInfoReasons) types.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 20:19:12'!
PASSED!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/22/2024 20:20:32' prior: 50554636 overrides: 16919312!
visitBlockNode: aBlockNode
	
	"TODO. Revisar el equivalentTo:. Esta para que los tests pasen pero puede traer errores"
	(aBlockNode = blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons .
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	
	! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/22/2024 20:20:35'!
PASSED!
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/22/2024 20:26:55' prior: 50554673!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	"types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withNode: methodNodeOwner withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/22/2024 20:29:09' prior: 50557610 overrides: 16919312!
visitBlockNode: aBlockNode
	
	(aBlockNode = blockNode) ifTrue:[ | liveTypes |
		
		liveTypes:= contextApplier liveTypesFor: parseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons .
		liveTypes classTypesDo: [:aClass | types add:aClass].
		types:= types asArray .
	].
	super visitBlockNode: aBlockNode.
	
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/22/2024 20:30:05' prior: 50557730!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withNode: methodNodeOwner withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !

----QUIT----(22 April 2024 20:30:08) CuisUniversity-6169.image priorSource: 7138121!

----STARTUP---- (24 April 2024 18:39:37) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/24/2024 18:45:46'!
test08TypeCastAppliesCorrectlyToMessageNodeSelector

	| blockToTestString |

	blockToTestString:= '[ v1 class. ]'.
	
	self withMessageName: #typeCastForParseNodeClass 
	calculateTypesOfNode: '{v1 class}' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: Date class.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/24/2024 18:46:55' prior: 50557790!
test08TypeCastAppliesCorrectlyToMessageNodeSelector

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalse 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/24/2024 18:47:58' prior: 50557805!
test08TypeCastAppliesCorrectlyToMessageNodeSelector

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalse 
	calculateTypesOfNode: '{v1 isEmpty}' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/24/2024 18:49:39' prior: 50557821!
test08TypeCastAppliesCorrectlyToMessageNodeSelector

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalse 
	calculateTypesOfNode: '{v1 isEmpty}' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: False.
		self assert: types includes: True.
	].


! !

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/24/2024 18:49:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/24/2024 18:49:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 18:49:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 18:49:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/24/2024 18:49:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/24/2024 18:49:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/24/2024 18:49:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/24/2024 18:49:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/24/2024 18:49:40'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/24/2024 18:50:05' prior: 50557838!
test08TypeCastAppliesCorrectlyToMessageNodeSelector

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalse 
	calculateTypesOfNode: '{v1 isEmpty}' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: False.
		self assert: types includes: String.
	].


! !

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/24/2024 18:50:06'!
FAILURE!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/24/2024 18:50:37' prior: 50557894!
test08TypeCastAppliesCorrectlyToMessageNodeSelector

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalse 
	calculateTypesOfNode: '{v1 isEmpty}' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: False.
		self assert: types includes: True.
	].


! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/24/2024 18:51:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/24/2024 18:51:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/24/2024 18:51:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/24/2024 18:51:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/24/2024 18:51:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/24/2024 18:51:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/24/2024 18:51:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/24/2024 18:51:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/24/2024 18:51:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/24/2024 18:51:22'!
PASSED!
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/24/2024 18:51:59' prior: 50557764!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	"types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withNode: methodNodeOwner withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/24/2024 19:00:00'!
typeCastLiteralFirstThenObject
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	
	String = v1 class ifFalse: [v1 isEmpty] ifTrue: [v1 isEmpty] .! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/24/2024 19:00:19' prior: 50558038!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withNode: methodNodeOwner withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/24/2024 19:02:44'!
test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalse 
	calculateTypesOfNode: '{v1 isEmpty}' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: False.
		self assert: types includes: True.
	].


! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/24/2024 19:03:54' prior: 50558058!
typeCastLiteralFirstThenObject
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	
	String = v1 class ifFalse: [v1 isEmpty].! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/24/2024 19:05:49' prior: 50558087!
test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastLiteralFirstThenObject 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].


! !

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/24/2024 19:05:51'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/24/2024 19:11:22' prior: 50552780!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver receiver
			on: aMessageNode receiver arguments first key value
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/24/2024 19:11:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/24/2024 19:11:29'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/24/2024 19:11:29'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/24/2024 19:11:48' prior: 50558132!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		self halt.
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver receiver
			on: aMessageNode receiver arguments first key value
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

aMessageNode receiver receiver receiver!

aMessageNode receiver receiver!

aMessageNode receiver arguments first key value!

aMessageNode receiver!

aMessageNode receiver arguments!

aMessageNode receiver arguments first!

aMessageNode receiver receiver key value!

aMessageNode receiver arguments first !

aMessageNode receiver arguments first receiver!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/24/2024 19:16:01' prior: 50558288!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		self halt.
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver key value
			on: aMessageNode receiver arguments first receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/24/2024 19:16:18' prior: 50558340!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver key value
			on: aMessageNode receiver arguments first receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/24/2024 19:16:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/24/2024 19:16:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/24/2024 19:16:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/24/2024 19:16:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 19:16:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 19:16:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/24/2024 19:16:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/24/2024 19:16:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/24/2024 19:16:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/24/2024 19:16:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/24/2024 19:16:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/24/2024 19:16:22'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/24/2024 19:16:22'!
FAILURE!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/24/2024 19:16:40' prior: 50558104!
typeCastLiteralFirstThenObject
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	
	String = v1 class ifTrue: [v1 isEmpty].! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/24/2024 19:16:43'!
PASSED!

!classDefinition: #TypesWithContextAppliersTestMethods category: #'LiveTypingTypeChecker-ContextAppliers-Tests' stamp: 'JFGO 4/24/2024 19:18:28'!
Object subclass: #TypesWithContextAppliersTestMethods
	instanceVariableNames: 'instance1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers-Tests'!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/24/2024 19:18:40' prior: 50558538!
typeCastLiteralFirstThenObject
	
	instance1:= OrderedCollection new.
	instance1 := 'true'.
	
	String = instance1 class ifTrue: [instance1 isEmpty].! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/24/2024 19:18:49' prior: 50558112!
test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition

	| blockToTestString |

	blockToTestString:= '[ instance1 isEmpty. ]'.
	
	self withMessageName: #typeCastLiteralFirstThenObject 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].


! !

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/24/2024 19:18:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/24/2024 19:18:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 19:18:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/24/2024 19:18:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/24/2024 19:18:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/24/2024 19:18:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/24/2024 19:18:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/24/2024 19:18:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/24/2024 19:18:51'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/24/2024 19:18:51'!
PASSED!

----SNAPSHOT----(24 April 2024 19:20:44) CuisUniversity-6169.image priorSource: 7236227!

----SNAPSHOT----(24 April 2024 19:22:28) CuisUniversity-6169.image priorSource: 7266728!
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/24/2024 19:22:55' prior: 50558067!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	"types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withNode: methodNodeOwner withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/24/2024 19:22:59' prior: 50558743!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	"types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withNode: methodNodeOwner withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !

----QUIT----(24 April 2024 19:24:31) CuisUniversity-6169.image priorSource: 7266818!

----STARTUP---- (25 April 2024 18:47:44) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 18:49:23'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 18:54:44'!
test10TypeCastNegatedIfFalseCorrectlyAppliesCastedType

	| blockToTestString |

	blockToTestString:= '[ instance1 isEmpty. ]'.
	
	self withMessageName: #typeCastLiteralFirstThenObject 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 18:56:10' prior: 50558900!
test10TypeCastNegatedIfFalseCorrectlyAppliesCastedType

	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastNegatedIfFalse
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	].


! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 18:56:49'!
typeCastNegatedIfFalse
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 not class = SmallInteger ifFalse: [v1 factorial].! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 18:58:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 18:58:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 18:58:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 18:58:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 18:58:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 18:58:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 18:58:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 18:58:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 18:58:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 18:58:33'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 18:58:33'!
ERROR!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 18:59:17' prior: 50558931!
typeCastNegatedIfFalse
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	(v1 class = SmallInteger) not ifFalse: [v1 factorial].! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 18:59:18'!
ERROR!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/25/2024 18:59:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 18:59:18'!
ERROR!
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 4/25/2024 18:59:59' prior: 50558763!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withNode: methodNodeOwner withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 19:03:21' prior: 50558381!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver key value
			on: aMessageNode receiver arguments first receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		self halt.
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:03:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:03:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:03:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:03:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:03:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:03:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:03:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:03:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:03:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:03:26'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:03:26'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 19:04:14' prior: 50559136!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver key value
			on: aMessageNode receiver arguments first receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 19:06:59'!
test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType

	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastNegatedIfFalse
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	].


! !

!methodRemoval: TypesWithContextAppliersTest #test10TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:06:59'!
test10TypeCastNegatedIfFalseCorrectlyAppliesCastedType

	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastNegatedIfFalse
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	].


!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 19:08:08'!
test10TypeCastNegatedIfTrueReturnsAllTypesButRejected

	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastNegatedIfTrue
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 19:09:39' prior: 50559315!
test10TypeCastNegatedIfTrueReturnsAllTypesButRejected

	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastNegatedIfTrue
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 19:09:55' prior: 50559285!
test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType

	"| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastNegatedIfFalse
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	]."
	self assert: true.

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 19:10:14' prior: 50559235!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	self halt.
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver key value
			on: aMessageNode receiver arguments first receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:10:16'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:10:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:10:24'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:10:24'!
ERROR!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 19:10:59'!
typeCastNegatedIfTrue
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	(v1 class = SmallInteger) not ifTrue:[v1 isEmpty.]! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 19:12:34' prior: 50559330!
test10TypeCastNegatedIfTrueReturnsAllTypesButRejected

	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastNegatedIfTrue
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 19:15:34'!
typeCastDistinctIfFalse
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	(v1 class = SmallInteger) not ifFalse: [v1 factorial].! !

!methodRemoval: TypesWithContextAppliersTestMethods #typeCastNegatedIfFalse stamp: 'JFGO 4/25/2024 19:15:34'!
typeCastNegatedIfFalse
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	(v1 class = SmallInteger) not ifFalse: [v1 factorial].!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 19:15:53'!
typeCastDistinctIfTrue
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	(v1 class = SmallInteger) not ifTrue:[v1 isEmpty.]! !

!methodRemoval: TypesWithContextAppliersTestMethods #typeCastNegatedIfTrue stamp: 'JFGO 4/25/2024 19:15:53'!
typeCastNegatedIfTrue
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	(v1 class = SmallInteger) not ifTrue:[v1 isEmpty.]!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 19:16:08' prior: 50559439!
test10TypeCastNegatedIfTrueReturnsAllTypesButRejected

	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastDistinctIfTrue
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 19:16:16' prior: 50559347!
test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType

	"| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastDistinctIfFalse
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	]."
	self assert: true.

! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 19:17:06' prior: 50559455!
typeCastDistinctIfFalse
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class ~= SmallInteger ifFalse: [v1 factorial].! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 19:17:22' prior: 50559471!
typeCastDistinctIfTrue
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 class ~~SmallInteger ifTrue:[v1 isEmpty.]! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 19:17:59' prior: 50559363!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver key value
			on: aMessageNode receiver arguments first receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:18:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:18:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:18:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:18:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:18:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:18:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:18:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:18:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:18:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:18:02'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:18:02'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:18:02'!
FAILURE!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 19:19:35' prior: 50559537!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver key value
			on: aMessageNode receiver arguments first receiver
			shouldCast: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject
			withPreviousContext: self.
		^newContext.
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:19:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:19:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:19:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:19:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:19:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:19:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:19:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:19:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:19:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:19:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:19:38'!
PASSED!
!EqualsClassTypeContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 4/25/2024 19:25:51'!
to: aType on: anObjectToCast shouldFilterType: shouldCast withPreviousContext: anotherContextApplier 
	^self new initializeToApply: aType on: anObjectToCast shouldCast: shouldCast withPreviousContext: anotherContextApplier.! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 4/25/2024 19:25:51' prior: 50559640!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldFilterType: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver key value
			on: aMessageNode receiver arguments first receiver
			shouldFilterType: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldFilterType: shouldReject
			withPreviousContext: self.
		^newContext.
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!methodRemoval: EqualsClassTypeContextApplier class #to:on:shouldCast:withPreviousContext: stamp: 'JFGO 4/25/2024 19:25:51'!
to: aType on: anObjectToCast shouldCast: shouldCast withPreviousContext: anotherContextApplier 
	^self new initializeToApply: aType on: anObjectToCast shouldCast: shouldCast withPreviousContext: anotherContextApplier.!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:25:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:25:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:25:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:25:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:25:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:25:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:25:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:25:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:25:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:25:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:25:55'!
PASSED!
!EqualsClassTypeContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 4/25/2024 19:26:09' prior: 50559739!
to: aType on: anObjectToCast shouldFilterType: shouldFilter withPreviousContext: anotherContextApplier 
	^self new initializeToApply: aType on: anObjectToCast shouldCast: shouldFilter withPreviousContext: anotherContextApplier.! !
!EqualsClassTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 4/25/2024 19:26:28'!
initializeToApply: aType on: anObjectToApply shouldFilterType: shouldCast withPreviousContext: anotherContextApplier
	type := aType.
	objectToApply := anObjectToApply.
	typeShouldCast:= shouldCast.
	previousContext := anotherContextApplier .
	! !
!EqualsClassTypeContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 4/25/2024 19:26:28' prior: 50559860!
to: aType on: anObjectToCast shouldFilterType: shouldFilter withPreviousContext: anotherContextApplier 
	^self new initializeToApply: aType on: anObjectToCast shouldFilterType: shouldFilter withPreviousContext: anotherContextApplier.! !

!methodRemoval: EqualsClassTypeContextApplier #initializeToApply:on:shouldCast:withPreviousContext: stamp: 'JFGO 4/25/2024 19:26:28'!
initializeToApply: aType on: anObjectToApply shouldCast: shouldCast withPreviousContext: anotherContextApplier
	type := aType.
	objectToApply := anObjectToApply.
	typeShouldCast:= shouldCast.
	previousContext := anotherContextApplier .
	!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:26:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:26:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:26:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:26:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:26:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:26:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:26:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:26:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:26:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:26:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:26:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:26:33'!
PASSED!
!EqualsClassTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 4/25/2024 19:26:51' prior: 50559871!
initializeToApply: aType on: anObjectToApply shouldFilterType: shouldFilter withPreviousContext: anotherContextApplier
	type := aType.
	objectToApply := anObjectToApply.
	typeShouldCast:= shouldFilter.
	previousContext := anotherContextApplier .
	! !

!classDefinition: #EqualsClassTypeContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 4/25/2024 19:27:05'!
TypeContextAppliers subclass: #EqualsClassTypeContextApplier
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldFilter previousContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!EqualsClassTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 4/25/2024 19:27:05' prior: 50560075!
initializeToApply: aType on: anObjectToApply shouldFilterType: shouldFilter withPreviousContext: anotherContextApplier
	type := aType.
	objectToApply := anObjectToApply.
	typeShouldFilter:= shouldFilter.
	previousContext := anotherContextApplier .
	! !
!EqualsClassTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 4/25/2024 19:27:05' prior: 50541851!
shouldCast
	^typeShouldFilter .! !
!EqualsClassTypeContextApplier methodsFor: 'checking' stamp: 'JFGO 4/25/2024 19:27:21'!
shouldFilter
	^typeShouldFilter .! !
!EqualsClassTypeContextApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 4/25/2024 19:27:21' prior: 50553475 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	(self shouldApplyTo:aParseNode) ifTrue:[
		self shouldFilter 
			ifTrue: [  ^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
			ifFalse: [^self liveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ].
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !

!methodRemoval: EqualsClassTypeContextApplier #shouldCast stamp: 'JFGO 4/25/2024 19:27:21'!
shouldCast
	^typeShouldFilter .!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:27:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:27:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:27:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:27:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:27:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:27:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:27:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:27:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:27:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:27:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:27:24'!
PASSED!
!EqualsClassTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 4/25/2024 19:27:53' prior: 50560121 overrides: 50545827!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	(self shouldApplyTo:aParseNode) ifTrue:[
		self shouldFilter 
			ifTrue: [^self liveTypesRejectingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
			ifFalse: [  ^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ].
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 19:28:13' prior: 50559750!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldReject condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldFilterType: shouldReject
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver key value
			on: aMessageNode receiver arguments first receiver
			shouldFilterType: shouldReject
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldFilterType: shouldReject not
			withPreviousContext: self.
		^newContext.
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:28:16'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 19:30:52' prior: 50560216!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver key value
			on: aMessageNode receiver arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 19:31:56' prior: 50559504!
test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType

	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastDistinctIfFalse
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	].
	self assert: true.

! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 19:32:00' prior: 50560438!
test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType

	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastDistinctIfFalse
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	].

! !

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:32:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:32:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:32:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:32:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:32:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:32:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:32:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:32:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:32:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:32:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastNegatedIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:32:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:32:01'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 19:32:52'!
typeCastNegatedIfFalse
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class ~= SmallInteger ifFalse: [v1 factorial].! !

!methodRemoval: TypesWithContextAppliersTestMethods #typeCastDistinctIfFalse stamp: 'JFGO 4/25/2024 19:32:52'!
typeCastDistinctIfFalse
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class ~= SmallInteger ifFalse: [v1 factorial].!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 19:33:06'!
test10TypeCastDistinctIfTrueReturnsAllTypesButRejected

	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastDistinctIfTrue
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


! !

!methodRemoval: TypesWithContextAppliersTest #test10TypeCastNegatedIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:33:06'!
test10TypeCastNegatedIfTrueReturnsAllTypesButRejected

	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastDistinctIfTrue
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 19:34:01' prior: 50560522!
typeCastNegatedIfFalse
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	(v1 class == SmallInteger) not ifFalse: [v1 factorial].! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:37:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:37:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:37:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:37:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:37:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:37:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:37:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:37:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:37:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:37:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:37:13'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:37:13'!
ERROR!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 19:37:27' prior: 50560454!
test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType

	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastNegatedIfFalse
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	].

! !

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:37:28'!
ERROR!

self isReceiverClassMessageSend!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:41:14'!
ERROR!

self isEqualOrIdentical!

self selectorSymbol!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 19:45:40' prior: 50560386!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver key value
			on: aMessageNode receiver arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	].

	condition isNegated ifTrue:[
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !
!MessageNode methodsFor: '*LiveTyping' stamp: 'JFGO 4/25/2024 19:46:54'!
isNegated
	
	^self selectorSymbol = #not! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 19:53:24' prior: 50560659!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver key value
			on: aMessageNode receiver arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	].

	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
			newContext := EqualsClassTypeContextApplier 
				to: aMessageNode receiver arguments first key value
				on: aMessageNode receiver receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
			^newContext.
		].
		
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:53:34'!
ERROR!

aMessageNode receiver arguments first key value!

condition receiver arguments first key value!

condition receiver!

condition!

condition arguments first key value!

condition receiver receiver!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 19:57:25' prior: 50560715!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver key value
			on: aMessageNode receiver arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	].

	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
			newContext := EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
			^newContext.
		].
		
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:57:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:57:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:57:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:57:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:57:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:57:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:57:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:57:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:57:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:57:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:57:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:57:26'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 19:58:11' prior: 50560789!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver receiver key value
			on: aMessageNode receiver arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	].

	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
			newContext := EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
			^newContext.
		].
		
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:58:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:58:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:58:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:58:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:58:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:58:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:58:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:58:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:58:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:58:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:58:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:58:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:58:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:58:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:58:17'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 19:58:34' prior: 50560904!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	].

	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
			newContext := EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
			^newContext.
		].
		
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/25/2024 19:58:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/25/2024 19:58:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/25/2024 19:58:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/25/2024 19:58:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/25/2024 19:58:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:58:37'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 19:58:55' prior: 50561134!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	].

	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
			newContext := EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
			^newContext.
		].
		
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 19:58:58'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 20:00:31'!
typeCastDistinctLiteralFirstThenObject
	
	instance1:= OrderedCollection new.
	instance1 := 'true'.
	
	String ~= instance1 class ifTrue: [instance1 isEmpty].! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 20:01:11'!
test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType

	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastNegatedIfFalse
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	].

! !

!methodRemoval: TypesWithContextAppliersTest #test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 20:01:11'!
test11TypeCastNegatedIfFalseCorrectlyAppliesCastedType

	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastNegatedIfFalse
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types first equals: SmallInteger.
	].

!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 20:01:31'!
test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition

	| blockToTestString |

	blockToTestString:= '[ instance1 isEmpty. ]'.
	
	self withMessageName: #typeCastDistinctLiteralFirstThenObject 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 20:02:06' prior: 50561534!
test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition

	| blockToTestString |

	blockToTestString:= '[ instance1 isEmpty. ]'.
	
	self withMessageName: #typeCastDistinctLiteralFirstThenObject 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: OrderedCollection.
	].


! !

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:02:08'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:02:08'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 20:03:55' prior: 50561315!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	 ].
	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
			newContext := EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
			^newContext.
		].
		
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:03:57'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:03:59'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 20:04:26'!
typeCastNegatedLiteralFirstThenObject
	
	instance1:= OrderedCollection new.
	instance1 := 'true'.
	
	String = instance1 class ifTrue: [instance1 isEmpty].! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 20:04:39' prior: 50561656!
typeCastNegatedLiteralFirstThenObject
	
	instance1:= OrderedCollection new.
	instance1 := 'true'.
	
	(String = instance1) not class ifTrue: [instance1 isEmpty].! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 20:05:03'!
test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition

	| blockToTestString |

	blockToTestString:= '[ instance1 isEmpty. ]'.
	
	self withMessageName: #typeCastNegatedLiteralFirstThenObject 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].


! !

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:05:05'!
ERROR!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 20:04:26' prior: 50561665!
typeCastNegatedLiteralFirstThenObject
	
	instance1:= OrderedCollection new.
	instance1 := 'true'.
	
	String = instance1 class ifTrue: [instance1 isEmpty].! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 20:05:32' prior: 50561695!
typeCastNegatedLiteralFirstThenObject
	
	instance1:= OrderedCollection new.
	instance1 := 'true'.
	
	(String = instance1 class) not ifTrue: [instance1 isEmpty].! !

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:05:36'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:05:36'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 20:06:18' prior: 50561577!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
		newContext := EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	 ].
	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
			newContext := EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
			^newContext.
		].
		condition isClassEqualOrIdenticalToObjectClass ifTrue: [
			newContext := EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
			^newContext.
		].
		
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:06:19'!
FAILURE!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 20:06:29' prior: 50561674!
test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition

	| blockToTestString |

	blockToTestString:= '[ instance1 isEmpty. ]'.
	
	self withMessageName: #typeCastNegatedLiteralFirstThenObject 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: OrderedCollection.
	].


! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 20:06:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 20:06:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 20:06:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 20:06:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 20:06:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 20:06:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 20:06:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 20:06:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:06:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 20:06:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:06:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 20:06:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:06:32'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 20:06:53' prior: 50561722!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		newContext := EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	 ].
	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
			newContext := EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
			^newContext.
		].
		condition isClassEqualOrIdenticalToObjectClass ifTrue: [
			newContext := EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
			^newContext.
		].
		
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 20:07:30' prior: 50561880!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition newContext |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		newContext := EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		newContext := EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
		^newContext.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		newContext := EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
		^newContext.
	 ].
	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
				
			newContext := EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
			^newContext.
		].
		condition isClassEqualOrIdenticalToObjectClass ifTrue: [
			^EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
			
		].
		
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 20:07:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 20:07:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 20:07:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 20:07:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 20:07:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 20:07:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 20:07:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 20:07:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:07:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 20:07:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:07:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 20:07:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:07:32'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 20:08:39' prior: 50561958!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
			^EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
		].
		condition isClassEqualOrIdenticalToObjectClass ifTrue: [
			^EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
		].	
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 20:08:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 20:08:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 20:08:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 20:08:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 20:08:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 20:08:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 20:08:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 20:08:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:08:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 20:08:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:08:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 20:08:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:08:44'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 20:10:06'!
test14TypeCastDistinctNegatedIfTrueReturnsCastedType

	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastDistinctNegatedIfTrue
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 20:10:19' prior: 50562223!
test14TypeCastDistinctNegatedIfTrueReturnsCastedType

	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastDistinctNegatedIfTrue
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 20:11:03'!
typeCastDistinctNegatedIfTrue
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	(v1 class ~~SmallInteger) not ifTrue:[v1 factorial.]! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 20:11:09' prior: 50562240!
test14TypeCastDistinctNegatedIfTrueReturnsCastedType

	| blockToTestString |
	
	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastDistinctNegatedIfTrue
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 4/25/2024 20:11:12'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 4/25/2024 20:11:12'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 20:11:40' prior: 50562093!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
			^EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
		].
		condition isClassEqualOrIdenticalToObjectClass ifTrue: [
			^EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
		].
		condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
			^EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType
				withPreviousContext: self.
		].	
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 4/25/2024 20:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 4/25/2024 20:11:44'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 20:12:41'!
test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition

	| blockToTestString |

	blockToTestString:= '[ instance1 isEmpty. ]'.
	
	self withMessageName: #typeCastDistinctNegatedLiteralFirstThenObject 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: OrderedCollection.
	].


! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/25/2024 20:13:14'!
typeCastDistinctNegatedLiteralFirstThenObject
	
	instance1:= OrderedCollection new.
	instance1 := 'true'.
	
	(String ~= instance1 class) not ifTrue: [instance1 isEmpty].! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/25/2024 20:13:24' prior: 50562375!
test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition

	| blockToTestString |

	blockToTestString:= '[ instance1 isEmpty. ]'.
	
	self withMessageName: #typeCastDistinctNegatedLiteralFirstThenObject 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].


! !

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:13:27'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:13:27'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/25/2024 20:13:52' prior: 50562287!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
			^EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
		].
		condition isClassEqualOrIdenticalToObjectClass ifTrue: [
			^EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
		].
		condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
			^EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType
				withPreviousContext: self.
		].
		condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
			^EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: shouldFilterType
				withPreviousContext: self.
		 ].	
	].
	self shouldBeImplemented. "TODO. Coming Soon"


! !

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:13:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:13:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/25/2024 20:13:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/25/2024 20:13:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/25/2024 20:13:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/25/2024 20:13:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/25/2024 20:13:59'!
PASSED!

----SNAPSHOT----(25 April 2024 20:15:17) CuisUniversity-6169.image priorSource: 7268195!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/26/2024 09:47:02' prior: 50562429!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
			^EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
		].
		condition isClassEqualOrIdenticalToObjectClass ifTrue: [
			^EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
		].
		condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
			^EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType
				withPreviousContext: self.
		].
		condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
			^EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: shouldFilterType
				withPreviousContext: self.
		 ].	
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"


! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/26/2024 09:49:01' prior: 50540799 overrides: 16919345!
visitMessageNode: aMessageNode
	aMessageNode arguments  size > 0 ifTrue:[
		self visitMessageNodeArguments:aMessageNode.
	].
"TODO. Puede haber un ifTrue dentro de un receiver".! !
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/26/2024 09:49:57' prior: 50562758 overrides: 16919345!
visitMessageNode: aMessageNode
	aMessageNode arguments  size > 0 ifTrue:[
		self visitMessageNodeArguments:aMessageNode.
	].
"TODO. Puede haber un ifTrue dentro de un receiver".

"(v1 ifTrue:[] ) bla bla"! !

----QUIT----(26 April 2024 10:15:25) CuisUniversity-6169.image priorSource: 7392455!

----STARTUP---- (29 April 2024 17:21:09) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/29/2024 17:30:21' prior: 50541944!
typeCastIfTrue
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	(v1 class = SmallInteger ifTrue: [v1 factorial. self.] ifFalse:[self.]) someMessage.! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/29/2024 17:31:45'!
typeCastWithBranchAsMessageReceiver
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	(v1 class = SmallInteger ifTrue: [v1 factorial. self.] ifFalse:[self.]) someMessage.! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 3/13/2024 17:20:46' prior: 50562785!
typeCastIfTrue
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifTrue: [v1 factorial].! !
!TypesWithContextAppliersTestMethods methodsFor: 'general' stamp: 'JFGO 4/29/2024 17:32:22'!
someMessage.! !
!TypesWithContextAppliersTestMethods methodsFor: 'general' stamp: 'JFGO 4/29/2024 17:32:24' prior: 50562811!
someMessage! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/29/2024 17:33:39'!
testXXBranchesAsMessageReceiverAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[ instance1 isEmpty. ]'.
	
	self withMessageName: #typeCastDistinctNegatedLiteralFirstThenObject 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].


! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/29/2024 17:34:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/29/2024 17:34:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/29/2024 17:34:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/29/2024 17:34:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/29/2024 17:34:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/29/2024 17:34:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/29/2024 17:34:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 4/29/2024 17:34:18'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/29/2024 17:34:45' prior: 50562819!
testXXBranchesAsMessageReceiverAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[v1 factorial. self.]'.
	
	self withMessageName: #typeCastDistinctNegatedLiteralFirstThenObject 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: String.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/29/2024 17:35:03' prior: 50562978!
testXXBranchesAsMessageReceiverAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[v1 factorial. self.]'.
	
	self withMessageName: #typeCastWithBranchAsMessageReceiver 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 4/29/2024 17:35:04'!
FAILURE!

sourceRanges!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/29/2024 17:35:57' prior: 50562994!
testXXBranchesAsMessageReceiverAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[ v1 factorial. self.]'.
	
	self withMessageName: #typeCastWithBranchAsMessageReceiver 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/29/2024 17:36:04' prior: 50563014!
testXXBranchesAsMessageReceiverAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[ v1 factorial. self. ]'.
	
	self withMessageName: #typeCastWithBranchAsMessageReceiver 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 4/29/2024 17:36:05'!
FAILURE!

self printSourceCode !

blockNodeCodeString!

self bytes!

blockNodeCodeString!

self count!

sourceRanges!

self printSourceCode!

self asString!

self asString!

self asString!

blockNodeCodeString!

self asUnicodeString!

#[10 9]!

#[10 9] asUnicodeString!

UnicodeString fromUtf8Bytes: #[10 9]!
!TypesWithContextAppliersTestMethods methodsFor: 'general' stamp: 'JFGO 4/29/2024 17:45:22' prior: 50562794!
typeCastWithBranchAsMessageReceiver
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	(v1 class = SmallInteger ifTrue: [v1 factorial.self.] ifFalse:[self.]) someMessage.! !

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 4/29/2024 17:45:27'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 4/29/2024 17:45:27'!
FAILURE!

blockNodeCodeString!

blockNodeCodeString!

self asUnicodeString!

sourceRanges!

self printSourceCode!

UnicodeString fromUtf8Bytes: #[91 10 9 118]!

UnicodeString fromUtf8Bytes: #[91 10 9 32 118]!

'[
		 v' asUnicodeString!

'[
		v' asUnicodeString!

'[
	v' asUnicodeString!

'[
	v' asUnicodeString!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/29/2024 17:49:47' prior: 50563030!
testXXBranchesAsMessageReceiverAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[
		v1 factorial. self. ]'.
	
	self withMessageName: #typeCastWithBranchAsMessageReceiver 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 4/29/2024 17:49:48'!
FAILURE!

blockNodeCodeString!

self asUnicodeString!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/29/2024 17:50:13' prior: 50563087!
testXXBranchesAsMessageReceiverAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[
	v1 factorial. self. ]'.
	
	self withMessageName: #typeCastWithBranchAsMessageReceiver 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 4/29/2024 17:50:15'!
FAILURE!

blockNodeCodeString!

self asUnicodeString!

sourceRanges!

self printSourceCode!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/29/2024 17:51:47' prior: 50563108!
testXXBranchesAsMessageReceiverAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[
	v1 factorial.
	self. ]'.
	
	self withMessageName: #typeCastWithBranchAsMessageReceiver 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 4/29/2024 17:51:49'!
FAILURE!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/29/2024 17:54:05' prior: 50562768 overrides: 16919345!
visitMessageNode: aMessageNode
	aMessageNode receiver accept:self.
	aMessageNode arguments  size > 0 ifTrue:[
		self visitMessageNodeArguments:aMessageNode.
	].
	! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 4/29/2024 17:54:08'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'general' stamp: 'JFGO 4/29/2024 17:54:38'!
someMessageWithArgs: anArg1! !
!TypesWithContextAppliersTestMethods methodsFor: 'general' stamp: 'JFGO 4/29/2024 17:55:34'!
typeCastWithBranchAsMessageArgument
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	self someMessageWithArgs: (v1 class = SmallInteger ifTrue: [v1 factorial.])! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/29/2024 17:59:52'!
testXYBranchesAsMessageArgumentAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[v1 factorial.]'.
	
	self withMessageName: #typeCastWithBranchAsMessageArgument 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #testXYBranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 4/29/2024 17:59:58'!
FAILURE!

sourceRanges!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/29/2024 18:00:15' prior: 50563244!
testXYBranchesAsMessageArgumentAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastWithBranchAsMessageArgument 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #testXYBranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXYBranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 4/29/2024 18:00:17'!
PASSED!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/29/2024 18:00:38' prior: 50545445!
visitMessageNodeArguments:aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		contextApplier updateFor: aMessageNode visiting: argumentBlock 
			ifUpdated: 	[:newContext | 
				contextApplier:= newContext. 
				argumentBlock accept: self.
				self restorePreviousContext .
				] 
			ifNotUpdated:[ "argumentBlock accept: self.		"		].
	].! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 4/29/2024 18:00:40'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXYBranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 4/29/2024 18:00:40'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #testXYBranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 4/29/2024 18:00:40'!
FAILURE!
!ContextAppliersMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 4/12/2024 16:40:45' prior: 50563359!
visitMessageNodeArguments:aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock |  
		contextApplier updateFor: aMessageNode visiting: argumentBlock 
			ifUpdated: 	[:newContext | 
				contextApplier:= newContext. 
				argumentBlock accept: self.
				self restorePreviousContext .
				] 
			ifNotUpdated:[ argumentBlock accept: self.				].
	].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXYBranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 4/29/2024 18:01:09'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/29/2024 18:05:19'!
typeCastManyNegations
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	(v1 class == SmallInteger) not not not ifTrue: [v1 factorial].! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/29/2024 18:06:14'!
test16TypeCastManyNegationsCastCorrectly

	| blockToTestString |

	blockToTestString:= '[ instance1 isEmpty. ]'.
	
	self withMessageName: #typeCastManyNegations 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 4/29/2024 18:07:02' prior: 50563617!
typeCastManyNegations
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	(v1 class == SmallInteger) not not not ifTrue: [v1 isEmpty].! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/29/2024 18:07:27' prior: 50563625!
test16TypeCastManyNegationsCastCorrectly

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastManyNegations 
	calculateTypesOfNode: 'instance1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 4/29/2024 18:07:30' prior: 50563649!
test16TypeCastManyNegationsCastCorrectly

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastManyNegations 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].


! !

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 4/29/2024 18:07:32'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 4/29/2024 18:10:27' prior: 50562669!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
			^EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
		].
		condition isClassEqualOrIdenticalToObjectClass ifTrue: [
			^EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
		].
		condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
			^EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType
				withPreviousContext: self.
		].
		condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
			^EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: shouldFilterType
				withPreviousContext: self.
		 ].	
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"


! !

----SNAPSHOT----(29 April 2024 18:11:23) CuisUniversity-6169.image priorSource: 7396047!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 18:08:43'!
ERROR!

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXYBranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:08:43'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 18:08:43'!
ERROR!

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:09:33'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXYBranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:09:38'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:15:38' prior: 50563685!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| shouldFilterType condition |
	self halt.
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	shouldFilterType := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	shouldFilterType := shouldFilterType or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
			^EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
		].
		condition isClassEqualOrIdenticalToObjectClass ifTrue: [
			^EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: shouldFilterType not
				withPreviousContext: self.
		].
		condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
			^EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: shouldFilterType
				withPreviousContext: self.
		].
		condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
			^EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: shouldFilterType
				withPreviousContext: self.
		 ].	
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"


! !

aMessageNode selectorSymbol!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:19:20' prior: 50563943!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| blockIsOnRejectingCondition condition |
	self halt.
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	blockIsOnRejectingCondition := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	blockIsOnRejectingCondition := blockIsOnRejectingCondition or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		condition:= condition receiver.
		condition isObjectClassEqualOrIdenticalToClass ifTrue:[
			^EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: blockIsOnRejectingCondition not
				withPreviousContext: self.
		].
		condition isClassEqualOrIdenticalToObjectClass ifTrue: [
			^EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: blockIsOnRejectingCondition not
				withPreviousContext: self.
		].
		condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
			^EqualsClassTypeContextApplier 
				to: condition arguments first key value
				on: condition receiver receiver
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].
		condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
			^EqualsClassTypeContextApplier 
				to: condition receiver key value
				on: condition arguments first receiver
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		 ].	
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:22:26' prior: 50564037!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| blockIsOnRejectingCondition condition |
	self halt.
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	blockIsOnRejectingCondition := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	blockIsOnRejectingCondition := blockIsOnRejectingCondition or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	^nil.


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:24:00'!
XXXX: condition YYY: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		^nil
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:24:29' prior: 50564156!
XXXX: condition YYY: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		^self XXXX: condition receiver YYY: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:24:41' prior: 50564134!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| blockIsOnRejectingCondition condition |
	self halt.
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	blockIsOnRejectingCondition := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	blockIsOnRejectingCondition := blockIsOnRejectingCondition or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	^self XXXX: condition YYY: blockIsOnRejectingCondition .


! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/1/2024 18:24:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/1/2024 18:24:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/1/2024 18:24:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/1/2024 18:24:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/1/2024 18:24:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/1/2024 18:24:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/1/2024 18:24:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/1/2024 18:24:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/1/2024 18:24:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/1/2024 18:24:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/1/2024 18:24:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/1/2024 18:24:45'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:25:13' prior: 50564248!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| blockIsOnRejectingCondition condition |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	blockIsOnRejectingCondition := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	blockIsOnRejectingCondition := blockIsOnRejectingCondition or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	^self XXXX: condition YYY: blockIsOnRejectingCondition .


! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXYBranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:25:16'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:31:46'!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		^self XXXX: condition receiver YYY: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 5/1/2024 18:31:46' prior: 50564322!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| blockIsOnRejectingCondition condition |
	"self halt."
	"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
	blockIsOnRejectingCondition := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	blockIsOnRejectingCondition := blockIsOnRejectingCondition or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	^self contextFor: condition withBlockRejecting: blockIsOnRejectingCondition .


! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 5/1/2024 18:31:46' prior: 50564201!
XXXX: condition YYY: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"! !
!TypeContextAppliers methodsFor: 'as yet unclassified' stamp: 'JFGO 5/1/2024 18:31:46' prior: 50564496!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"! !

!methodRemoval: TypeContextAppliers #XXXX:YYY: stamp: 'JFGO 5/1/2024 18:31:46'!
XXXX: condition YYY: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:31:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:31:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXYBranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:31:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXYBranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:31:52'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:33:04' prior: 50564617!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:35:17' prior: 50564942!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:36:56' prior: 50564544!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| blockIsOnRejectingCondition condition |
	"self halt."
	blockIsOnRejectingCondition := self is: aBlockNode asRejectingArgumentIn: aMessageNode .
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	^self contextFor: condition withBlockRejecting: blockIsOnRejectingCondition .


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:37:40'!
is: aBlockNode asRejectingArgumentIn: aMessageNode

	| blockIsOnRejectingCondition |
	blockIsOnRejectingCondition := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	blockIsOnRejectingCondition := blockIsOnRejectingCondition or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	
	
	


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:37:46' prior: 50565059!
is: aBlockNode asRejectingArgumentIn: aMessageNode

	| blockIsOnRejectingCondition |
	blockIsOnRejectingCondition := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	blockIsOnRejectingCondition := blockIsOnRejectingCondition or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	^blockIsOnRejectingCondition .
	
	


! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!

!testRun: #TypesWithContextAppliersTest #testXYBranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:37:49'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:38:34' prior: 50565075!
is: aBlockNode asRejectingArgumentIn: aMessageNode

	| blockIsRejectingCondition |
	blockIsRejectingCondition := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
	blockIsRejectingCondition := blockIsRejectingCondition or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
	^blockIsRejectingCondition .
	
	


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:38:49' prior: 50565044!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| blockIsRejectingCondition condition |
	"self halt."
	blockIsRejectingCondition := self is: aBlockNode asRejectingArgumentIn: aMessageNode .
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	^self contextFor: condition withBlockRejecting: blockIsRejectingCondition .


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/1/2024 18:40:27'!
test17BranchesAsMessageReceiverAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[
	v1 factorial.
	self. ]'.
	
	self withMessageName: #typeCastWithBranchAsMessageReceiver 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!methodRemoval: TypesWithContextAppliersTest #testXXBranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:40:27'!
testXXBranchesAsMessageReceiverAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[
	v1 factorial.
	self. ]'.
	
	self withMessageName: #typeCastWithBranchAsMessageReceiver 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/1/2024 18:40:33'!
test18BranchesAsMessageArgumentAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastWithBranchAsMessageArgument 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!methodRemoval: TypesWithContextAppliersTest #testXYBranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:40:33'!
testXYBranchesAsMessageArgumentAreCorrectlyCasted

	| blockToTestString |

	blockToTestString:= '[ v1 factorial. ]'.
	
	self withMessageName: #typeCastWithBranchAsMessageArgument 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/1/2024 18:45:44'!
typeCastEqualsToLiteralIfFalse
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 = 5 ifFalse:[v1 isEmpty.]! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/1/2024 18:48:07'!
test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes
	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastIfFalse 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


	! !
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/1/2024 18:48:44' prior: 50565342!
test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes
	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastEqualsToLiteralIfFalse 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
		self assert: types includes: SmallInteger.
	].


	! !

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 18:49:59'!
ERROR!
!MessageNode methodsFor: '*LiveTyping' stamp: 'JFGO 5/1/2024 18:52:39'!
isObjectEqualsOrIdenticalToLiteral
	
	^self isEqualOrIdentical and: [ self isReceiverClassMessageSend and: [ self isFirstArgumentLiteralBehavior ]]
		
	! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:53:48' prior: 50564993!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].

	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^GeneralContextApplier new.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:54:14' prior: 50565258!
buildContextForIfWithMessageNodeAsCondition: aMessageNode over: aBlockNode

	| blockIsRejectingCondition condition |
	
	blockIsRejectingCondition := self is: aBlockNode asRejectingArgumentIn: aMessageNode .
	
	condition := aMessageNode receiverOrCascadeReceiver.
	
	^self contextFor: condition withBlockRejecting: blockIsRejectingCondition .


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:54:22' prior: 50565389!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	self halt.
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^GeneralContextApplier new.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

self isEqualOrIdentical!

self isReceiverClassMessageSend!

receiver!
!MessageNode methodsFor: '*LiveTyping' stamp: 'JFGO 5/1/2024 18:55:49' prior: 50565380!
isObjectEqualsOrIdenticalToLiteral
	
	^self isEqualOrIdentical and: [ self isFirstArgumentLiteralBehavior ].
		
	! !

arguments first isLiteralVariableNode!

arguments first!

arguments first isReferencingBehavior!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/1/2024 18:57:56' prior: 50565514!
isObjectEqualsOrIdenticalToLiteral
	
	^self isEqualOrIdentical and: [ self isFirstArgumentLiteral ].
		
	! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/1/2024 18:58:20'!
isFirstArgumentLiteral
	^arguments first isLiteralNode.
		
	! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 18:59:11' prior: 50565458!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^GeneralContextApplier new.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 18:59:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 18:59:20'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'equals to literal context' stamp: 'JFGO 5/1/2024 19:00:26'!
typeCastEqualsToLiteralIfTrue
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 = 5 ifTrue:[v1 + 10.]! !
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/1/2024 19:01:12'!
test20ValueEqualsToLiteralIfTrueReturnsLiteralType
	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastEqualsToLiteralIfTrue 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


	! !

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/1/2024 19:01:28'!
FAILURE!
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/1/2024 19:01:38' prior: 50565757!
test20ValueEqualsToLiteralIfTrueReturnsLiteralType
	| blockToTestString |
	
	blockToTestString:= '[ v1 + 10. ]'.
	
	self withMessageName: #typeCastEqualsToLiteralIfTrue 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


	! !

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/1/2024 19:01:40'!
FAILURE!

EqualsClassTypeContextApplier subclass: #EqualsToLiteralContextApplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #EqualsToLiteralContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 5/1/2024 19:12:43'!
EqualsClassTypeContextApplier subclass: #EqualsToLiteralContextApplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!EqualsToLiteralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 5/1/2024 19:15:00' overrides: 50560195!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	((self shouldApplyTo:aParseNode) and: [self shouldFilter not]) ifTrue:[
		^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo 
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 19:15:52' prior: 50565536!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:15:55'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/1/2024 19:15:55'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:16:02'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 19:16:23' prior: 50565830!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		self halt.
		^EqualsToLiteralContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

condition arguments first receiver!

condition arguments first!

condition receiver key value!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 19:17:46' prior: 50565981!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		self halt.
		^EqualsToLiteralContextApplier 
			to: condition arguments first
			on: condition receiver key value
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 19:18:01' prior: 50566043!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		
		^EqualsToLiteralContextApplier 
			to: condition arguments first
			on: condition receiver key value
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:18:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:18:04'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/1/2024 19:18:04'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:18:06'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 19:18:28' prior: 50566102!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		self halt.
		^EqualsToLiteralContextApplier 
			to: condition arguments first
			on: condition receiver key value
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

condition receiver!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 19:18:58' prior: 50566253!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		self halt.
		^EqualsToLiteralContextApplier 
			to: condition arguments first
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 19:19:16' prior: 50566313!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		"self halt."
		^EqualsToLiteralContextApplier 
			to: condition arguments first
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:19:32'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:19:32'!
FAILURE!
!EqualsToLiteralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 5/1/2024 19:20:06' prior: 50565813 overrides: 50560195!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	self halt.
	((self shouldApplyTo:aParseNode) and: [self shouldFilter not]) ifTrue:[
		^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo 
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !

self shouldApplyTo:aParseNode!

self shouldFilter!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 19:21:30' prior: 50566372!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		self halt.
		^EqualsToLiteralContextApplier 
			to: condition arguments first
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 19:23:16' prior: 50566459!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		self halt.
		^EqualsToLiteralContextApplier 
			to: condition arguments first
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!EqualsToLiteralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 5/1/2024 19:23:29' prior: 50566440 overrides: 50560195!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	"self halt."
	((self shouldApplyTo:aParseNode) and: [self shouldFilter not]) ifTrue:[
		^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo 
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 19:23:40' prior: 50566518!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		"self halt."
		^EqualsToLiteralContextApplier 
			to: condition arguments first
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:23:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/1/2024 19:24:02'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/1/2024 19:24:02'!
FAILURE!
!EqualsToLiteralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 5/1/2024 19:24:34' prior: 50566577 overrides: 50560195!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	self halt.
	((self shouldApplyTo:aParseNode) and: [self shouldFilter not]) ifTrue:[
		^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo 
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !

self value!

self literalValue !
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/1/2024 19:26:21' prior: 50565777!
test20ValueEqualsToLiteralIfTrueReturnsLiteralType
	| blockToTestString |
	
	blockToTestString:= '[ v1 + 10. ]'.
	
	self withMessageName: #typeCastEqualsToLiteralIfTrue 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: 5.
	].


	! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 19:27:00' prior: 50566594!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		self halt.
		^EqualsToLiteralContextApplier 
			to: condition arguments first class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!EqualsToLiteralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 5/1/2024 19:27:11' prior: 50566666 overrides: 50560195!
liveTypesFor: aParseNode in:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	
	((self shouldApplyTo:aParseNode) and: [self shouldFilter not]) ifTrue:[
		^self liveTypesCastingObjectFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo 
	] ifFalse: [
		^previousContext liveTypesFor: aParseNode in: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	]

! !

condition arguments first class!

condition arguments first!

condition arguments first!

condition arguments first literalValue class!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 19:29:25' prior: 50566699!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		self halt.
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/1/2024 19:29:40' prior: 50566780!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition

	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:29:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/1/2024 19:29:44'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/1/2024 19:29:44'!
FAILURE!
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/1/2024 19:29:54' prior: 50566685!
test20ValueEqualsToLiteralIfTrueReturnsLiteralType
	| blockToTestString |
	
	blockToTestString:= '[ v1 + 10. ]'.
	
	self withMessageName: #typeCastEqualsToLiteralIfTrue 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


	! !

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/1/2024 19:29:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/1/2024 19:29:58'!
PASSED!
!EqualsToLiteralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 5/1/2024 19:33:15'!
isEquals
	^self shouldFilter not.
! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/1/2024 19:33:18'!
PASSED!

----SNAPSHOT----(1 May 2024 19:34:04) CuisUniversity-6169.image priorSource: 7428033!
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/1/2024 19:34:47' prior: 50559116!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	"types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withNode: methodNodeOwner withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/1/2024 19:34:52' prior: 50567334!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	"types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withNode: methodNodeOwner withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals to literal context' stamp: 'JFGO 5/1/2024 19:35:59' prior: 50565334!
typeCastEqualsToLiteralIfFalse
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 6.
	v1 = 5 ifFalse:[v1 isEmpty.]! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:36:03'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/1/2024 19:36:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:36:03'!
ERROR!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:36:26'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/1/2024 19:36:26'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:36:26'!
ERROR!
!TypesWithContextAppliersTestMethods methodsFor: 'equals to literal context' stamp: 'JFGO 5/1/2024 19:37:07' prior: 50567375!
typeCastEqualsToLiteralIfFalse
	|v1|
	v1 := 6.
	v1:= OrderedCollection new.
	v1 := 'true'.
	
	v1 = 5 ifFalse:[v1 isEmpty.]! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/1/2024 19:37:10'!
PASSED!
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/1/2024 19:37:19' prior: 50567354!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withNode: methodNodeOwner withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !
!ParseNodeTypesDisplay methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/1/2024 19:37:23' prior: 50567875!
calculateTypesWithContext

	"self halt."
	incompleteTypeInfoReasons := Set new.
	types := parseNodeToAnalize typesIn: methodToAnalyze addingIncompleteTypeInfoTo: incompleteTypeInfoReasons.
	"Eliminar el codigo de arriba cuando nos sintamos seguros. Julian"
	
	"types := methodToAnalyze typesOfVariableNamed: parseNodeToAnalize withNode: methodNodeOwner withinBlockNode: contextBlockNode addingIncompleteTypeInfoTo: incompleteTypeInfoReasons."
	incompleteTypeInfoReasons := incompleteTypeInfoReasons asArray .
	
	! !

----SNAPSHOT----(1 May 2024 19:37:42) CuisUniversity-6169.image priorSource: 7541753!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 17:05:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:05:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:05:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/7/2024 17:05:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 17:05:30'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 17:09:18' prior: 50566839!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/7/2024 17:09:22'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 17:09:23'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'equals to literal context' stamp: 'JFGO 5/7/2024 17:12:50'!
typeCastDistinctToLiteral
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 ~= 5 ifTrue:[v1 + 5.] ifFalse:[v1 + 10.]! !
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/7/2024 17:14:11'!
test21ValueDistinctToLiteralCastCorrectlyBothBranches
	
	
		
	self withMessageName: #typeCastDistinctToLiteral 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 10. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


	! !

!testRun: #TypesWithContextAppliersTest #test21ValueDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 17:14:43'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test21ValueDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 17:14:43'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 17:16:56' prior: 50568005!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

!testRun: #TypesWithContextAppliersTest #test21ValueDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 17:16:59'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test21ValueDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 17:17:13'!
ERROR!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 17:17:23'!
isObjectNotEqualOrNotIdenticalToLiteral
	self shouldBeImplemented.! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 17:18:10' prior: 50568327!
isObjectNotEqualOrNotIdenticalToLiteral
	self isNotEqualOrNotIdentical and: [].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 17:18:21' prior: 50568333!
isObjectNotEqualOrNotIdenticalToLiteral
	self isNotEqualOrNotIdentical and: [self isFirstArgumentLiteral].! !

!testRun: #TypesWithContextAppliersTest #test21ValueDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 17:18:24'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test21ValueDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 17:18:28'!
ERROR!

self isNotEqualOrNotIdentical and: [self isFirstArgumentLiteral]!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 17:18:54' prior: 50568339!
isObjectNotEqualOrNotIdenticalToLiteral
	^self isNotEqualOrNotIdentical and: [self isFirstArgumentLiteral].! !

!testRun: #TypesWithContextAppliersTest #test21ValueDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 17:18:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 17:18:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:18:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:18:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/7/2024 17:18:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/7/2024 17:18:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/7/2024 17:18:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/7/2024 17:18:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/7/2024 17:18:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:18:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:18:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:18:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 17:18:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:18:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/7/2024 17:18:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:18:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/7/2024 17:18:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/7/2024 17:18:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/7/2024 17:18:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/7/2024 17:18:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 17:18:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ValueDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 17:18:55'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/7/2024 17:19:55' prior: 50568231!
test21ValueDistinctToLiteralCastCorrectlyBothBranches
	
	
	"ifFalse branch"	
	self withMessageName: #typeCastDistinctToLiteral 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 10. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrueBranch"
	self withMessageName: #typeCastDistinctToLiteral 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 5. ]' 
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: SmallInteger.
	].


	! !
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/7/2024 17:20:06' prior: 50568461!
test21ValueDistinctToLiteralCastCorrectlyBothBranches
	
	
	"ifFalse branch"	
	self withMessageName: #typeCastDistinctToLiteral 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 10. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrueBranch"
	self withMessageName: #typeCastDistinctToLiteral 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 5. ]' 
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: SmallInteger.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


	! !

!testRun: #TypesWithContextAppliersTest #test21ValueDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ValueDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 17:20:13'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/7/2024 17:21:07'!
test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes
	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastEqualsToLiteralIfFalse 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
		self assert: types includes: SmallInteger.
	].


	! !

!methodRemoval: TypesWithContextAppliersTest #test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/7/2024 17:21:07'!
test19ValueEqualsToLiteralIfFalseReturnsPreviousTypes
	| blockToTestString |
	
	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastEqualsToLiteralIfFalse 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
		self assert: types includes: SmallInteger.
	].


	!
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/7/2024 17:21:14'!
test20ObjectEqualsToLiteralIfTrueReturnsLiteralType
	| blockToTestString |
	
	blockToTestString:= '[ v1 + 10. ]'.
	
	self withMessageName: #typeCastEqualsToLiteralIfTrue 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


	! !

!methodRemoval: TypesWithContextAppliersTest #test20ValueEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 17:21:14'!
test20ValueEqualsToLiteralIfTrueReturnsLiteralType
	| blockToTestString |
	
	blockToTestString:= '[ v1 + 10. ]'.
	
	self withMessageName: #typeCastEqualsToLiteralIfTrue 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


	!
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/7/2024 17:21:22'!
test21ObjectDistinctToLiteralCastCorrectlyBothBranches
	
	
	"ifFalse branch"	
	self withMessageName: #typeCastDistinctToLiteral 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 10. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrueBranch"
	self withMessageName: #typeCastDistinctToLiteral 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 5. ]' 
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: SmallInteger.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


	! !

!methodRemoval: TypesWithContextAppliersTest #test21ValueDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 17:21:22'!
test21ValueDistinctToLiteralCastCorrectlyBothBranches
	
	
	"ifFalse branch"	
	self withMessageName: #typeCastDistinctToLiteral 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 10. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrueBranch"
	self withMessageName: #typeCastDistinctToLiteral 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 5. ]' 
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: SmallInteger.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


	!
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/7/2024 17:23:26'!
test22LiteralEqualsToObjectIfTrueReturnsLiteralType
	| blockToTestString |
	
	blockToTestString:= '[ v1 + 10. ]'.
	
	self withMessageName: #typeCastLiteralEqualsToObjectIfTrue 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


	! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals to literal context' stamp: 'JFGO 5/7/2024 17:23:46'!
typeCastLiteralEqualsToObjectIfTrue 
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	5 = v1 ifTrue:[v1 + 10.]! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 17:24:33' prior: 50568252!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].

	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 17:24:51' prior: 50568740!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	self halt.
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals to literal context' stamp: 'JFGO 5/7/2024 17:25:12' prior: 50568732!
typeCastLiteralEqualsToObjectIfTrue 
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	5 == v1 ifTrue:[v1 + 10.]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 17:26:44'!
isLiteralEqualsOrIdenticalToObject
	^self isEqualOrIdentical and: [ self isReceiverLiteralBehavior and: [ self isFirstArgumentLiteral ]]! !

self isEqualOrIdentical!

self isReceiverLiteralBehavior!

receiver isLiteralVariableNode!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 17:29:55' prior: 50568898!
isLiteralEqualsOrIdenticalToObject
	^self isEqualOrIdentical and: [ self isReceiverLiteral and: [ self isFirstArgumentLiteral ]]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 17:30:16'!
isReceiverLiteral
	^receiver isLiteralNode.
		
	! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 17:32:27' prior: 50568909!
isLiteralEqualsOrIdenticalToObject
	^self isEqualOrIdentical and: [ self isReceiverLiteral and: [ self isFirstArgumentLiteral not ]]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 17:33:48' prior: 50568921!
isLiteralEqualsOrIdenticalToObject
	"Third condition is to avoid literal to literal comparison, which doesn't provide any information"
	^self isEqualOrIdentical and: [ self isReceiverLiteral and: [ self isFirstArgumentLiteral not ]]! !

!testRun: #MessageNodeTest #test01hasEquivalentReceiverWithWorksForAnyCombinationOfMessageSend stamp: 'JFGO 5/7/2024 17:33:58'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsNotSelf stamp: 'JFGO 5/7/2024 17:33:58'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsSelfButTheSelectorIsDifferent stamp: 'JFGO 5/7/2024 17:33:58'!
PASSED!

!testRun: #MessageNodeTest #testItSendsTheMessageToSelfWhenTheReceiverIsSelf stamp: 'JFGO 5/7/2024 17:33:58'!
PASSED!

self isFirstArgumentLiteral!

self isReceiverLiteral!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 17:34:23'!
ERROR!

condition arguments first literalValue class!

condition receiver!

condition receiver class!

condition receiver literalValue class!

condition arguments first!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 17:35:55' prior: 50568815!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	self halt.
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 17:36:10' prior: 50568968!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 17:36:11'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/7/2024 17:37:23'!
test23LiteralDistinctToObjectCastCorrectlyBothBranches
	
	
	"ifFalse branch"	
	self withMessageName: #typeCastLiteralDistinctToObject
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 10. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrueBranch"
	self withMessageName: #typeCastLiteralDistinctToObject 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 5. ]' 
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: SmallInteger.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


	! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals to literal context' stamp: 'JFGO 5/7/2024 17:38:26'!
typeCastLiteralDistinctToObject
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	5 ~= v1 ifTrue:[v1 + 5.] ifFalse:[v1 + 10.]! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals to literal context' stamp: 'JFGO 5/7/2024 17:38:52' prior: 50569239!
typeCastLiteralDistinctToObject
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	5 ~~ v1 ifTrue:[v1 + 5.] ifFalse:[v1 + 10.]! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 17:39:24' prior: 50569043!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 17:39:30' prior: 50569256!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 17:39:51'!
isLiteralNotEqualOrNotIdenticalToObject
	^self isNotEqualOrNotIdentical and: [self isFirstArgumentLiteral].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 17:40:32' prior: 50569422!
isLiteralNotEqualOrNotIdenticalToObject
	^self isNotEqualOrNotIdentical and: [ self isReceiverLiteral and: [ self isFirstArgumentLiteral not ]]! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 17:40:52'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/7/2024 17:40:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/7/2024 17:40:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/7/2024 17:40:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/7/2024 17:40:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 17:40:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 17:40:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 17:40:53'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 17:40:53'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/7/2024 17:51:26'!
typeCastClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifTrue: [v1 factorial].! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/7/2024 17:52:08'!
typeCastClassNameEqualsStringClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class name = 'SmallInteger' ifTrue: [v1 factorial].! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/7/2024 17:53:44' prior: 50569546!
typeCastClassNameEqualsStringClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class name = 'SmallInteger' ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/7/2024 17:59:55'!
test16_1TypeCastObjectClassNameCastCorrectly

	| blockToTestString |

	blockToTestString:= '[ v1 isEmpty. ]'.
	
	self withMessageName: #typeCastManyNegations 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: blockToTestString 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/7/2024 18:00:29' prior: 50569564!
test16_1TypeCastObjectClassNameCastCorrectly

		
	self withMessageName: #typeCastClassNameEqualsStringClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 18:00:51' prior: 50569339!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	self halt.
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

condition isObjectClassEqualOrIdenticalToClass!

self isReceiverClassMessageSend!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 18:03:19'!
isObjectClassNameEqualOrIdenticalToClassName! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 18:04:08' prior: 50569680!
isObjectClassNameEqualOrIdenticalToClassName
	^self isEqualOrIdentical and: [ self isReceiverClassMessageSend and: [ self isFirstArgumentLiteralBehavior ]]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 18:04:33'!
isReceiverClassNameMessagesSend
	
	^receiver isMessageNode and: [ receiver isClassMessageSend ]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 18:05:27' prior: 50569685!
isObjectClassNameEqualOrIdenticalToClassName
	^self isEqualOrIdentical and: [ self isReceiverClassNameMessagesSend and: [ self isFirstArgumentLiteralBehavior ]]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 18:09:32'!
isNameMessageSend
	
	^self selectorSymbol = #name! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 18:09:39' prior: 50569693!
isReceiverClassNameMessagesSend
	
	^receiver isMessageNode and: [ receiver isClassMessageSend ]
	^receiver isMessageNode and: [ receiver receiver isMessageNode and: [receiver receiver isClassMessageSend] and: [receiver isNameMessageSend]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 18:09:42' prior: 50569713!
isReceiverClassNameMessagesSend
	
	receiver isMessageNode and: [ receiver receiver isMessageNode and: [receiver receiver isClassMessageSend] and: [receiver isNameMessageSend]].! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 18:10:19' prior: 50569594!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	self halt.
	(condition isObjectClassEqualOrIdenticalToClass or: [condition isObjectClassNameEqualOrIdenticalToClassName]) ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

self isEqualOrIdentical !

self isReceiverClassNameMessagesSend!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 18:10:53' prior: 50569724!
isReceiverClassNameMessagesSend
	
	^receiver isMessageNode and: [ receiver receiver isMessageNode and: [receiver receiver isClassMessageSend] and: [receiver isNameMessageSend]].! !

self isReceiverClassNameMessagesSend!

arguments first isLiteralVariableNode!

arguments first!

self isLiteralNode!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 18:12:05' prior: 50569700!
isObjectClassNameEqualOrIdenticalToClassName
	^self isEqualOrIdentical and: [ self isReceiverClassNameMessagesSend and: [ self isFirstArgumentLiteral ]]! !

!testRun: #MessageNodeTest #test01hasEquivalentReceiverWithWorksForAnyCombinationOfMessageSend stamp: 'JFGO 5/7/2024 18:12:19'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsNotSelf stamp: 'JFGO 5/7/2024 18:12:19'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsSelfButTheSelectorIsDifferent stamp: 'JFGO 5/7/2024 18:12:19'!
PASSED!

!testRun: #MessageNodeTest #testItSendsTheMessageToSelfWhenTheReceiverIsSelf stamp: 'JFGO 5/7/2024 18:12:19'!
PASSED!

condition arguments first key value!

SmallInteger!

5 class name!

5 class name = SmallInteger!

5 class name = SmallInteger name!

5 class name = #SmallInteger!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/7/2024 18:18:47'!
typeCastClassNameEqualsSelectorClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class name = 'SmallInteger' ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !

!methodRemoval: TypesWithContextAppliersTestMethods #typeCastClassNameEqualsStringClassName stamp: 'JFGO 5/7/2024 18:18:47'!
typeCastClassNameEqualsStringClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class name = 'SmallInteger' ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/7/2024 18:18:54' prior: 50569863!
typeCastClassNameEqualsSelectorClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class name = #SmallInteger ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !

#SmallInteger!

Class newFrom: #SmallInteger!

Class newFrom: #SmallInteger!

Class new: #SmallInteger!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/7/2024 18:23:29'!
typeCastObjectClassNameEqualsClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class name = #SmallInteger ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !

!methodRemoval: TypesWithContextAppliersTestMethods #typeCastClassNameEqualsSelectorClassName stamp: 'JFGO 5/7/2024 18:23:29'!
typeCastClassNameEqualsSelectorClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class name = #SmallInteger ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/7/2024 18:23:44' prior: 50569895!
typeCastObjectClassNameEqualsClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class name = SmallInteger name ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/7/2024 18:25:51' prior: 50569580!
test16_1TypeCastObjectClassNameCastCorrectly

		
	self withMessageName: #typeCastObjectClassNameEqualsClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].


! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 18:26:42' prior: 50569833!
isObjectClassNameEqualOrIdenticalToClassName
	^self isEqualOrIdentical and: [ self isReceiverClassNameMessagesSend and: [ self isFirstArgumentNameMessageSend ]]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 18:27:00'!
isFirstArgumentNameMessageSend
	
	^receiver isMessageNode and: [ receiver receiver isMessageNode and: [receiver receiver isClassMessageSend] and: [receiver isNameMessageSend]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 18:28:03' prior: 50569946!
isFirstArgumentNameMessageSend
	
	^arguments first isMessageNode and: [ receiver receiver isMessageNode and: [receiver receiver isClassMessageSend] and: [receiver isNameMessageSend]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 18:30:05' prior: 50569955!
isFirstArgumentNameMessageSend
	
	^arguments first isMessageNode and: [ arguments first receiver isNameMessageSend ].! !

self isReceiverClassNameMessagesSend!

self isFirstArgumentNameMessageSend!

arguments first isMessageNode!

arguments first receiver!

arguments first!

self isNameMessageSend !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 18:33:33' prior: 50569964!
isFirstArgumentNameMessageSend
	
	^arguments first isMessageNode and: [ arguments first isNameMessageSend ].! !

condition arguments first!

condition receiver receiver!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 18:35:12' prior: 50569733!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	self halt.
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first arguments first key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

condition arguments first arguments first key value!

condition arguments first arguments!

condition arguments first!

condition arguments first receiver!

condition arguments first receiver key value!

condition receiver receiver receiver!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 18:36:09' prior: 50569986!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 18:36:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 18:36:12'!
PASSED!

VariableNode named: #SmallInteger!

VariableNode named: #SmallInteger key!

(VariableNode named: #SmallInteger)!

(VariableNode named: #SmallInteger) key!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 18:38:22' prior: 50570086!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
self halt.
	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

condition arguments first receiver!

(LiteralVariableNode named: #SmallInteger)  key value!

(LiteralVariableNode named: #SmallInteger)  key!

(LiteralVariableNode named: #SmallInteger)!

(LiteralVariableNode named: 'SmallInteger')!

(LiteralVariableNode named: 'SmallInteger') key!

(LiteralVariableNode named: #SmallInteger)!

(LiteralVariableNode named: #SmallInteger)!

condition arguments first receiver key value!

(Smalltalk classNamed: #SmallInteger)!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/7/2024 19:00:56'!
typeCastObjectClassNameEqualsClassSymbol
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class name = #SmallInteger ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/7/2024 19:01:32' prior: 50569924!
test16_1TypeCastObjectClassNameCastCorrectly

		
	self withMessageName: #typeCastObjectClassNameEqualsClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: #typeCastObjectClassNameEqualsClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:01:41' prior: 50570191!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 19:01:44'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/7/2024 19:02:34'!
test16_2TypeCastObjectClassSymbolCastCorrectly

		
	self withMessageName: #typeCastObjectClassNameEqualsClassSymbol 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: #typeCastObjectClassNameEqualsClassSymbol 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:06:26'!
isObjectClassNameEqualOrIdenticalToClassSymbol
	^self isEqualOrIdentical and: [ self isReceiverClassNameMessagesSend and: [ self isFirstArgumentNameMessageSend ]]! !

#SmallInteger isSymbol!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:06:53' prior: 50570553!
isObjectClassNameEqualOrIdenticalToClassSymbol
	^self isEqualOrIdentical and: [ self isReceiverClassNameMessagesSend and: [ self isFirstArgumentSymbol ]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:07:10'!
isFirstArgumentSymbol
	^arguments first isSymbol.! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:07:19' prior: 50570330!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:07:23' prior: 50570576!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	self halt.
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

self isReceiverClassNameMessagesSend!

self isFirstArgumentSymbol!

arguments first!

arguments first isLiteralNode!

arguments first key!

arguments first key isSymbol!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:09:23' prior: 50570571!
isFirstArgumentSymbol
	^arguments first isLiteralNode and:[arguments first key isSymbol].! !

condition arguments first key value!

condition arguments first key!

(Smalltalk classNamed: condition arguments first key)!

condition receiver receiver receiver!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:10:28' prior: 50570677!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	self halt.
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:10:29' prior: 50570795!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/7/2024 19:10:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/7/2024 19:10:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 19:11:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 19:11:31'!
PASSED!

(Smalltalk classNamed: #JJ)!

(Smalltalk classNamed: #JJ) isNil!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/7/2024 19:14:31'!
test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext

		
	self withMessageName: #typeCastObjectClassNameEqualsClassSymbol 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: #typeCastObjectClassNameEqualsClassSymbol 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:16:49' prior: 50570896!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	self halt.
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	
	self shouldBeImplemented. "TODO. Coming Soon"
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:18:38' prior: 50571319!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	self halt.
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:18:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:18:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:18:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/7/2024 19:18:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/7/2024 19:18:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/7/2024 19:18:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/7/2024 19:18:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/7/2024 19:18:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:18:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/7/2024 19:18:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:18:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/7/2024 19:18:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/7/2024 19:18:46'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:19:09' prior: 50571420!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	"self halt."
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 19:19:11'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:19:20' prior: 50571577!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	self halt.
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/7/2024 19:28:17'!
typeCastObjectClassNameEqualsUnexistentClassSymbol
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class name = #DONTCREATETHISCLASSPLEASE ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/7/2024 19:29:20' prior: 50571296!
test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext
	
	| assertionBlock |
	assertionBlock:= [:types | 
		self assert:types size equals: 3.
		self assert: types includes: SmallInteger.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].
		
	self withMessageName: #typeCastObjectClassNameEqualsUnexistentClassSymbol 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: assertionBlock.

	self withMessageName: #typeCastObjectClassNameEqualsUnexistentClassSymbol 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: assertionBlock.


! !

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/7/2024 19:29:30'!
ERROR!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/7/2024 19:29:59' prior: 50571965!
typeCastObjectClassNameEqualsUnexistentClassSymbol
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	
	v1 class name = #DONTCREATETHISCLASSPLEASE ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:30:18' prior: 50571863!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	"self halt."
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/7/2024 19:30:25'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/7/2024 19:30:25'!
FAILURE!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:30:51' prior: 50572015!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	self halt.
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:32:05' prior: 50570563!
isObjectClassNameEqualOrIdenticalToClassSymbol
	^self isEqualOrIdentical and: [ self isReceiverClassNameMessagesSend and: [ self isFirstArgumentAClassNameSymbol ]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:33:20'!
isFirstArgumentAClassNameSymbol
	^self isFirstArgumentSymbol and:[ (Smalltalk classNamed: arguments first) isNotNil ]! !

(Smalltalk classNamed: arguments first)!

(Smalltalk classNamed: arguments first key value)!

(Smalltalk classNamed: arguments first key value) isNotNil!

(Smalltalk classNamed: arguments first key value) ~= nil!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:34:48' prior: 50572236!
isFirstArgumentAClassNameSymbol
	^self isFirstArgumentSymbol and:[ (Smalltalk classNamed: arguments first key value) ~= nil ]! !

condition arguments first literalValue class!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:36:20' prior: 50572126!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	"self halt."
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/7/2024 19:36:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/7/2024 19:36:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 19:36:38'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:37:29' prior: 50572259!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	self halt.
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:39:10' prior: 50572554!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/7/2024 19:40:54'!
typeCastClassNameEqualsObjectClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	SmallInteger name = v1 class name ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/7/2024 19:41:40'!
test16_4TypeCastClassNameToObjectClassNameCastCorrectly

		
	self withMessageName: #typeCastClassNameEqualsObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: #typeCastClassNameEqualsObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:42:33' prior: 50572656!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	self halt.
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:43:21'!
isClassNameEqualOrIdenticalToObjectClassName
	^self isEqualOrIdentical and: [ self FirstArgumentClassNameMessagesSend and: [ self isReceiverNameMessageSend ]]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:44:03'!
isFirstArgumentClassNameMessagesSend
	
	^arguments first isMessageNode and: [ arguments first receiver isMessageNode and: [arguments first receiver isClassMessageSend] and: [arguments first isNameMessageSend]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:44:28'!
isReceiverNameMessageSend
	
	^receiver isMessageNode and: [ receiver isNameMessageSend ].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:45:43' prior: 50572899!
isClassNameEqualOrIdenticalToObjectClassName
	^self isEqualOrIdentical and: [ self isFirstArgumentClassNameMessagesSend and: [ self isReceiverNameMessageSend ]]! !

arguments first receiver isMessageNode!

arguments first receiver isClassMessageSend!

arguments first isNameMessageSend!

self isReceiverNameMessageSend!

condition receiver receiver !

condition receiver receiver key value!

condition arguments first receiver!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:47:24' prior: 50572789!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	self halt.
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:47:27' prior: 50572940!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:47:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:47:31'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/7/2024 19:49:22'!
typeCastClassSymbolEqualsObjectClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	#SmallInteger = v1 class name ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/7/2024 19:50:39'!
test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly

		
	self withMessageName: #typeCastClassSymbolEqualsObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: #typeCastClassSymbolEqualsObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:52:18' prior: 50573051!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	self halt.
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:53:19'!
isClassSymbolEqualOrIdenticalToObjectClassName
	^self isEqualOrIdentical and: [ self isFirstArgumentClassNameMessagesSend and: [ self isReceiverAClassNameSymbol ]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:53:51'!
isReceiverAClassNameSymbol
	^self isReceiverSymbol and:[ (Smalltalk classNamed: receiver) ~= nil ]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:54:18'!
isReceiverSymbol
	^receiver isLiteralNode and:[arguments first key isSymbol].! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:55:19' prior: 50573202!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	self halt.
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver receiver receiver)
			on: condition arguments first key
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !

self isFirstArgumentClassNameMessagesSend!

self isReceiverAClassNameSymbol!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:56:21' prior: 50573335!
isReceiverSymbol
	^receiver isLiteralNode and:[receiver key isSymbol].! !

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:56:27'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:56:40'!
ERROR!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/7/2024 19:56:48' prior: 50573329!
isReceiverAClassNameSymbol
	^self isReceiverSymbol and:[ (Smalltalk classNamed: receiver key) ~= nil ]! !

condition receiver receiver!

condition receiver key value!

condition arguments first!

condition arguments first receiver receiver!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:57:51' prior: 50573341!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	self halt.
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:57:54' prior: 50573489!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/7/2024 19:58:04'!
PASSED!

----SNAPSHOT----(7 May 2024 20:00:01) CuisUniversity-6169.image priorSource: 7560419!

----SNAPSHOT----(7 May 2024 20:20:18) CuisUniversity-6169.image priorSource: 7750506!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 18:26:02' prior: 50573609!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 18:26:05' prior: 50573860!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].



	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/8/2024 18:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/8/2024 18:26:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 18:26:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 18:26:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/8/2024 18:26:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/8/2024 18:26:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/8/2024 18:26:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 18:26:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 18:26:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 18:26:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 18:26:09'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/7/2024 19:57:54' prior: 50573980!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 18:47:48' prior: 50574293!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 18:53:03' prior: 50574413!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].


	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 19:05:00' prior: 50574533!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingClassWithObjectClass ifTrue:[
		^self contextWhenComparingClassWithObjectClass.
	].
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].


	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 19:06:21' prior: 50574653!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].


	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 19:06:51'!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	condition isObjectClassEqualOrIdenticalToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isClassEqualOrIdenticalToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	condition isObjectClassNotEqualOrNotIdenticalToClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	condition isClassNotEqualOrNotIdenticalToObjectClass ifTrue: [ 
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	 ].

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 19:07:09' prior: 50574776!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	


	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:08:12'!
isComparingClassWithObjectClass
	^true.! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:34:49' prior: 50575031!
isComparingClassWithObjectClass
	^true! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:36:59' prior: 50575036!
isComparingClassWithObjectClass
	^#() includes: self selectorSymbol! !

#(#== #= #~= #~~) includes: #=!

#(#== #= #~= #~~) includes: #<!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:39:04' prior: 50575041!
isComparingClassWithObjectClass
	^#(#== #= #~= #~~) includes: self selectorSymbol! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:39:29'!
isAnyEqualityComparison
	^#(#== #= #~= #~~) includes: self selectorSymbol! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:42:26' prior: 50575049!
isComparingClassWithObjectClass
	| c1 c2 |
	c1:= self isReceiverClassMessageSend and: [self isFirstArgumentLiteralBehavior ].
	c2:= self isFirstArgumentClassMessageSend and: [self isReceiverLiteralBehavior ].
	^self isAnyEqualityComparison and: [ c1 or: [c2]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:45:14'!
isComparingEqualityForClassWithObjectClass
	| c1 c2 |
	c1:= self isReceiverClassMessageSend and: [self isFirstArgumentLiteralBehavior ].
	c2:= self isFirstArgumentClassMessageSend and: [self isReceiverLiteralBehavior ].
	^self isAnyEqualityComparison and: [ c1 or: [c2]].! !

!methodRemoval: MessageNode #isComparingClassWithObjectClass stamp: 'JFGO 5/8/2024 19:45:14'!
isComparingClassWithObjectClass
	| c1 c2 |
	c1:= self isReceiverClassMessageSend and: [self isFirstArgumentLiteralBehavior ].
	c2:= self isFirstArgumentClassMessageSend and: [self isReceiverLiteralBehavior ].
	^self isAnyEqualityComparison and: [ c1 or: [c2]].!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 19:45:22' prior: 50574939!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	


	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 19:45:36' prior: 50575095!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	self halt.
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	


	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !

self isAnyEqualityComparison!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:52:22' prior: 50575072!
isComparingEqualityForClassWithObjectClass
	| objectClassLeftClassRight c2 |
	objectClassLeftClassRight:= self isReceiverClassMessageSend and: [self isFirstArgumentLiteralBehavior ].
	c2:= self isFirstArgumentClassMessageSend and: [self isReceiverLiteralBehavior ].
	^self isAnyEqualityComparison and: [ objectClassLeftClassRight or: [c2]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:52:33' prior: 50575282!
isComparingEqualityForClassWithObjectClass
	| objectClassLeftClassRight objectClassRightClassLeft |
	objectClassLeftClassRight:= self isReceiverClassMessageSend and: [self isFirstArgumentLiteralBehavior ].
	objectClassRightClassLeft:= self isFirstArgumentClassMessageSend and: [self isReceiverLiteralBehavior ].
	^self isAnyEqualityComparison and: [ objectClassLeftClassRight or: [objectClassRightClassLeft]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:52:55' prior: 50575296!
isComparingEqualityForClassWithObjectClass
	"TODO. No me terminan de convencer los nombres"
	| objectClassLeftClassRight objectClassRightClassLeft |
	objectClassLeftClassRight:= self isReceiverClassMessageSend and: [self isFirstArgumentLiteralBehavior ].
	objectClassRightClassLeft:= self isFirstArgumentClassMessageSend and: [self isReceiverLiteralBehavior ].
	^self isAnyEqualityComparison and: [ objectClassLeftClassRight or: [objectClassRightClassLeft]].! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 19:53:59' prior: 50575188!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	"self halt."
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	


	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 19:54:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 19:54:05'!
PASSED!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:56:50'!
isObjectClassComparedToClass

	^ self isReceiverClassMessageSend and: [self isFirstArgumentLiteralBehavior ]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:56:50' prior: 50575312!
isComparingEqualityForClassWithObjectClass
	"TODO. No me terminan de convencer los nombres"
	| objectClassLeftClassRight objectClassRightClassLeft |
	objectClassLeftClassRight:= self isObjectClassComparedToClass.
	objectClassRightClassLeft:= self isFirstArgumentClassMessageSend and: [self isReceiverLiteralBehavior ].
	^self isAnyEqualityComparison and: [ objectClassLeftClassRight or: [objectClassRightClassLeft]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:57:06'!
isClassComparedToObjectClass

	^ self isFirstArgumentClassMessageSend and: [self isReceiverLiteralBehavior ]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:57:06' prior: 50575623!
isComparingEqualityForClassWithObjectClass
	"TODO. No me terminan de convencer los nombres"
	| objectClassLeftClassRight objectClassRightClassLeft |
	objectClassLeftClassRight:= self isObjectClassComparedToClass.
	objectClassRightClassLeft:= self isClassComparedToObjectClass.
	^self isAnyEqualityComparison and: [ objectClassLeftClassRight or: [objectClassRightClassLeft]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/8/2024 19:57:25' prior: 50575646!
isComparingEqualityForClassWithObjectClass
	^self isAnyEqualityComparison and: [ self isObjectClassComparedToClass or: [self isClassComparedToObjectClass]].! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:07:57' prior: 50574900!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType |
	shouldFilterType:= blockIsOnRejectingCondition eqv: [condition isEqualOrIdentical ].
	
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
		
	condition isClassComparedToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].

! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:08:01'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:08:01'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/8/2024 20:08:01'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/8/2024 20:08:01'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/8/2024 20:08:01'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:08:01'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:08:01'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:08:01'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/8/2024 20:08:01'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:08:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:08:06'!
FAILURE!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:08:31' prior: 50575670!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType |
	shouldFilterType:= blockIsOnRejectingCondition eqv: [condition isEqualOrIdentical ].
	self halt.
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
		
	condition isClassComparedToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].

! !

condition isEqualOrIdentical!

condition isEqualOrIdentical!

true eqv:[true]!

true eqv: true!

true eqv: false!

false eqv: false!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:15:52' prior: 50575822!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first key value
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
		
	condition isClassComparedToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: condition receiver key value
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].

! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/8/2024 20:16:00'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/8/2024 20:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/8/2024 20:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:16:01'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:26:01' prior: 50575852!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	objectToCast:= condition isObjectClassComparedToClass ifTrue: [condition arguments first key value] ifFalse:[condition receiver key value].
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: objectToCast
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
		
	condition isClassComparedToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: objectToCast
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:26:04' prior: 50576070!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	objectToCast:= condition isObjectClassComparedToClass ifTrue: [condition arguments first key value] ifFalse:[condition receiver key value].
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: objectToCast
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
		
	condition isClassComparedToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to:  objectToCast
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:26:06' prior: 50576099!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	objectToCast:= condition isObjectClassComparedToClass ifTrue: [condition arguments first key value] ifFalse:[condition receiver key value].
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: objectToCast
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
		
	condition isClassComparedToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: objectToCast
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].

! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:26:08'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:26:09'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:26:49' prior: 50576128!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	objectToCast:= condition isObjectClassComparedToClass ifTrue: [condition arguments first key value] ifFalse:[condition receiver key value].
	
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: objectToCast
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
		
	condition isClassComparedToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: objectToCast
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:27:20' prior: 50576350!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	typeToApplyOnCast:= condition isObjectClassComparedToClass ifTrue: [condition arguments first key value] ifFalse:[condition receiver key value].
	
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
		
	condition isClassComparedToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:28:15' prior: 50576379!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	typeToApplyOnCast:= condition isObjectClassComparedToClass ifTrue: [condition arguments first key value] ifFalse:[condition receiver key value].
	objectToCast := condition isObjectClassComparedToClass ifTrue: [condition receiver receiver] ifFalse:[condition arguments first receiver].
	
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: objectToCast
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
		
	condition isClassComparedToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:28:21' prior: 50576408!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	typeToApplyOnCast:= condition isObjectClassComparedToClass ifTrue: [condition arguments first key value] ifFalse:[condition receiver key value].
	objectToCast := condition isObjectClassComparedToClass ifTrue: [condition receiver receiver] ifFalse:[condition arguments first receiver].
	
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: objectToCast
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
	

! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:28:23'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:28:23'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:28:24'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:28:24'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:28:24'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:28:24'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:28:15' prior: 50576442!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	typeToApplyOnCast:= condition isObjectClassComparedToClass ifTrue: [condition arguments first key value] ifFalse:[condition receiver key value].
	objectToCast := condition isObjectClassComparedToClass ifTrue: [condition receiver receiver] ifFalse:[condition arguments first receiver].
	
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: objectToCast
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
		
	condition isClassComparedToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:27:20' prior: 50576662!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	typeToApplyOnCast:= condition isObjectClassComparedToClass ifTrue: [condition arguments first key value] ifFalse:[condition receiver key value].
	
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
		
	condition isClassComparedToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:29:10' prior: 50576696!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	typeToApplyOnCast:= condition isObjectClassComparedToClass ifTrue: [condition arguments first key value] ifFalse:[condition receiver key value].
	objectToCast := condition isObjectClassComparedToClass ifTrue: [condition receiver receiver] ifFalse:[condition arguments first receiver].
	
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: condition receiver receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
		
	condition isClassComparedToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].

! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/8/2024 20:29:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/8/2024 20:29:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/8/2024 20:29:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/8/2024 20:29:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/8/2024 20:29:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/8/2024 20:29:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/8/2024 20:29:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/8/2024 20:29:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/8/2024 20:29:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/8/2024 20:29:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/8/2024 20:29:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/8/2024 20:29:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:29:15'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:29:16'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:29:42' prior: 50576725!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	typeToApplyOnCast:= condition isObjectClassComparedToClass ifTrue: [condition arguments first key value] ifFalse:[condition receiver key value].
	objectToCast := condition isObjectClassComparedToClass ifTrue: [condition receiver receiver] ifFalse:[condition arguments first receiver].
	
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: objectToCast
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
		
	condition isClassComparedToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: condition arguments first receiver
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].

! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/8/2024 20:29:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/8/2024 20:29:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/8/2024 20:29:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/8/2024 20:29:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/8/2024 20:29:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/8/2024 20:29:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/8/2024 20:29:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/8/2024 20:29:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/8/2024 20:29:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/8/2024 20:29:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:29:46'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:30:04' prior: 50576952!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	typeToApplyOnCast:= condition isObjectClassComparedToClass ifTrue: [condition arguments first key value] ifFalse:[condition receiver key value].
	objectToCast := condition isObjectClassComparedToClass ifTrue: [condition receiver receiver] ifFalse:[condition arguments first receiver].
	
	condition isObjectClassComparedToClass ifTrue:[
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: objectToCast
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].
		
	condition isClassComparedToObjectClass ifTrue: [
		^EqualsClassTypeContextApplier 
			to: typeToApplyOnCast
			on: objectToCast
			shouldFilterType: shouldFilterType
			withPreviousContext: self.
	].

! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/8/2024 20:30:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/8/2024 20:30:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/8/2024 20:30:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/8/2024 20:30:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/8/2024 20:30:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/8/2024 20:30:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/8/2024 20:30:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/8/2024 20:30:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/8/2024 20:30:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/8/2024 20:30:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:30:07'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:30:25' prior: 50577179!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	typeToApplyOnCast:= condition isObjectClassComparedToClass ifTrue: [condition arguments first key value] ifFalse:[condition receiver key value].
	objectToCast := condition isObjectClassComparedToClass ifTrue: [condition receiver receiver] ifFalse:[condition arguments first receiver].
	
	
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: shouldFilterType
		withPreviousContext: self.
	
	

! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/8/2024 20:30:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/8/2024 20:30:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/8/2024 20:30:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/8/2024 20:30:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/8/2024 20:30:28'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/8/2024 20:34:40' prior: 50575330!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	


	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition arguments first receiver key value
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: condition receiver receiver key value
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !

----SNAPSHOT----(8 May 2024 20:40:35) CuisUniversity-6169.image priorSource: 7750593!

----SNAPSHOT----(8 May 2024 20:40:51) CuisUniversity-6169.image priorSource: 7874058!

----QUIT----(10 May 2024 10:15:57) CuisUniversity-6169.image priorSource: 7874145!

----STARTUP---- (11 May 2024 13:38:21) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 13:39:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 13:39:05'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 13:41:45' prior: 50577405!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	condition isObjectClassComparedToClass ifTrue: [
		typeToApplyOnCast:= condition arguments first key value.
		objectToCast:= condition receiver receiver.
	] ifFalse:[
		typeToApplyOnCast:= condition receiver key value.
		objectToCast:= condition arguments first receiver.
	].
	
	
	
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: shouldFilterType
		withPreviousContext: self.
	
	

! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 13:41:48'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 13:42:00' prior: 50577922!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	
	condition isObjectClassComparedToClass ifTrue: [
		typeToApplyOnCast:= condition arguments first key value.
		objectToCast:= condition receiver receiver.
	] ifFalse:[
		typeToApplyOnCast:= condition receiver key value.
		objectToCast:= condition arguments first receiver.
	].
	
	
	
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: shouldFilterType
		withPreviousContext: self.
	
	

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 13:42:02' prior: 50578141!
contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	
	condition isObjectClassComparedToClass ifTrue: [
		typeToApplyOnCast:= condition arguments first key value.
		objectToCast:= condition receiver receiver.
	] ifFalse:[
		typeToApplyOnCast:= condition receiver key value.
		objectToCast:= condition arguments first receiver.
	].
	
		
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: shouldFilterType
		withPreviousContext: self.
	
	

! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 13:43:34' prior: 50577623!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
			^EqualsClassTypeContextApplier 
				to: condition arguments first receiver key value
				on: condition receiver receiver receiver
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].
		
		condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
			^EqualsClassTypeContextApplier 
				to: condition receiver receiver key value
				on: condition arguments first receiver receiver
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].
	].

	
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 13:44:09'!
isComparingEqualityForClassNameWithObjectClassName
	^self isAnyEqualityComparison and: [ self isObjectClassComparedToClass or: [self isClassComparedToObjectClass]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 13:46:32' prior: 50578286!
isComparingEqualityForClassNameWithObjectClassName
	^self isAnyEqualityComparison and: [ self isObjectClassNameComparedToClassName or: [self isClassNameComparedToObjectClassName]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 13:46:48'!
isObjectClassNameComparedToClassName

	^ self isReceiverClassMessageSend and: [self isFirstArgumentLiteralBehavior ]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 13:47:16' prior: 50578304!
isObjectClassNameComparedToClassName

	^ self isReceiverClassNameMessagesSend and: [self isFirstArgumentNameMessageSend ]
	! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 13:47:59'!
isClassNameComparedToObjectClassName

	^ self isFirstArgumentClassMessageSend and: [self isReceiverLiteralBehavior ]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 13:48:24' prior: 50578318!
isClassNameComparedToObjectClassName

	^ self isFirstArgumentClassNameMessagesSend and: [self isReceiverNameMessageSend ]
! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 13:48:59'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 13:49:53' prior: 50578191!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].

	
	
	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition arguments first key)
			on: condition receiver receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
		^EqualsClassTypeContextApplier 
			to: (Smalltalk classNamed: condition receiver key value)
			on: condition arguments first receiver receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 13:50:23'!
contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition
	! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 13:50:39' prior: 50578608!
contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition
	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
			^EqualsClassTypeContextApplier 
				to: condition arguments first receiver key value
				on: condition receiver receiver receiver
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].
		
		condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
			^EqualsClassTypeContextApplier 
				to: condition receiver receiver key value
				on: condition arguments first receiver receiver
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 13:50:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 13:50:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 13:50:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 13:50:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 13:50:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 13:50:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 13:50:42'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 13:50:52' prior: 50578615!
contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition

	
	condition isObjectClassNameEqualOrIdenticalToClassName ifTrue:[
			^EqualsClassTypeContextApplier 
				to: condition arguments first receiver key value
				on: condition receiver receiver receiver
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].
		
		condition isClassNameEqualOrIdenticalToObjectClassName ifTrue:[
			^EqualsClassTypeContextApplier 
				to: condition receiver receiver key value
				on: condition arguments first receiver receiver
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 13:52:35' prior: 50578834!
contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition

	| objectToCast typeToApplyOnCast |
	condition isObjectClassNameComparedToClassName ifTrue: [
		typeToApplyOnCast:= condition arguments first receiver key value.
		objectToCast:= condition receiver receiver receiver
	] ifFalse:[
		typeToApplyOnCast:= condition receiver receiver key value.
		objectToCast:= condition arguments first receiver receiver.
	].
	
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: blockIsOnRejectingCondition
		withPreviousContext: self.
		
		
		! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 13:52:41'!
PASSED!

!methodRemoval: MessageNode #isObjectClassNameEqualOrIdenticalToClassName stamp: 'JFGO 5/11/2024 13:53:10'!
isObjectClassNameEqualOrIdenticalToClassName
	^self isEqualOrIdentical and: [ self isReceiverClassNameMessagesSend and: [ self isFirstArgumentNameMessageSend ]]!

!methodRemoval: MessageNode #isClassNameEqualOrIdenticalToObjectClassName stamp: 'JFGO 5/11/2024 13:53:33'!
isClassNameEqualOrIdenticalToObjectClassName
	^self isEqualOrIdentical and: [ self isFirstArgumentClassNameMessagesSend and: [ self isReceiverNameMessageSend ]]!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 13:53:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 13:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 13:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 13:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 13:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 13:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 13:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 13:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 13:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 13:53:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 13:53:45'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 13:55:24' prior: 50578527!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		"^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition ."
		condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
			^EqualsClassTypeContextApplier 
				to: (Smalltalk classNamed: condition arguments first key)
				on: condition receiver receiver receiver
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].
		
		condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
			^EqualsClassTypeContextApplier 
				to: (Smalltalk classNamed: condition receiver key value)
				on: condition arguments first receiver receiver
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].
	].
	
	
	
	
	
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 13:55:41'!
isComparingEqualityForClassSymbolWithObjectClassName
	^self isAnyEqualityComparison and: [ self isObjectClassNameComparedToClassName or: [self isClassNameComparedToObjectClassName]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 13:56:12' prior: 50579376!
isComparingEqualityForClassSymbolWithObjectClassName
	^self isAnyEqualityComparison and: [ self isObjectClassNameComparedToClassSymbol or: [self isClassSymbolComparedToObjectClassName]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 13:56:25'!
isClassSymbolComparedToObjectClassName

	^ self isFirstArgumentClassNameMessagesSend and: [self isReceiverNameMessageSend ]
! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 13:56:52' prior: 50579394!
isClassSymbolComparedToObjectClassName

	^ self isFirstArgumentClassNameMessagesSend and: [self isReceiverAClassNameSymbol ]
	
! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 13:57:10'!
isObjectClassNameComparedToClassSymbol

	^ self isReceiverClassNameMessagesSend and: [self isFirstArgumentNameMessageSend ]
	! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 13:57:30' prior: 50579409!
isObjectClassNameComparedToClassSymbol

	^ self isReceiverClassNameMessagesSend and: [self isFirstArgumentAClassNameSymbol ]
	
	! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 13:58:09'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 13:58:38' prior: 50579288!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	
	
	
	
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].
	
	condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
		^EqualsToLiteralContextApplier 
			to: condition arguments first literalValue class
			on: condition receiver
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.	
	].
	
	condition isLiteralEqualsOrIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition
			withPreviousContext: self.
	].

	condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
		^EqualsToLiteralContextApplier 
			to:  condition receiver literalValue class
			on: condition arguments first
			shouldFilterType: blockIsOnRejectingCondition not
			withPreviousContext: self.
	].
	
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 13:59:05'!
contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition


	condition isObjectClassNameEqualOrIdenticalToClassSymbol ifTrue:[
			^EqualsClassTypeContextApplier 
				to: (Smalltalk classNamed: condition arguments first key)
				on: condition receiver receiver receiver
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].
		
		condition isClassSymbolEqualOrIdenticalToObjectClassName ifTrue:[
			^EqualsClassTypeContextApplier 
				to: (Smalltalk classNamed: condition receiver key value)
				on: condition arguments first receiver receiver
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 14:00:25' prior: 50579688!
contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition

	| objectToCast typeToApplyOnCast |
	condition isObjectClassNameComparedToClassSymbol ifTrue: [
		typeToApplyOnCast:= (Smalltalk classNamed: condition arguments first key).
		objectToCast:= condition receiver receiver receiver.
	] ifFalse:[
		typeToApplyOnCast:= (Smalltalk classNamed: condition receiver key value).
		objectToCast:= condition arguments first receiver receiver.
	].
	
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: blockIsOnRejectingCondition
		withPreviousContext: self.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:00:31'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:00:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:00:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:00:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:00:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:00:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:00:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:00:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:00:32'!
PASSED!

!methodRemoval: MessageNode #isClassSymbolEqualOrIdenticalToObjectClassName stamp: 'JFGO 5/11/2024 14:00:46'!
isClassSymbolEqualOrIdenticalToObjectClassName
	^self isEqualOrIdentical and: [ self isFirstArgumentClassNameMessagesSend and: [ self isReceiverAClassNameSymbol ]].!

!methodRemoval: MessageNode #isObjectClassNameEqualOrIdenticalToClassSymbol stamp: 'JFGO 5/11/2024 14:00:58'!
isObjectClassNameEqualOrIdenticalToClassSymbol
	^self isEqualOrIdentical and: [ self isReceiverClassNameMessagesSend and: [ self isFirstArgumentAClassNameSymbol ]].!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:01:03'!
PASSED!

!testRun: #MessageNodeTest #test01hasEquivalentReceiverWithWorksForAnyCombinationOfMessageSend stamp: 'JFGO 5/11/2024 14:04:01'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsNotSelf stamp: 'JFGO 5/11/2024 14:04:01'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsSelfButTheSelectorIsDifferent stamp: 'JFGO 5/11/2024 14:04:01'!
PASSED!

!testRun: #MessageNodeTest #testItSendsTheMessageToSelfWhenTheReceiverIsSelf stamp: 'JFGO 5/11/2024 14:04:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:04:04'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 14:06:47' prior: 50579619!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		"^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition."
		condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
			^EqualsToLiteralContextApplier 
				to: condition arguments first literalValue class
				on: condition receiver
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].
		
		condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
			^EqualsToLiteralContextApplier 
				to: condition arguments first literalValue class
				on: condition receiver
				shouldFilterType: blockIsOnRejectingCondition not
				withPreviousContext: self.	
		].
		
		condition isLiteralEqualsOrIdenticalToObject ifTrue:[
			^EqualsToLiteralContextApplier 
				to:  condition receiver literalValue class
				on: condition arguments first
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].

		condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
			^EqualsToLiteralContextApplier 
				to:  condition receiver literalValue class
				on: condition arguments first
				shouldFilterType: blockIsOnRejectingCondition not
				withPreviousContext: self.
		].
		
	].
	
		
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 14:07:07'!
isComparingEqualityForLiteralWithObject
	^self isAnyEqualityComparison and: [ self isObjectClassComparedToClass or: [self isClassComparedToObjectClass]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 14:07:29' prior: 50580431!
isComparingEqualityForLiteralWithObject
	^self isAnyEqualityComparison and: [ self isObjectComparedToLiteral or: [self isLiteralComparedToObject]].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 14:07:52'!
isObjectComparedToLiteral

	^ self isReceiverClassMessageSend and: [self isFirstArgumentLiteralBehavior ]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 14:08:20' prior: 50580448!
isObjectComparedToLiteral

	^ self isFirstArgumentLiteral.! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 14:08:36'!
isLiteralComparedToObject

	^ self isFirstArgumentClassMessageSend and: [self isReceiverLiteralBehavior ]! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 14:09:12' prior: 50580460!
isLiteralComparedToObject

	^ self isReceiverLiteral and: [ self isFirstArgumentLiteral not ].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 14:09:29' prior: 50580467!
isLiteralComparedToObject
	"Third condition is to avoid literal to literal comparison, which doesn't provide any information"
	^ self isReceiverLiteral and: [ self isFirstArgumentLiteral not ].! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 5/11/2024 14:09:35' prior: 50580474!
isLiteralComparedToObject
	"Second condition is to avoid literal to literal comparison, which doesn't provide any information"
	^ self isReceiverLiteral and: [ self isFirstArgumentLiteral not ].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 14:09:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 14:09:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 14:09:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 14:09:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 14:09:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 14:09:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 14:09:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 14:09:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 14:09:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 14:09:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 14:09:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 14:09:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:09:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:09:50'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 14:10:32' prior: 50580355!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
		
	^GeneralContextApplier new.
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 14:10:53'!
contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition
	
	
	
	condition isObjectEqualsOrIdenticalToLiteral ifTrue:[
			^EqualsToLiteralContextApplier 
				to: condition arguments first literalValue class
				on: condition receiver
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].
		
		condition isObjectNotEqualOrNotIdenticalToLiteral ifTrue:[
			^EqualsToLiteralContextApplier 
				to: condition arguments first literalValue class
				on: condition receiver
				shouldFilterType: blockIsOnRejectingCondition not
				withPreviousContext: self.	
		].
		
		condition isLiteralEqualsOrIdenticalToObject ifTrue:[
			^EqualsToLiteralContextApplier 
				to:  condition receiver literalValue class
				on: condition arguments first
				shouldFilterType: blockIsOnRejectingCondition
				withPreviousContext: self.
		].

		condition isLiteralNotEqualOrNotIdenticalToObject ifTrue:[
			^EqualsToLiteralContextApplier 
				to:  condition receiver literalValue class
				on: condition arguments first
				shouldFilterType: blockIsOnRejectingCondition not
				withPreviousContext: self.
		].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:10:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:10:57'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 14:12:30' prior: 50580730!
contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	
	condition isObjectComparedToLiteral ifTrue: [
		typeToApplyOnCast:= condition arguments first literalValue class.
		objectToCast:= condition receiver.
	] ifFalse:[
		typeToApplyOnCast:= condition receiver literalValue class.
		objectToCast:= condition arguments first.
	].
	
		
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: shouldFilterType
		withPreviousContext: self.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:12:35'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:12:35'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:12:35'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:12:35'!
FAILURE!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 14:14:00' prior: 50580964!
contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition
	
	| shouldFilterType typeToApplyOnCast objectToCast |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	
	condition isObjectComparedToLiteral ifTrue: [
		typeToApplyOnCast:= condition arguments first literalValue class.
		objectToCast:= condition receiver.
	] ifFalse:[
		typeToApplyOnCast:= condition receiver literalValue class.
		objectToCast:= condition arguments first.
	].
	
		
	^EqualsToLiteralContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: shouldFilterType
		withPreviousContext: self.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:14:06'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 14:14:26' prior: 50580688!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	self shouldBeImplemented .	
	"^GeneralContextApplier new."
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"It could be a 'bad' if. test16_3"! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:14:29'!
PASSED!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 14:15:18' prior: 50581402!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	self shouldBeImplemented .	
	"^GeneralContextApplier new."
	"TODO. When implementation finish, it shouldn't get to this point in the code. Think about calling self shouldntHappen or return a GeneralContextApplier"
	"In here, we know its an if. So this point should be truly unreachable"
	"could it be a 'bad' if. see test16_3 for inspiration"! !

!methodRemoval: MessageNode #isLiteralEqualsOrIdenticalToObject stamp: 'JFGO 5/11/2024 14:15:48'!
isLiteralEqualsOrIdenticalToObject
	"Third condition is to avoid literal to literal comparison, which doesn't provide any information"
	^self isEqualOrIdentical and: [ self isReceiverLiteral and: [ self isFirstArgumentLiteral not ]]!

!methodRemoval: MessageNode #isLiteralNotEqualOrNotIdenticalToObject stamp: 'JFGO 5/11/2024 14:15:55'!
isLiteralNotEqualOrNotIdenticalToObject
	^self isNotEqualOrNotIdentical and: [ self isReceiverLiteral and: [ self isFirstArgumentLiteral not ]]!

!methodRemoval: MessageNode #isObjectEqualsOrIdenticalToLiteral stamp: 'JFGO 5/11/2024 14:16:04'!
isObjectEqualsOrIdenticalToLiteral
	
	^self isEqualOrIdentical and: [ self isFirstArgumentLiteral ].
		
	!

!methodRemoval: MessageNode #isObjectNotEqualOrNotIdenticalToLiteral stamp: 'JFGO 5/11/2024 14:16:11'!
isObjectNotEqualOrNotIdenticalToLiteral
	^self isNotEqualOrNotIdentical and: [self isFirstArgumentLiteral].!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:17:18'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:17:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:17:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:17:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:17:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:17:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:17:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:17:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:17:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:17:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:17:19'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:17:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 14:19:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:19:12'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/11/2024 14:45:05'!
typeCastClassNameDistinctObjectClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	SmallInteger name = v1 class name ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/11/2024 14:45:10' prior: 50582104!
typeCastClassNameDistinctObjectClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	SmallInteger name ~= v1 class name ifTrue: [v1 factorial] ifFalse:[v1 isEmpty]! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/11/2024 14:45:45'!
test16_5TypeCastClassNameToObjectClassNameCastCorrectly

		
	self withMessageName: #typeCastClassNameDistinctObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].

	self withMessageName: #typeCastClassNameEqualsObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/11/2024 14:46:09'!
test16_6TypeCastClassNameToObjectClassNameCastCorrectly

		
	self withMessageName: #typeCastClassNameDistinctObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].

	self withMessageName: #typeCastClassNameEqualsObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!methodRemoval: TypesWithContextAppliersTest #test16_5TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:46:09'!
test16_5TypeCastClassNameToObjectClassNameCastCorrectly

		
	self withMessageName: #typeCastClassNameDistinctObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].

	self withMessageName: #typeCastClassNameEqualsObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/11/2024 14:46:22' prior: 50582144!
test16_6TypeCastClassNameToObjectClassNameCastCorrectly

		
	self withMessageName: #typeCastClassNameDistinctObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].

	self withMessageName: #typeCastClassNameDistinctObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/11/2024 14:46:32' prior: 50582187!
test16_6TypeCastClassNameToObjectClassNameCastCorrectly

		
	self withMessageName: #typeCastClassNameDistinctObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].

	self withMessageName: #typeCastClassNameDistinctObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].


! !

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:46:35'!
ERROR!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:46:35'!
ERROR!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/11/2024 14:47:06' prior: 50582114!
typeCastClassNameDistinctObjectClassName
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	SmallInteger name ~= v1 class name ifFalse: [v1 factorial] ifTrue:[v1 isEmpty]! !

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:47:11'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/11/2024 14:47:56' prior: 50582209!
test16_6TypeCastClassNameToObjectClassNameCastCorrectly

		
	self withMessageName: #typeCastClassNameDistinctObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: #typeCastClassNameDistinctObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:47:58'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:47:58'!
FAILURE!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 14:48:30' prior: 50578859!
contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition

	| objectToCast typeToApplyOnCast shouldFilterType |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	condition isObjectClassNameComparedToClassName ifTrue: [
		typeToApplyOnCast:= condition arguments first receiver key value.
		objectToCast:= condition receiver receiver receiver
	] ifFalse:[
		typeToApplyOnCast:= condition receiver receiver key value.
		objectToCast:= condition arguments first receiver receiver.
	].
	
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: blockIsOnRejectingCondition
		withPreviousContext: self.
		
		
		! !
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 14:48:42' prior: 50582286!
contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition

	| objectToCast typeToApplyOnCast shouldFilterType |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	condition isObjectClassNameComparedToClassName ifTrue: [
		typeToApplyOnCast:= condition arguments first receiver key value.
		objectToCast:= condition receiver receiver receiver
	] ifFalse:[
		typeToApplyOnCast:= condition receiver receiver key value.
		objectToCast:= condition arguments first receiver receiver.
	].
	
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: shouldFilterType
		withPreviousContext: self.
		
		
		! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:48:45'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'equals type context' stamp: 'JFGO 5/11/2024 14:49:30'!
typeCastObjectClassNameDistinctClassSymbol
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class name ~~ #SmallInteger ifFalse: [v1 factorial] ifTrue:[v1 isEmpty]! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/11/2024 14:50:24'!
test16_7TypeCastObjectClassDistinctSymbolCastCorrectly

		
	self withMessageName: #typeCastObjectClassNameDistinctClassSymbol 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: #typeCastObjectClassNameDistinctClassSymbol 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/11/2024 14:50:33'!
test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly

		
	self withMessageName: #typeCastClassNameDistinctObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: #typeCastClassNameDistinctObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!methodRemoval: TypesWithContextAppliersTest #test16_6TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:50:33'!
test16_6TypeCastClassNameToObjectClassNameCastCorrectly

		
	self withMessageName: #typeCastClassNameDistinctObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: #typeCastClassNameDistinctObjectClassName 
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:50:44'!
FAILURE!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:50:44'!
FAILURE!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 14:51:07' prior: 50579714!
contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition

	| objectToCast typeToApplyOnCast shouldFilterType |
	shouldFilterType:= blockIsOnRejectingCondition eqv: condition isEqualOrIdentical.
	condition isObjectClassNameComparedToClassSymbol ifTrue: [
		typeToApplyOnCast:= (Smalltalk classNamed: condition arguments first key).
		objectToCast:= condition receiver receiver receiver.
	] ifFalse:[
		typeToApplyOnCast:= (Smalltalk classNamed: condition receiver key value).
		objectToCast:= condition arguments first receiver receiver.
	].
	
	^EqualsClassTypeContextApplier 
		to: typeToApplyOnCast
		on: objectToCast
		shouldFilterType: shouldFilterType
		withPreviousContext: self.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:51:10'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/11/2024 14:52:01' prior: 50568669!
test21ObjectDistinctToLiteralCastCorrectlyBothBranches
	
	| messageSelector |
	messageSelector:=#typeCastDistinctToLiteral .
	"ifFalse branch"	
	self withMessageName: messageSelector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 10. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrueBranch"
	self withMessageName: messageSelector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 5. ]' 
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: SmallInteger.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


	! !

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:52:04'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/11/2024 14:52:30' prior: 50569215!
test23LiteralDistinctToObjectCastCorrectlyBothBranches
	
	| messageSelector |
	messageSelector :=#typeCastLiteralDistinctToObject.
	"ifFalse branch"	
	self withMessageName: messageSelector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 10. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrueBranch"
	self withMessageName: messageSelector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 5. ]' 
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: SmallInteger.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


	! !

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:52:32'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/11/2024 14:53:11' prior: 50570308!
test16_1TypeCastObjectClassNameCastCorrectly

	| selector |
	selector := #typeCastObjectClassNameEqualsClassName .
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 14:53:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 14:53:14'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/11/2024 15:11:39' prior: 50570531!
test16_2TypeCastObjectClassSymbolCastCorrectly

	| selector |
	selector := #typeCastObjectClassNameEqualsClassSymbol .
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 15:11:41'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/11/2024 15:12:45' prior: 50571976!
test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext
	
	| assertionBlock selector |
	assertionBlock:= [:types | 
		self assert:types size equals: 3.
		self assert: types includes: SmallInteger.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].
	
	selector := #typeCastObjectClassNameEqualsUnexistentClassSymbol .
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: assertionBlock.

	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: assertionBlock.


! !

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 15:12:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 15:12:48'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/11/2024 15:13:42' prior: 50572767!
test16_4TypeCastClassNameToObjectClassNameCastCorrectly

	| selector |
	selector := #typeCastClassNameEqualsObjectClassName .
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 15:13:44'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/11/2024 15:14:01' prior: 50573179!
test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly

	| selector |
	selector := #typeCastClassSymbolEqualsObjectClassName .
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 15:14:03'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/11/2024 15:14:22' prior: 50582570!
test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly

	| selector |
	selector := #typeCastClassNameDistinctObjectClassName .
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 15:14:25'!
PASSED!
!TypesWithContextAppliersTest methodsFor: 'equals class type context' stamp: 'JFGO 5/11/2024 15:14:46' prior: 50582547!
test16_7TypeCastObjectClassDistinctSymbolCastCorrectly

	| selector |
	selector := #typeCastObjectClassNameDistinctClassSymbol .
	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 isEmpty. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: String.
		self assert: types includes: OrderedCollection.
	].

	self withMessageName: selector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].


! !

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 15:14:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 15:14:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 15:14:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 15:14:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 15:14:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 15:14:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 15:14:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 15:14:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 15:14:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 15:14:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 15:14:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 15:14:54'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'general' stamp: 'JFGO 5/11/2024 15:59:41'!
branchWithNoEfectOverVariables
	|v1|
	v1:= Date today.
	v1 := 14.
	v1 > 1 ifTrue: [v1 factorial.]! !

	'' isString !

	14 isString!
!TypesWithContextAppliersTestMethods methodsFor: 'general' stamp: 'JFGO 5/11/2024 16:03:40' prior: 50584497!
branchWithNoEfectOverVariables
	|v1|
	v1:= Date today.
	v1 := 14.
	v1 > 1 ifTrue: [v1 factorial.].! !
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/11/2024 16:06:23'!
test24WhenConditionIsNotCastingPreservePreviousTypes
	
	| messageSelector |
	messageSelector :=#typeCastLiteralDistinctToObject.
	"ifFalse branch"	
	self withMessageName: messageSelector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 10. ]' 
	asserting: [:types | 
		self assert:types size equals: 1.
		self assert: types includes: SmallInteger.
	].
	
	"ifTrueBranch"
	self withMessageName: messageSelector
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 5. ]' 
	asserting: [:types | 
		self assert:types size equals: 3.
		self assert: types includes: SmallInteger.
		self assert: types includes: OrderedCollection.
		self assert: types includes: String.
	].


	! !
!TypesWithContextAppliersTest methodsFor: 'equals to literal type context' stamp: 'JFGO 5/11/2024 16:07:05' prior: 50584512!
test24WhenConditionIsNotCastingPreservePreviousTypes
	
	
	self withMessageName: #branchWithNoEfectOverVariables
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 + 10. ]' 
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: SmallInteger.
		self assert: types includes: Date.
	].
	


	! !
!TypesWithContextAppliersTest methodsFor: 'general cases' stamp: 'JFGO 5/11/2024 16:08:09' prior: 50584538!
test24WhenConditionIsNotCastingPreservePreviousTypes
	
	
	self withMessageName: #branchWithNoEfectOverVariables
	calculateTypesOfNode: 'v1' 
	withinBlockWithCode: '[ v1 factorial. ]'
	asserting: [:types | 
		self assert:types size equals: 2.
		self assert: types includes: SmallInteger.
		self assert: types includes: Date.
	].
	


	! !

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/11/2024 16:08:11'!
ERROR!
!TypeContextAppliers methodsFor: 'contexts building' stamp: 'JFGO 5/11/2024 16:08:31' prior: 50581640!
contextFor: condition withBlockRejecting: blockIsOnRejectingCondition
	
	condition isNegated ifTrue:[
		^self contextFor: condition receiver withBlockRejecting: blockIsOnRejectingCondition not.
	].
	
	condition isComparingEqualityForClassWithObjectClass ifTrue:[
		^self contextFor: condition whenComparingClassWithObjectClassWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	condition isComparingEqualityForClassNameWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassNameWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForClassSymbolWithObjectClassName ifTrue:[
		^self contextFor: condition whenComparingClassSymbolWithObjectClassNameWithBlockRejecting: blockIsOnRejectingCondition .
	].
	
	condition isComparingEqualityForLiteralWithObject ifTrue:[
		^self contextFor: condition whenComparingLiteralWithObjectWithBlockRejecting: blockIsOnRejectingCondition.
	].
	
	
	^GeneralContextApplier new.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/11/2024 16:08:34'!
PASSED!
!TypesWithContextAppliersTestMethods methodsFor: 'general' stamp: 'JFGO 5/11/2024 16:15:51' prior: 50584505!
branchWithNoEfectOverVariables
	|v1|
	v1:= Date today.
	v1 := 14.
	v1 > 1 ifTrue: [v1 factorial.].! !

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 16:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 16:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 16:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 16:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 16:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 16:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 16:15:55'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/11/2024 16:15:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 16:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 16:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 16:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 16:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 16:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 16:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 16:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 16:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 16:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 16:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 16:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 16:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 16:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:16:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/11/2024 16:16:01'!
PASSED!

!testRun: #ActualImplementorsTest #test01WhenIsImplementedOnlyInRootReturnsThatImplementorOnly stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualImplementorsTest #test02ReturnsImplementorsOfSuperclasses stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualImplementorsTest #test03IfNotImplementedInRootOrSuperclassesDoesNotIncludeSubclassesImplementations stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualImplementorsTest #test04IncludesSubclassesImplementations stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualImplementorsTest #test05DoesNotIncludeImplementorsOfSubclassesNotDefinedInSuperclass stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualImplementorsTest #test06DoesNotIncludeImplementorsOfSiblingsWhenNotDefinedInSuperclass stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualImplementorsTest #test07ReturnsAllSubclassesImplementorsOfTheHighestImplementorClass stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualImplementorsTest #test08highestClassImplementingSelectorReturnsHighgestClass stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualImplementorsTest #test09WhenNoHighestClassImplementingSelectorIfNoneBlockIsEvaluated stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test01SurelyRecognizeTypeSenderWhenSentToInstanceVariable stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test02SurelyRecognizeTypeSenderWhenSentToTemporaryVariable stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test03SurelyRecognizeTypeSenderInACollaboration stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test04RecognizeTypeSendersToInstancesOfSubClasses stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test05RecognizeTypeSendersToLiteralTrue stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test06RecognizeTypeSendersToLiteralFalse stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test07RecognizeTypeSendersToThisContext stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test08RecognizeTypeSendersToSelf stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test09RecognizeTypeSendersToSuper stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test09_01 stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test10RecognizeTypeSendersToSelfOfMessageImplementedInSuperclass stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test11RecognizeTypeSendersToReturnsOfMessageSend stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test12RecognizeTypeSendersOfChainedMessageSends stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test13RecognizeTypeSendersToReturnOfMessageSendNoMatterThePrecedence stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test14RecognizeTypeSendersToClasses stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test15RecognizeTypeSendersToVariablesReferencingClasses stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test16RecognizeTypeSendersToAnyLiteral stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test17CanRecognizePossibleTypeSenders stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test18RecognizeTypeSendersWhenReturnTypeIsSelfType stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test19RecognizeTypeSendersWhenReturnTypeIsClassType stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test20SurelySendWhenReceiverTypeIsSuperclassOfImplementorType stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test21ActualSendersWorksWithCascadeMessageSends stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!testRun: #ActualSendersTest #test22ActualSendersDoesNotHangWhenReceiverIsTempVarInMethodWithoutTypes stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:07'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:07'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:07'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:07'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:07' prior: 50585300!
m3 | x | self m1: 1. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 5/11/2024 16:16:07'!
m1!

!testRun: #AddParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 5/11/2024 16:16:07'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 5/11/2024 16:16:07'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:08'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:08'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:08'!
m3 | x | self m1: 1 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:08'!
m1: p1 m2: p2 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:08' prior: 50585341!
m3 | x | self m1: 1 m2: 2 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'JFGO 5/11/2024 16:16:08'!
m1: p1 m3: p3!

!testRun: #AddParameterWithActualScopeTest #test01_01_DoesNotChangePossibleMessageSendWhenInstructedToDoSoWithKeywordMessages stamp: 'JFGO 5/11/2024 16:16:08'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 5/11/2024 16:16:08'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:08'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:08'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:08'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:08'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:08'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #AddParameterWithActualScopeTest #test02CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 5/11/2024 16:16:08'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 5/11/2024 16:16:08'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:08'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:08'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:08'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:08'!
m1: p1 m3: p3! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:08'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:08'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1 m3: 3! !

!testRun: #AddParameterWithActualScopeTest #test02_01_CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsForKeywordMessage stamp: 'JFGO 5/11/2024 16:16:08'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 5/11/2024 16:16:09'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:09'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:09'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:09'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:09'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:09'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:09'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:09' prior: 50585491!
m3 | x | x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 5/11/2024 16:16:09'!
m1!

!testRun: #AddParameterWithActualScopeTest #test03AddParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 5/11/2024 16:16:09'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:09'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 5/11/2024 16:16:09'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:09'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:09'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:09'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:09'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:09'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:09'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:09'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:09' prior: 50585550!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 5/11/2024 16:16:09'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 5/11/2024 16:16:09'!
m1!

!testRun: #AddParameterWithActualScopeTest #test04AddParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 5/11/2024 16:16:09'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 5/11/2024 16:16:09'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:10'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:10'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:10'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10' prior: 50585614!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 5/11/2024 16:16:10'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 5/11/2024 16:16:10'!
m1!

!testRun: #AddParameterWithActualScopeTest #test05AddParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 5/11/2024 16:16:10'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 5/11/2024 16:16:10'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:10'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:10'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:10'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10' prior: 50585679!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 5/11/2024 16:16:10'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 5/11/2024 16:16:10'!
m1!

!testRun: #AddParameterWithActualScopeTest #test06AddParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 5/11/2024 16:16:10'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 5/11/2024 16:16:10'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:10'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:10'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:10' prior: 50585733!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 5/11/2024 16:16:10'!
m1!

!testRun: #AddParameterWithActualScopeTest #test07AddParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 5/11/2024 16:16:10'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 5/11/2024 16:16:11'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:11'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:11'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:11'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:11'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:11'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:11' prior: 50585781!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 5/11/2024 16:16:11'!
m1!

!testRun: #AddParameterWithActualScopeTest #test08AddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 5/11/2024 16:16:11'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 5/11/2024 16:16:11'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:11'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:11'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:11'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:11'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:11'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:11'!
m3 self m1. ClassOfSender new m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:11'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:11' prior: 50585841!
m3 self m1: 1. ClassOfSender new m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 5/11/2024 16:16:11'!
m1!

!testRun: #AddParameterWithActualScopeTest #test09AddParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 5/11/2024 16:16:11'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 5/11/2024 16:16:11'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:12'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:12'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:12'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:12'!
m3 |x| self m1. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:12'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:12' prior: 50585887!
m3 |x| self m1: 1. x m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 5/11/2024 16:16:12'!
m1!

!testRun: #AddParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenAddingParameterToMethodWithSureAndPossibleSenders stamp: 'JFGO 5/11/2024 16:16:12'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 5/11/2024 16:16:12'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:12'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:12'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:12'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:12'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:12'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #AddParameterWithActualScopeTest #test11CanNotAddParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 5/11/2024 16:16:12'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 5/11/2024 16:16:12'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:12'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 5/11/2024 16:16:12'!
PASSED!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:13'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:13'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:13'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:13'!
m3 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:13'!
m1: p1 m2: p2 ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:13' prior: 50585989!
m3 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'JFGO 5/11/2024 16:16:13'!
m1: p1!

!testRun: #AddParameterWithActualScopeTest #test13AddLastParameterCorrectly stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:13'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 5/11/2024 16:16:13'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AdditionalMethodStateTest #test01topBlockTempsMapReturnsTheTempsMapOfTheMethod stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #AdditionalMethodStateTest #test02MethodWithNoParametersNoTemporariesAreInitializedCorrectly stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #AdditionalMethodStateTest #test03MethodWithOnlyOneArgumentAreInitializedCorrectly stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #AdditionalMethodStateTest #test04rawTypesOfInvalidVariableNameEvaluatesIfAbsentBlock stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #AdditionalMethodStateTest #test05MethodWithOnlyOneTempTwoArgumentsAreInitializedCorrectly stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #AdditionalMethodStateTest #test06MethodWithRemoveVectorVariablesAreInitializedCorrectly stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #AdditionalMethodStateTest #test07RemoteVectorRawTypesIsNilWhenMethodHasNoVariableInRemoteVector stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #AdditionalMethodStateTest #test08VariableRawTypesIsNilWhenMethodHasNoVariableButHasInRemoteVector stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #AdditionalMethodStateTest #test09CanGetRawTypesWhenMethodHasNoVariableButHasInRemoteVector stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #ClosureVariablesTest #testOneArrayForTypesIsCreatedWhenAMethodHasNoClosures stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #DynamicTypesTest #test01TypeConvertionForAClassReturnsSameClass stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #DynamicTypesTest #test02TypeConvertionForSelfTypeReturnsReceiversType stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #DynamicTypesTest #test03TypeConvertionForClassTypeReturnsReceiversTypeClass stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #DynamicTypesTest #test04ClassMessageSendChainsClassType stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #DynamicTypesTest #test05TypeConvertionForInstanceTypeReturnsMetaclassSoleInstance stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #DynamicTypesTest #test06newTypeIsMetaclassSoleInstance stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #DynamicTypesTest #test07InstanceTypeReturnsClassWhenIsKindOfOfBehaviorButNotMeta stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #DynamicTypesTest #test08InstanceTypeErrorsWhenUsedWithNoBehavior stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #DynamicTypesTest #test09ClassTypeForMetamodelIsMetaclass stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test01TypeCollectionOfInstanceVariableDefinedInLeafClassDoesNotTraverseHierarchy stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test02TypeCollectionIncludesSubclasses stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test03TypeCollectionDoesNotIncludeSuperclassesAndSiblings stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test05TypeCollectionIncludesAllSubclasses stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test06IsNotMegamorphicIfTypesSizeIsLessToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test07IsMegamorphicIfTypesSizeIsEqualToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test08IsNotMegamorphicIfDoesNotFillRawTypesForLocalTypeInfo stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test09IsMegamorphicIfFillsRawTypesOfDefiningClassForLocalTypeInfo stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test10IsMegamorphicIfFillsRawTypesOfNotDefiningClassForLocalTypeInfo stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test11IsTypesEmptyOfNonLocalTypeInfoTakesCareOfHierarchy stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test12IsTypesEmptyForLocalTypeInfoOnlyCheckOnLocalRawTypes stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 5/11/2024 16:16:13'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 5/11/2024 16:16:13'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #InstanceVariableTypeInfoTest #test13RemovingAClassRemovesItAndItsClassFromInstanceVariableRawTypes stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test14InstVarAtPutKeepTypeInfo stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test01InstanceVariablesTypesIsInitializedWithAnArrayOfClassInstSize stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test02InitializeInstanceVariablesTypesWithAllInstancesStoreCurrentClassInstancesTypes stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test03TypesOfDifferentInstVarsAreStoredCorrectly stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test04MoreThanOneTypeAreStoredCorrectlyInDifferentInstVars stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test05TypesAreStoredUpToInstVarTypesSize stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test06NoTypesAreStoredWhenInstVarTypesIsNil stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test07CommonSupertypeOfReturnsSupertypeOfStoredTypes stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test08CommonSupertypeIfNoTypesEvaluatesAlternativeBlockWhenNoTypeHasBeenStore stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test09EvaluatesIfAbsentBlockWhenAskTypeInfoForNonExistingInstVar stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test01KeepTypesOfLocalTemporariesI stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test02KeepTypesOfRemoteTemporaries stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test03KeepTypesOfParameters stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test04KeepReturnTopTypes stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test05KeepReturnConstantTypes stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test06KeepReturnReceiverTypes stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test07KeepReturnFromClosureTypes stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test08KeepReturnTypeWhenUnwind stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test09BlockReturnDoesNotAffectMethodReturn stamp: 'JFGO 5/11/2024 16:16:13'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test10KeepTypesOfParametersWhenSendingValueWithArguments stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test11BlockWithParametersDoNotAffectMethodParameters stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables_WithSelectorsOfInstVarTypes stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 5/11/2024 16:16:14'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsOfTempVarTypes stamp: 'JFGO 5/11/2024 16:16:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'JFGO 5/11/2024 16:16:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 5/11/2024 16:16:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 5/11/2024 16:16:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 5/11/2024 16:16:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'JFGO 5/11/2024 16:16:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 5/11/2024 16:16:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'JFGO 5/11/2024 16:16:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'JFGO 5/11/2024 16:16:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'JFGO 5/11/2024 16:16:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'JFGO 5/11/2024 16:16:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'JFGO 5/11/2024 16:16:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'JFGO 5/11/2024 16:16:15'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test045_AutocompletesEntriesFor_patternUnary_containsExactlyTwoMethods stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test046_AutocompletesEntriesFor_patternUnary_notContainsAnyMethod stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test047_AutocompletesEntriesFor_patternUnary_doesNotAutocompleteMethodOfSameClass stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test048_AutocompletesEntriesFor_patternKeyword_containsExactlyOneMethod stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test049_AutocompletesEntriesFor_patternKeyword_notContainsAnyMethod stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test050_AutocompletesEntriesFor_patternKeyword_doesNotAutocompleteMethodOfSameClass stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test051_AutocompletesEntriesFor_patternBinary_containsExactlyOneMethod stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test052_AutocompletesEntriesFor_patternBinary_notContainsAnyMethod stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test053_AutocompletesEntriesFor_patternBinary_doestNotAutocompleteMethodOfSameClass stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #testMessages stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ArrayWithArrayAndOtherObjects stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArray stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayOfArray stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayWithManyElements stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBinaryInParenthesis stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlock stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfBlock stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfEvaluatedBlock stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndExpresionInParenthesis stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndLiteralArray stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndMoreThanOneUnaryAfterExpresionInParenthesis stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBlock stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBrace stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterCharacter stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterLiteralArray stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterStringSymbol stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterSymbol stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUnaryInProtoObject stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterParenthesis stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterUnary stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteMessageAfterUnary stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryInParenthesis stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithMoreThanOneUnary stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithOneUnary stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ClosedAndUnclosedParenthesis stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionInManyParenthesis stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionWithMoreThanOneParenthesis stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_LFBeforeParenthesis stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_SpaceBeforeParenthesis stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnaryAfterExpresionInParenthesis stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedArrayAfterClosedArray stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedBlockAfterBlock stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedDoubleParenthesis stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_selfInProtoObject stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_ExpresionInParenthesis stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_MoreThanOneUnaryMessage stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_OnlyRightParenthesis stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test01CanSignalItWithAMethod stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test02IsResumable stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 5/11/2024 16:16:16'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 5/11/2024 16:16:16'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test01RemovingAClassRemovesItFromMethodVariableRawTypesForParameter stamp: 'JFGO 5/11/2024 16:16:16'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 5/11/2024 16:16:16'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 5/11/2024 16:16:17'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test02RemovingAClassRemovesItsClassFromMethodVariableRawTypesForParameter stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 5/11/2024 16:16:17'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 5/11/2024 16:16:17'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test03RemovingAClassRemovesItFromMethodVariablesRawTypes stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 5/11/2024 16:16:17'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 5/11/2024 16:16:17'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test04RemovingAClassRemovesItFromMethodVariableRemoteVectorRawTypes stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!testRun: #NotImplementedMethodTest #test01ActualSendersIsEmpty stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!testRun: #NotImplementedMethodTest #test02CategoryIsNil stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!testRun: #NotImplementedMethodTest #test03CompiledMethodSignalsError stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!testRun: #NotImplementedMethodTest #test04CompiledMethodIfAbsentEvaluatesIfAbsentBlock stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!testRun: #NotImplementedMethodTest #test05doesOnlySurelySendReturnsFalse stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!testRun: #NotImplementedMethodTest #test06dynamicTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!testRun: #NotImplementedMethodTest #test07IsNotValid stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!testRun: #NotImplementedMethodTest #test08liveTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!testRun: #NotImplementedMethodTest #test09rangesOASentSelectorWhenSendToReceiverTypesIsEmpty stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!testRun: #NotImplementedMethodTest #test10FailsWhenAsItsSourceCode stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!testRun: #NotImplementedMethodTest #test11StringVersionStartsWithNotImplemented stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!testRun: #PossibleSenderTest #test01StringVersionBeginsWithPossible stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:17'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:17'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:17'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:17'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:17' prior: 50586852!
m3 | x | self m1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 5/11/2024 16:16:17'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 5/11/2024 16:16:17'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 5/11/2024 16:16:18'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:18'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:18'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:18'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:18'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:18'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!testRun: #RemoveParameterWithActualScopeTest #test02CanNotRemoveParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 5/11/2024 16:16:18'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 5/11/2024 16:16:18'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:18'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:18'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:18'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:18'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:18'!
m3 | x | x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:18'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:18' prior: 50586951!
m3 | x | x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 5/11/2024 16:16:18'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test03RemovesParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 5/11/2024 16:16:18'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:18'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 5/11/2024 16:16:18'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:18'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:18'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:18'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:18'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:18'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:18'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:18'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:18' prior: 50587012!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 5/11/2024 16:16:18'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 5/11/2024 16:16:18'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test04RemovesParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 5/11/2024 16:16:18'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 5/11/2024 16:16:19'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:19'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:19'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:19'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:19'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:19'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:19'!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:19'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:19'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:19' prior: 50587078!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 5/11/2024 16:16:19'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 5/11/2024 16:16:19'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test05RemovesParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 5/11/2024 16:16:19'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 5/11/2024 16:16:19'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:19'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:19'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:19'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:19'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:19'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:19'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:19'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:19'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:19' prior: 50587145!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 5/11/2024 16:16:19'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 5/11/2024 16:16:19'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test06RemovesParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 5/11/2024 16:16:19'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 5/11/2024 16:16:20'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:20'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:20'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:20'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:20'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:20'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:20' prior: 50587202!
m3 | x | self m1. false ifTrue: [ x m1]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 5/11/2024 16:16:20'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test07RemovesParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 5/11/2024 16:16:20'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 5/11/2024 16:16:20'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:20'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:20'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:20'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:20'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:20'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:20' prior: 50587252!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 5/11/2024 16:16:20'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test08RemovesParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 5/11/2024 16:16:20'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 5/11/2024 16:16:20'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:21'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:21'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:21'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:21'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:21'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:21'!
m3 self m1: 1. ClassOfSender new m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:21'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:21' prior: 50587314!
m3 self m1. ClassOfSender new m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 5/11/2024 16:16:21'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test09RemovesParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 5/11/2024 16:16:21'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 5/11/2024 16:16:21'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:21'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:21'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:21'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:21'!
m3 |x| self m1: 1. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:21'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:21' prior: 50587363!
m3 |x| self m1. x m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 5/11/2024 16:16:21'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRemovingParameterToMethodWithSureAndPossibleSenders stamp: 'JFGO 5/11/2024 16:16:21'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 5/11/2024 16:16:21'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:21'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:21'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:21'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:21'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:21'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1; printString! !

!testRun: #RemoveParameterWithActualScopeTest #test11CanNotRemoveParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 5/11/2024 16:16:21'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 5/11/2024 16:16:22'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:22'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 5/11/2024 16:16:22'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:22'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:22'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:22'!
m1: p1 m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:22'!
m3 self m1: 1 m2: 2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:22'!
m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:22' prior: 50587467!
m3 self m2: 2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'JFGO 5/11/2024 16:16:22'!
m1: p1 m2: p2!

!testRun: #RemoveParameterWithActualScopeTest #test13RemovesOtherThanLastParameterCorrectly stamp: 'JFGO 5/11/2024 16:16:22'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:22'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 5/11/2024 16:16:22'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:22'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:22'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:22'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:22'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:22' prior: 50587514!
m3 | x | self m2. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 5/11/2024 16:16:22'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test01DoesNotRenamesPossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 5/11/2024 16:16:22'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 5/11/2024 16:16:23'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:23'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:23'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:23'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:23'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:23'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #RenameSelectorWithActualScopeTest #test02CanNotRenameWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 5/11/2024 16:16:23'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 5/11/2024 16:16:23'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:23'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:23'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:23'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:23'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:23'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:23'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:23' prior: 50587613!
m3 | x | x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 5/11/2024 16:16:23'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test03RenamesWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 5/11/2024 16:16:23'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:24'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 5/11/2024 16:16:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:24'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:24'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:24'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:24'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:24'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:24'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:24' prior: 50587673!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 5/11/2024 16:16:24'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 5/11/2024 16:16:24'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test04RenamesWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 5/11/2024 16:16:24'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 5/11/2024 16:16:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:24'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:24'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:24'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:24'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:24'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:24'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:24'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:24' prior: 50587739!
m3 | x y | x := self. y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 5/11/2024 16:16:24'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 5/11/2024 16:16:24'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test05RenamesDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 5/11/2024 16:16:24'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 5/11/2024 16:16:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:25'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:25'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:25'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:25'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:25'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:25'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:25'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:25'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:25' prior: 50587805!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 5/11/2024 16:16:25'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 5/11/2024 16:16:25'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test06RenamesDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 5/11/2024 16:16:25'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 5/11/2024 16:16:25'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:25'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:25'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:25'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:25'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:25'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:25' prior: 50587860!
m3 | x | self m2. false ifTrue: [ x m2 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 5/11/2024 16:16:25'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test07RenamePossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 5/11/2024 16:16:25'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 5/11/2024 16:16:25'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:25'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:25'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:25'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:25'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:25'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:25' prior: 50587909!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 5/11/2024 16:16:25'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test08RenamesWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 5/11/2024 16:16:25'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 5/11/2024 16:16:26'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:26'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:26'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:26'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:26'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:26'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:26'!
m3 self m1. ClassOfSender new m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:26'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:26' prior: 50587970!
m3 self m2. ClassOfSender new m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 5/11/2024 16:16:26'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test09RenamesOnlyValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 5/11/2024 16:16:26'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 5/11/2024 16:16:26'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:26'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:26'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:26'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:26'!
m3 |x| self m1. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:26'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:26' prior: 50588017!
m3 |x| self m2. x m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 5/11/2024 16:16:26'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRenamingAMethodWithSureAndPossibleSenders stamp: 'JFGO 5/11/2024 16:16:26'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 5/11/2024 16:16:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 5/11/2024 16:16:27'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:27'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:27'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 5/11/2024 16:16:27'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #RenameSelectorWithActualScopeTest #test11CanNotRenameWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 5/11/2024 16:16:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 5/11/2024 16:16:27'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!testRun: #ReturnTypeInfoTest #test01QuickReturnSelfMethodsReturnSelfTypeAsReturnType stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!testRun: #ReturnTypeInfoTest #test02QuickReturnTrueMethodsReturnTrueReturnType stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!testRun: #ReturnTypeInfoTest #test03QuickReturnFalseMethodsReturnFalseAsReturnType stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!testRun: #ReturnTypeInfoTest #test04QuickReturnNilMethodsReturnUndefinedObjectAsReturnType stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!testRun: #ReturnTypeInfoTest #test05QuickReturnMinusOneMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!testRun: #ReturnTypeInfoTest #test06QuickReturnZeroMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!testRun: #ReturnTypeInfoTest #test07QuickReturnOneMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!testRun: #ReturnTypeInfoTest #test08QuickReturnTwoMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!testRun: #ReturnTypeInfoTest #test09QuickReturnOfFirstInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!testRun: #ReturnTypeInfoTest #test10QuickReturnOfSecondInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!testRun: #ReturnTypeInfoTest #test11classMethodReturnsClassTypeAsReturnType stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!testRun: #ReturnTypeInfoTest #test12newMethodReturnsInstanceTypeAsReturnType stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!testRun: #ReturnTypeInfoTest #test13yourselfMethodReturnsSelfTypeAsReturnType stamp: 'JFGO 5/11/2024 16:16:27'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 5/11/2024 16:16:27'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 5/11/2024 16:16:27'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #ReturnTypeInfoTest #test14RemovingAClassRemovesItAndItsClassFromMethodReturnType stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ReturnTypeInfoTest #test15ReturnTypesOfAbstractMethodsIncludesSubclassesImplementationsTypes stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ReturnTypeInfoTest #test16ReturnTypesOfAbstractMethodWorksWhenNotImplementedInAllSubclasses stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test01IsEmptyWhenAllTypesAreNil stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test02StoresAddedTypes stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test03StoresSameTypeOnce stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test04StoresMoreThanOneTypeCorrectly stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test05DoesNotStoreTypesWhenContainerIsNil stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test06CommonSupertypeOfSiblingsClassesReturnsRightSuperclass stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test07CommonSupertypeOnSameHierarchyIsMostTopClass stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test08CommonSupertypeOnSameHierarchyIsNotAffectedByAddingOrder stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test09ObjectIsCommonSupertypeWhenClassesAreNotSiblings stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test10ProtoObjectIsCommonSupertypeWhenThereAreNoTypesStored stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test11ProtoObjectIsCommonSupertypeWhenCointainerIsNil stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test12CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenIsEmpty stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test13CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenContainerIsNil stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test14UndefinedObjectIsNotConsideredWhenLookingForCommonSupertype stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test15StoresTypesIsTrueWhenContainerIsNotNil stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test16StoresTypesIsFalseWhenContainerIsNil stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test17IsMegamorphicWhenContainerIsFull stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test18IsNotMegamorphicWhenContainerIsNotFull stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test19CommonSelectorsPreviousToSameOnlyTypeIsEmpty stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test20CommonSelectorsPreviousToSuperclassOfOnlyAddedTypeAreAddedTypeSelectors stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test21CommonSelectorsPreviousToSuperclassSuperclassOfOnlyAddedTypeAreAddedTypeUpToSuperclassSelectors stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test22CommonSelectorsPreviousToInvalidSuperclassRaisesError stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test23CommonSelectorsPreviousToSuperclassOfSiblingTypesAreSiblingsCommonSelectors stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test24CommonSelectorsPreviousToOnSameHierarchyReturnsCommonSuperclassesSelectors stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test25CommonSelectorsPreviousToAddedSSupertypeOnSameHierarchyIsEmpty stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test26CommonSelectorsPreviousToWhenNotStoringTypesIsEmpty stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test27CommonSelectorsPreviousToIfInvalidSupertypeEvaluatesInvalidBlock stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test28CommonSelectorsPreviousToIfInvalidSupertypeWithManyTypesEvaluatesInvalidBlock stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test29CommonSelectosGoesUpToIncludingProtoObject stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test30CommonSupertypeIfGenericEvaluatesIfGenericBlockForObject stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test31CommonSupertypeIfGenericEvaluatesIfGenericBlockForProtoObject stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test32WithCommonSupertypeDoIfGenericEvaluatesDoBlockWhenNoGenericSupertype stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test33WithCommonSupertypeDoIfGenericEvaluatesGenericBlockWhenGenericSupertype stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test34AddingATypeWhenNoMoreSpaceEvaluatesIsFullBlock stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test35TypeIsNotMoreInTypesWhenRemoved stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test36RemovingTypeWhenTypesIsEmptyEvaluatesIfAbsent stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test37RemovingNotIncludedTypeEvaluatesIfAbsent stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test38RemovingLastAddedTypeWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test39RemoveTypeSignalExceptionWhenTypeNotFound stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #VariableTypeInfoTest #test40TypesDoEvaluatesBlockOnEachType stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test01ManyMethodsCanBeTypeChecked stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test02ClassesCanBeTypeChecked stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test04ProblemsDetectIfNone stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test05ProblemsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test07ErrorsDetectIfNone stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test10WarningsDetectIfNone stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test15HasErrorsOrWarnings stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test01MethodNotAnnotatingTypesGeneratesWarning stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test02EmptyMethodDoesNotGenerateWarningsOrErrors stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test03MessageSendNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test04MessageUnderstooodByReceiverDoesNotGenerateErrors stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test05ErrorsWhenNoTypeImplementMessageSent stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test06DifferentErrorsAreReported stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test07ReceiverWithoutTypesGeneratesWarning stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test08GivesAWarningWhenReceiversTypeHasAnError stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test09WhenMethodHasNoReturnTypesAProblemIsAdded stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test10PrimitiveMethodsAreNotTypedChecked stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test11IfNotNilFiltersUndefinedObjectType stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test12IfNotNilDoesNotFiltersUndefinedObjectTypeForNotCheckedObject stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test13ComparingForNilWithIfTrueIfFalse stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test14ComparingForNilWithIfTrueIfFalseWhenNilFiltersOtherTypes stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test15ComparingForNilWithIfTrueIfFalseWhenNilKeepsUndefinedObject stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test16NestedIfNotNilFiltersUndefinedObjectType stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test17NestedIfNotNilDoesNotFilterUndefinedObjectWhenOutsideRightIfNotNil stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test18IfNilAssumesUndefinedObjectAsType stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test19NestedIfNilAssumesUndefinedObjectAsType stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test20NestedIfNilDoesUseUndefinedObjectWhenOutsideRightIfNil stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test21IfNilIfNotNilWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test22IfNotNilIfNilWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test23EqualsNilIfTrueIfFalseWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test24EqualsNilIfTrueWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test25IdenticalToNilIfTrueWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test26EqualsNilIfFalseWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test27IdenticalToNilIfFalseWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test28EqualsToNilIfFalseIfTrueWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test29IdenticalToNilIfFalseIfTrueWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test30nilEqualsToIfTrueIfFalseOrIfFalseIfTrueWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test31nilEqualsToIfTrueOrIfFalseWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32nilIdenticalToWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32_01_nilNotIdenticalOrEqualToWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test33NotEqualToNilWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test34NotIdenticalToNilWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test35isNilWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test36notNilWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test37TypeCastWithEqualOrIdenticalToWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test38TypeCastWithNotEqualOrNotIdenticalToWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test39TypeCastToUsingEqualOrIdenticalToWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test40TypeCastToUsingNotEqualOrNotIdenticalToWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test41TypeCastUsingIsKindOfToWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test42TypeCheckMessageWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test43TypeCheckMessageSentToSelfWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test44TypeCheckMessageWorksAsExpected stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test46TypeCastRejectsCanBeNested stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test47IsKindOfCastingAllowsSubtypes stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test48IfNotNilWithBlockArgumentFiltersUndefinedObject stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test49TypeCastWithBlockInRejectBlockKeepsCastingStrategy stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test50TypeCastWithoutBlockShouldFail stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test51NotNilAndFiltersUndefinedObject stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test52CascasdeMessageSendAreTypeChecked stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test53TypeCastWorksOnCascadeMessageSends stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test54IfNilWithReturnRejectsNilInNextColaborations stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test55TypeCheckMessageWithSubclassesReturningFalse stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test56Float_store_on_hasNoTypeErrors stamp: 'JFGO 5/11/2024 16:16:28'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test57TypeCheckMessageWithFalse_True_False_InSubclassesCastCorrectly stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test58TypeCheckMessageWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test59TypeCheckMessageWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test60TypeCastWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test61TypeCastWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test62ifNotNilifNotNilWithMoreThanAMessageSendAndNilAsValue stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test63orCheck stamp: 'JFGO 5/11/2024 16:16:28'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test64notNilAndIfTrue stamp: 'JFGO 5/11/2024 16:16:28'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test65isNilOr stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66DoesNotFailsWithMessageSendAsConditionOfIfTrueWithCascadeSend stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66orWithoutMessageAsReceiverShouldNotError stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test67andWithoutMessageAsReceiverShouldNotError stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #MethodTypeCheckerTest #test68DoesNotFailsWithIfTrueSendInCascadeMode stamp: 'JFGO 5/11/2024 16:16:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/11/2024 16:16:42'!
PASSED!

----QUIT----(11 May 2024 16:16:46) CuisUniversity-6169.image priorSource: 7874232!

----STARTUP---- (13 May 2024 17:51:22) as C:\Users\juli_\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 5/13/2024 17:52:12'!
PASSED!

!testRun: #TypeCheckerDragonTest #test17TypeCastManyVariablesNestedRejectionsRejectsEachLevelCastedTypeForEachVariable stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test01TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test02TypeCastIfFalseReturnsAllTypesButRejected stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test03TypeCastIfFalseNestedReturnsAllTypesButRejected stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test04TypeCastIfFalseIfTrueReturnsTypesCorrectlyForEachBlock stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test05TypeCastIfTrueIfFalseReturnsAllTypesWhenVariableIsNotAffectedByCondition stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test06TypeCastIfTrueIfFalseOverDifferentNodesGivesRightContextToEach stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test07TypeCastAppliesCorrectlyToParseNodeClass stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test08TypeCastAppliesCorrectlyToMessageNodeSelector stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test09TypeCastAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test10TypeCastDistinctIfTrueReturnsAllTypesButRejected stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test11TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test12TypeCastNegatedIfFalseCorrectlyAppliesCastedType stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test13TypeCastDistinctAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test14TypeCastDistinctNegatedIfTrueReturnsCastedType stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test15TypeCastDistinctNegatedAppliesCorrectlyWhenItBeginsWithClassInCondition stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16TypeCastManyNegationsCastCorrectly stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_1TypeCastObjectClassNameCastCorrectly stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_2TypeCastObjectClassSymbolCastCorrectly stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_3TypeCastObjectClassToUnexistentSymbolDontApplyContext stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_4TypeCastClassNameToObjectClassNameCastCorrectly stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_5TypeCastClassSymbolToObjectClassNameCastCorrectly stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_6TypeCastClassNameDistinctToObjectClassNameCastCorrectly stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test16_7TypeCastObjectClassDistinctSymbolCastCorrectly stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test17BranchesAsMessageReceiverAreCorrectlyCasted stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test18BranchesAsMessageArgumentAreCorrectlyCasted stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test19ObjectEqualsToLiteralIfFalseReturnsPreviousTypes stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test20ObjectEqualsToLiteralIfTrueReturnsLiteralType stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test21ObjectDistinctToLiteralCastCorrectlyBothBranches stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test22LiteralEqualsToObjectIfTrueReturnsLiteralType stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test23LiteralDistinctToObjectCastCorrectlyBothBranches stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

!testRun: #TypesWithContextAppliersTest #test24WhenConditionIsNotCastingPreservePreviousTypes stamp: 'JFGO 5/13/2024 17:52:13'!
PASSED!

----QUIT----(13 May 2024 17:55:07) CuisUniversity-6169.image priorSource: 8231334!