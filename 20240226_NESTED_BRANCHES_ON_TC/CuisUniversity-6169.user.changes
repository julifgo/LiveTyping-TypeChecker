

----STARTUP---- (5 February 2024 18:00:08) as C:\Users\julian.gutierrez\OneDrive - HEXACTA S.A\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


----End fileIn of C:\Users\julian.gutierrez\OneDrive - HEXACTA S.A\Tesis\TESIS-LAST\windows64\LiveTypingGenerics.pck.st----!

----End fileIn of C:\Users\julian.gutierrez\OneDrive - HEXACTA S.A\Tesis\TESIS-LAST\windows64\LiveTypingTypeChecker.pck.st----!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/5/2024 18:07:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/5/2024 18:07:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/5/2024 18:07:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/5/2024 18:07:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/5/2024 18:07:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 18:07:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/5/2024 18:07:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/5/2024 18:07:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/5/2024 18:07:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/5/2024 18:07:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/5/2024 18:07:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/5/2024 18:07:45'!
PASSED!
!MethodNotAnnotatingTypesIssue methodsFor: 'method' stamp: 'JFGO 2/5/2024 18:24:33'!
receiver
	self shouldNotHappenBecause: 'Method does not annotate types, there are no message nodes to evaluate'! !
!MethodNotAnnotatingTypesIssue methodsFor: 'method' stamp: 'JFGO 2/5/2024 18:24:36'!
selector
	self shouldNotHappenBecause: 'Method does not annotate types, there are no message nodes to evaluate'! !

----SNAPSHOT----(5 February 2024 18:25:19) CuisUniversity-6169.image priorSource: 6245038!

Object subclass: #TypeCheckingResultsIssues
	instanceVariableNames: 'compiledMethod'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #TypeCheckingResultsIssues category: #'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 2/5/2024 18:29:41'!
Object subclass: #TypeCheckingResultsIssues
	instanceVariableNames: 'compiledMethod'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

TypeCheckingResultsIssues subclass: #TypeCheckingDragonWarning
	instanceVariableNames: 'methodNode messageNode reasonDescription'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #TypeCheckingDragonWarning category: #'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 2/5/2024 18:30:26'!
TypeCheckingResultsIssues subclass: #TypeCheckingDragonWarning
	instanceVariableNames: 'methodNode messageNode reasonDescription'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

TypeCheckingResultsIssues subclass: #TypeCheckingDragonError
	instanceVariableNames: 'methodNode messageNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #TypeCheckingDragonError category: #'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 2/5/2024 18:30:45'!
TypeCheckingResultsIssues subclass: #TypeCheckingDragonError
	instanceVariableNames: 'methodNode messageNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

TypeCheckingResultsIssues subclass: #TypeCheckingDragonIncompleteInformation
	instanceVariableNames: 'methodNode messageNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #TypeCheckingDragonIncompleteInformation category: #'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 2/5/2024 18:30:59'!
TypeCheckingResultsIssues subclass: #TypeCheckingDragonIncompleteInformation
	instanceVariableNames: 'methodNode messageNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

TypeCheckingResultsIssues subclass: #MethodNotAnnotatingTypesIssue
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #MethodNotAnnotatingTypesIssue category: #'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 2/5/2024 18:31:14'!
TypeCheckingResultsIssues subclass: #MethodNotAnnotatingTypesIssue
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

----SNAPSHOT----(5 February 2024 18:31:29) CuisUniversity-6169.image priorSource: 6585714!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/5/2024 18:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/5/2024 18:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/5/2024 18:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/5/2024 18:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/5/2024 18:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 18:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/5/2024 18:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/5/2024 18:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/5/2024 18:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/5/2024 18:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/5/2024 18:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/5/2024 18:32:37'!
PASSED!
!TypeCheckingResultsIssues methodsFor: 'method' stamp: 'JFGO 2/5/2024 18:33:25'!
method
	^compiledMethod.! !

!methodRemoval: MethodNotAnnotatingTypesIssue #method stamp: 'JFGO 2/5/2024 18:33:31'!
method
	^compiledMethod .!

!methodRemoval: TypeCheckingDragonError #method stamp: 'JFGO 2/5/2024 18:33:37'!
method
	^compiledMethod .!

!methodRemoval: TypeCheckingDragonIncompleteInformation #method stamp: 'JFGO 2/5/2024 18:33:42'!
method
	^compiledMethod .!

!methodRemoval: TypeCheckingDragonIncompleteInformation #problemDescription stamp: 'JFGO 2/5/2024 18:33:44'!
problemDescription
	^'No type information on receiver collected'.!

!methodRemoval: TypeCheckingDragonWarning #method stamp: 'JFGO 2/5/2024 18:33:47'!
method
	^compiledMethod.!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/5/2024 18:33:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/5/2024 18:33:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/5/2024 18:33:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/5/2024 18:33:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/5/2024 18:33:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 18:33:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/5/2024 18:33:51'!
ERROR!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/5/2024 18:33:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/5/2024 18:33:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/5/2024 18:33:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/5/2024 18:33:51'!
ERROR!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/5/2024 18:33:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/5/2024 18:34:09'!
ERROR!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/5/2024 18:34:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/5/2024 18:34:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/5/2024 18:34:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/5/2024 18:34:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/5/2024 18:34:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 18:34:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/5/2024 18:34:41'!
ERROR!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/5/2024 18:34:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/5/2024 18:34:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/5/2024 18:34:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/5/2024 18:34:41'!
ERROR!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/5/2024 18:34:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/5/2024 18:34:51'!
ERROR!
!TypeCheckingDragonError class methodsFor: 'instance creation' stamp: 'JFGO 2/5/2024 18:48:02'!
ReceiverWithNoTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode .! !
!TypeCheckingDragonIncompleteInformation class methodsFor: 'instance creation' stamp: 'JFGO 2/5/2024 18:48:02'!
ReceiverWithNoTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode ! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 2/5/2024 18:48:02' prior: 50536431 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self. ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation ReceiverWithNoTypesOn: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 2/5/2024 18:48:02' prior: 50536402!
checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType 
	
	| implementorsFinder |
	
	implementorsFinder := AllActualLocalImplementors of: aMessageNode selectorSymbol forAll: receiverLiveType.
	implementorsFinder LiveTypeValue.
	
	implementorsFinder notImplementedIsEmpty ifFalse: [  
		issues add: (TypeCheckingDragonError ReceiverWithNoTypesOn: compiledMethod for: methodNode by: aMessageNode)].! !

!methodRemoval: TypeCheckingDragonError class #on:for:by: stamp: 'JFGO 2/5/2024 18:48:02'!
on: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode .!

!methodRemoval: TypeCheckingDragonIncompleteInformation class #on:for:by: stamp: 'JFGO 2/5/2024 18:48:02'!
on: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode !
!TypeCheckingDragonError class methodsFor: 'instance creation' stamp: 'JFGO 2/5/2024 18:48:28'!
forReceiverWithNoTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode .! !
!TypeCheckingDragonIncompleteInformation class methodsFor: 'instance creation' stamp: 'JFGO 2/5/2024 18:48:28'!
forReceiverWithNoTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode ! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 2/5/2024 18:48:28' prior: 50537746 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self. ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation forReceiverWithNoTypesOn: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 2/5/2024 18:48:28' prior: 50537774!
checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType 
	
	| implementorsFinder |
	
	implementorsFinder := AllActualLocalImplementors of: aMessageNode selectorSymbol forAll: receiverLiveType.
	implementorsFinder LiveTypeValue.
	
	implementorsFinder notImplementedIsEmpty ifFalse: [  
		issues add: (TypeCheckingDragonError forReceiverWithNoTypesOn: compiledMethod for: methodNode by: aMessageNode)].! !

!methodRemoval: TypeCheckingDragonError class #ReceiverWithNoTypesOn:for:by: stamp: 'JFGO 2/5/2024 18:48:28'!
ReceiverWithNoTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode .!

!methodRemoval: TypeCheckingDragonIncompleteInformation class #ReceiverWithNoTypesOn:for:by: stamp: 'JFGO 2/5/2024 18:48:28'!
ReceiverWithNoTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode !
!TypeCheckingDragonIncompleteInformation class methodsFor: 'instance creation' stamp: 'JFGO 2/5/2024 18:49:00' prior: 50537814!
forReceiverWithNoTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode.! !
!TypeCheckingDragonError methodsFor: 'initialization' stamp: 'JFGO 2/5/2024 18:49:36'!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: description  .
	compiledMethod := aCompiledMethod .
	methodNode := aMethodNode.
	messageNode := aMessageNode.! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'initialization' stamp: 'JFGO 2/5/2024 18:49:36'!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: description  
	compiledMethod := aCompiledMethod.
	methodNode := aMethodNode.
	messageNode := aMessageNode.! !
!TypeCheckingDragonError class methodsFor: 'as yet unclassified' stamp: 'JFGO 2/5/2024 18:49:36' prior: 50537805!
forReceiverWithNoTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'Receiver has no types' .! !
!TypeCheckingDragonIncompleteInformation class methodsFor: 'as yet unclassified' stamp: 'JFGO 2/5/2024 18:49:36' prior: 50537886!
forReceiverWithNoTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'Receiver has no types'.! !

!methodRemoval: TypeCheckingDragonError #initializeOn:for:by: stamp: 'JFGO 2/5/2024 18:49:36'!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode .
	compiledMethod := aCompiledMethod .
	methodNode := aMethodNode.
	messageNode := aMessageNode.!

!methodRemoval: TypeCheckingDragonIncompleteInformation #initializeOn:for:by: stamp: 'JFGO 2/5/2024 18:49:36'!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	compiledMethod := aCompiledMethod.
	methodNode := aMethodNode.
	messageNode := aMessageNode.!

!classDefinition: #TypeCheckingDragonIncompleteInformation category: #'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 2/5/2024 18:49:56'!
TypeCheckingResultsIssues subclass: #TypeCheckingDragonIncompleteInformation
	instanceVariableNames: 'methodNode messageNode problemDescription'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckingDragonIncompleteInformation methodsFor: 'initialization' stamp: 'JFGO 2/5/2024 18:49:52' prior: 50537904!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: description  
	compiledMethod := aCompiledMethod.
	methodNode := aMethodNode.
	messageNode := aMessageNode.
	problemDescription := description.! !
!TypeCheckingDragonIncompleteInformation methodsFor: 'printing' stamp: 'JFGO 2/5/2024 18:50:48'!
problemDescription
	^problemDescription .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/5/2024 18:50:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/5/2024 18:50:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/5/2024 18:50:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/5/2024 18:50:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/5/2024 18:50:51'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 18:50:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/5/2024 18:50:52'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/5/2024 18:50:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/5/2024 18:50:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/5/2024 18:50:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/5/2024 18:50:52'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/5/2024 18:50:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/5/2024 18:51:01'!
FAILURE!
!TypeCheckingDragonIncompleteInformation class methodsFor: 'instance creation' stamp: 'JFGO 2/5/2024 19:06:19' prior: 50537925!
forReceiverWithNoTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'No type information on receiver collected'.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/5/2024 19:06:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/5/2024 19:06:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/5/2024 19:06:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/5/2024 19:06:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/5/2024 19:06:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:06:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/5/2024 19:06:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/5/2024 19:06:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/5/2024 19:06:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/5/2024 19:06:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/5/2024 19:06:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/5/2024 19:06:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/5/2024 19:06:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/5/2024 19:06:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/5/2024 19:06:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/5/2024 19:06:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/5/2024 19:06:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:06:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/5/2024 19:06:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/5/2024 19:06:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/5/2024 19:06:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/5/2024 19:06:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/5/2024 19:06:27'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/5/2024 19:06:27'!
PASSED!
!TypeCheckingResultsIssues methodsFor: 'method' stamp: 'JFGO 2/5/2024 19:09:56'!
problemDescription
	self subclassResponsibility .! !
!TypeCheckingResultsIssues methodsFor: 'method' stamp: 'JFGO 2/5/2024 19:11:17'!
receiver
	self subclassResponsibility .! !
!TypeCheckingResultsIssues methodsFor: 'method' stamp: 'JFGO 2/5/2024 19:11:21'!
selector
	self subclassResponsibility .! !

----SNAPSHOT----(5 February 2024 19:11:41) CuisUniversity-6169.image priorSource: 6588592!

self receiver!

self receiver selector!

self selector!
!Behavior method!
receiver
	#_coverageTracker5116495_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5116495_
		cover: (12 to: 22)
		declaredAt: (12 to: 22)
		by: messageNode.
	#_coverageTracker5116495_
		coverAll:
			{24 to: 31}
		evaluating: [ receiver1 receiver ]
		thatSends: #receiver
		to: receiver1 ] value.! !
!Behavior method!
on: aCompiledMethod for: aMethodNode by: aMessageNode reason: aReasonDescription
	#_coverageTracker5116536_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5116536_
		coverAll:
			{86 to: 89}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5116536_
		coverAll:
			{91 to: 93}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker5116536_
		coverAll:
			{95 to: 107. 125 to: 128. 142 to: 144. 159 to: 165}
		evaluating: [
			receiver2
				initializeOn:
					(#_coverageTracker5116536_
						cover: (109 to: 123)
						declaredAt: (5 to: 19)
						by: aCompiledMethod)
				for:
					(#_coverageTracker5116536_
						cover: (130 to: 140)
						declaredAt: (26 to: 36)
						by: aMethodNode)
				by:
					(#_coverageTracker5116536_
						cover: (146 to: 157)
						declaredAt: (42 to: 53)
						by: aMessageNode)
				reason:
					(#_coverageTracker5116536_
						cover: (167 to: 184)
						declaredAt: (63 to: 80)
						by: aReasonDescription) ]
		thatSends: #initializeOn:for:by:reason:
		to: receiver2 ] value.! !
!Behavior method!
methodWithMessageNotUnderstoodAssignedToVariable
	| v1 |
	#_coverageTracker5116568_ markAsExecuted.
	#_coverageTracker5116568_
		cover: (59 to: 60)
		declaredAt: (53 to: 54)
		by:
			(v1 _ [ | receiver1 |
			receiver1 _ #_coverageTracker5116568_
				coverAll:
					{64 to: 70}
				byLiteralOrPseudoVariable: 'false'.
			#_coverageTracker5116568_
				coverAll:
					{72 to: 74}
				evaluating: [ receiver1 not ]
				thatSends: #not
				to: receiver1 ] value).! !
!Behavior method!
receiver
	#_coverageTracker5116598_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5116598_
		cover: (12 to: 22)
		declaredAt: (12 to: 22)
		by: messageNode.
	#_coverageTracker5116598_
		coverAll:
			{24 to: 31}
		evaluating: [ receiver1 receiver ]
		thatSends: #receiver
		to: receiver1 ] value.! !
!Behavior method!
visitBlockNode: aBlockNode
	"Por ahora, no hay evidencia de necesitar hacer algo más que visitar los statements del bloque, que lo hace super. De ser asi definitivamente, este mensaje no tiene razon de ser reimplementado y deberiamos borrarlo"
	#_coverageTracker5116607_ markAsExecuted.
	self.
	#_coverageTracker5116607_
		coverAll:
			{253 to: 267}
		evaluating: [
			super visitBlockNode:
				(#_coverageTracker5116607_
					cover: (269 to: 278)
					declaredAt: (17 to: 26)
					by: aBlockNode) ]
		thatSends: #visitBlockNode:
		to: super.! !
!Behavior method!
addAlertWithMessage: aStringMessage
	#_coverageTracker5116629_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker5116629_
		cover: (41 to: 46)
		declaredAt: (41 to: 46)
		by: issues.
	#_coverageTracker5116629_
		coverAll:
			{48 to: 51}
		evaluating: [
			receiver2 add:
				[ | receiver1 |
				receiver1 _ #_coverageTracker5116629_
					coverAll:
						{54 to: 75}
					by: TypeCheckerDragonAlert.
				#_coverageTracker5116629_
					coverAll:
						{77 to: 80. 93 to: 104}
					evaluating: [
						receiver1
							for:
								(#_coverageTracker5116629_
									cover: (82 to: 91)
									declaredAt: (82 to: 91)
									by: methodNode)
							withMessage:
								(#_coverageTracker5116629_
									cover: (106 to: 119)
									declaredAt: (22 to: 35)
									by: aStringMessage) ]
					thatSends: #for:withMessage:
					to: receiver1 ] value ]
		thatSends: #add:
		to: receiver2 ] value.! !
!Behavior method!
for: aCompiledMethod collectingAlerts: anAlertCollection
	#_coverageTracker5116641_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5116641_
		coverAll:
			{62 to: 65}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5116641_
		coverAll:
			{67 to: 69}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker5116641_
		coverAll:
			{71 to: 84. 102 to: 118}
		evaluating: [
			receiver2
				initializeFor:
					(#_coverageTracker5116641_
						cover: (86 to: 100)
						declaredAt: (6 to: 20)
						by: aCompiledMethod)
				collectingIssues:
					(#_coverageTracker5116641_
						cover: (120 to: 136)
						declaredAt: (40 to: 56)
						by: anAlertCollection) ]
		thatSends: #initializeFor:collectingIssues:
		to: receiver2 ] value.! !
!Behavior method!
problemDescription
	#_coverageTracker5116659_ markAsExecuted.
	^ #_coverageTracker5116659_
		cover: (22 to: 38)
		declaredAt: (22 to: 38)
		by: reasonDescription.! !
!Behavior method!
perform
	#_coverageTracker5116664_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5116664_
		coverAll:
			{10 to: 13}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5116664_
		coverAll:
			{15 to: 23}
		evaluating: [ receiver1 typeCheck ]
		thatSends: #typeCheck
		to: receiver1 ] value.
	^ #_coverageTracker5116664_
		coverAll:
			{28 to: 31}
		byLiteralOrPseudoVariable: self.! !
!Behavior method!
for: aCompiledMethod
	#_coverageTracker5116670_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5116670_
		coverAll:
			{25 to: 28}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5116670_
		coverAll:
			{30 to: 32}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker5116670_
		coverAll:
			{34 to: 47}
		evaluating: [
			receiver2 initializeFor:
				(#_coverageTracker5116670_
					cover: (49 to: 63)
					declaredAt: (6 to: 20)
					by: aCompiledMethod) ]
		thatSends: #initializeFor:
		to: receiver2 ] value.! !
!Behavior method!
incompleteInfoAlerts
	#_coverageTracker5116679_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker5116679_
		cover: (24 to: 29)
		declaredAt: (24 to: 29)
		by: issues.
	#_coverageTracker5116679_
		coverAll:
			{31 to: 37}
		evaluating: [
			receiver2 select: [ :issue |
				[ | receiver1 |
				receiver1 _ #_coverageTracker5116679_
					cover: (49 to: 53)
					declaredAt: (41 to: 45)
					by: issue.
				#_coverageTracker5116679_
					coverAll:
						{55 to: 63}
					evaluating: [
						receiver1 isKindOf:
							(#_coverageTracker5116679_
								coverAll:
									{65 to: 103}
								by: TypeCheckingDragonIncompleteInformation) ]
					thatSends: #isKindOf:
					to: receiver1 ] value ]]
		thatSends: #select:
		to: receiver2 ] value.! !
!Behavior method!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: description
	#_coverageTracker5116688_ markAsExecuted.
	self.
	#_coverageTracker5116688_
		cover: (94 to: 107)
		declaredAt: (94 to: 107)
		by:
			(compiledMethod _ #_coverageTracker5116688_
				cover: (112 to: 126)
				declaredAt: (15 to: 29)
				by: aCompiledMethod).
	#_coverageTracker5116688_
		cover: (131 to: 140)
		declaredAt: (131 to: 140)
		by:
			(methodNode _ #_coverageTracker5116688_
				cover: (145 to: 155)
				declaredAt: (36 to: 46)
				by: aMethodNode).
	#_coverageTracker5116688_
		cover: (159 to: 169)
		declaredAt: (159 to: 169)
		by:
			(messageNode _ #_coverageTracker5116688_
				cover: (174 to: 185)
				declaredAt: (52 to: 63)
				by: aMessageNode).! !
!Behavior method!
receiver
	#_coverageTracker5116706_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5116706_
		coverAll:
			{11 to: 14}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5116706_
		coverAll:
			{16 to: 38}
		evaluating: [
			receiver1 shouldNotHappenBecause:
				(#_coverageTracker5116706_
					coverAll:
						{40 to: 111}
					byLiteralOrPseudoVariable: 'Method does not annotate types, there are no message nodes to evaluate') ]
		thatSends: #shouldNotHappenBecause:
		to: receiver1 ] value.! !
!Behavior method!
addWarning: anIncompleteTypeInfoError node: aMessageNode
	#_coverageTracker5116743_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker5116743_
		cover: (62 to: 67)
		declaredAt: (62 to: 67)
		by: issues.
	#_coverageTracker5116743_
		coverAll:
			{69 to: 72}
		evaluating: [
			receiver3 add:
				[ | receiver2 |
				receiver2 _ #_coverageTracker5116743_
					coverAll:
						{75 to: 99}
					by: TypeCheckingDragonWarning.
				#_coverageTracker5116743_
					coverAll:
						{101 to: 103. 120 to: 123. 136 to: 138. 153 to: 159}
					evaluating: [
						receiver2
							on:
								(#_coverageTracker5116743_
									cover: (105 to: 118)
									declaredAt: (105 to: 118)
									by: compiledMethod)
							for:
								(#_coverageTracker5116743_
									cover: (125 to: 134)
									declaredAt: (125 to: 134)
									by: methodNode)
							by:
								(#_coverageTracker5116743_
									cover: (140 to: 151)
									declaredAt: (45 to: 56)
									by: aMessageNode)
							reason:
								[ | receiver1 |
								receiver1 _ #_coverageTracker5116743_
									cover: (161 to: 185)
									declaredAt: (13 to: 37)
									by: anIncompleteTypeInfoError.
								#_coverageTracker5116743_
									coverAll:
										{187 to: 203}
									evaluating: [ receiver1 reasonDescription ]
									thatSends: #reasonDescription
									to: receiver1 ] value ]
					thatSends: #on:for:by:reason:
					to: receiver2 ] value ]
		thatSends: #add:
		to: receiver3 ] value.! !
!Behavior method!
initializeFor: aCompiledMethod
	#_coverageTracker5116753_ markAsExecuted.
	#_coverageTracker5116753_
		cover: (34 to: 47)
		declaredAt: (34 to: 47)
		by:
			(compiledMethod _ #_coverageTracker5116753_
				cover: (52 to: 66)
				declaredAt: (16 to: 30)
				by: aCompiledMethod).
	#_coverageTracker5116753_
		cover: (91 to: 96)
		declaredAt: (91 to: 96)
		by:
			(issues _ [ | receiver1 |
			receiver1 _ #_coverageTracker5116753_
				coverAll:
					{101 to: 117}
				by: OrderedCollection.
			#_coverageTracker5116753_
				coverAll:
					{119 to: 121}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
problemDescription
	#_coverageTracker5116759_ markAsExecuted.
	^ #_coverageTracker5116759_
		cover: (22 to: 39)
		declaredAt: (22 to: 39)
		by: problemDescription.! !
!Behavior method!
methodWithCollectionWithNoTypeError
	| col |
	#_coverageTracker5116771_ markAsExecuted.
	#_coverageTracker5116771_
		cover: (47 to: 49)
		declaredAt: (40 to: 42)
		by:
			(col _ [ | receiver1 |
			receiver1 _ #_coverageTracker5116771_
				coverAll:
					{53 to: 69}
				by: OrderedCollection.
			#_coverageTracker5116771_
				coverAll:
					{71 to: 75}
				evaluating: [
					receiver1 with:
						(#_coverageTracker5116771_
							coverAll:
								{77 to: 77}
							byLiteralOrPseudoVariable: 1) ]
				thatSends: #with:
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker5116771_
		cover: (81 to: 83)
		declaredAt: (40 to: 42)
		by: col.
	#_coverageTracker5116771_
		coverAll:
			{85 to: 87}
		evaluating: [
			receiver3 do: [ :item |
				[ | receiver2 |
				receiver2 _ #_coverageTracker5116771_
					cover: (97 to: 100)
					declaredAt: (90 to: 93)
					by: item.
				#_coverageTracker5116771_
					coverAll:
						{102 to: 110}
					evaluating: [ receiver2 factorial ]
					thatSends: #factorial
					to: receiver2 ] value ]]
		thatSends: #do:
		to: receiver3 ] value.! !
!Behavior method!
hasWarnings
	#_coverageTracker5116781_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5116781_
		coverAll:
			{15 to: 18}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5116781_
		coverAll:
			{20 to: 27}
		evaluating: [ receiver1 warnings ]
		thatSends: #warnings
		to: receiver1 ] value.
	#_coverageTracker5116781_
		coverAll:
			{29 to: 32}
		evaluating: [ receiver2 size ]
		thatSends: #size
		to: receiver2 ] value.
	#_coverageTracker5116781_
		coverAll:
			{34 to: 34}
		evaluating: [
			receiver3 >
				(#_coverageTracker5116781_
					coverAll:
						{36 to: 36}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #>
		to: receiver3 ] value.! !
!Behavior method!
hasIssues
	#_coverageTracker5116795_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5116795_
		cover: (13 to: 18)
		declaredAt: (13 to: 18)
		by: issues.
	#_coverageTracker5116795_
		coverAll:
			{20 to: 23}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.
	#_coverageTracker5116795_
		coverAll:
			{25 to: 25}
		evaluating: [
			receiver2 >
				(#_coverageTracker5116795_
					coverAll:
						{27 to: 27}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #>
		to: receiver2 ] value.! !
!Behavior method!
message
	#_coverageTracker5116800_ markAsExecuted.
	^ #_coverageTracker5116800_
		cover: (11 to: 22)
		declaredAt: (11 to: 22)
		by: alertMessage.! !
!Behavior method!
methodTypedCorrectlyEnableTyping
	"Actually, by default type checking will be enabled. Disable it manually from outside. Method name is for declarativity purposes"
	#_coverageTracker5116804_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5116804_
		coverAll:
			{166 to: 166}
		byLiteralOrPseudoVariable: 1.
	#_coverageTracker5116804_
		coverAll:
			{168 to: 168}
		evaluating: [
			receiver1 +
				(#_coverageTracker5116804_
					coverAll:
						{170 to: 170}
					byLiteralOrPseudoVariable: 1) ]
		thatSends: #+
		to: receiver1 ] value.! !
!Behavior method!
errors
	#_coverageTracker5116810_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker5116810_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: issues.
	#_coverageTracker5116810_
		coverAll:
			{17 to: 23}
		evaluating: [
			receiver2 select: [ :issue |
				[ | receiver1 |
				receiver1 _ #_coverageTracker5116810_
					cover: (35 to: 39)
					declaredAt: (27 to: 31)
					by: issue.
				#_coverageTracker5116810_
					coverAll:
						{41 to: 49}
					evaluating: [
						receiver1 isKindOf:
							(#_coverageTracker5116810_
								coverAll:
									{51 to: 73}
								by: TypeCheckingDragonError) ]
					thatSends: #isKindOf:
					to: receiver1 ] value ]]
		thatSends: #select:
		to: receiver2 ] value.! !
!Behavior method!
methodClass
	#_coverageTracker5116823_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5116823_
		cover: (17 to: 30)
		declaredAt: (17 to: 30)
		by: compiledMethod.
	#_coverageTracker5116823_
		coverAll:
			{32 to: 42}
		evaluating: [ receiver1 methodClass ]
		thatSends: #methodClass
		to: receiver1 ] value.! !
!Behavior method!
addProblem: anIncompleteTypeInfoError node: aMessageNode
	#_coverageTracker5116828_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5116828_
		coverAll:
			{59 to: 62}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5116828_
		coverAll:
			{64 to: 74. 102 to: 106}
		evaluating: [
			receiver1
				addWarning:
					(#_coverageTracker5116828_
						cover: (76 to: 100)
						declaredAt: (13 to: 37)
						by: anIncompleteTypeInfoError)
				node:
					(#_coverageTracker5116828_
						cover: (108 to: 119)
						declaredAt: (45 to: 56)
						by: aMessageNode) ]
		thatSends: #addWarning:node:
		to: receiver1 ] value.! !
!Behavior method!
methodWithMessageNestedNotUnderstoodOnReceiver
	"The first message that visitor evaluates is the outer not sent to ('false' not) which is perfectly defined."
	"The inner not message in the receiver it has a type problem, so this should force implement object recursion for receiver."
	#_coverageTracker5116834_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5116834_
		coverAll:
			{287 to: 293}
		byLiteralOrPseudoVariable: 'false'.
	#_coverageTracker5116834_
		coverAll:
			{295 to: 297}
		evaluating: [ receiver1 not ]
		thatSends: #not
		to: receiver1 ] value.
	#_coverageTracker5116834_
		coverAll:
			{299 to: 301}
		evaluating: [ receiver2 not ]
		thatSends: #not
		to: receiver2 ] value.! !
!Behavior method!
m4
	| temp |
	#_coverageTracker5116838_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5116838_
		cover: (13 to: 16)
		declaredAt: (6 to: 9)
		by: temp.
	#_coverageTracker5116838_
		coverAll:
			{18 to: 21}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.! !
!Behavior method!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: description
	#_coverageTracker5116843_ markAsExecuted.
	#_coverageTracker5116843_
		cover: (93 to: 106)
		declaredAt: (93 to: 106)
		by:
			(compiledMethod _ #_coverageTracker5116843_
				cover: (111 to: 125)
				declaredAt: (15 to: 29)
				by: aCompiledMethod).
	#_coverageTracker5116843_
		cover: (129 to: 138)
		declaredAt: (129 to: 138)
		by:
			(methodNode _ #_coverageTracker5116843_
				cover: (143 to: 153)
				declaredAt: (36 to: 46)
				by: aMethodNode).
	#_coverageTracker5116843_
		cover: (157 to: 167)
		declaredAt: (157 to: 167)
		by:
			(messageNode _ #_coverageTracker5116843_
				cover: (172 to: 183)
				declaredAt: (52 to: 63)
				by: aMessageNode).
	#_coverageTracker5116843_
		cover: (187 to: 204)
		declaredAt: (187 to: 204)
		by:
			(problemDescription _ #_coverageTracker5116843_
				cover: (209 to: 219)
				declaredAt: (78 to: 88)
				by: description).! !
!Behavior method!
methodWithVariableWithManyTypes
	| v1 |
	#_coverageTracker5116861_ markAsExecuted.
	#_coverageTracker5116861_
		cover: (40 to: 41)
		declaredAt: (35 to: 36)
		by:
			(v1 _ [ | receiver1 |
			receiver1 _ #_coverageTracker5116861_
				coverAll:
					{45 to: 61}
				by: OrderedCollection.
			#_coverageTracker5116861_
				coverAll:
					{63 to: 65}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker5116861_
		cover: (69 to: 70)
		declaredAt: (35 to: 36)
		by:
			(v1 _ #_coverageTracker5116861_
				coverAll:
					{75 to: 80}
				byLiteralOrPseudoVariable: 'true').
	#_coverageTracker5116861_
		cover: (84 to: 85)
		declaredAt: (35 to: 36)
		by:
			(v1 _ #_coverageTracker5116861_
				coverAll:
					{90 to: 90}
				byLiteralOrPseudoVariable: 5).
	[ | receiver2 |
	receiver2 _ #_coverageTracker5116861_
		cover: (94 to: 95)
		declaredAt: (35 to: 36)
		by: v1.
	#_coverageTracker5116861_
		coverAll:
			{97 to: 105}
		evaluating: [ receiver2 factorial ]
		thatSends: #factorial
		to: receiver2 ] value.! !
!Behavior method!
typeCheckWhenDisabledTyping
	#_coverageTracker5116869_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker5116869_
		cover: (30 to: 35)
		declaredAt: (30 to: 35)
		by: issues.
	#_coverageTracker5116869_
		coverAll:
			{37 to: 40}
		evaluating: [
			receiver2 add:
				[ | receiver1 |
				receiver1 _ #_coverageTracker5116869_
					coverAll:
						{43 to: 71}
					by: MethodNotAnnotatingTypesIssue.
				#_coverageTracker5116869_
					coverAll:
						{73 to: 76}
					evaluating: [
						receiver1 for:
							(#_coverageTracker5116869_
								cover: (78 to: 91)
								declaredAt: (78 to: 91)
								by: compiledMethod) ]
					thatSends: #for:
					to: receiver1 ] value ]
		thatSends: #add:
		to: receiver2 ] value.
	^ #_coverageTracker5116869_
		coverAll:
			{97 to: 100}
		byLiteralOrPseudoVariable: self.! !
!Behavior method!
classAndSelector
	#_coverageTracker5116874_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5116874_
		cover: (22 to: 35)
		declaredAt: (22 to: 35)
		by: compiledMethod.
	#_coverageTracker5116874_
		coverAll:
			{37 to: 52}
		evaluating: [ receiver1 classAndSelector ]
		thatSends: #classAndSelector
		to: receiver1 ] value.! !
!Behavior method!
hasErrors
	#_coverageTracker5116889_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5116889_
		coverAll:
			{13 to: 16}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5116889_
		coverAll:
			{18 to: 23}
		evaluating: [ receiver1 errors ]
		thatSends: #errors
		to: receiver1 ] value.
	#_coverageTracker5116889_
		coverAll:
			{25 to: 28}
		evaluating: [ receiver2 size ]
		thatSends: #size
		to: receiver2 ] value.
	#_coverageTracker5116889_
		coverAll:
			{30 to: 30}
		evaluating: [
			receiver3 >
				(#_coverageTracker5116889_
					coverAll:
						{32 to: 32}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #>
		to: receiver3 ] value.! !
!Behavior method!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType |
	#_coverageTracker5116898_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5116898_
		cover: (75 to: 86)
		declaredAt: (19 to: 30)
		by: aMessageNode.
	#_coverageTracker5116898_
		coverAll:
			{88 to: 95}
		evaluating: [ receiver1 receiver ]
		thatSends: #receiver
		to: receiver1 ] value.
	#_coverageTracker5116898_
		coverAll:
			{97 to: 103}
		evaluating: [
			receiver2 accept:
				(#_coverageTracker5116898_
					coverAll:
						{105 to: 108}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #accept:
		to: receiver2 ] value.
	#_coverageTracker5116898_
		cover: (116 to: 133)
		declaredAt: (35 to: 52)
		by:
			(incompleteTypeInfo _ [ | receiver3 |
			receiver3 _ #_coverageTracker5116898_
				coverAll:
					{138 to: 154}
				by: OrderedCollection.
			#_coverageTracker5116898_
				coverAll:
					{156 to: 158}
				evaluating: [ receiver3 new ]
				thatSends: #new
				to: receiver3 ] value).
	#_coverageTracker5116898_
		cover: (163 to: 178)
		declaredAt: (54 to: 69)
		by:
			(receiverLiveType _ [ | receiver4 |
			receiver4 _ #_coverageTracker5116898_
				cover: (181 to: 192)
				declaredAt: (19 to: 30)
				by: aMessageNode.
			#_coverageTracker5116898_
				coverAll:
					{194 to: 213. 231 to: 257}
				evaluating: [
					receiver4
						receiverLiveTypesIn:
							(#_coverageTracker5116898_
								cover: (216 to: 229)
								declaredAt: (216 to: 229)
								by: compiledMethod)
						addingIncompleteTypeInfoTo:
							(#_coverageTracker5116898_
								cover: (259 to: 276)
								declaredAt: (35 to: 52)
								by: incompleteTypeInfo) ]
				thatSends: #receiverLiveTypesIn:addingIncompleteTypeInfoTo:
				to: receiver4 ] value).
	[ | receiver6 |
	receiver6 _ #_coverageTracker5116898_
		cover: (283 to: 300)
		declaredAt: (35 to: 52)
		by: incompleteTypeInfo.
	#_coverageTracker5116898_
		coverAll:
			{302 to: 304}
		evaluating: [
			receiver6 do: [ :anIncompleteTypeInfoReason |
				[ | receiver5 |
				receiver5 _ #_coverageTracker5116898_
					cover: (338 to: 363)
					declaredAt: (309 to: 334)
					by: anIncompleteTypeInfoReason.
				#_coverageTracker5116898_
					coverAll:
						{365 to: 370}
					evaluating: [
						receiver5 addTo:
							(#_coverageTracker5116898_
								coverAll:
									{372 to: 375}
								byLiteralOrPseudoVariable: self) ]
					thatSends: #addTo:
					to: receiver5 ] value ]]
		thatSends: #do:
		to: receiver6 ] value.
	[ | receiver13 |
	receiver13 _ [ | receiver9 |
	receiver9 _ [ | receiver7 |
	receiver7 _ #_coverageTracker5116898_
		cover: (385 to: 400)
		declaredAt: (54 to: 69)
		by: receiverLiveType.
	#_coverageTracker5116898_
		coverAll:
			{402 to: 412}
		evaluating: [ receiver7 isEmptyType ]
		thatSends: #isEmptyType
		to: receiver7 ] value.
	#_coverageTracker5116898_
		coverAll:
			{414 to: 417}
		evaluating: [
			receiver9 and: [
				[ | receiver8 |
				receiver8 _ #_coverageTracker5116898_
					cover: (421 to: 438)
					declaredAt: (35 to: 52)
					by: incompleteTypeInfo.
				#_coverageTracker5116898_
					coverAll:
						{440 to: 446}
					evaluating: [ receiver8 isEmpty ]
					thatSends: #isEmpty
					to: receiver8 ] value ]]
		thatSends: #and:
		to: receiver9 ] value.
	#_coverageTracker5116898_
		coverAll:
			{452 to: 458. 592 to: 599}
		evaluating: [
			receiver13
				ifTrue: [
					[ | receiver11 |
					receiver11 _ #_coverageTracker5116898_
						cover: (461 to: 466)
						declaredAt: (461 to: 466)
						by: issues.
					#_coverageTracker5116898_
						coverAll:
							{468 to: 471}
						evaluating: [
							receiver11 add:
								[ | receiver10 |
								receiver10 _ #_coverageTracker5116898_
									coverAll:
										{474 to: 512}
									by: TypeCheckingDragonIncompleteInformation.
								#_coverageTracker5116898_
									coverAll:
										{514 to: 538. 555 to: 558. 571 to: 573}
									evaluating: [
										receiver10
											forReceiverWithNoTypesOn:
												(#_coverageTracker5116898_
													cover: (540 to: 553)
													declaredAt: (216 to: 229)
													by: compiledMethod)
											for:
												(#_coverageTracker5116898_
													cover: (560 to: 569)
													declaredAt: (560 to: 569)
													by: methodNode)
											by:
												(#_coverageTracker5116898_
													cover: (575 to: 586)
													declaredAt: (19 to: 30)
													by: aMessageNode) ]
									thatSends: #forReceiverWithNoTypesOn:for:by:
									to: receiver10 ] value ]
						thatSends: #add:
						to: receiver11 ] value ]
				ifFalse: [
					[ | receiver12 |
					receiver12 _ #_coverageTracker5116898_
						coverAll:
							{603 to: 606}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5116898_
						coverAll:
							{608 to: 626. 641 to: 656}
						evaluating: [
							receiver12
								checkMessageSentIn:
									(#_coverageTracker5116898_
										cover: (628 to: 639)
										declaredAt: (19 to: 30)
										by: aMessageNode)
								isImplementedIn:
									(#_coverageTracker5116898_
										cover: (658 to: 673)
										declaredAt: (54 to: 69)
										by: receiverLiveType) ]
						thatSends: #checkMessageSentIn:isImplementedIn:
						to: receiver12 ] value ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver13 ] value.
	[ | receiver16 |
	receiver16 _ [ | receiver14 |
	receiver14 _ #_coverageTracker5116898_
		cover: (681 to: 692)
		declaredAt: (19 to: 30)
		by: aMessageNode.
	#_coverageTracker5116898_
		coverAll:
			{694 to: 719}
		evaluating: [ receiver14 argumentsInEvaluationOrder ]
		thatSends: #argumentsInEvaluationOrder
		to: receiver14 ] value.
	#_coverageTracker5116898_
		coverAll:
			{721 to: 723}
		evaluating: [
			receiver16 do: [ :argumentBlock |
				[ | receiver15 |
				receiver15 _ #_coverageTracker5116898_
					cover: (743 to: 755)
					declaredAt: (727 to: 739)
					by: argumentBlock.
				#_coverageTracker5116898_
					coverAll:
						{757 to: 763}
					evaluating: [
						receiver15 accept:
							(#_coverageTracker5116898_
								coverAll:
									{765 to: 768}
								byLiteralOrPseudoVariable: self) ]
					thatSends: #accept:
					to: receiver15 ] value ]]
		thatSends: #do:
		to: receiver16 ] value.! !
!Behavior method!
for: aCompiledMethod
	#_coverageTracker5116935_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5116935_
		coverAll:
			{27 to: 30}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5116935_
		coverAll:
			{32 to: 34}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker5116935_
		coverAll:
			{36 to: 49}
		evaluating: [
			receiver2 initializeFor:
				(#_coverageTracker5116935_
					cover: (51 to: 65)
					declaredAt: (6 to: 20)
					by: aCompiledMethod) ]
		thatSends: #initializeFor:
		to: receiver2 ] value.! !
!Behavior method!
receiver
	#_coverageTracker5116951_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5116951_
		cover: (12 to: 22)
		declaredAt: (12 to: 22)
		by: messageNode.
	#_coverageTracker5116951_
		coverAll:
			{24 to: 31}
		evaluating: [ receiver1 receiver ]
		thatSends: #receiver
		to: receiver1 ] value.! !
!Behavior method!
methodInstanceNotIndexable
	#_coverageTracker5116955_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5116955_
		coverAll:
			{29 to: 30}
		byLiteralOrPseudoVariable: 15.
	#_coverageTracker5116955_
		coverAll:
			{32 to: 35}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.! !
!Behavior method!
accept
	#_coverageTracker5116966_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5116966_
		coverAll:
			{9 to: 12}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5116966_
		coverAll:
			{14 to: 29}
		evaluating: [
			receiver1 visitMethodNode:
				(#_coverageTracker5116966_
					cover: (31 to: 40)
					declaredAt: (31 to: 40)
					by: methodNode) ]
		thatSends: #visitMethodNode:
		to: receiver1 ] value.! !
!Behavior method!
initializeFor: aCompiledMethod
	#_coverageTracker5116977_ markAsExecuted.
	#_coverageTracker5116977_
		cover: (34 to: 47)
		declaredAt: (34 to: 47)
		by:
			(compiledMethod _ #_coverageTracker5116977_
				cover: (52 to: 66)
				declaredAt: (16 to: 30)
				by: aCompiledMethod).! !
!Behavior method!
method
	#_coverageTracker5116989_ markAsExecuted.
	^ #_coverageTracker5116989_
		cover: (10 to: 23)
		declaredAt: (10 to: 23)
		by: compiledMethod.! !
!Behavior method!
hasIncompleteInfoAlerts
	#_coverageTracker5116995_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5116995_
		coverAll:
			{27 to: 30}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5116995_
		coverAll:
			{32 to: 51}
		evaluating: [ receiver1 incompleteInfoAlerts ]
		thatSends: #incompleteInfoAlerts
		to: receiver1 ] value.
	#_coverageTracker5116995_
		coverAll:
			{53 to: 56}
		evaluating: [ receiver2 size ]
		thatSends: #size
		to: receiver2 ] value.
	#_coverageTracker5116995_
		coverAll:
			{58 to: 58}
		evaluating: [
			receiver3 >
				(#_coverageTracker5116995_
					coverAll:
						{60 to: 60}
					byLiteralOrPseudoVariable: 0) ]
		thatSends: #>
		to: receiver3 ] value.! !
!Behavior method!
methodSelector
	#_coverageTracker5117010_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5117010_
		cover: (20 to: 33)
		declaredAt: (20 to: 33)
		by: compiledMethod.
	#_coverageTracker5117010_
		coverAll:
			{35 to: 42}
		evaluating: [ receiver1 selector ]
		thatSends: #selector
		to: receiver1 ] value.! !
!Behavior method!
showResultsWith: aLabelTrail
	#_coverageTracker5117013_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5117013_
		coverAll:
			{31 to: 34}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5117013_
		coverAll:
			{36 to: 54}
		evaluating: [ receiver1 shouldBeImplemented ]
		thatSends: #shouldBeImplemented
		to: receiver1 ] value.! !
!Behavior method!
warnings
	#_coverageTracker5117025_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker5117025_
		cover: (12 to: 17)
		declaredAt: (12 to: 17)
		by: issues.
	#_coverageTracker5117025_
		coverAll:
			{19 to: 25}
		evaluating: [
			receiver2 select: [ :issue |
				[ | receiver1 |
				receiver1 _ #_coverageTracker5117025_
					cover: (37 to: 41)
					declaredAt: (29 to: 33)
					by: issue.
				#_coverageTracker5117025_
					coverAll:
						{43 to: 51}
					evaluating: [
						receiver1 isKindOf:
							(#_coverageTracker5117025_
								coverAll:
									{53 to: 77}
								by: TypeCheckingDragonWarning) ]
					thatSends: #isKindOf:
					to: receiver1 ] value ]]
		thatSends: #select:
		to: receiver2 ] value.! !
!Behavior method!
methodWithMessageWithNoReturnTypes
	#_coverageTracker5117037_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5117037_
		coverAll:
			{38 to: 41}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5117037_
		coverAll:
			{43 to: 59. 63 to: 76}
		evaluating: [
			receiver1
				methodSumsNumber:
					(#_coverageTracker5117037_
						coverAll:
							{61 to: 61}
						byLiteralOrPseudoVariable: 1)
				anotherNumber:
					(#_coverageTracker5117037_
						coverAll:
							{78 to: 78}
						byLiteralOrPseudoVariable: 1) ]
		thatSends: #methodSumsNumber:anotherNumber:
		to: receiver1 ] value.
	#_coverageTracker5117037_
		coverAll:
			{81 to: 89}
		evaluating: [ receiver2 factorial ]
		thatSends: #factorial
		to: receiver2 ] value.! !
!Behavior method!
selector
	#_coverageTracker5117059_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5117059_
		coverAll:
			{11 to: 14}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5117059_
		coverAll:
			{16 to: 38}
		evaluating: [
			receiver1 shouldNotHappenBecause:
				(#_coverageTracker5117059_
					coverAll:
						{40 to: 111}
					byLiteralOrPseudoVariable: 'Method does not annotate types, there are no message nodes to evaluate') ]
		thatSends: #shouldNotHappenBecause:
		to: receiver1 ] value.! !
!Behavior method!
methodWithMessageArgumentToResolve
	#_coverageTracker5117064_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker5117064_
		coverAll:
			{37 to: 40}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5117064_
		coverAll:
			{42 to: 58. 77 to: 90}
		evaluating: [
			receiver3
				methodSumsNumber:
					[ | receiver1 |
					receiver1 _ #_coverageTracker5117064_
						coverAll:
							{61 to: 64}
						byLiteralOrPseudoVariable: '10'.
					#_coverageTracker5117064_
						coverAll:
							{66 to: 74}
						evaluating: [ receiver1 factorial ]
						thatSends: #factorial
						to: receiver1 ] value
				anotherNumber:
					[ | receiver2 |
					receiver2 _ #_coverageTracker5117064_
						coverAll:
							{93 to: 95}
						byLiteralOrPseudoVariable: '5'.
					#_coverageTracker5117064_
						coverAll:
							{97 to: 105}
						evaluating: [ receiver2 factorial ]
						thatSends: #factorial
						to: receiver2 ] value ]
		thatSends: #methodSumsNumber:anotherNumber:
		to: receiver3 ] value.! !
!Behavior method!
printASTOn: aCompiledMethod
	| stream |
	#_coverageTracker5117069_ markAsExecuted.
	#_coverageTracker5117069_
		cover: (45 to: 50)
		declaredAt: (35 to: 40)
		by:
			(stream _ [ | receiver1 |
			receiver1 _ #_coverageTracker5117069_
				coverAll:
					{55 to: 60}
				by: String.
			#_coverageTracker5117069_
				coverAll:
					{62 to: 72}
				evaluating: [ receiver1 writeStream ]
				thatSends: #writeStream
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ [ | receiver2 |
	receiver2 _ #_coverageTracker5117069_
		cover: (78 to: 92)
		declaredAt: (13 to: 27)
		by: aCompiledMethod.
	#_coverageTracker5117069_
		coverAll:
			{94 to: 103}
		evaluating: [ receiver2 methodNode ]
		thatSends: #methodNode
		to: receiver2 ] value.
	#_coverageTracker5117069_
		coverAll:
			{105 to: 116. 125 to: 131}
		evaluating: [
			receiver3
				nodePrintOn:
					(#_coverageTracker5117069_
						cover: (118 to: 123)
						declaredAt: (35 to: 40)
						by: stream)
				indent:
					(#_coverageTracker5117069_
						coverAll:
							{133 to: 133}
						byLiteralOrPseudoVariable: 0) ]
		thatSends: #nodePrintOn:indent:
		to: receiver3 ] value.
	^ #_coverageTracker5117069_
		cover: (138 to: 143)
		declaredAt: (35 to: 40)
		by: stream.! !
!Behavior method!
initializeFor: aCompiledMethod withMessage: anAlertMessage
	#_coverageTracker5117083_ markAsExecuted.
	#_coverageTracker5117083_
		cover: (62 to: 75)
		declaredAt: (62 to: 75)
		by:
			(compiledMethod _ #_coverageTracker5117083_
				cover: (80 to: 94)
				declaredAt: (16 to: 30)
				by: aCompiledMethod).
	#_coverageTracker5117083_
		cover: (98 to: 109)
		declaredAt: (98 to: 109)
		by:
			(alertMessage _ #_coverageTracker5117083_
				cover: (114 to: 127)
				declaredAt: (45 to: 58)
				by: anAlertMessage).! !
!Behavior method!
selector
	#_coverageTracker5117088_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5117088_
		cover: (12 to: 22)
		declaredAt: (12 to: 22)
		by: messageNode.
	#_coverageTracker5117088_
		coverAll:
			{24 to: 31}
		evaluating: [ receiver1 selector ]
		thatSends: #selector
		to: receiver1 ] value.! !
!Behavior method!
methodWithMessageNotUnderstood
	#_coverageTracker5117104_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5117104_
		coverAll:
			{33 to: 39}
		byLiteralOrPseudoVariable: 'false'.
	#_coverageTracker5117104_
		coverAll:
			{41 to: 43}
		evaluating: [ receiver1 not ]
		thatSends: #not
		to: receiver1 ] value.! !
!Behavior method!
emptyMethodPrimitive
	#_coverageTracker5117109_ markAsExecuted.! !
!Behavior method!
methodWithManyMessageNotUnderstood
	"The first message that visitor evaluates is factorial which is not understood by receiver that has also type problems"
	"The inner not message in the receiver it has a type problem, so this should force implement object recursion for receiver."
	#_coverageTracker5117112_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5117112_
		coverAll:
			{285 to: 291}
		byLiteralOrPseudoVariable: 'false'.
	#_coverageTracker5117112_
		coverAll:
			{293 to: 295}
		evaluating: [ receiver1 not ]
		thatSends: #not
		to: receiver1 ] value.
	#_coverageTracker5117112_
		coverAll:
			{297 to: 305}
		evaluating: [ receiver2 factorial ]
		thatSends: #factorial
		to: receiver2 ] value.! !
!Behavior method!
problemDescription
	#_coverageTracker5117116_ markAsExecuted.
	^ #_coverageTracker5117116_
		coverAll:
			{23 to: 54}
		byLiteralOrPseudoVariable: 'Method is not annotating types'.! !
!Behavior method!
m3
	#_coverageTracker5117128_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5117128_
		coverAll:
			{5 to: 6}
		byLiteralOrPseudoVariable: 45.
	#_coverageTracker5117128_
		coverAll:
			{8 to: 8}
		evaluating: [
			receiver1 +
				(#_coverageTracker5117128_
					coverAll:
						{10 to: 15}
					byLiteralOrPseudoVariable: 'hola') ]
		thatSends: #+
		to: receiver1 ] value.! !
!Behavior method!
initializeFor: aCompiledMethod collectingIssues: anIssuesCollection
	#_coverageTracker5117143_ markAsExecuted.
	#_coverageTracker5117143_
		cover: (70 to: 83)
		declaredAt: (70 to: 83)
		by:
			(compiledMethod _ #_coverageTracker5117143_
				cover: (88 to: 102)
				declaredAt: (16 to: 30)
				by: aCompiledMethod).
	#_coverageTracker5117143_
		cover: (106 to: 115)
		declaredAt: (106 to: 115)
		by:
			(methodNode _ [ | receiver1 |
			receiver1 _ #_coverageTracker5117143_
				cover: (120 to: 133)
				declaredAt: (70 to: 83)
				by: compiledMethod.
			#_coverageTracker5117143_
				coverAll:
					{135 to: 144}
				evaluating: [ receiver1 methodNode ]
				thatSends: #methodNode
				to: receiver1 ] value).
	#_coverageTracker5117143_
		cover: (149 to: 154)
		declaredAt: (149 to: 154)
		by:
			(issues _ #_coverageTracker5117143_
				cover: (159 to: 176)
				declaredAt: (50 to: 67)
				by: anIssuesCollection).! !
!Behavior method!
forReceiverWithNoTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode
	#_coverageTracker5117159_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5117159_
		coverAll:
			{82 to: 85}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5117159_
		coverAll:
			{87 to: 89}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker5117159_
		coverAll:
			{91 to: 103. 121 to: 124. 138 to: 140. 155 to: 166}
		evaluating: [
			receiver2
				initializeOn:
					(#_coverageTracker5117159_
						cover: (105 to: 119)
						declaredAt: (27 to: 41)
						by: aCompiledMethod)
				for:
					(#_coverageTracker5117159_
						cover: (126 to: 136)
						declaredAt: (48 to: 58)
						by: aMethodNode)
				by:
					(#_coverageTracker5117159_
						cover: (142 to: 153)
						declaredAt: (64 to: 75)
						by: aMessageNode)
				description:
					(#_coverageTracker5117159_
						coverAll:
							{168 to: 190}
						byLiteralOrPseudoVariable: 'Receiver has no types') ]
		thatSends: #initializeOn:for:by:description:
		to: receiver2 ] value.! !
!Behavior method!
selector
	#_coverageTracker5117165_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5117165_
		cover: (12 to: 22)
		declaredAt: (12 to: 22)
		by: messageNode.
	#_coverageTracker5117165_
		coverAll:
			{24 to: 31}
		evaluating: [ receiver1 selector ]
		thatSends: #selector
		to: receiver1 ] value.! !
!Behavior method!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode reason: aReasonDescription
	#_coverageTracker5117172_ markAsExecuted.
	#_coverageTracker5117172_
		cover: (94 to: 107)
		declaredAt: (94 to: 107)
		by:
			(compiledMethod _ #_coverageTracker5117172_
				cover: (112 to: 126)
				declaredAt: (15 to: 29)
				by: aCompiledMethod).
	#_coverageTracker5117172_
		cover: (130 to: 139)
		declaredAt: (130 to: 139)
		by:
			(methodNode _ #_coverageTracker5117172_
				cover: (144 to: 154)
				declaredAt: (36 to: 46)
				by: aMethodNode).
	#_coverageTracker5117172_
		cover: (158 to: 168)
		declaredAt: (158 to: 168)
		by:
			(messageNode _ #_coverageTracker5117172_
				cover: (173 to: 184)
				declaredAt: (52 to: 63)
				by: aMessageNode).
	#_coverageTracker5117172_
		cover: (188 to: 204)
		declaredAt: (188 to: 204)
		by:
			(reasonDescription _ #_coverageTracker5117172_
				cover: (209 to: 226)
				declaredAt: (73 to: 90)
				by: aReasonDescription).! !
!Behavior method!
methodReference
	#_coverageTracker5117177_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5117177_
		cover: (21 to: 34)
		declaredAt: (21 to: 34)
		by: compiledMethod.
	#_coverageTracker5117177_
		coverAll:
			{36 to: 52}
		evaluating: [ receiver1 asMethodReference ]
		thatSends: #asMethodReference
		to: receiver1 ] value.! !
!Behavior method!
methodSumsNumber: aNumber anotherNumber: anotherNumber
	#_coverageTracker5117193_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5117193_
		cover: (60 to: 72)
		declaredAt: (42 to: 54)
		by: anotherNumber.
	#_coverageTracker5117193_
		coverAll:
			{74 to: 74}
		evaluating: [
			receiver1 +
				(#_coverageTracker5117193_
					cover: (76 to: 82)
					declaredAt: (19 to: 25)
					by: aNumber) ]
		thatSends: #+
		to: receiver1 ] value.! !
!Behavior method!
methodWithReceiverWithNoTypes
	#_coverageTracker5117199_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5117199_
		cover: (32 to: 52)
		declaredAt: (32 to: 52)
		by: nilVariableWithNoType.
	#_coverageTracker5117199_
		coverAll:
			{54 to: 57}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.! !
!Behavior method!
issues
	#_coverageTracker5117203_ markAsExecuted.
	^ #_coverageTracker5117203_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by: issues.! !
!Behavior method!
typeCheckWhenEnabledTyping
	#_coverageTracker5117207_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5117207_
		coverAll:
			{30 to: 59}
		by: TypeCheckerDragonMethodVisitor.
	#_coverageTracker5117207_
		coverAll:
			{61 to: 64. 81 to: 97}
		evaluating: [
			receiver1
				for:
					(#_coverageTracker5117207_
						cover: (66 to: 79)
						declaredAt: (66 to: 79)
						by: compiledMethod)
				collectingAlerts:
					(#_coverageTracker5117207_
						cover: (99 to: 104)
						declaredAt: (99 to: 104)
						by: issues) ]
		thatSends: #for:collectingAlerts:
		to: receiver1 ] value.
	#_coverageTracker5117207_
		coverAll:
			{107 to: 112}
		evaluating: [ receiver2 accept ]
		thatSends: #accept
		to: receiver2 ] value.
	^ #_coverageTracker5117207_
		coverAll:
			{117 to: 120}
		byLiteralOrPseudoVariable: self.! !
!Behavior method!
checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType
	| implementorsFinder |
	#_coverageTracker5117212_ markAsExecuted.
	#_coverageTracker5117212_
		cover: (98 to: 115)
		declaredAt: (74 to: 91)
		by:
			(implementorsFinder _ [ | receiver2 |
			receiver2 _ #_coverageTracker5117212_
				coverAll:
					{120 to: 145}
				by: AllActualLocalImplementors.
			#_coverageTracker5117212_
				coverAll:
					{147 to: 149. 179 to: 185}
				evaluating: [
					receiver2
						of:
							[ | receiver1 |
							receiver1 _ #_coverageTracker5117212_
								cover: (151 to: 162)
								declaredAt: (21 to: 32)
								by: aMessageNode.
							#_coverageTracker5117212_
								coverAll:
									{164 to: 177}
								evaluating: [ receiver1 selectorSymbol ]
								thatSends: #selectorSymbol
								to: receiver1 ] value
						forAll:
							(#_coverageTracker5117212_
								cover: (187 to: 202)
								declaredAt: (51 to: 66)
								by: receiverLiveType) ]
				thatSends: #of:forAll:
				to: receiver2 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker5117212_
		cover: (206 to: 223)
		declaredAt: (74 to: 91)
		by: implementorsFinder.
	#_coverageTracker5117212_
		coverAll:
			{225 to: 237}
		evaluating: [ receiver3 LiveTypeValue ]
		thatSends: #LiveTypeValue
		to: receiver3 ] value.
	[ | receiver7 |
	receiver7 _ [ | receiver4 |
	receiver4 _ #_coverageTracker5117212_
		cover: (243 to: 260)
		declaredAt: (74 to: 91)
		by: implementorsFinder.
	#_coverageTracker5117212_
		coverAll:
			{262 to: 282}
		evaluating: [ receiver4 notImplementedIsEmpty ]
		thatSends: #notImplementedIsEmpty
		to: receiver4 ] value.
	#_coverageTracker5117212_
		coverAll:
			{284 to: 291}
		evaluating: [
			receiver7 ifFalse: [
				[ | receiver6 |
				receiver6 _ #_coverageTracker5117212_
					cover: (299 to: 304)
					declaredAt: (299 to: 304)
					by: issues.
				#_coverageTracker5117212_
					coverAll:
						{306 to: 309}
					evaluating: [
						receiver6 add:
							[ | receiver5 |
							receiver5 _ #_coverageTracker5117212_
								coverAll:
									{312 to: 334}
								by: TypeCheckingDragonError.
							#_coverageTracker5117212_
								coverAll:
									{336 to: 360. 377 to: 380. 393 to: 395}
								evaluating: [
									receiver5
										forReceiverWithNoTypesOn:
											(#_coverageTracker5117212_
												cover: (362 to: 375)
												declaredAt: (362 to: 375)
												by: compiledMethod)
										for:
											(#_coverageTracker5117212_
												cover: (382 to: 391)
												declaredAt: (382 to: 391)
												by: methodNode)
										by:
											(#_coverageTracker5117212_
												cover: (397 to: 408)
												declaredAt: (21 to: 32)
												by: aMessageNode) ]
								thatSends: #forReceiverWithNoTypesOn:for:by:
								to: receiver5 ] value ]
					thatSends: #add:
					to: receiver6 ] value ]]
		thatSends: #ifFalse:
		to: receiver7 ] value.! !
!Behavior method!
selector
	#_coverageTracker5117236_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker5117236_
		cover: (12 to: 22)
		declaredAt: (12 to: 22)
		by: messageNode.
	#_coverageTracker5117236_
		coverAll:
			{24 to: 31}
		evaluating: [ receiver1 selector ]
		thatSends: #selector
		to: receiver1 ] value.! !
!Behavior method!
problemDescription
	#_coverageTracker5117241_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker5117241_
		coverAll:
			{21 to: 24}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5117241_
		coverAll:
			{26 to: 44}
		evaluating: [ receiver1 shouldBeImplemented ]
		thatSends: #shouldBeImplemented
		to: receiver1 ] value.! !
!Behavior method!
for: aCompiledMethod withMessage: anAlertMessage
	#_coverageTracker5117244_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5117244_
		coverAll:
			{53 to: 56}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5117244_
		coverAll:
			{58 to: 60}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker5117244_
		coverAll:
			{62 to: 75. 93 to: 104}
		evaluating: [
			receiver2
				initializeFor:
					(#_coverageTracker5117244_
						cover: (77 to: 91)
						declaredAt: (6 to: 20)
						by: aCompiledMethod)
				withMessage:
					(#_coverageTracker5117244_
						cover: (106 to: 119)
						declaredAt: (35 to: 48)
						by: anAlertMessage) ]
		thatSends: #initializeFor:withMessage:
		to: receiver2 ] value.! !
!Behavior method!
typeCheck
	#_coverageTracker5117250_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5117250_
		cover: (12 to: 25)
		declaredAt: (12 to: 25)
		by: compiledMethod.
	#_coverageTracker5117250_
		coverAll:
			{27 to: 37}
		evaluating: [ receiver1 isPrimitive ]
		thatSends: #isPrimitive
		to: receiver1 ] value.
	#_coverageTracker5117250_
		coverAll:
			{39 to: 45}
		evaluating: [ receiver2 ifTrue: [ ^ #_coverageTracker5117250_
					coverAll:
						{49 to: 52}
					byLiteralOrPseudoVariable: self ]]
		thatSends: #ifTrue:
		to: receiver2 ] value.
	[ | receiver6 |
	receiver6 _ [ | receiver3 |
	receiver3 _ #_coverageTracker5117250_
		cover: (57 to: 70)
		declaredAt: (12 to: 25)
		by: compiledMethod.
	#_coverageTracker5117250_
		coverAll:
			{72 to: 88}
		evaluating: [ receiver3 isAnnotatingTypes ]
		thatSends: #isAnnotatingTypes
		to: receiver3 ] value.
	#_coverageTracker5117250_
		coverAll:
			{93 to: 99. 138 to: 145}
		evaluating: [
			receiver6
				ifTrue: [
					[ | receiver4 |
					receiver4 _ #_coverageTracker5117250_
						coverAll:
							{102 to: 105}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5117250_
						coverAll:
							{107 to: 132}
						evaluating: [ receiver4 typeCheckWhenEnabledTyping ]
						thatSends: #typeCheckWhenEnabledTyping
						to: receiver4 ] value ]
				ifFalse: [
					[ | receiver5 |
					receiver5 _ #_coverageTracker5117250_
						coverAll:
							{149 to: 152}
						byLiteralOrPseudoVariable: self.
					#_coverageTracker5117250_
						coverAll:
							{154 to: 180}
						evaluating: [ receiver5 typeCheckWhenDisabledTyping ]
						thatSends: #typeCheckWhenDisabledTyping
						to: receiver5 ] value ]]
		thatSends: #ifTrue:ifFalse:
		to: receiver6 ] value.! !
!Behavior method!
forReceiverWithNoTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode
	#_coverageTracker5117268_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker5117268_
		coverAll:
			{80 to: 83}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker5117268_
		coverAll:
			{85 to: 87}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker5117268_
		coverAll:
			{89 to: 101. 119 to: 122. 136 to: 138. 153 to: 164}
		evaluating: [
			receiver2
				initializeOn:
					(#_coverageTracker5117268_
						cover: (103 to: 117)
						declaredAt: (27 to: 41)
						by: aCompiledMethod)
				for:
					(#_coverageTracker5117268_
						cover: (124 to: 134)
						declaredAt: (48 to: 58)
						by: aMethodNode)
				by:
					(#_coverageTracker5117268_
						cover: (140 to: 151)
						declaredAt: (64 to: 75)
						by: aMessageNode)
				description:
					(#_coverageTracker5117268_
						coverAll:
							{166 to: 208}
						byLiteralOrPseudoVariable: 'No type information on receiver collected') ]
		thatSends: #initializeOn:for:by:description:
		to: receiver2 ] value.! !
!Behavior method!
method
	#_coverageTracker5117275_ markAsExecuted.
	^ #_coverageTracker5117275_
		cover: (10 to: 23)
		declaredAt: (10 to: 23)
		by: compiledMethod.! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:25:26'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:25:26'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/5/2024 19:27:16' prior: 50537824 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation forReceiverWithNoTypesOn: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !

!methodRemoval: IncompleteTypeInfoError #addTo: stamp: 'JFGO 2/5/2024 19:28:32'!
addTo: aMethodTypeCheckerVisitor
	
	aMethodTypeCheckerVisitor addWarning: self node: messageNode .!

!methodRemoval: IncompleteTypeInfoWarning #addTo: stamp: 'JFGO 2/5/2024 19:28:50'!
addTo: aMethodTypeCheckerVisitor 
	"TODO. After removing Hernan's Type Checker, rename the message below to addIssue: or addNonDeductibleTypeIssue:. Julian"
	aMethodTypeCheckerVisitor addProblem: self node: messageNode !

!methodRemoval: IncompleteTypeInfoError class #dueToMissingImplementationOf:node: stamp: 'JFGO 2/5/2024 19:31:13'!
dueToMissingImplementationOf: aMethodReference node: aMessageNode 
	
	^self of: aMethodReference describedAs: (self missingImplementationDescriptionOf: aMethodReference) node: aMessageNode.!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/5/2024 19:31:36' prior: 50536687!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker :methodChecked | | warning error |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		"self assert: '#not not implemented in String' equals: error problemDescription .	" "TODO"
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning receiver key) equals: 'false not'.
		self assert: (warning selector key) equals: #factorial.
	]. 
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:31:38'!
ERROR!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 2/5/2024 19:33:12' prior: 50537185 overrides: 50534673!
liveTypesIn: aCompiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfoReasons castingWith: aTypeCastApplier storingGenericsInfoIn: aStorage
	
	| messageReturnTypes sentSelector receiverTypes  |

	sentSelector := self selectorSymbol.
	receiverTypes := aTypeCastApplier receiverLiveTypesFor: self in: aCompiledMethod addingIncompleteTypeInfoTo:  incompleteTypeInfoReasons storingGenericsInfoIn: aStorage.
	
	messageReturnTypes := Set new.
	receiverTypes liveTypesDo: [:aReceiverType | | currentReceiverClass currentMethodRef | 								
			currentReceiverClass := aReceiverType liveClass.
			currentMethodRef := (MethodReference class: currentReceiverClass selector: sentSelector).
			(aStorage genericTypeConstructorFrom: currentMethodRef) 
				ifNil: [
					(currentReceiverClass lookupSelector: sentSelector) 
						ifNil: [ incompleteTypeInfoReasons add: (	IncompleteTypeInfoError dueToMissingImplementationOf: currentMethodRef ) ]
						ifNotNil: [ :implementor |
							self returnTypesOf: implementor 
								from: aReceiverType 
								receiving: sentSelector 
								in: aCompiledMethod
								addingReturnTypesTo: messageReturnTypes 
								addingIncompleteTypeInfoTo: incompleteTypeInfoReasons 
								storingGenericsInfoIn: aStorage
							].
				] 
				ifNotNil: [:aGenericTypeConstructor | 
					messageReturnTypes add: (aGenericTypeConstructor in: aCompiledMethod forArguments: self argumentsInEvaluationOrder storingGenericsInfoIn: aStorage).
				].
			
			].
		
	^RawToLiveTypesAdapter new adapt: messageReturnTypes.! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:33:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:34:26'!
ERROR!

aMessageNode!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:36:45'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:37:01'!
ERROR!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:37:01'!
ERROR!

self receiver!

self receiver key!

self receiver!

self = {'false' not}!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/5/2024 19:39:11' prior: 50539843!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker :methodChecked | | warning error |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		"self assert: '#not not implemented in String' equals: error problemDescription .	" "TODO"
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning receiver receiver) equals: 'false'.
		self assert: (warning receiver selector) equals: #not.
		self assert: (warning selector key) equals: #factorial.
	]. 
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:39:16'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:39:16'!
FAILURE!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/5/2024 19:39:37' prior: 50539957!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker :methodChecked | | warning error |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		"self assert: '#not not implemented in String' equals: error problemDescription .	" "TODO"
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning receiver receiver key) equals: 'false'.
		self assert: (warning receiver selector key) equals: #not.
		self assert: (warning selector key) equals: #factorial.
	]. 
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:39:42'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/5/2024 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/5/2024 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/5/2024 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/5/2024 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/5/2024 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/5/2024 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/5/2024 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/5/2024 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/5/2024 19:40:04'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/5/2024 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/5/2024 19:40:04'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/5/2024 19:40:04'!
FAILURE!

self receiver!

self receiver !

self receiver key!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/5/2024 19:42:04' prior: 50536785!
test10MessageSentToMethodWithNoReturnTypeGeneratesIssue
	
		
	self typeCheckWithSelector: #methodWithMessageWithNoReturnTypes andAssert: [:typeChecker :methodChecked | | warning | 
		self assert: typeChecker hasWarnings .
		self assert: typeChecker warnings size equals: 1.
		warning := typeChecker warnings anyOne .
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #factorial.
		
	]. 
	
	
	! !

self receiver!

self receiver!

self receiver selector key!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/5/2024 19:43:24' prior: 50540096!
test10MessageSentToMethodWithNoReturnTypeGeneratesIssue
	
		
	self typeCheckWithSelector: #methodWithMessageWithNoReturnTypes andAssert: [:typeChecker :methodChecked | | warning | 
		self assert: typeChecker hasWarnings .
		self assert: typeChecker warnings size equals: 1.
		warning := typeChecker warnings anyOne .
		self assert: (warning method) equals: methodChecked .
		self assert: (warning receiver selector key) equals: #methodSumsNumber:anotherNumber:.
		self assert: (warning selector key) equals: #factorial.
		
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/5/2024 19:43:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/5/2024 19:43:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/5/2024 19:43:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/5/2024 19:43:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/5/2024 19:43:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/5/2024 19:43:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:43:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/5/2024 19:43:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/5/2024 19:43:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/5/2024 19:43:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/5/2024 19:43:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/5/2024 19:43:32'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/5/2024 19:43:32'!
PASSED!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 2/5/2024 19:44:07' prior: 50537258!
returnTypesOf: implementor from: aReceiverType receiving: sentSelector in: aCompiledMethod addingReturnTypesTo: messageReturnTypes addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage

	| returnTypes |

	"generic getter case"
	((aReceiverType isGenericType) and: [aStorage getterMethodsFor: aReceiverType includes: sentSelector]) ifTrue: [
		| parameterIndex |
		parameterIndex := (aStorage getterMethodsFor: aReceiverType) at: sentSelector.
		messageReturnTypes addAll: (aReceiverType generics at: parameterIndex).
		^self.
	].
	
	"generic setter case"
	(((aStorage tracedMethodsFor: aReceiverType liveClass) includesKey: sentSelector)
		or: [(aStorage tracedMethodsFromParametersFor: aReceiverType liveClass) includesKey: sentSelector])
		ifTrue: [ | lastArgument argumentType |
		"setters need to receive the object from where the type will be set, then there's at least one argument - Adrian"
		lastArgument := self argumentsInEvaluationOrder last.
		argumentType := lastArgument 
						liveTypesIn: aCompiledMethod 
						addingIncompleteTypeInfoTo: incompleteTypeInfoReasons 
						storingGenericsInfoIn: aStorage.
						
		messageReturnTypes add: argumentType.
		^self.	
	].
	
	"general case"
	returnTypes := implementor returnLiveTypesForReceiver: aReceiverType liveClass usingStorage: aStorage.
	(returnTypes isEmpty or: [returnTypes allSatisfy:[:item | item isEmptyType]])
		ifTrue: [ incompleteTypeInfoReasons add: (IncompleteTypeInfoWarning dueToNoReturnTypeOf: implementor methodReference) ]
		ifFalse: [
			returnTypes := returnTypes collect: [ :aType | aType asTypeFor: aReceiverType liveClass].
			messageReturnTypes addAll: returnTypes.
		].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/5/2024 19:44:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/5/2024 19:44:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/5/2024 19:44:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/5/2024 19:44:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/5/2024 19:44:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:44:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/5/2024 19:44:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/5/2024 19:44:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/5/2024 19:44:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/5/2024 19:44:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/5/2024 19:44:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/5/2024 19:44:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/5/2024 19:44:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/5/2024 19:44:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/5/2024 19:44:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/5/2024 19:44:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/5/2024 19:44:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/5/2024 19:44:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/5/2024 19:44:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/5/2024 19:44:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/5/2024 19:44:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/5/2024 19:44:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/5/2024 19:44:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/5/2024 19:44:21'!
PASSED!

----SNAPSHOT----(5 February 2024 19:45:41) CuisUniversity-6169.image priorSource: 6608202!

----SNAPSHOT----(5 February 2024 19:49:15) CuisUniversity-6169.image priorSource: 6678210!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 17:32:51'!
test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 17:33:04' prior: 50540352!
test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes


	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 17:33:13' prior: 50540358!
test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes


	self assert: true.
	! !
!TypeCheckingDragonError class methodsFor: 'instance creation' stamp: 'JFGO 2/6/2024 17:49:52'!
forNotImplementedTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'Receiver has no types' .! !
!TypeCheckingDragonIncompleteInformation class methodsFor: 'instance creation' stamp: 'JFGO 2/6/2024 17:49:52'!
forNotImplementedTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'No type information on receiver collected'.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 2/6/2024 17:49:52' prior: 50539789 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation forNotImplementedTypesOn: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 2/6/2024 17:49:52' prior: 50537852!
checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType 
	
	| implementorsFinder |
	
	implementorsFinder := AllActualLocalImplementors of: aMessageNode selectorSymbol forAll: receiverLiveType.
	implementorsFinder LiveTypeValue.
	
	implementorsFinder notImplementedIsEmpty ifFalse: [  
		issues add: (TypeCheckingDragonError forNotImplementedTypesOn: compiledMethod for: methodNode by: aMessageNode)].! !

!methodRemoval: TypeCheckingDragonError class #forReceiverWithNoTypesOn:for:by: stamp: 'JFGO 2/6/2024 17:49:52'!
forReceiverWithNoTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'Receiver has no types' .!

!methodRemoval: TypeCheckingDragonIncompleteInformation class #forReceiverWithNoTypesOn:for:by: stamp: 'JFGO 2/6/2024 17:49:52'!
forReceiverWithNoTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'No type information on receiver collected'.!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/6/2024 17:50:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/6/2024 17:50:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/6/2024 17:50:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 17:50:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/6/2024 17:50:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/6/2024 17:50:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/6/2024 17:50:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/6/2024 17:50:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/6/2024 17:50:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/6/2024 17:50:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/6/2024 17:50:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 17:50:03'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes stamp: 'JFGO 2/6/2024 17:50:03'!
PASSED!
!TypeCheckingDragonError class methodsFor: 'instance creation' stamp: 'JFGO 2/6/2024 17:51:16'!
on: notImplementedTypes forNotImplementedTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'Receiver has no types' .! !
!TypeCheckingDragonIncompleteInformation class methodsFor: 'instance creation' stamp: 'JFGO 2/6/2024 17:51:16'!
on: notImplementedTypes forNotImplementedTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'No type information on receiver collected'.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 2/6/2024 17:51:16' prior: 50540391 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation on: implementorsFinder notImplemented forNotImplementedTypesOn: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 2/6/2024 17:51:16' prior: 50540420!
checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType 
	
	| implementorsFinder |
	
	implementorsFinder := AllActualLocalImplementors of: aMessageNode selectorSymbol forAll: receiverLiveType.
	implementorsFinder LiveTypeValue.
	
	implementorsFinder notImplementedIsEmpty ifFalse: [  
		issues add: (TypeCheckingDragonError on: implementorsFinder notImplemented forNotImplementedTypesOn: compiledMethod for: methodNode by: aMessageNode)].! !

!methodRemoval: TypeCheckingDragonError class #forNotImplementedTypesOn:for:by: stamp: 'JFGO 2/6/2024 17:51:16'!
forNotImplementedTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'Receiver has no types' .!

!methodRemoval: TypeCheckingDragonIncompleteInformation class #forNotImplementedTypesOn:for:by: stamp: 'JFGO 2/6/2024 17:51:16'!
forNotImplementedTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'No type information on receiver collected'.!
!TypeCheckingDragonError class methodsFor: 'instance creation' stamp: 'JFGO 2/6/2024 17:51:59'!
forNotImplementedTypes: notImplementedTypes on: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'Receiver has no types' .! !
!TypeCheckingDragonIncompleteInformation class methodsFor: 'instance creation' stamp: 'JFGO 2/6/2024 17:51:59'!
forNotImplementedTypes: notImplementedTypes on: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'No type information on receiver collected'.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 2/6/2024 17:51:59' prior: 50540564!
checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType 
	
	| implementorsFinder |
	
	implementorsFinder := AllActualLocalImplementors of: aMessageNode selectorSymbol forAll: receiverLiveType.
	implementorsFinder LiveTypeValue.
	
	implementorsFinder notImplementedIsEmpty ifFalse: [  
		issues add: (TypeCheckingDragonError forNotImplementedTypes: implementorsFinder notImplemented on: compiledMethod for: methodNode by: aMessageNode)].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'as yet unclassified' stamp: 'JFGO 2/6/2024 17:51:59' prior: 50540534 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation forNotImplementedTypes: implementorsFinder notImplemented on: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !

!methodRemoval: TypeCheckingDragonError class #on:forNotImplementedTypesOn:for:by: stamp: 'JFGO 2/6/2024 17:51:59'!
on: notImplementedTypes forNotImplementedTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'Receiver has no types' .!

!methodRemoval: TypeCheckingDragonIncompleteInformation class #on:forNotImplementedTypesOn:for:by: stamp: 'JFGO 2/6/2024 17:51:59'!
on: notImplementedTypes forNotImplementedTypesOn: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'No type information on receiver collected'.!
!TypeCheckingDragonError methodsFor: 'initialization' stamp: 'JFGO 2/6/2024 17:53:27'!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode notImplementedTypes: description  .
	compiledMethod := aCompiledMethod .
	methodNode := aMethodNode.
	messageNode := aMessageNode.! !
!TypeCheckingDragonError class methodsFor: 'as yet unclassified' stamp: 'JFGO 2/6/2024 17:53:27' prior: 50540602!
forNotImplementedTypes: notImplementedTypes on: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode notImplementedTypes: 'Receiver has no types' .! !

!methodRemoval: TypeCheckingDragonError #initializeOn:for:by:description: stamp: 'JFGO 2/6/2024 17:53:27'!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: description  .
	compiledMethod := aCompiledMethod .
	methodNode := aMethodNode.
	messageNode := aMessageNode.!
!TypeCheckingDragonError methodsFor: 'initialization' stamp: 'JFGO 2/6/2024 17:53:38' prior: 50540694!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode notImplementedTypes: notImplementedTypes  .
	compiledMethod := aCompiledMethod .
	methodNode := aMethodNode.
	messageNode := aMessageNode.! !

!classDefinition: #TypeCheckingDragonError category: #'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 2/6/2024 17:53:56'!
TypeCheckingResultsIssues subclass: #TypeCheckingDragonError
	instanceVariableNames: 'methodNode messageNode notImplemented'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckingDragonError methodsFor: 'initialization' stamp: 'JFGO 2/6/2024 17:53:54' prior: 50540724!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode notImplementedTypes: notImplementedTypes  .
	compiledMethod := aCompiledMethod .
	methodNode := aMethodNode.
	messageNode := aMessageNode.
	notImplemented:= notImplemented.! !
!TypeCheckingDragonError methodsFor: 'initialization' stamp: 'JFGO 2/6/2024 17:53:59' prior: 50540745!
initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode notImplementedTypes: notImplementedTypes  .
	compiledMethod := aCompiledMethod .
	methodNode := aMethodNode.
	messageNode := aMessageNode.
	notImplemented:= notImplementedTypes.! !
!TypeCheckingDragonError class methodsFor: 'instance creation' stamp: 'JFGO 2/6/2024 17:54:11' prior: 50540704!
forNotImplementedTypes: notImplementedTypes on: aCompiledMethod for: aMethodNode by: aMessageNode 
	
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode notImplementedTypes: notImplementedTypes.! !
!TypeCheckingDragonError methodsFor: 'printing' stamp: 'JFGO 2/6/2024 17:56:54' prior: 50536982 overrides: 50538144!
problemDescription
	^ self selector identifierPrintString, ' not implemented in ', self notImplementedTypes asCommaStringAnd  .! !
!TypeCheckingDragonError methodsFor: 'printing' stamp: 'JFGO 2/6/2024 17:57:05'!
notImplementedTypes
	
	^notImplemented collect: [:aNotImplemented | aNotImplemented actualClass ]! !

self problemDescription !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 17:59:13' prior: 50536633!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	| methodSelector |
	methodSelector := #methodWithMessageNotUnderstood.
	self typeCheckWithSelector:  methodSelector andAssert: [:typeChecker :methodChecked| | error | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		error:= typeChecker issues anyOne.
		self assert: error problemDescription equals: '#not not implemented in String' .
		self assert: (error isKindOf: TypeCheckingDragonError ).
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 17:59:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 17:59:20'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:00:17' prior: 50540794!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	| methodSelector |
	methodSelector := #methodWithMessageNotUnderstood.
	self typeCheckWithSelector:  methodSelector andAssert: [:typeChecker :methodChecked| | error | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		error:= typeChecker issues anyOne.
		self assert: error problemDescription equals: '#not not implemented in String' .
		self assert: (error isKindOf: TypeCheckingDragonError ).
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		self assert: error notImplementedTypes includes: String.
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 18:00:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/6/2024 18:00:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/6/2024 18:00:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/6/2024 18:00:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 18:00:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/6/2024 18:00:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/6/2024 18:00:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/6/2024 18:00:19'!
ERROR!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/6/2024 18:00:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/6/2024 18:00:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/6/2024 18:00:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/6/2024 18:00:19'!
ERROR!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:00:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes stamp: 'JFGO 2/6/2024 18:00:19'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 18:00:35'!
PASSED!

self problemDescription !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:01:28' prior: 50536803!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	self performMethodWithSelector: #methodWithVariableWithManyTypes typeCheckAndAssert: [:typeChecker :methodChecked | | error | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasErrors.
		error := typeChecker errors anyOne.
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'v1'.
		self assert: (error selector key) equals: #factorial.
		self assert: error problemDescription equals: '#factorial not implemented in OrderedCollection and String'.
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:01:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:01:33'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:02:11' prior: 50540918!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	self performMethodWithSelector: #methodWithVariableWithManyTypes typeCheckAndAssert: [:typeChecker :methodChecked | | error | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasErrors.
		error := typeChecker errors anyOne.
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'v1'.
		self assert: (error selector key) equals: #factorial.
		self assert: error problemDescription equals: '#factorial not implemented in OrderedCollection and String'.
		self assert: error notImplementedTypes size equals: 2.
		self assert: error notImplementedTypes includes: String.
		self assert: error notImplementedTypes includes: OrderedCollection.
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:02:14'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:02:19' prior: 50540950!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	self performMethodWithSelector: #methodWithVariableWithManyTypes typeCheckAndAssert: [:typeChecker :methodChecked | | error | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasErrors.
		error := typeChecker errors anyOne.
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'v1'.
		self assert: error selector key equals: #factorial.
		self assert: error problemDescription equals: '#factorial not implemented in OrderedCollection and String'.
		self assert: error notImplementedTypes size equals: 2.
		self assert: error notImplementedTypes includes: String.
		self assert: error notImplementedTypes includes: OrderedCollection.
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:02:21'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:02:29' prior: 50540984!
test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType

	
	self performMethodWithSelector: #methodWithVariableWithManyTypes typeCheckAndAssert: [:typeChecker :methodChecked | | error | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasErrors.
		error := typeChecker errors anyOne.
		self assert: error method equals: methodChecked .
		self assert: error receiver key equals: 'v1'.
		self assert: error selector key equals: #factorial.
		self assert: error problemDescription equals: '#factorial not implemented in OrderedCollection and String'.
		self assert: error notImplementedTypes size equals: 2.
		self assert: error notImplementedTypes includes: String.
		self assert: error notImplementedTypes includes: OrderedCollection.
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:02:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/6/2024 18:02:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/6/2024 18:02:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/6/2024 18:02:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 18:02:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/6/2024 18:02:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/6/2024 18:02:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/6/2024 18:02:30'!
ERROR!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/6/2024 18:02:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/6/2024 18:02:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/6/2024 18:02:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/6/2024 18:02:30'!
ERROR!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:02:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes stamp: 'JFGO 2/6/2024 18:02:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/6/2024 18:02:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/6/2024 18:02:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/6/2024 18:02:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 18:02:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/6/2024 18:02:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/6/2024 18:02:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/6/2024 18:02:38'!
ERROR!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/6/2024 18:02:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/6/2024 18:02:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/6/2024 18:02:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/6/2024 18:02:38'!
ERROR!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:02:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes stamp: 'JFGO 2/6/2024 18:02:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/6/2024 18:02:41'!
ERROR!
!TypeCheckingDragonIncompleteInformation class methodsFor: 'instance creation' stamp: 'JFGO 2/6/2024 18:04:21'!
on: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'No type information on receiver collected'.! !

!methodRemoval: TypeCheckingDragonIncompleteInformation class #forNotImplementedTypes:on:for:by: stamp: 'JFGO 2/6/2024 18:04:21'!
forNotImplementedTypes: notImplementedTypes on: aCompiledMethod for: aMethodNode by: aMessageNode 
	^self new initializeOn: aCompiledMethod for: aMethodNode by: aMessageNode description: 'No type information on receiver collected'.!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/6/2024 18:04:52' prior: 50540643 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation on: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/6/2024 18:04:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/6/2024 18:04:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/6/2024 18:04:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 18:04:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/6/2024 18:04:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/6/2024 18:04:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/6/2024 18:04:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/6/2024 18:04:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/6/2024 18:04:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/6/2024 18:04:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/6/2024 18:04:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:04:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes stamp: 'JFGO 2/6/2024 18:04:56'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:05:12' prior: 50536604!
test02MethodThatDontCheckTypesGeneratesIssue

	| methodToCheck |
	
	methodToCheck := TypeCheckerDragonTestMethods >> #methodTypedCorrectlyEnableTyping.
	methodToCheck removeProperties .
	
	self typeCheckOn: methodToCheck andAssert: [:typeChecker :methodChecked |  
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		self assert: (typeChecker issues anyOne isKindOf: MethodNotAnnotatingTypesIssue ).
		self assert: typeChecker issues anyOne method equals: methodToCheck .
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/6/2024 18:05:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/6/2024 18:05:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/6/2024 18:05:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/6/2024 18:05:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 18:05:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/6/2024 18:05:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/6/2024 18:05:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/6/2024 18:05:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/6/2024 18:05:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/6/2024 18:05:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/6/2024 18:05:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/6/2024 18:05:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:05:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes stamp: 'JFGO 2/6/2024 18:05:13'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:05:41' prior: 50540828!
test04MethodWithMessageNotUnderstoodByReceiverGeneratesError

	| methodSelector |
	methodSelector := #methodWithMessageNotUnderstood.
	self typeCheckWithSelector:  methodSelector andAssert: [:typeChecker :methodChecked| | error | 
		self assert: typeChecker hasIssues.
		self assert: typeChecker issues size equals: 1.
		error:= typeChecker issues anyOne.
		self assert: error problemDescription equals: '#not not implemented in String' .
		self assert: (error isKindOf: TypeCheckingDragonError ).
		self assert: error method equals: methodChecked .
		self assert: error receiver key equals: 'false'.
		self assert: error selector key equals: #not.
		self assert: error notImplementedTypes includes: String.
	]. 
	
	! !

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 18:05:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/6/2024 18:05:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/6/2024 18:05:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/6/2024 18:05:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 18:05:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/6/2024 18:05:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/6/2024 18:05:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/6/2024 18:05:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/6/2024 18:05:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/6/2024 18:05:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/6/2024 18:05:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/6/2024 18:05:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:05:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes stamp: 'JFGO 2/6/2024 18:05:45'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:06:01' prior: 50536655!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error warning |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		self assert: '#not not implemented in String' equals: error problemDescription .	
		self assert: (error method) equals: methodChecked .
		self assert: (error receiver key) equals: 'false'.
		self assert: (error selector key) equals: #not.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #not.
		
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/6/2024 18:06:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/6/2024 18:06:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/6/2024 18:06:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/6/2024 18:06:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 18:06:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/6/2024 18:06:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/6/2024 18:06:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/6/2024 18:06:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/6/2024 18:06:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/6/2024 18:06:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/6/2024 18:06:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/6/2024 18:06:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:06:02'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes stamp: 'JFGO 2/6/2024 18:06:02'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:06:46' prior: 50541430!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error warning |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		self assert:  error problemDescription equals: '#not not implemented in String' .	
		self assert: error method equals: methodChecked .
		self assert: error receiver key equals: 'false'.
		self assert: error selector key equals: #not.
		self assert: error notImplementedTypes includes: String.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning selector key) equals: #not.
		
	]. 
	
	
	! !

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/6/2024 18:06:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/6/2024 18:06:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/6/2024 18:06:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/6/2024 18:06:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 18:06:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/6/2024 18:06:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/6/2024 18:06:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/6/2024 18:06:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/6/2024 18:06:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/6/2024 18:06:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/6/2024 18:06:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/6/2024 18:06:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:06:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes stamp: 'JFGO 2/6/2024 18:06:48'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:06:58' prior: 50541520!
test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert

	
	self typeCheckWithSelector: #methodWithMessageNestedNotUnderstoodOnReceiver andAssert: [:typeChecker :methodChecked | | error warning |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		self assert:  error problemDescription equals: '#not not implemented in String' .	
		self assert: error method equals: methodChecked .
		self assert: error receiver key equals: 'false'.
		self assert: error selector key equals: #not.
		self assert: error notImplementedTypes includes: String.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: warning method equals: methodChecked .
		self assert: warning selector key equals: #not.
		
	]. 
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:11:52' prior: 50540001!
test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts
	
	self typeCheckWithSelector: #methodWithManyMessageNotUnderstood andAssert: [:typeChecker :methodChecked | | warning error |
		self assert: 2 equals: typeChecker issues size.
		self assert: 1 equals: typeChecker errors size.
		self assert: 1 equals: typeChecker warnings size.
		error := typeChecker errors anyOne .
		self assert:  error problemDescription equals: '#not not implemented in String' .	
		self assert: error method equals: methodChecked .
		self assert: error receiver key equals: 'false'.
		self assert: error selector key equals: #not.
		self assert: error notImplementedTypes includes: String.
		warning := typeChecker warnings anyOne .
		self assert: '#not not implemented in String' equals: warning problemDescription .	
		self assert: (warning method) equals: methodChecked .
		self assert: (warning receiver receiver key) equals: 'false'.
		self assert: (warning receiver selector key) equals: #not.
		self assert: (warning selector key) equals: #factorial.
	]. 
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/6/2024 18:11:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/6/2024 18:11:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/6/2024 18:11:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/6/2024 18:11:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 18:11:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/6/2024 18:11:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/6/2024 18:11:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/6/2024 18:11:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/6/2024 18:11:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/6/2024 18:11:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/6/2024 18:11:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/6/2024 18:11:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:11:53'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes stamp: 'JFGO 2/6/2024 18:11:53'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:12:12' prior: 50536720!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert
	
	self typeCheckWithSelector: #methodWithReceiverWithNoTypes andAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasIncompleteInfoAlerts .
				
		alert := typeChecker incompleteInfoAlerts anyOne .
		self assert: alert problemDescription equals: 'No type information on receiver collected'.	
		self assert: (alert method) equals: methodChecked .
		self assert: (alert receiver key) equals: 'nilVariableWithNoType'.
		self assert: (alert selector key) equals: #size.
	]. 
	
	
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:12:21' prior: 50541740!
test07MethodWithMessageWithNoReceiverTypeGeneratesAlert
	
	self typeCheckWithSelector: #methodWithReceiverWithNoTypes andAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasIncompleteInfoAlerts .
				
		alert := typeChecker incompleteInfoAlerts anyOne .
		self assert: alert problemDescription equals: 'No type information on receiver collected'.	
		self assert: alert method equals: methodChecked .
		self assert: alert receiver key equals: 'nilVariableWithNoType'.
		self assert: alert selector key equals: #size.
	]. 
	
	
	
	
	! !

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/6/2024 18:12:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/6/2024 18:12:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/6/2024 18:12:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/6/2024 18:12:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 18:12:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/6/2024 18:12:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/6/2024 18:12:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/6/2024 18:12:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/6/2024 18:12:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/6/2024 18:12:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/6/2024 18:12:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/6/2024 18:12:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:12:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes stamp: 'JFGO 2/6/2024 18:12:23'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:12:51' prior: 50536743!
test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts

	self typeCheckWithSelector: #methodWithMessageArgumentToResolve andAssert: [:typeChecker :methodChecked | | secondError firstError | 
		self assert: 2 equals: typeChecker issues size.
		self assert: 2 equals: typeChecker errors size.
		firstError := typeChecker errors first .
		self assert: firstError method equals: methodChecked .
		self assert: firstError receiver key equals: '10'.
		self assert: firstError selector key equals: #factorial.
		
		secondError := typeChecker errors second .
		self assert: secondError method equals: methodChecked .
		self assert: secondError receiver key equals: '5'.
		self assert: secondError selector key equals: #factorial.
		
	]. 
	
	
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods without branches' stamp: 'JFGO 2/6/2024 18:13:06' prior: 50540116!
test10MessageSentToMethodWithNoReturnTypeGeneratesIssue
	
		
	self typeCheckWithSelector: #methodWithMessageWithNoReturnTypes andAssert: [:typeChecker :methodChecked | | warning | 
		self assert: typeChecker hasWarnings .
		self assert: typeChecker warnings size equals: 1.
		warning := typeChecker warnings anyOne .
		self assert: warning method equals: methodChecked .
		self assert: warning receiver selector key equals: #methodSumsNumber:anotherNumber:.
		self assert: warning selector key equals: #factorial.
		
	]. 
	
	
	! !
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 2/6/2024 18:13:19' prior: 50536500!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado"
	"Ademas, al momento de esta version de typeChecker, no hay LiveTyping sobre bloques, por eso se genera la alerta"
	"Una vez implementado, habra que agregar tests adicionales para chequeo de tipos dentro de bloques usando la informacion de generics"
		
	
	self performMethodWithSelector: #methodWithCollectionWithNoTypeError typeCheckAndAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasIncompleteInfoAlerts .
				
		alert := typeChecker incompleteInfoAlerts anyOne .
		self assert: 'No type information on receiver collected' equals: alert problemDescription .	
		self assert: alert method equals: methodChecked .
		self assert: alert receiver key equals: 'item'.
		self assert: alert selector key equals: #factorial.
	]. 
	
! !
!TypeCheckerDragonTest methodsFor: 'tests for generics collections' stamp: 'JFGO 2/6/2024 18:13:35' prior: 50541894!
test11MethodWithCollectionItemsGeneratesAlertForBlockVariable
	"El valor agregado de este test es discutible. Como minimo busca asegurarse que el paquete de LiveTypingGenerics esta correctamente instalado"
	"Ademas, al momento de esta version de typeChecker, no hay LiveTyping sobre bloques, por eso se genera la alerta"
	"Una vez implementado, habra que agregar tests adicionales para chequeo de tipos dentro de bloques usando la informacion de generics"
		
	
	self performMethodWithSelector: #methodWithCollectionWithNoTypeError typeCheckAndAssert: [:typeChecker :methodChecked | | alert | 
		self assert: 1 equals: typeChecker issues size.
		self assert: typeChecker hasIncompleteInfoAlerts .
				
		alert := typeChecker incompleteInfoAlerts anyOne .
		self assert: alert problemDescription equals: 'No type information on receiver collected'.	
		self assert: alert method equals: methodChecked .
		self assert: alert receiver key equals: 'item'.
		self assert: alert selector key equals: #factorial.
	]. 
	
! !

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:13:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/6/2024 18:13:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/6/2024 18:13:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/6/2024 18:13:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/6/2024 18:13:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/6/2024 18:13:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/6/2024 18:13:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/6/2024 18:13:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/6/2024 18:13:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/6/2024 18:13:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/6/2024 18:13:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/6/2024 18:13:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/6/2024 18:13:48'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes stamp: 'JFGO 2/6/2024 18:13:48'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/6/2024 18:17:22'!
test13TypeCastIfTrueCorrectlyFilterCastedType


	self assert: true.
	! !

!methodRemoval: TypeCheckerDragonTest #test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes stamp: 'JFGO 2/6/2024 18:17:22'!
test13ComparingWithClassEqualsTypeIfTrueCorrectlyFilterTypes


	self assert: true.
	!
!TypeCheckerDragonTestMethods methodsFor: 'without context filters' stamp: 'JFGO 2/6/2024 18:19:07'!
typeCastIfTrue
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifTrue: [v1 factorial].! !
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/6/2024 18:20:22' prior: 50542024!
test13TypeCastIfTrueCorrectlyFilterCastedType


	self typeCheckWithSelector: #emptyMethodPrimitive andAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	]. 
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/6/2024 18:20:30' prior: 50542045!
test13TypeCastIfTrueCorrectlyFilterCastedType


	self typeCheckWithSelector: #typeCastIfTrue andAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	]. 
	! !

----QUIT----(6 February 2024 18:21:00) CuisUniversity-6169.image priorSource: 6678302!

----STARTUP---- (7 February 2024 18:17:47) as C:\Users\julian.gutierrez\OneDrive - HEXACTA S.A\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!TypeCheckerDragonTest methodsFor: 'assertions' stamp: 'JFGO 2/7/2024 18:59:46' prior: 50536572!
typeCheckWithSelector: aSelector andAssert: anAssertionBlock
		
	| methodToCheck|
	methodToCheck := TypeCheckerDragonTestMethods >> aSelector.
	TypeCheckerDragonTestMethods new perform: aSelector.
	self typeCheckOn:  methodToCheck andAssert: anAssertionBlock.
	! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/7/2024 18:59:54'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/7/2024 18:59:59'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/7/2024 19:00:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/7/2024 19:00:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/7/2024 19:00:00'!
ERROR!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/7/2024 19:00:00'!
ERROR!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/7/2024 19:00:00'!
ERROR!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/7/2024 19:00:00'!
ERROR!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/7/2024 19:00:00'!
ERROR!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/7/2024 19:00:00'!
ERROR!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/7/2024 19:00:00'!
ERROR!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/7/2024 19:00:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/7/2024 19:00:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/7/2024 19:00:00'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/7/2024 19:02:25'!
ERROR!
!TypeCheckerDragonTest methodsFor: 'assertions' stamp: 'JFGO 12/21/2023 19:27:20' prior: 50542072!
typeCheckWithSelector: aSelector andAssert: anAssertionBlock
		
	| methodToCheck|
	methodToCheck := TypeCheckerDragonTestMethods >> aSelector.
	self typeCheckOn:  methodToCheck andAssert: anAssertionBlock.
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/7/2024 19:04:50' prior: 50542055!
test13TypeCastIfTrueCorrectlyFilterCastedType


	self performMethodWithSelector: #typeCastIfTrue typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	]. 
	! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/7/2024 19:22:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/7/2024 19:22:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/7/2024 19:22:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/7/2024 19:22:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/7/2024 19:22:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/7/2024 19:22:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/7/2024 19:22:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/7/2024 19:22:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/7/2024 19:22:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/7/2024 19:22:33'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/7/2024 19:22:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/7/2024 19:22:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/7/2024 19:22:33'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/7/2024 19:22:47'!
FAILURE!

----SNAPSHOT----(7 February 2024 20:25:28) CuisUniversity-6169.image priorSource: 6733205!

!testRun: #ActualImplementorsTest #test01WhenIsImplementedOnlyInRootReturnsThatImplementorOnly stamp: 'JFGO 2/9/2024 10:14:18'!
PASSED!

!testRun: #ActualImplementorsTest #test02ReturnsImplementorsOfSuperclasses stamp: 'JFGO 2/9/2024 10:14:18'!
PASSED!

!testRun: #ActualImplementorsTest #test03IfNotImplementedInRootOrSuperclassesDoesNotIncludeSubclassesImplementations stamp: 'JFGO 2/9/2024 10:14:18'!
PASSED!

!testRun: #ActualImplementorsTest #test04IncludesSubclassesImplementations stamp: 'JFGO 2/9/2024 10:14:18'!
PASSED!

!testRun: #ActualImplementorsTest #test05DoesNotIncludeImplementorsOfSubclassesNotDefinedInSuperclass stamp: 'JFGO 2/9/2024 10:14:18'!
PASSED!

!testRun: #ActualImplementorsTest #test06DoesNotIncludeImplementorsOfSiblingsWhenNotDefinedInSuperclass stamp: 'JFGO 2/9/2024 10:14:18'!
PASSED!

!testRun: #ActualImplementorsTest #test07ReturnsAllSubclassesImplementorsOfTheHighestImplementorClass stamp: 'JFGO 2/9/2024 10:14:18'!
PASSED!

!testRun: #ActualImplementorsTest #test08highestClassImplementingSelectorReturnsHighgestClass stamp: 'JFGO 2/9/2024 10:14:18'!
PASSED!

!testRun: #ActualImplementorsTest #test09WhenNoHighestClassImplementingSelectorIfNoneBlockIsEvaluated stamp: 'JFGO 2/9/2024 10:14:18'!
PASSED!

!testRun: #ActualSendersTest #test01SurelyRecognizeTypeSenderWhenSentToInstanceVariable stamp: 'JFGO 2/9/2024 10:14:18'!
PASSED!

!testRun: #ActualSendersTest #test02SurelyRecognizeTypeSenderWhenSentToTemporaryVariable stamp: 'JFGO 2/9/2024 10:14:18'!
PASSED!

!testRun: #ActualSendersTest #test03SurelyRecognizeTypeSenderInACollaboration stamp: 'JFGO 2/9/2024 10:14:18'!
PASSED!

!testRun: #ActualSendersTest #test04RecognizeTypeSendersToInstancesOfSubClasses stamp: 'JFGO 2/9/2024 10:14:18'!
PASSED!

!testRun: #ActualSendersTest #test05RecognizeTypeSendersToLiteralTrue stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test06RecognizeTypeSendersToLiteralFalse stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test07RecognizeTypeSendersToThisContext stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test08RecognizeTypeSendersToSelf stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test09RecognizeTypeSendersToSuper stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test09_01 stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test10RecognizeTypeSendersToSelfOfMessageImplementedInSuperclass stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test11RecognizeTypeSendersToReturnsOfMessageSend stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test12RecognizeTypeSendersOfChainedMessageSends stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test13RecognizeTypeSendersToReturnOfMessageSendNoMatterThePrecedence stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test14RecognizeTypeSendersToClasses stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test15RecognizeTypeSendersToVariablesReferencingClasses stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test16RecognizeTypeSendersToAnyLiteral stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test17CanRecognizePossibleTypeSenders stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test18RecognizeTypeSendersWhenReturnTypeIsSelfType stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test19RecognizeTypeSendersWhenReturnTypeIsClassType stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test20SurelySendWhenReceiverTypeIsSuperclassOfImplementorType stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test21ActualSendersWorksWithCascadeMessageSends stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!testRun: #ActualSendersTest #test22ActualSendersDoesNotHangWhenReceiverIsTempVarInMethodWithoutTypes stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:19'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:19'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:19'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:19'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:19' prior: 50542362!
m3 | x | self m1: 1. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 2/9/2024 10:14:19'!
m1!

!testRun: #AddParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 2/9/2024 10:14:19'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:19'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:19'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:19'!
m3 | x | self m1: 1 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:19'!
m1: p1 m2: p2 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:19' prior: 50542403!
m3 | x | self m1: 1 m2: 2 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'JFGO 2/9/2024 10:14:19'!
m1: p1 m3: p3!

!testRun: #AddParameterWithActualScopeTest #test01_01_DoesNotChangePossibleMessageSendWhenInstructedToDoSoWithKeywordMessages stamp: 'JFGO 2/9/2024 10:14:19'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 2/9/2024 10:14:20'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:20'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:20'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:20'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:20'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:20'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #AddParameterWithActualScopeTest #test02CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 2/9/2024 10:14:20'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 2/9/2024 10:14:20'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:20'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:20'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:21'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:21'!
m1: p1 m3: p3! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:21'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:21'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1 m3: 3! !

!testRun: #AddParameterWithActualScopeTest #test02_01_CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsForKeywordMessage stamp: 'JFGO 2/9/2024 10:14:21'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 2/9/2024 10:14:21'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:21'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:21'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:21'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:21'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:21'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:21'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:21' prior: 50542551!
m3 | x | x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 2/9/2024 10:14:21'!
m1!

!testRun: #AddParameterWithActualScopeTest #test03AddParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 2/9/2024 10:14:21'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:21'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 2/9/2024 10:14:22'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:22'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:22'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:22'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:22'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:22'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:22'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:22'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:22' prior: 50542609!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 2/9/2024 10:14:22'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 2/9/2024 10:14:22'!
m1!

!testRun: #AddParameterWithActualScopeTest #test04AddParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 2/9/2024 10:14:22'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 2/9/2024 10:14:22'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:22'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:22'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:22'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:22'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:22'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:22'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:22'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:22'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:22' prior: 50542673!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 2/9/2024 10:14:22'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 2/9/2024 10:14:22'!
m1!

!testRun: #AddParameterWithActualScopeTest #test05AddParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 2/9/2024 10:14:22'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 2/9/2024 10:14:23'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:23'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:23'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:23'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:23'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:23'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:23'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:23'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:23'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:23' prior: 50542738!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 2/9/2024 10:14:23'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 2/9/2024 10:14:23'!
m1!

!testRun: #AddParameterWithActualScopeTest #test06AddParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 2/9/2024 10:14:23'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 2/9/2024 10:14:23'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:23'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:23'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:23'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:23'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:23'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:24' prior: 50542792!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 2/9/2024 10:14:24'!
m1!

!testRun: #AddParameterWithActualScopeTest #test07AddParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 2/9/2024 10:14:24'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 2/9/2024 10:14:24'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:24'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:24'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:24'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:24'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:24'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:24' prior: 50542840!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 2/9/2024 10:14:24'!
m1!

!testRun: #AddParameterWithActualScopeTest #test08AddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 2/9/2024 10:14:24'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 2/9/2024 10:14:24'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:24'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:25'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:25'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:25'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:25'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:25'!
m3 self m1. ClassOfSender new m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:25'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:25' prior: 50542900!
m3 self m1: 1. ClassOfSender new m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 2/9/2024 10:14:25'!
m1!

!testRun: #AddParameterWithActualScopeTest #test09AddParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 2/9/2024 10:14:25'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 2/9/2024 10:14:25'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:25'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:25'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:25'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:25'!
m3 |x| self m1. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:25'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:25' prior: 50542946!
m3 |x| self m1: 1. x m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'JFGO 2/9/2024 10:14:25'!
m1!

!testRun: #AddParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenAddingParameterToMethodWithSureAndPossibleSenders stamp: 'JFGO 2/9/2024 10:14:25'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 2/9/2024 10:14:25'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:25'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:25'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:26'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:26'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:26'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #AddParameterWithActualScopeTest #test11CanNotAddParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 2/9/2024 10:14:26'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 2/9/2024 10:14:26'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:26'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 2/9/2024 10:14:26'!
PASSED!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:26'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:26'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:26'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:26'!
m3 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:26'!
m1: p1 m2: p2 ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:26' prior: 50543046!
m3 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'JFGO 2/9/2024 10:14:26'!
m1: p1!

!testRun: #AddParameterWithActualScopeTest #test13AddLastParameterCorrectly stamp: 'JFGO 2/9/2024 10:14:26'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:27'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'JFGO 2/9/2024 10:14:27'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AdditionalMethodStateTest #test01topBlockTempsMapReturnsTheTempsMapOfTheMethod stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #AdditionalMethodStateTest #test02MethodWithNoParametersNoTemporariesAreInitializedCorrectly stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #AdditionalMethodStateTest #test03MethodWithOnlyOneArgumentAreInitializedCorrectly stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #AdditionalMethodStateTest #test04rawTypesOfInvalidVariableNameEvaluatesIfAbsentBlock stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #AdditionalMethodStateTest #test05MethodWithOnlyOneTempTwoArgumentsAreInitializedCorrectly stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #AdditionalMethodStateTest #test06MethodWithRemoveVectorVariablesAreInitializedCorrectly stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #AdditionalMethodStateTest #test07RemoteVectorRawTypesIsNilWhenMethodHasNoVariableInRemoteVector stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #AdditionalMethodStateTest #test08VariableRawTypesIsNilWhenMethodHasNoVariableButHasInRemoteVector stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #AdditionalMethodStateTest #test09CanGetRawTypesWhenMethodHasNoVariableButHasInRemoteVector stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #ClosureVariablesTest #testOneArrayForTypesIsCreatedWhenAMethodHasNoClosures stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #DynamicTypesTest #test01TypeConvertionForAClassReturnsSameClass stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #DynamicTypesTest #test02TypeConvertionForSelfTypeReturnsReceiversType stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #DynamicTypesTest #test03TypeConvertionForClassTypeReturnsReceiversTypeClass stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #DynamicTypesTest #test04ClassMessageSendChainsClassType stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #DynamicTypesTest #test05TypeConvertionForInstanceTypeReturnsMetaclassSoleInstance stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #DynamicTypesTest #test06newTypeIsMetaclassSoleInstance stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #DynamicTypesTest #test07InstanceTypeReturnsClassWhenIsKindOfOfBehaviorButNotMeta stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #DynamicTypesTest #test08InstanceTypeErrorsWhenUsedWithNoBehavior stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #DynamicTypesTest #test09ClassTypeForMetamodelIsMetaclass stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test01TypeCollectionOfInstanceVariableDefinedInLeafClassDoesNotTraverseHierarchy stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test02TypeCollectionIncludesSubclasses stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test03TypeCollectionDoesNotIncludeSuperclassesAndSiblings stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test05TypeCollectionIncludesAllSubclasses stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test06IsNotMegamorphicIfTypesSizeIsLessToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test07IsMegamorphicIfTypesSizeIsEqualToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test08IsNotMegamorphicIfDoesNotFillRawTypesForLocalTypeInfo stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test09IsMegamorphicIfFillsRawTypesOfDefiningClassForLocalTypeInfo stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test10IsMegamorphicIfFillsRawTypesOfNotDefiningClassForLocalTypeInfo stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test11IsTypesEmptyOfNonLocalTypeInfoTakesCareOfHierarchy stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test12IsTypesEmptyForLocalTypeInfoOnlyCheckOnLocalRawTypes stamp: 'JFGO 2/9/2024 10:14:27'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 2/9/2024 10:14:27'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 2/9/2024 10:14:27'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #InstanceVariableTypeInfoTest #test13RemovingAClassRemovesItAndItsClassFromInstanceVariableRawTypes stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test14InstVarAtPutKeepTypeInfo stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test01InstanceVariablesTypesIsInitializedWithAnArrayOfClassInstSize stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test02InitializeInstanceVariablesTypesWithAllInstancesStoreCurrentClassInstancesTypes stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test03TypesOfDifferentInstVarsAreStoredCorrectly stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test04MoreThanOneTypeAreStoredCorrectlyInDifferentInstVars stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test05TypesAreStoredUpToInstVarTypesSize stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test06NoTypesAreStoredWhenInstVarTypesIsNil stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test07CommonSupertypeOfReturnsSupertypeOfStoredTypes stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test08CommonSupertypeIfNoTypesEvaluatesAlternativeBlockWhenNoTypeHasBeenStore stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test09EvaluatesIfAbsentBlockWhenAskTypeInfoForNonExistingInstVar stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test01KeepTypesOfLocalTemporariesI stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test02KeepTypesOfRemoteTemporaries stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test03KeepTypesOfParameters stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test04KeepReturnTopTypes stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test05KeepReturnConstantTypes stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test06KeepReturnReceiverTypes stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test07KeepReturnFromClosureTypes stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test08KeepReturnTypeWhenUnwind stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test09BlockReturnDoesNotAffectMethodReturn stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test10KeepTypesOfParametersWhenSendingValueWithArguments stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test11BlockWithParametersDoNotAffectMethodParameters stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'JFGO 2/9/2024 10:14:28'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'JFGO 2/9/2024 10:14:29'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables_WithSelectorsOfInstVarTypes stamp: 'JFGO 2/9/2024 10:14:29'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'JFGO 2/9/2024 10:14:29'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 2/9/2024 10:14:29'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsOfTempVarTypes stamp: 'JFGO 2/9/2024 10:14:29'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'JFGO 2/9/2024 10:14:30'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 2/9/2024 10:14:30'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'JFGO 2/9/2024 10:14:30'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 2/9/2024 10:14:30'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'JFGO 2/9/2024 10:14:30'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'JFGO 2/9/2024 10:14:30'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'JFGO 2/9/2024 10:14:30'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'JFGO 2/9/2024 10:14:30'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test045_AutocompletesEntriesFor_patternUnary_containsExactlyTwoMethods stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test046_AutocompletesEntriesFor_patternUnary_notContainsAnyMethod stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test047_AutocompletesEntriesFor_patternUnary_doesNotAutocompleteMethodOfSameClass stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test048_AutocompletesEntriesFor_patternKeyword_containsExactlyOneMethod stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test049_AutocompletesEntriesFor_patternKeyword_notContainsAnyMethod stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test050_AutocompletesEntriesFor_patternKeyword_doesNotAutocompleteMethodOfSameClass stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test051_AutocompletesEntriesFor_patternBinary_containsExactlyOneMethod stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test052_AutocompletesEntriesFor_patternBinary_notContainsAnyMethod stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test053_AutocompletesEntriesFor_patternBinary_doestNotAutocompleteMethodOfSameClass stamp: 'JFGO 2/9/2024 10:14:31'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #testMessages stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ArrayWithArrayAndOtherObjects stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArray stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayOfArray stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayWithManyElements stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBinaryInParenthesis stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlock stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfBlock stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfEvaluatedBlock stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndExpresionInParenthesis stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndLiteralArray stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndMoreThanOneUnaryAfterExpresionInParenthesis stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBlock stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBrace stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterCharacter stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterLiteralArray stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterStringSymbol stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterSymbol stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUnaryInProtoObject stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterParenthesis stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterUnary stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteMessageAfterUnary stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryInParenthesis stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithMoreThanOneUnary stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithOneUnary stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ClosedAndUnclosedParenthesis stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionInManyParenthesis stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionWithMoreThanOneParenthesis stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_LFBeforeParenthesis stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_SpaceBeforeParenthesis stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnaryAfterExpresionInParenthesis stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedArrayAfterClosedArray stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedBlockAfterBlock stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedDoubleParenthesis stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_selfInProtoObject stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_ExpresionInParenthesis stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_MoreThanOneUnaryMessage stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_OnlyRightParenthesis stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test01CanSignalItWithAMethod stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test02IsResumable stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 2/9/2024 10:14:32'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 2/9/2024 10:14:32'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test01RemovingAClassRemovesItFromMethodVariableRawTypesForParameter stamp: 'JFGO 2/9/2024 10:14:32'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 2/9/2024 10:14:32'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 2/9/2024 10:14:32'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test02RemovingAClassRemovesItsClassFromMethodVariableRawTypesForParameter stamp: 'JFGO 2/9/2024 10:14:33'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 2/9/2024 10:14:33'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 2/9/2024 10:14:33'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test03RemovingAClassRemovesItFromMethodVariablesRawTypes stamp: 'JFGO 2/9/2024 10:14:33'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 2/9/2024 10:14:33'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 2/9/2024 10:14:33'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test04RemovingAClassRemovesItFromMethodVariableRemoteVectorRawTypes stamp: 'JFGO 2/9/2024 10:14:33'!
PASSED!

!testRun: #NotImplementedMethodTest #test01ActualSendersIsEmpty stamp: 'JFGO 2/9/2024 10:14:33'!
PASSED!

!testRun: #NotImplementedMethodTest #test02CategoryIsNil stamp: 'JFGO 2/9/2024 10:14:33'!
PASSED!

!testRun: #NotImplementedMethodTest #test03CompiledMethodSignalsError stamp: 'JFGO 2/9/2024 10:14:33'!
PASSED!

!testRun: #NotImplementedMethodTest #test04CompiledMethodIfAbsentEvaluatesIfAbsentBlock stamp: 'JFGO 2/9/2024 10:14:33'!
PASSED!

!testRun: #NotImplementedMethodTest #test05doesOnlySurelySendReturnsFalse stamp: 'JFGO 2/9/2024 10:14:33'!
PASSED!

!testRun: #NotImplementedMethodTest #test06dynamicTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'JFGO 2/9/2024 10:14:33'!
PASSED!

!testRun: #NotImplementedMethodTest #test07IsNotValid stamp: 'JFGO 2/9/2024 10:14:34'!
PASSED!

!testRun: #NotImplementedMethodTest #test08liveTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'JFGO 2/9/2024 10:14:34'!
PASSED!

!testRun: #NotImplementedMethodTest #test09rangesOASentSelectorWhenSendToReceiverTypesIsEmpty stamp: 'JFGO 2/9/2024 10:14:34'!
PASSED!

!testRun: #NotImplementedMethodTest #test10FailsWhenAsItsSourceCode stamp: 'JFGO 2/9/2024 10:14:34'!
PASSED!

!testRun: #NotImplementedMethodTest #test11StringVersionStartsWithNotImplemented stamp: 'JFGO 2/9/2024 10:14:34'!
PASSED!

!testRun: #PossibleSenderTest #test01StringVersionBeginsWithPossible stamp: 'JFGO 2/9/2024 10:14:34'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:34'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:34'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:34'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:34'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:34' prior: 50543903!
m3 | x | self m1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 2/9/2024 10:14:34'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 2/9/2024 10:14:34'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 2/9/2024 10:14:34'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:34'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:34'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:34'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:34'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:34'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!testRun: #RemoveParameterWithActualScopeTest #test02CanNotRemoveParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 2/9/2024 10:14:34'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 2/9/2024 10:14:34'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:35'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:35'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:35'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:35'!
m3 | x | x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:35'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:35' prior: 50544002!
m3 | x | x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 2/9/2024 10:14:35'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test03RemovesParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 2/9/2024 10:14:35'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:35'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 2/9/2024 10:14:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:35'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:35'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:35'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:35'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:35'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:35'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:35' prior: 50544062!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 2/9/2024 10:14:35'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 2/9/2024 10:14:35'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test04RemovesParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 2/9/2024 10:14:35'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 2/9/2024 10:14:36'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:36'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:36'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:36'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:36'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:36'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:36'!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:36'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:36'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:36' prior: 50544128!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 2/9/2024 10:14:36'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 2/9/2024 10:14:36'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test05RemovesParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 2/9/2024 10:14:36'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 2/9/2024 10:14:36'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:36'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:36'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:36'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:36'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:36'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:36'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:36'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:36'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:36' prior: 50544195!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 2/9/2024 10:14:36'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 2/9/2024 10:14:36'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test06RemovesParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 2/9/2024 10:14:36'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 2/9/2024 10:14:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:37'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:37'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:37'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:37'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:37' prior: 50544252!
m3 | x | self m1. false ifTrue: [ x m1]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 2/9/2024 10:14:37'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test07RemovesParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 2/9/2024 10:14:37'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 2/9/2024 10:14:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:37'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:37'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:37'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:38'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:38' prior: 50544302!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassOfSender #m1: stamp: 'JFGO 2/9/2024 10:14:38'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test08RemovesParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 2/9/2024 10:14:38'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 2/9/2024 10:14:38'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:38'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:38'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:38'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:38'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:38'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:38'!
m3 self m1: 1. ClassOfSender new m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:38'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:38' prior: 50544364!
m3 self m1. ClassOfSender new m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 2/9/2024 10:14:38'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test09RemovesParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 2/9/2024 10:14:38'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 2/9/2024 10:14:39'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:39'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:39'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:39'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:39'!
m3 |x| self m1: 1. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:39'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:39' prior: 50544413!
m3 |x| self m1. x m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'JFGO 2/9/2024 10:14:39'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRemovingParameterToMethodWithSureAndPossibleSenders stamp: 'JFGO 2/9/2024 10:14:39'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 2/9/2024 10:14:39'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:39'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:39'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:39'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:39'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:39'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1; printString! !

!testRun: #RemoveParameterWithActualScopeTest #test11CanNotRemoveParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 2/9/2024 10:14:39'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 2/9/2024 10:14:40'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:40'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 2/9/2024 10:14:40'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:40'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:40'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:40'!
m1: p1 m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:40'!
m3 self m1: 1 m2: 2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:40'!
m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:40' prior: 50544516!
m3 self m2: 2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'JFGO 2/9/2024 10:14:40'!
m1: p1 m2: p2!

!testRun: #RemoveParameterWithActualScopeTest #test13RemovesOtherThanLastParameterCorrectly stamp: 'JFGO 2/9/2024 10:14:40'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:41'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'JFGO 2/9/2024 10:14:41'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:41'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:41'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:41'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:41'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:41' prior: 50544561!
m3 | x | self m2. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 2/9/2024 10:14:41'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test01DoesNotRenamesPossibleMessageSendWhenInstructedToDoSo stamp: 'JFGO 2/9/2024 10:14:41'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 2/9/2024 10:14:42'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:42'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:42'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:42'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:42'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #RenameSelectorWithActualScopeTest #test02CanNotRenameWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'JFGO 2/9/2024 10:14:42'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 2/9/2024 10:14:42'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:43'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:43'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:43'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:43'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:43'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:43'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:43' prior: 50544658!
m3 | x | x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 2/9/2024 10:14:43'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test03RenamesWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'JFGO 2/9/2024 10:14:43'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:43'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 2/9/2024 10:14:43'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:43'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:43'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:43'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:43'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:43'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:43'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:43'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:43' prior: 50544717!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 2/9/2024 10:14:43'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 2/9/2024 10:14:43'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test04RenamesWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'JFGO 2/9/2024 10:14:43'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 2/9/2024 10:14:44'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:44'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:44'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:44'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:44'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:44'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:44'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:44'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:44'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:44' prior: 50544781!
m3 | x y | x := self. y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 2/9/2024 10:14:44'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 2/9/2024 10:14:44'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test05RenamesDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'JFGO 2/9/2024 10:14:44'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 2/9/2024 10:14:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:45'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:45'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:45'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:45'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:45'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:45'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:45' prior: 50544846!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 2/9/2024 10:14:45'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 2/9/2024 10:14:45'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test06RenamesDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'JFGO 2/9/2024 10:14:45'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 2/9/2024 10:14:46'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:46'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:46'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:46'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:46'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:46' prior: 50544900!
m3 | x | self m2. false ifTrue: [ x m2 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 2/9/2024 10:14:46'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test07RenamePossibleMessageSendIfInstructedToDoSo stamp: 'JFGO 2/9/2024 10:14:46'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 2/9/2024 10:14:47'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:47'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:47'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:47'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:48'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:48'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:48' prior: 50544948!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassOfSender #m1 stamp: 'JFGO 2/9/2024 10:14:48'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test08RenamesWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'JFGO 2/9/2024 10:14:48'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 2/9/2024 10:14:49'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:49'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:49'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:49'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:49'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:49'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:49'!
m3 self m1. ClassOfSender new m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:49'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:49' prior: 50545008!
m3 self m2. ClassOfSender new m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 2/9/2024 10:14:49'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test09RenamesOnlyValidMessageSendWhenMoreSendsInSameMethod stamp: 'JFGO 2/9/2024 10:14:49'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 2/9/2024 10:14:51'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:51'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:51'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:51'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:51'!
m3 |x| self m1. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:51'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:51' prior: 50545054!
m3 |x| self m2. x m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'JFGO 2/9/2024 10:14:51'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRenamingAMethodWithSureAndPossibleSenders stamp: 'JFGO 2/9/2024 10:14:51'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 2/9/2024 10:14:53'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:53'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__' stamp: 'JFGO 2/9/2024 10:14:53'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:53'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:53'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'JFGO 2/9/2024 10:14:53'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #RenameSelectorWithActualScopeTest #test11CanNotRenameWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'JFGO 2/9/2024 10:14:53'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'JFGO 2/9/2024 10:14:54'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'JFGO 2/9/2024 10:14:54'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'JFGO 2/9/2024 10:14:54'!
PASSED!

!testRun: #ReturnTypeInfoTest #test01QuickReturnSelfMethodsReturnSelfTypeAsReturnType stamp: 'JFGO 2/9/2024 10:14:55'!
PASSED!

!testRun: #ReturnTypeInfoTest #test02QuickReturnTrueMethodsReturnTrueReturnType stamp: 'JFGO 2/9/2024 10:14:55'!
PASSED!

!testRun: #ReturnTypeInfoTest #test03QuickReturnFalseMethodsReturnFalseAsReturnType stamp: 'JFGO 2/9/2024 10:14:55'!
PASSED!

!testRun: #ReturnTypeInfoTest #test04QuickReturnNilMethodsReturnUndefinedObjectAsReturnType stamp: 'JFGO 2/9/2024 10:14:55'!
PASSED!

!testRun: #ReturnTypeInfoTest #test05QuickReturnMinusOneMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 2/9/2024 10:14:55'!
PASSED!

!testRun: #ReturnTypeInfoTest #test06QuickReturnZeroMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 2/9/2024 10:14:55'!
PASSED!

!testRun: #ReturnTypeInfoTest #test07QuickReturnOneMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 2/9/2024 10:14:55'!
PASSED!

!testRun: #ReturnTypeInfoTest #test08QuickReturnTwoMethodsReturnSmallIntegerAsReturnType stamp: 'JFGO 2/9/2024 10:14:55'!
PASSED!

!testRun: #ReturnTypeInfoTest #test09QuickReturnOfFirstInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'JFGO 2/9/2024 10:14:55'!
PASSED!

!testRun: #ReturnTypeInfoTest #test10QuickReturnOfSecondInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'JFGO 2/9/2024 10:14:55'!
PASSED!

!testRun: #ReturnTypeInfoTest #test11classMethodReturnsClassTypeAsReturnType stamp: 'JFGO 2/9/2024 10:14:55'!
PASSED!

!testRun: #ReturnTypeInfoTest #test12newMethodReturnsInstanceTypeAsReturnType stamp: 'JFGO 2/9/2024 10:14:55'!
PASSED!

!testRun: #ReturnTypeInfoTest #test13yourselfMethodReturnsSelfTypeAsReturnType stamp: 'JFGO 2/9/2024 10:14:55'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__' stamp: 'JFGO 2/9/2024 10:14:55'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'JFGO 2/9/2024 10:14:56'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #ReturnTypeInfoTest #test14RemovingAClassRemovesItAndItsClassFromMethodReturnType stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #ReturnTypeInfoTest #test15ReturnTypesOfAbstractMethodsIncludesSubclassesImplementationsTypes stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #ReturnTypeInfoTest #test16ReturnTypesOfAbstractMethodWorksWhenNotImplementedInAllSubclasses stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test01IsEmptyWhenAllTypesAreNil stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test02StoresAddedTypes stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test03StoresSameTypeOnce stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test04StoresMoreThanOneTypeCorrectly stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test05DoesNotStoreTypesWhenContainerIsNil stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test06CommonSupertypeOfSiblingsClassesReturnsRightSuperclass stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test07CommonSupertypeOnSameHierarchyIsMostTopClass stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test08CommonSupertypeOnSameHierarchyIsNotAffectedByAddingOrder stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test09ObjectIsCommonSupertypeWhenClassesAreNotSiblings stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test10ProtoObjectIsCommonSupertypeWhenThereAreNoTypesStored stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test11ProtoObjectIsCommonSupertypeWhenCointainerIsNil stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test12CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenIsEmpty stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test13CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenContainerIsNil stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test14UndefinedObjectIsNotConsideredWhenLookingForCommonSupertype stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test15StoresTypesIsTrueWhenContainerIsNotNil stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test16StoresTypesIsFalseWhenContainerIsNil stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test17IsMegamorphicWhenContainerIsFull stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test18IsNotMegamorphicWhenContainerIsNotFull stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test19CommonSelectorsPreviousToSameOnlyTypeIsEmpty stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test20CommonSelectorsPreviousToSuperclassOfOnlyAddedTypeAreAddedTypeSelectors stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test21CommonSelectorsPreviousToSuperclassSuperclassOfOnlyAddedTypeAreAddedTypeUpToSuperclassSelectors stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test22CommonSelectorsPreviousToInvalidSuperclassRaisesError stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test23CommonSelectorsPreviousToSuperclassOfSiblingTypesAreSiblingsCommonSelectors stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test24CommonSelectorsPreviousToOnSameHierarchyReturnsCommonSuperclassesSelectors stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test25CommonSelectorsPreviousToAddedSSupertypeOnSameHierarchyIsEmpty stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test26CommonSelectorsPreviousToWhenNotStoringTypesIsEmpty stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test27CommonSelectorsPreviousToIfInvalidSupertypeEvaluatesInvalidBlock stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test28CommonSelectorsPreviousToIfInvalidSupertypeWithManyTypesEvaluatesInvalidBlock stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test29CommonSelectosGoesUpToIncludingProtoObject stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test30CommonSupertypeIfGenericEvaluatesIfGenericBlockForObject stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test31CommonSupertypeIfGenericEvaluatesIfGenericBlockForProtoObject stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test32WithCommonSupertypeDoIfGenericEvaluatesDoBlockWhenNoGenericSupertype stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test33WithCommonSupertypeDoIfGenericEvaluatesGenericBlockWhenGenericSupertype stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test34AddingATypeWhenNoMoreSpaceEvaluatesIsFullBlock stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test35TypeIsNotMoreInTypesWhenRemoved stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test36RemovingTypeWhenTypesIsEmptyEvaluatesIfAbsent stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test37RemovingNotIncludedTypeEvaluatesIfAbsent stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test38RemovingLastAddedTypeWorksAsExpected stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test39RemoveTypeSignalExceptionWhenTypeNotFound stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

!testRun: #VariableTypeInfoTest #test40TypesDoEvaluatesBlockOnEachType stamp: 'JFGO 2/9/2024 10:14:57'!
PASSED!

----STARTUP---- (14 February 2024 19:04:39) as C:\Users\julian.gutierrez\OneDrive - HEXACTA S.A\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


----SNAPSHOT----(14 February 2024 19:13:15) CuisUniversity-6169.image priorSource: 6738293!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/18/2024 19:05:06' prior: 50541185 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation on: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	"TODO. Aca viene la papa del ifTrue: ifFalse: cuando hay branches en el typeChecker original"
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !

----QUIT----(18 February 2024 19:05:14) CuisUniversity-6169.image priorSource: 6839520!

----STARTUP---- (19 February 2024 18:39:33) as C:\Users\julian.gutierrez\OneDrive - HEXACTA S.A\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/19/2024 18:40:37' prior: 50542156!
test13TypeCastIfTrueCorrectlyFilterCastedType

	self assert: true.
	"self performMethodWithSelector: #typeCastIfTrue typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	]." 
	! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 18:40:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 18:40:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 18:40:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 18:40:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 18:40:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 18:40:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 18:40:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 18:40:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 18:40:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 18:40:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 18:40:38'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 18:40:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 18:40:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 18:40:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 18:40:38'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 18:40:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 18:40:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 18:40:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 18:40:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 18:40:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 18:40:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 18:40:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 18:40:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 18:40:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 18:40:47'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 18:40:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 18:40:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 18:40:47'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 18:40:47'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 18:41:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 18:41:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 18:41:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 18:41:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 18:41:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 18:41:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 18:41:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 18:41:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 18:41:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 18:41:08'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 18:41:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 18:41:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 18:41:08'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 18:41:08'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 18:41:13'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 18:41:13'!
FAILURE!

self errors!

self errors first!

self errors first problemDescription !

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 18:42:39'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 18:42:39'!
FAILURE!
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 2/19/2024 18:47:17' prior: 50540190!
returnTypesOf: implementor from: aReceiverType receiving: sentSelector in: aCompiledMethod addingReturnTypesTo: messageReturnTypes addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage

	| returnTypes |

	"generic getter case"
	((aReceiverType isGenericType) and: [aStorage getterMethodsFor: aReceiverType includes: sentSelector]) ifTrue: [
		| parameterIndex |
		parameterIndex := (aStorage getterMethodsFor: aReceiverType) at: sentSelector.
		messageReturnTypes addAll: (aReceiverType generics at: parameterIndex).
		^self.
	].
	
	"generic setter case"
	(((aStorage tracedMethodsFor: aReceiverType liveClass) includesKey: sentSelector)
		or: [(aStorage tracedMethodsFromParametersFor: aReceiverType liveClass) includesKey: sentSelector])
		ifTrue: [ | lastArgument argumentType |
		"setters need to receive the object from where the type will be set, then there's at least one argument - Adrian"
		lastArgument := self argumentsInEvaluationOrder last.
		argumentType := lastArgument 
						liveTypesIn: aCompiledMethod 
						addingIncompleteTypeInfoTo: incompleteTypeInfoReasons 
						storingGenericsInfoIn: aStorage.
						
		messageReturnTypes add: argumentType.
		^self.	
	].
	
	"general case"
	returnTypes := implementor returnLiveTypesForReceiver: aReceiverType liveClass usingStorage: aStorage.
	(returnTypes isEmpty or: [returnTypes allSatisfy:[:item | item isEmptyType]])
		ifTrue: [ "incompleteTypeInfoReasons add: (IncompleteTypeInfoWarning dueToNoReturnTypeOf: implementor methodReference)". ]
		ifFalse: [
			returnTypes := returnTypes collect: [ :aType | aType asTypeFor: aReceiverType liveClass].
			messageReturnTypes addAll: returnTypes.
		].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 18:47:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 18:47:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 18:47:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 18:47:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 18:47:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 18:47:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 18:47:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 18:47:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 18:47:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 18:47:24'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 18:47:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 18:47:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 18:47:24'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 18:47:24'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 18:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 18:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 18:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 18:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 18:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 18:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 18:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 18:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 18:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 18:47:40'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 18:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 18:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 18:47:40'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 18:47:40'!
FAILURE!

self returnTypeInfo types!

self methodClass!

self of: aCompiledMethod are: aCompiledMethod returnRawTypes!

self typeAnnotationsHolder returnRawTypes!
!TypeCheckerDragonTest methodsFor: 'assertions' stamp: 'JFGO 2/19/2024 18:59:50' prior: 50542145!
typeCheckWithSelector: aSelector andAssert: anAssertionBlock
		
	| methodToCheck|
	methodToCheck := TypeCheckerDragonTestMethods >> aSelector.
	methodToCheck initializeTypeInformation .
	self typeCheckOn:  methodToCheck andAssert: anAssertionBlock.
	! !
!MessageNode methodsFor: '*LiveTypingTypeChecker' stamp: 'JFGO 2/5/2024 19:44:07' prior: 50545636!
returnTypesOf: implementor from: aReceiverType receiving: sentSelector in: aCompiledMethod addingReturnTypesTo: messageReturnTypes addingIncompleteTypeInfoTo: incompleteTypeInfoReasons storingGenericsInfoIn: aStorage

	| returnTypes |

	"generic getter case"
	((aReceiverType isGenericType) and: [aStorage getterMethodsFor: aReceiverType includes: sentSelector]) ifTrue: [
		| parameterIndex |
		parameterIndex := (aStorage getterMethodsFor: aReceiverType) at: sentSelector.
		messageReturnTypes addAll: (aReceiverType generics at: parameterIndex).
		^self.
	].
	
	"generic setter case"
	(((aStorage tracedMethodsFor: aReceiverType liveClass) includesKey: sentSelector)
		or: [(aStorage tracedMethodsFromParametersFor: aReceiverType liveClass) includesKey: sentSelector])
		ifTrue: [ | lastArgument argumentType |
		"setters need to receive the object from where the type will be set, then there's at least one argument - Adrian"
		lastArgument := self argumentsInEvaluationOrder last.
		argumentType := lastArgument 
						liveTypesIn: aCompiledMethod 
						addingIncompleteTypeInfoTo: incompleteTypeInfoReasons 
						storingGenericsInfoIn: aStorage.
						
		messageReturnTypes add: argumentType.
		^self.	
	].
	
	"general case"
	returnTypes := implementor returnLiveTypesForReceiver: aReceiverType liveClass usingStorage: aStorage.
	(returnTypes isEmpty or: [returnTypes allSatisfy:[:item | item isEmptyType]])
		ifTrue: [ incompleteTypeInfoReasons add: (IncompleteTypeInfoWarning dueToNoReturnTypeOf: implementor methodReference) ]
		ifFalse: [
			returnTypes := returnTypes collect: [ :aType | aType asTypeFor: aReceiverType liveClass].
			messageReturnTypes addAll: returnTypes.
		].! !

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 19:00:34'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 19:00:34'!
FAILURE!

self issues first problemDescription !

implementor returnLiveTypesForReceiver: aReceiverType liveClass usingStorage: aStorage!

self returnTypes!

self returnTypeInfo!

self methodClass!

self methodClass createMethodReturnTypeInfoOf: self!

self returnTypeInfo types!

self returnTypes!

self = Array new!

self = Array new.!

self returnTypes!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 19:11:58'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'assertions' stamp: 'JFGO 12/21/2023 19:27:20' prior: 50545813!
typeCheckWithSelector: aSelector andAssert: anAssertionBlock
		
	| methodToCheck|
	methodToCheck := TypeCheckerDragonTestMethods >> aSelector.
	self typeCheckOn:  methodToCheck andAssert: anAssertionBlock.
	! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 19:15:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 19:15:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 19:15:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 19:15:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 19:15:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 19:15:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 19:15:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 19:15:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 19:15:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 19:15:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 19:15:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 19:15:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 19:15:26'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/19/2024 19:32:05' prior: 50545390 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation on: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	self visitMessageNodeArguments:aMessageNode.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/19/2024 19:32:27'!
visitMessageNodeArguments: aMessageNode
"TODO. Aca viene la papa del ifTrue: ifFalse: cuando hay branches en el typeChecker original"
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 19:32:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 19:32:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 19:32:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 19:32:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 19:32:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 19:32:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 19:32:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 19:32:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 19:32:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 19:32:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 19:32:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 19:32:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 19:32:33'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 19:36:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 19:36:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 19:36:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 19:36:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 19:36:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 19:36:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 19:36:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 19:36:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 19:36:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 19:36:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 19:36:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 19:36:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 19:36:56'!
PASSED!

!classDefinition: #TypeCheckerDragonMethodVisitor category: #'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 2/19/2024 19:47:51'!
ParseNodeVisitor subclass: #TypeCheckerDragonMethodVisitor
	instanceVariableNames: 'compiledMethod methodNode issues castApplier contextApplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #GeneralContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/19/2024 19:48:34'!
Object subclass: #GeneralContextApplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/19/2024 19:47:49' prior: 50536418 overrides: 16919312!
visitBlockNode: aBlockNode
	"Por ahora, no hay evidencia de necesitar hacer algo más que visitar los statements del bloque, que lo hace super. De ser asi definitivamente, este mensaje no tiene razon de ser reimplementado y deberiamos borrarlo".
	contextApplier := GeneralContextApplier for: aBlockNode.
	super visitBlockNode: aBlockNode.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 19:48:57'!
ERROR!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 19:48:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 19:48:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 19:48:57'!
ERROR!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 19:48:57'!
ERROR!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 19:48:57'!
ERROR!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 19:48:57'!
ERROR!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 19:48:57'!
ERROR!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 19:48:57'!
ERROR!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 19:48:57'!
ERROR!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 19:48:57'!
ERROR!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 19:48:57'!
ERROR!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 19:48:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 19:49:00'!
ERROR!
!GeneralContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 2/19/2024 19:49:08'!
for: aBlockNode 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aBlockNode ! !
!GeneralContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 2/19/2024 19:49:23' prior: 50546207!
for: aBlockNode 
		
	^self new initializeFor: aBlockNode ! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 19:49:25'!
ERROR!

!classDefinition: #GeneralContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/19/2024 19:49:44'!
Object subclass: #GeneralContextApplier
	instanceVariableNames: 'blockNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!GeneralContextApplier methodsFor: 'initialization' stamp: 'JFGO 2/19/2024 19:49:44'!
initializeFor: aBlockNode 
	self shouldBeImplemented.
	blockNode := aBlockNode.! !
!GeneralContextApplier methodsFor: 'initialization' stamp: 'JFGO 2/19/2024 19:49:53' prior: 50546234!
initializeFor: aBlockNode 
	blockNode := aBlockNode.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 19:49:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 19:50:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 19:50:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 19:50:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 19:50:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 19:50:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 19:50:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 19:50:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 19:50:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 19:50:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 19:50:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 19:50:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 19:50:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 19:50:00'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/19/2024 19:50:30' prior: 50545970 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=contextApplier receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation on: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	self visitMessageNodeArguments:aMessageNode.! !
!GeneralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 2/19/2024 19:51:57'!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
^ aMessageNode ! !
!GeneralContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 2/19/2024 19:52:13' prior: 50546330!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	^ aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/19/2024 19:52:48' prior: 50546304 overrides: 16919345!
visitMessageNode: aMessageNode
	| incompleteTypeInfo receiverLiveType  |
	aMessageNode receiver accept: self.
	
	
	incompleteTypeInfo := OrderedCollection new. 
	receiverLiveType:=contextApplier receiverLiveTypesFor: aMessageNode In: compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
		
	incompleteTypeInfo do: [ :anIncompleteTypeInfoReason | anIncompleteTypeInfoReason addTo: self node: aMessageNode ].
	
	(receiverLiveType isEmptyType and: [ incompleteTypeInfo isEmpty])
		ifTrue: [issues add: (TypeCheckingDragonIncompleteInformation on: compiledMethod for: methodNode by: aMessageNode)]
		ifFalse: [ self checkMessageSentIn: aMessageNode isImplementedIn: receiverLiveType ].
	
	self visitMessageNodeArguments:aMessageNode.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 19:52:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 19:52:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 19:52:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 19:52:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 19:52:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 19:52:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 19:52:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 19:52:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 19:52:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 19:52:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 19:52:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 19:52:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 19:52:55'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/19/2024 19:54:19' prior: 50545996!
visitMessageNodeArguments: aMessageNode
"TODO. Aca viene la papa del ifTrue: ifFalse: cuando hay branches en el typeChecker original"
	self updateContextApplierFor: aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | argumentBlock accept: self].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/19/2024 19:54:33'!
updateContextApplierFor: aMessageNode.
	! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 19:54:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 19:54:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 19:54:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 19:54:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 19:54:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 19:54:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 19:54:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 19:54:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 19:54:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 19:54:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 19:54:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 19:54:57'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 19:54:57'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/19/2024 20:01:47' prior: 50545429!
test13TypeCastIfTrueCorrectlyFilterCastedType

	self performMethodWithSelector: #typeCastIfTrue typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !

self isIfWithMessageNodeAsCondition !

!classDefinition: #EqualsTypeCastApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/19/2024 20:05:45'!
Object subclass: #EqualsTypeCastApplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/19/2024 20:05:10' prior: 50546441!
updateContextApplierFor: aMessageNode.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [^EqualsTypeCastApplier new.].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/19/2024 20:07:50' prior: 50546520!
updateContextApplierFor: aMessageNode.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [
		^EqualsTypeCastApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			during: aMessageNode arguments first 
			rejectingDuring: aMessageNode arguments second.
	].! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 20:07:51'!
ERROR!
!EqualsTypeCastApplier class methodsFor: 'instance creation' stamp: 'JFGO 2/19/2024 20:10:22'!
to: aRenameMe1 on: aRenameMe2 during: aRenameMe3 rejectingDuring: aRenameMe4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTo: aRenameMe1 on: aRenameMe2 during: aRenameMe3 rejectingDuring: aRenameMe4 ! !
!EqualsTypeCastApplier class methodsFor: 'instance creation' stamp: 'JFGO 2/19/2024 20:10:50' prior: 50546545!
to: aType on: anObjectToCast during: aBlockToCastType rejectingDuring: aBlockToRejectType 

	^self new initializeTo: aType on: anObjectToCast during: aBlockToCastType rejectingDuring: aBlockToRejectType ! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 20:10:51'!
ERROR!

!classDefinition: #EqualsTypeCastApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/19/2024 20:11:00'!
Object subclass: #EqualsTypeCastApplier
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #EqualsTypeCastApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/19/2024 20:11:01'!
Object subclass: #EqualsTypeCastApplier
	instanceVariableNames: 'type objectToCast'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #EqualsTypeCastApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/19/2024 20:11:01'!
Object subclass: #EqualsTypeCastApplier
	instanceVariableNames: 'type objectToCast blockToCastType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #EqualsTypeCastApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/19/2024 20:11:01'!
Object subclass: #EqualsTypeCastApplier
	instanceVariableNames: 'type objectToCast blockToCastType blockToRejectType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!EqualsTypeCastApplier methodsFor: 'instance creation' stamp: 'JFGO 2/19/2024 20:11:01'!
initializeTo: aType on: anObjectToCast during: aBlockToCastType rejectingDuring: aBlockToRejectType 
	self shouldBeImplemented.
	type := aType.
	objectToCast := anObjectToCast.
	blockToCastType := aBlockToCastType.
	blockToRejectType := aBlockToRejectType.! !
!EqualsTypeCastApplier methodsFor: 'instance creation' stamp: 'JFGO 2/19/2024 20:13:13' prior: 50546611!
initializeTo: aType on: anObjectToCast during: aBlockToCastType rejectingDuring: aBlockToRejectType 
	
	type := aType.
	objectToCast := anObjectToCast.
	blockToCastType := aBlockToCastType.
	blockToRejectType := aBlockToRejectType.! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 20:13:14'!
FAILURE!
!EqualsTypeCastApplier methodsFor: 'instance creation' stamp: 'JFGO 2/19/2024 20:13:43'!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	^ aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.! !

----SNAPSHOT----(19 February 2024 20:14:07) CuisUniversity-6169.image priorSource: 6840608!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/19/2024 20:16:07' prior: 50546136 overrides: 16919312!
visitBlockNode: aBlockNode
	"Por ahora, no hay evidencia de necesitar hacer algo más que visitar los statements del bloque, que lo hace super. De ser asi definitivamente, este mensaje no tiene razon de ser reimplementado y deberiamos borrarlo".
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	super visitBlockNode: aBlockNode.! !

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 20:16:14'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/19/2024 20:20:26' prior: 50546528!
updateContextApplierFor: aMessageNode.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [
		contextApplier = EqualsTypeCastApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			during: aMessageNode arguments first 
			rejectingDuring: aMessageNode arguments second.
	].! !

ParseNodeVisitor subclass: #TypeCheckerDragonMethodVisitor
	instanceVariableNames: 'compiledMethod methodNode issues contextApplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!

!classDefinition: #TypeCheckerDragonMethodVisitor category: #'LiveTypingTypeChecker-TypeCheckingDragon' stamp: 'JFGO 2/19/2024 20:20:49'!
ParseNodeVisitor subclass: #TypeCheckerDragonMethodVisitor
	instanceVariableNames: 'compiledMethod methodNode issues contextApplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-TypeCheckingDragon'!
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/19/2024 20:21:07' prior: 50546500!
test13TypeCastIfTrueCorrectlyFilterCastedType
	self assert:true.
	self performMethodWithSelector: #typeCastIfTrue typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/19/2024 20:21:10' prior: 50546705!
test13TypeCastIfTrueCorrectlyFilterCastedType
	self assert:true.
	"self performMethodWithSelector: #typeCastIfTrue typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	]."
	! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 20:21:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 20:21:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 20:21:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 20:21:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 20:21:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 20:21:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 20:21:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 20:21:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 20:21:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 20:21:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 20:21:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 20:21:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 20:21:11'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 20:21:11'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/19/2024 20:21:17' prior: 50546716!
test13TypeCastIfTrueCorrectlyFilterCastedType
	self performMethodWithSelector: #typeCastIfTrue typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 20:22:15'!
ERROR!
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/19/2024 20:22:42' prior: 50546671!
updateContextApplierFor: aMessageNode.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [
		contextApplier := EqualsTypeCastApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			during: aMessageNode arguments first 
			rejectingDuring: aMessageNode arguments second.
	].! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 20:22:52'!
FAILURE!
!EqualsTypeCastApplier methodsFor: 'LiveTyping' stamp: 'JFGO 2/19/2024 20:27:15' prior: 50546637!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo| originalTypes |
.
	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	^ originalTypes! !
!EqualsTypeCastApplier methodsFor: 'LiveTyping' stamp: 'JFGO 2/19/2024 20:27:23' prior: 50546816!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo| originalTypes |
.

	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	^ originalTypes! !
!EqualsTypeCastApplier methodsFor: 'LiveTyping' stamp: 'JFGO 2/19/2024 20:27:37' prior: 50546828!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes |


	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	^ originalTypes! !
!EqualsTypeCastApplier methodsFor: 'LiveTyping' stamp: 'JFGO 2/19/2024 20:28:34' prior: 50546840!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes |


	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	"TODO. Necesitamos obtener el parseNode, o la variable sobre la que vamos a operar."
	^ originalTypes! !

self asArray !

self asArray first!

self asArray first!
!EqualsTypeCastApplier methodsFor: 'LiveTyping' stamp: 'JFGO 2/19/2024 20:30:41' prior: 50546852!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes |


	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	"TODO. Necesitamos obtener el parseNode, o la variable sobre la que vamos a operar."
	^ FixedType for: SmallInteger.! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 20:30:49'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 20:30:54'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 20:30:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 20:30:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 20:30:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 20:30:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 20:30:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 20:30:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 20:30:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 20:30:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 20:30:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 20:30:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 20:30:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 20:30:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 20:30:58'!
PASSED!

----SNAPSHOT----(19 February 2024 20:31:05) CuisUniversity-6169.image priorSource: 6879854!
!EqualsTypeCastApplier methodsFor: 'LiveTyping' stamp: 'JFGO 2/19/2024 20:31:35' prior: 50546868!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	| originalTypes |


	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	"TODO. Necesitamos obtener el parseNode, o la variable sobre la que vamos a operar."
	^ FixedType for: type .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/19/2024 20:31:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/19/2024 20:31:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/19/2024 20:31:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/19/2024 20:31:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/19/2024 20:31:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/19/2024 20:31:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/19/2024 20:31:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/19/2024 20:31:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/19/2024 20:31:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/19/2024 20:31:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/19/2024 20:31:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/19/2024 20:31:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/19/2024 20:31:41'!
PASSED!
!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/19/2024 20:38:07'!
typeCastIfTrueLevel2Nested
"TODO. Revisar. No tiene sentido semantico, pero creo que puede ser util para desarrollar el anidamiento de tipos solo enfocado en el mismo tipo de ifTrue"
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifTrue: [
		v1 factorial.
		v1 class = OrderedCollection ifTrue: 
			[
				v1 isEmpty. "v1 deberia castear a OrderedCollection"
			].
		v1 + 1. "v1 deberia volver a recuperar el tipo de SmallInteger"
		].! !

----QUIT----(19 February 2024 20:38:39) CuisUniversity-6169.image priorSource: 6889366!

----STARTUP---- (21 February 2024 18:08:51) as C:\Users\julian.gutierrez\OneDrive - HEXACTA S.A\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/21/2024 18:13:04'!
typeCastIfTrueIfFalse
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifTrue: [v1 factorial.] ifFalse:[v1 isEmpty.]! !
!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/21/2024 18:13:14'!
TODOtypeCastIfTrueLevel2Nested
"TODO. Revisar. No tiene sentido semantico, pero creo que puede ser util para desarrollar el anidamiento de tipos solo enfocado en el mismo tipo de ifTrue"
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifTrue: [
		v1 factorial.
		v1 class = OrderedCollection ifTrue: 
			[
				v1 isEmpty. "v1 deberia castear a OrderedCollection"
			].
		v1 + 1. "v1 deberia volver a recuperar el tipo de SmallInteger"
		].! !

!methodRemoval: TypeCheckerDragonTestMethods #typeCastIfTrueLevel2Nested stamp: 'JFGO 2/21/2024 18:13:14'!
typeCastIfTrueLevel2Nested
"TODO. Revisar. No tiene sentido semantico, pero creo que puede ser util para desarrollar el anidamiento de tipos solo enfocado en el mismo tipo de ifTrue"
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifTrue: [
		v1 factorial.
		v1 class = OrderedCollection ifTrue: 
			[
				v1 isEmpty. "v1 deberia castear a OrderedCollection"
			].
		v1 + 1. "v1 deberia volver a recuperar el tipo de SmallInteger"
		].!

!methodRemoval: TypeCheckerDragonTestMethods #m4 stamp: 'JFGO 2/21/2024 18:13:21'!
m4
	|temp|
	temp size.!

!methodRemoval: TypeCheckerDragonTestMethods #m3 stamp: 'JFGO 2/21/2024 18:13:23'!
m3
	45 + 'hola'.!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/21/2024 18:13:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/21/2024 18:13:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/21/2024 18:13:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/21/2024 18:13:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/21/2024 18:13:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/21/2024 18:13:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/21/2024 18:13:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/21/2024 18:13:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/21/2024 18:13:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/21/2024 18:13:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/21/2024 18:13:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/21/2024 18:13:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/21/2024 18:13:34'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/21/2024 18:14:20'!
test14TypeCastIfFalseCorrectlyRejectsCastedType
	self performMethodWithSelector: #typeCastIfTrueIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/21/2024 18:14:30'!
test13TypeCastIfTrueCorrectlyAppliesCastedType
	self performMethodWithSelector: #typeCastIfTrue typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !

!methodRemoval: TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyFilterCastedType stamp: 'JFGO 2/21/2024 18:14:30'!
test13TypeCastIfTrueCorrectlyFilterCastedType
	self performMethodWithSelector: #typeCastIfTrue typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	!
!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/21/2024 18:14:49' prior: 50547041!
typeCastIfTrueIfFalse
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 class = SmallInteger ifTrue: [v1 factorial.] ifFalse:[v1 isEmpty.]! !

!classDefinition: #EqualsTypeCastApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/21/2024 18:36:01'!
Object subclass: #EqualsTypeCastApplier
	instanceVariableNames: 'type objectToCast blockToCastType blockToReject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!EqualsTypeCastApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 2/21/2024 18:36:01' prior: 50546623!
initializeTo: aType on: anObjectToCast during: aBlockToCastType rejectingDuring: aBlockToRejectType 
	
	type := aType.
	objectToCast := anObjectToCast.
	blockToCastType := aBlockToCastType.
	blockToReject := aBlockToRejectType.! !

!classDefinition: #EqualsTypeCastApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/21/2024 18:36:07'!
Object subclass: #EqualsTypeCastApplier
	instanceVariableNames: 'type objectToCast blockToCast blockToReject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!EqualsTypeCastApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 2/21/2024 18:36:07' prior: 50547195!
initializeTo: aType on: anObjectToCast during: aBlockToCastType rejectingDuring: aBlockToRejectType 
	
	type := aType.
	objectToCast := anObjectToCast.
	blockToCast := aBlockToCastType.
	blockToReject := aBlockToRejectType.! !
!EqualsTypeCastApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 18:36:13' prior: 50547217!
initializeTo: aType on: anObjectToCast during: aBlockToCastType rejectingDuring: aBlockToReject 
	
	type := aType.
	objectToCast := anObjectToCast.
	blockToCast := aBlockToCastType.
	blockToReject := aBlockToReject.! !
!EqualsTypeCastApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 18:36:21' prior: 50547228!
initializeTo: aType on: anObjectToCast during: aBlockToCast rejectingDuring: aBlockToReject 
	
	type := aType.
	objectToCast := anObjectToCast.
	blockToCast := aBlockToCast.
	blockToReject := aBlockToReject.! !
!EqualsTypeCastApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 18:36:48'!
initializeToCast: aType on: anObjectToCast during: aBlockToCast rejectingDuring: aBlockToReject 
	
	type := aType.
	objectToCast := anObjectToCast.
	blockToCast := aBlockToCast.
	blockToReject := aBlockToReject.! !
!EqualsTypeCastApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 2/21/2024 18:36:48' prior: 50546558!
to: aType on: anObjectToCast during: aBlockToCastType rejectingDuring: aBlockToRejectType 

	^self new initializeToCast: aType on: anObjectToCast during: aBlockToCastType rejectingDuring: aBlockToRejectType ! !

!methodRemoval: EqualsTypeCastApplier #initializeTo:on:during:rejectingDuring: stamp: 'JFGO 2/21/2024 18:36:48'!
initializeTo: aType on: anObjectToCast during: aBlockToCast rejectingDuring: aBlockToReject 
	
	type := aType.
	objectToCast := anObjectToCast.
	blockToCast := aBlockToCast.
	blockToReject := aBlockToReject.!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/21/2024 18:39:14' prior: 50546651 overrides: 16919312!
visitBlockNode: aBlockNode
	
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	super visitBlockNode: aBlockNode.! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/21/2024 18:44:37' prior: 50546429!
visitMessageNodeArguments: aMessageNode
"TODO. Aca viene la papa del ifTrue: ifFalse: cuando hay branches en el typeChecker original"
	self updateContextApplierFor: aMessageNode.
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | 
		argumentBlock accept: self
	].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/21/2024 18:46:23'!
updateContextApplierFor: aMessageNode visiting: aBlockNode.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [
		contextApplier := EqualsTypeCastApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			during: aMessageNode arguments first 
			rejectingDuring: aMessageNode arguments second.
	].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/21/2024 18:46:40' prior: 50547302!
updateContextApplierFor: aMessageNode visiting: aBlockNode

	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [
		contextApplier := EqualsTypeCastApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			during: aMessageNode arguments first 
			rejectingDuring: aMessageNode arguments second.
	].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/21/2024 18:47:10' prior: 50547290!
visitMessageNodeArguments: aMessageNode
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | 
		self updateContextApplierFor: aMessageNode visiting: argumentBlock.
		argumentBlock accept: self
	].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/21/2024 18:48:04' prior: 50547332!
visitMessageNodeArguments: aMessageNode
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | 
		self updateContextApplierFor: aMessageNode visiting: argumentBlock.
		argumentBlock accept: self
		self restorePreviousContext.
	].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/21/2024 18:48:08' prior: 50547342!
visitMessageNodeArguments: aMessageNode
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | 
		self updateContextApplierFor: aMessageNode visiting: argumentBlock.
		argumentBlock accept: self.
		self restorePreviousContext.
	].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/21/2024 18:48:18'!
restorePreviousContext! !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/21/2024 18:48:41' prior: 50547317!
updateContextApplierFor: aMessageNode visiting: aBlockNode

	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | newContext |
		newContext := EqualsTypeCastApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			during: aMessageNode arguments first 
			rejectingDuring: aMessageNode arguments second.
	].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/21/2024 18:49:29' prior: 50547369!
updateContextApplierFor: aMessageNode visiting: aBlockNode

	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | newContext |
		newContext := EqualsTypeCastApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			during: aMessageNode arguments first 
			rejectingDuring: aMessageNode arguments second.
		contextApplier := newContext.
	].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/21/2024 18:49:38' prior: 50547364!
restorePreviousContext
self shouldBeImplemented .! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 18:52:23'!
ERROR!
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/21/2024 18:55:22'!
test15TypeCastIfFalseCorrectlyRejectsCastedType
	self performMethodWithSelector: #typeCastIfTrueIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !

!methodRemoval: TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 18:55:22'!
test14TypeCastIfFalseCorrectlyRejectsCastedType
	self performMethodWithSelector: #typeCastIfTrueIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	!
!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/21/2024 18:55:45' prior: 50547176!
typeCastIfTrueIfFalse
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 class = SmallInteger ifFalse:[v1 isEmpty.]! !
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/21/2024 18:56:14'!
test14TypeCastIfFalseCorrectlyRejectsCastedType
	self performMethodWithSelector: #typeCastIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 19:20:56'!
ERROR!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/21/2024 19:22:29' prior: 50547353!
visitMessageNodeArguments: aMessageNode
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | 
		self updateContextApplierFor: aMessageNode visiting: argumentBlock.
		argumentBlock accept: self.
		"self restorePreviousContext."
	].! !

aMessageNode arguments!

self selector = #ifTrue!

self selector = #ifTrue:!

self selector!

self selectorSymbol !

self selectorSymbol = #ifTrue:!
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/21/2024 19:34:01' prior: 50547385!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	"TODO. Si es if pero el bloque node no pertenece a ningun argumento, salir con general (do nothing)"
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | newContext |
		
		newContext := EqualsTypeCastApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			during: aMessageNode arguments first .
			
		contextApplier := newContext.
	].! !
!EqualsTypeCastApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 19:35:07' prior: 50547249!
initializeToCast: aType on: anObjectToCast during: aBlockToCast rejectingDuring: aBlockToReject 
	
	type := aType.
	objectToCast := anObjectToCast.
	blockToCast := aBlockToCast.
	! !
!EqualsTypeCastApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 19:35:15'!
initializeToCast: aType on: anObjectToCast during: aBlockToCast  
	
	type := aType.
	objectToCast := anObjectToCast.
	blockToCast := aBlockToCast.
	! !
!EqualsTypeCastApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 2/21/2024 19:35:15' prior: 50547260!
to: aType on: anObjectToCast during: aBlockToCastType rejectingDuring: aBlockToRejectType 

	^self new initializeToCast: aType on: anObjectToCast during: aBlockToCastType ! !

!methodRemoval: EqualsTypeCastApplier #initializeToCast:on:during:rejectingDuring: stamp: 'JFGO 2/21/2024 19:35:15'!
initializeToCast: aType on: anObjectToCast during: aBlockToCast rejectingDuring: aBlockToReject 
	
	type := aType.
	objectToCast := anObjectToCast.
	blockToCast := aBlockToCast.
	!
!EqualsTypeCastApplier class methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 19:35:24'!
to: aType on: anObjectToCast during: aBlockToCastType  

	^self new initializeToCast: aType on: anObjectToCast during: aBlockToCastType ! !

!methodRemoval: EqualsTypeCastApplier class #to:on:during:rejectingDuring: stamp: 'JFGO 2/21/2024 19:35:24'!
to: aType on: anObjectToCast during: aBlockToCastType rejectingDuring: aBlockToRejectType 

	^self new initializeToCast: aType on: anObjectToCast during: aBlockToCastType !

Object subclass: #EqualsTypeCastApplier
	instanceVariableNames: 'type objectToCast blockToCast'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #EqualsTypeCastApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/21/2024 19:35:55'!
Object subclass: #EqualsTypeCastApplier
	instanceVariableNames: 'type objectToCast blockToCast'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!EqualsTypeCastApplier methodsFor: 'LiveTyping' stamp: 'JFGO 2/21/2024 19:36:21' prior: 50546947!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	"originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo."
	
	^ FixedType for: type .! !

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 19:37:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 19:37:34'!
ERROR!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 19:37:34'!
ERROR!
!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/21/2024 19:38:08'!
typeCastIfFalse
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 class = SmallInteger ifFalse:[v1 isEmpty.]! !

!methodRemoval: TypeCheckerDragonTestMethods #typeCastIfTrueIfFalse stamp: 'JFGO 2/21/2024 19:38:08'!
typeCastIfTrueIfFalse
	|v1|
	v1 := 5.
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 class = SmallInteger ifFalse:[v1 isEmpty.]!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 19:38:15'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 19:38:15'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 19:38:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/21/2024 19:38:25'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/21/2024 19:39:22' prior: 50547281 overrides: 16919312!
visitBlockNode: aBlockNode
	"TODO. Cuando inicializamos el visitor, podemos inicializar el contextApplier y ahorrar el ifNil"
	contextApplier isNil ifTrue: [contextApplier := GeneralContextApplier for: aBlockNode.].
	super visitBlockNode: aBlockNode.! !

aMessageNode arguments!

self selectorSymbol !

!classDefinition: #EqualsTypeRejectApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/21/2024 19:55:39'!
Object subclass: #EqualsTypeRejectApplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/21/2024 19:55:19' prior: 50547469!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	"TODO. Si es if pero el bloque node no pertenece a ningun argumento, salir con general (do nothing)"
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | newContext |
		(aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second]) ifTrue:[
				newContext := EqualsTypeRejectApplier 
					to: aMessageNode receiver arguments first key value
					on: aMessageNode receiver receiver receiver
					during: aMessageNode arguments second . "TODO. Como vamos a castear inmediatamente, me parece que este argumento esta de mas"
				contextApplier := newContext.
			].
		newContext := EqualsTypeCastApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			during: aMessageNode arguments first .
		contextApplier := newContext.
	].! !

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 19:55:44'!
ERROR!
!EqualsTypeRejectApplier class methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 19:55:51'!
to: aRenameMe1 on: aRenameMe2 during: aRenameMe3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTo: aRenameMe1 on: aRenameMe2 during: aRenameMe3 ! !
!EqualsTypeRejectApplier class methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 19:56:46' prior: 50547669!
to: aType on: anObjectToCast during: aBlockToCastType  

	^self new initializeToApply: aType on: anObjectToCast during: aBlockToCastType ! !

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 19:56:59'!
ERROR!

!classDefinition: #EqualsTypeRejectApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/21/2024 19:57:10'!
Object subclass: #EqualsTypeRejectApplier
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #EqualsTypeRejectApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/21/2024 19:57:11'!
Object subclass: #EqualsTypeRejectApplier
	instanceVariableNames: 'type objectToCast'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #EqualsTypeRejectApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/21/2024 19:57:11'!
Object subclass: #EqualsTypeRejectApplier
	instanceVariableNames: 'type objectToCast blockToCastType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!EqualsTypeRejectApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 19:57:11'!
initializeToApply: aType on: anObjectToCast during: aBlockToCastType 
	self shouldBeImplemented.
	type := aType.
	objectToCast := anObjectToCast.
	blockToCastType := aBlockToCastType.! !
!EqualsTypeRejectApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 19:57:18' prior: 50547721!
initializeToApply: aType on: anObjectToCast during: aBlockToCastType 
	type := aType.
	objectToCast := anObjectToCast.
	blockToCastType := aBlockToCastType.! !

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 19:57:20'!
FAILURE!
!EqualsTypeCastApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 19:57:42'!
initializeToApply: aType on: anObjectToCast during: aBlockToCast  
	
	type := aType.
	objectToCast := anObjectToCast.
	blockToCast := aBlockToCast.
	! !
!EqualsTypeCastApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 2/21/2024 19:57:42' prior: 50547523!
to: aType on: anObjectToCast during: aBlockToCastType  

	^self new initializeToApply: aType on: anObjectToCast during: aBlockToCastType ! !

!methodRemoval: EqualsTypeCastApplier #initializeToCast:on:during: stamp: 'JFGO 2/21/2024 19:57:43'!
initializeToCast: aType on: anObjectToCast during: aBlockToCast  
	
	type := aType.
	objectToCast := anObjectToCast.
	blockToCast := aBlockToCast.
	!
!EqualsTypeRejectApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 19:58:35'!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes |
	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	^ originalTypes .! !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/21/2024 19:59:33' prior: 50547634!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	"TODO. Si es if pero el bloque node no pertenece a ningun argumento, salir con general (do nothing)"
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | newContext |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		(aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second]) ifTrue:[
				newContext := EqualsTypeRejectApplier 
					to: aMessageNode receiver arguments first key value
					on: aMessageNode receiver receiver receiver
					during: aMessageNode arguments second . "TODO. Como vamos a castear inmediatamente, me parece que este argumento esta de mas"
				contextApplier := newContext.
			].
		newContext := EqualsTypeCastApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			during: aMessageNode arguments first .
		contextApplier := newContext.
	].! !
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/21/2024 20:01:23' prior: 50547411!
test15TypeCastIfFalseCorrectlyRejectsCastedType
"TODO. Coming soon..."
	"self performMethodWithSelector: #typeCastIfTrueIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	]."
	self assert:true.! !

!testRun: #TypeCheckerDragonTest #test15TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:01:26'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 20:01:30'!
PASSED!

aMessageNode receiver arguments first key value!

aMessageNode receiver receiver receiver!
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/21/2024 20:03:26' prior: 50547780!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	"TODO. Si es if pero el bloque node no pertenece a ningun argumento, salir con general (do nothing)"
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | newContext |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		(aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second]) ifTrue:[
				newContext := EqualsTypeRejectApplier 
					to: aMessageNode receiver arguments first key value
					on: aMessageNode receiver receiver receiver
					during: aMessageNode arguments second . "TODO. Como vamos a castear inmediatamente, me parece que este argumento esta de mas"
				contextApplier := newContext.
				^self.
			].
		newContext := EqualsTypeCastApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			during: aMessageNode arguments first .
		contextApplier := newContext.
	].! !

originalTypes!

	originalTypes asArray!

originalTypes asArray reject: [:aLiveType | aLiveType = type]!

	originalTypes asArray first!

	originalTypes asArray first typeName!

	originalTypes asArray second typeName!

	originalTypes asArray reject: [:aLiveType | aLiveType typeName = type]!

	type name!

	originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name]!
!EqualsTypeRejectApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:12:10' prior: 50547768!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes |
	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	^originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].! !

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:12:12'!
ERROR!

UnionType of: SmallInteger and: String!

ut := UnionType of: SmallInteger and: String.!

ut2 := UnionType of: ut and: OrderedCollection.!

methodProperties rawTypesOf: aVarName ifAbsent: [ ^anAbsentBlock value ].!

method methodClass createMethodVariableTypeInfoOf: aVarName in: method are: rawTypes!

varTypeInfo types!

driver inferredTypes!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:18:59'!
ERROR!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:19:04'!
ERROR!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:19:10'!
ERROR!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:19:14'!
ERROR!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:19:17'!
ERROR!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:19:37'!
ERROR!
!EqualsTypeRejectApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:22:39' prior: 50547886!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredRawTypes |
	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredRawTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].! !
!EqualsTypeRejectApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:23:08' prior: 50547938!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredRawTypes |
	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredRawTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	RawToLiveTypesAdapter new adapt: filteredRawTypes .! !

RawToLiveTypesAdapter new adapt: filteredRawTypes !
!EqualsTypeRejectApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:23:43' prior: 50547953!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredRawTypes |
	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredRawTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredRawTypes .! !
!EqualsTypeRejectApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:24:04' prior: 50547971!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

filteredLiveTypes!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:25:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:25:34'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:25:36'!
PASSED!

!methodRemoval: TypeCheckerDragonMethodVisitor #updateContextApplierFor: stamp: 'JFGO 2/21/2024 20:25:55'!
updateContextApplierFor: aMessageNode.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [
		contextApplier := EqualsTypeCastApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			during: aMessageNode arguments first 
			rejectingDuring: aMessageNode arguments second.
	].!
!EqualsTypeRejectApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:26:25' prior: 50547731!
initializeToApply: aType on: anObjectToCast during: aBlockToCastType 
	type := aType.
	objectToCast := anObjectToCast.
	! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:26:29'!
PASSED!
!EqualsTypeCastApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:26:39' prior: 50547743!
initializeToApply: aType on: anObjectToCast during: aBlockToCast  
	
	type := aType.
	objectToCast := anObjectToCast.
	
	! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:26:45'!
PASSED!
!EqualsTypeRejectApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:26:59'!
initializeToApply: aType on: anObjectToCast  
	type := aType.
	objectToCast := anObjectToCast.
	! !
!EqualsTypeRejectApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 2/21/2024 20:26:59' prior: 50547680!
to: aType on: anObjectToCast during: aBlockToCastType  

	^self new initializeToApply: aType on: anObjectToCast ! !

!methodRemoval: EqualsTypeRejectApplier #initializeToApply:on:during: stamp: 'JFGO 2/21/2024 20:26:59'!
initializeToApply: aType on: anObjectToCast during: aBlockToCastType 
	type := aType.
	objectToCast := anObjectToCast.
	!

!classDefinition: #EqualsTypeRejectApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/21/2024 20:27:27'!
Object subclass: #EqualsTypeRejectApplier
	instanceVariableNames: 'type objectToApply blockToCastType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!EqualsTypeRejectApplier methodsFor: 'as yet unclassified' stamp: 'JFGO 2/21/2024 20:27:27' prior: 50548231!
initializeToApply: aType on: anObjectToCast  
	type := aType.
	objectToApply := anObjectToCast.
	! !
!EqualsTypeRejectApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:27:32' prior: 50548263!
initializeToApply: aType on: anObjectToApply  
	type := aType.
	objectToApply := anObjectToApply.
	! !
!EqualsTypeRejectApplier class methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:28:30'!
to: aType on: anObjectToCast   

	^self new initializeToApply: aType on: anObjectToCast ! !

!methodRemoval: EqualsTypeRejectApplier class #to:on:during: stamp: 'JFGO 2/21/2024 20:28:30'!
to: aType on: anObjectToCast during: aBlockToCastType  

	^self new initializeToApply: aType on: anObjectToCast !
!EqualsTypeCastApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:28:58'!
initializeToApply: aType on: anObjectToCast   
	
	type := aType.
	objectToCast := anObjectToCast.
	
	! !
!EqualsTypeCastApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 2/21/2024 20:28:58' prior: 50547752!
to: aType on: anObjectToCast during: aBlockToCastType  

	^self new initializeToApply: aType on: anObjectToCast ! !

!methodRemoval: EqualsTypeCastApplier #initializeToApply:on:during: stamp: 'JFGO 2/21/2024 20:28:58'!
initializeToApply: aType on: anObjectToCast during: aBlockToCast  
	
	type := aType.
	objectToCast := anObjectToCast.
	
	!
!EqualsTypeCastApplier class methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:29:06'!
to: aType on: anObjectToCast   

	^self new initializeToApply: aType on: anObjectToCast ! !

!methodRemoval: EqualsTypeCastApplier class #to:on:during: stamp: 'JFGO 2/21/2024 20:29:06'!
to: aType on: anObjectToCast during: aBlockToCastType  

	^self new initializeToApply: aType on: anObjectToCast !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/21/2024 20:29:39' prior: 50547838!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	"TODO. Si es if pero el bloque node no pertenece a ningun argumento, salir con general (do nothing)"
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | newContext |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		(aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second]) ifTrue:[
				newContext := EqualsTypeRejectApplier 
					to: aMessageNode receiver arguments first key value
					on: aMessageNode receiver receiver receiver.
				contextApplier := newContext.
				^self.
			].
		newContext := EqualsTypeCastApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver.
		contextApplier := newContext.
	].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:29:43'!
PASSED!

Object subclass: #EqualsTypeContextApplier
	instanceVariableNames: 'type objectToApply blockToCastType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classDefinition: #EqualsTypeContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/21/2024 20:30:29'!
Object subclass: #EqualsTypeContextApplier
	instanceVariableNames: 'type objectToApply blockToCastType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

EqualsTypeContextApplier class
	instanceVariableNames: ''!

!classDefinition: 'EqualsTypeContextApplier class' category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/21/2024 20:30:29'!
EqualsTypeContextApplier class
	instanceVariableNames: ''!
!EqualsTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:30:29'!
initializeToApply: aType on: anObjectToApply  
	type := aType.
	objectToApply := anObjectToApply.
	! !
!EqualsTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:30:29'!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!EqualsTypeContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:30:30'!
to: aType on: anObjectToCast   

	^self new initializeToApply: aType on: anObjectToCast ! !
!EqualsTypeContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:31:24'!
to: aType on: anObjectToCast shouldCast: shouldCast    

	^self new initializeToApply: aType on: anObjectToCast ! !

!methodRemoval: EqualsTypeContextApplier class #to:on: stamp: 'JFGO 2/21/2024 20:31:24'!
to: aType on: anObjectToCast   

	^self new initializeToApply: aType on: anObjectToCast !
!EqualsTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:32:31'!
initializeToApply: aType on: anObjectToApply shouldCast: shouldCast   
	type := aType.
	objectToApply := anObjectToApply.
	! !
!EqualsTypeContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 2/21/2024 20:32:31' prior: 50548470!
to: aType on: anObjectToCast shouldCast: shouldCast    

	^self new initializeToApply: aType on: anObjectToCast shouldCast: true ! !

!methodRemoval: EqualsTypeContextApplier #initializeToApply:on: stamp: 'JFGO 2/21/2024 20:32:31'!
initializeToApply: aType on: anObjectToApply  
	type := aType.
	objectToApply := anObjectToApply.
	!

!classDefinition: #EqualsTypeContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/21/2024 20:32:50'!
Object subclass: #EqualsTypeContextApplier
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldCast'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!EqualsTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:32:49' prior: 50548483!
initializeToApply: aType on: anObjectToApply shouldCast: shouldCast   
	type := aType.
	objectToApply := anObjectToApply.
	typeShouldCast:= shouldCast
	! !
!EqualsTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:33:50'!
receiverLiveTypesCastingObjectFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!EqualsTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:33:56'!
receiverLiveTypesRejectingObjectFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := aMessageNode receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 2/21/2024 20:35:28' prior: 50548447!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [ self receiverLiveTypesCastingObjectFor:  aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [ self receiverLiveTypesRejectingObjectFor:  aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo	].! !
!EqualsTypeContextApplier methodsFor: 'evaluating' stamp: 'JFGO 2/21/2024 20:36:01'!
shouldCast
	^true.! !
!EqualsTypeContextApplier methodsFor: 'evaluating' stamp: 'JFGO 2/21/2024 20:36:10' prior: 50548574!
shouldCast
	^typeShouldCast .! !
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 2/21/2024 20:36:40' prior: 50548524!
receiverLiveTypesCastingObjectFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	^FixedType for: type .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:36:44'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/21/2024 20:37:57' prior: 50548324!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	"TODO. Si es if pero el bloque node no pertenece a ningun argumento, salir con general (do nothing)"
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | newContext shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := (aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second]).
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: true.
		contextApplier := newContext.
	].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/21/2024 20:38:27' prior: 50548653!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	"TODO. Si es if pero el bloque node no pertenece a ningun argumento, salir con general (do nothing)"
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | newContext shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := (aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second]).
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not.
		contextApplier := newContext.
	].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/21/2024 20:38:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/21/2024 20:38:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/21/2024 20:38:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/21/2024 20:38:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/21/2024 20:38:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/21/2024 20:38:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/21/2024 20:38:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/21/2024 20:38:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/21/2024 20:38:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/21/2024 20:38:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/21/2024 20:38:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/21/2024 20:38:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 20:38:30'!
ERROR!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:38:30'!
ERROR!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:38:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 20:38:33'!
ERROR!
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 2/21/2024 20:38:53' prior: 50548558!
receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	self shouldCast 
	ifTrue: [ ^self receiverLiveTypesCastingObjectFor:  aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo ]
	ifFalse: [ ^self receiverLiveTypesRejectingObjectFor:  aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo	].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/21/2024 20:38:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/21/2024 20:38:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/21/2024 20:38:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/21/2024 20:38:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/21/2024 20:38:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/21/2024 20:38:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/21/2024 20:38:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/21/2024 20:38:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/21/2024 20:38:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/21/2024 20:38:55'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/21/2024 20:38:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/21/2024 20:38:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 20:38:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:38:56'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:38:56'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:38:56'!
FAILURE!
!EqualsTypeContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 2/21/2024 20:40:24' prior: 50548491!
to: aType on: anObjectToCast shouldCast: shouldCast    

	^self new initializeToApply: aType on: anObjectToCast shouldCast: shouldCast ! !

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:40:25'!
PASSED!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:40:28'!
PASSED!

!classRemoval: #EqualsTypeCastApplier stamp: 'JFGO 2/21/2024 20:40:46'!
Object subclass: #EqualsTypeCastApplier
	instanceVariableNames: 'type objectToCast blockToCast'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!classRemoval: #EqualsTypeRejectApplier stamp: 'JFGO 2/21/2024 20:40:49'!
Object subclass: #EqualsTypeRejectApplier
	instanceVariableNames: 'type objectToApply blockToCastType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:40:52'!
PASSED!
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/21/2024 20:41:39' prior: 50548679!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	"TODO. Si es if pero el bloque node no pertenece a ningun argumento, salir con general (do nothing)"
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := (aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second]).
		
		contextApplier := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not..
	].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/21/2024 20:41:44'!
PASSED!

----SNAPSHOT----(21 February 2024 20:41:51) CuisUniversity-6169.image priorSource: 6892219!

----SNAPSHOT----(21 February 2024 20:42:43) CuisUniversity-6169.image priorSource: 6958029!

----SNAPSHOT----(23 February 2024 10:05:00) CuisUniversity-6169.image priorSource: 6958122!

----QUIT----(23 February 2024 10:10:16) CuisUniversity-6169.image priorSource: 6958215!

----STARTUP---- (25 February 2024 11:59:16) as C:\Users\julian.gutierrez\OneDrive - HEXACTA S.A\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!

!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/25/2024 12:04:23'!
typeCastIfTrueIfFalse
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifTrue: [v1 factorial] ifFalse: [v1 isEmpty].! !
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/25/2024 12:05:08'!
test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType
"TODO. Coming soon..."
	"self performMethodWithSelector: #typeCastIfTrueIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	]."
	self assert:true.! !

!methodRemoval: TypeCheckerDragonTest #test15TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/25/2024 12:05:08'!
test15TypeCastIfFalseCorrectlyRejectsCastedType
"TODO. Coming soon..."
	"self performMethodWithSelector: #typeCastIfTrueIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	]."
	self assert:true.!
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/25/2024 13:47:39' prior: 50549115!
test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType

	self performMethodWithSelector: #typeCastIfTrueIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !

shouldReject!

aMessageNode selectorSymbol = #ifFalse:!

aBlockNode = aMessageNode arguments second!

(aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second])!

shouldReject not!

aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second]!
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/25/2024 13:58:31' prior: 50549004!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	"TODO. Si es if pero el bloque node no pertenece a ningun argumento, salir con general (do nothing)"
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		
		contextApplier := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not..
	].! !

aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second]!

aBlockNode = aMessageNode arguments second!
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/25/2024 14:04:30' prior: 50549159!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	"TODO. Si es if pero el bloque node no pertenece a ningun argumento, salir con general (do nothing)"
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		contextApplier := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not..
	].! !

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:05:00'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:05:03'!
PASSED!
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/25/2024 14:05:25' prior: 50549139!
test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType

	self performMethodWithSelector: #typeCastIfTrueIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	self performMethodWithSelector: #typeCastIfFalseIfTrue typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !
!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/25/2024 14:05:55'!
typeCastIfFalseIfTrue
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifFalse: [v1 isEmpty] ifTrue: [v1 factorial] .! !

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:06:13'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:06:17'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:07:00'!
PASSED!
!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/25/2024 14:08:20'!
typeCastIfFalseIfTrue2
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifFalse: [v1 isEmpty] ifTrue: [v1 factorial] .! !

!methodRemoval: TypeCheckerDragonTestMethods #typeCastIfFalseIfTrue stamp: 'JFGO 2/25/2024 14:08:20'!
typeCastIfFalseIfTrue
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifFalse: [v1 isEmpty] ifTrue: [v1 factorial] .!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/25/2024 14:08:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/25/2024 14:08:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/25/2024 14:08:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/25/2024 14:08:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/25/2024 14:08:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/25/2024 14:08:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/25/2024 14:08:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/25/2024 14:08:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/25/2024 14:08:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/25/2024 14:08:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/25/2024 14:08:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/25/2024 14:08:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/25/2024 14:08:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/25/2024 14:08:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:08:23'!
ERROR!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:08:23'!
ERROR!
!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/25/2024 14:08:39'!
typeCastIfFalseIfTrue
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifFalse: [v1 isEmpty] ifTrue: [v1 factorial] .! !

!methodRemoval: TypeCheckerDragonTestMethods #typeCastIfFalseIfTrue2 stamp: 'JFGO 2/25/2024 14:08:39'!
typeCastIfFalseIfTrue2
	|v1|
	v1:= OrderedCollection new.
	v1 := 'true'.
	v1 := 5.
	v1 class = SmallInteger ifFalse: [v1 isEmpty] ifTrue: [v1 factorial] .!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:08:41'!
PASSED!

----SNAPSHOT----(25 February 2024 14:11:55) CuisUniversity-6169.image priorSource: 6958308!
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/25/2024 14:17:20'!
test16TypeCastNestedRejectionsRejectsEachLevelCastedType

	self performMethodWithSelector: #typeCastIfTrueIfFalse typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	self performMethodWithSelector: #typeCastIfFalseIfTrue typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].
	! !
!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/25/2024 14:22:29' prior: 50547049!
TODOtypeCastIfTrueLevel2Nested

	|v1|
	v1:= OrderedCollection new.
	v1 := true.
	v1 := 5.
	v1 class = SmallInteger ifFalse: [
		v1 class = OrderedCollection ifFalse: 
			[
				v1 not.
			].
		].! !
!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/25/2024 14:22:47'!
typeCastIfFalseNested

	|v1|
	v1:= OrderedCollection new.
	v1 := true.
	v1 := 5.
	v1 class = SmallInteger ifFalse: [
		v1 class = OrderedCollection ifFalse: 
			[
				v1 not.
			].
		].! !

!methodRemoval: TypeCheckerDragonTestMethods #TODOtypeCastIfTrueLevel2Nested stamp: 'JFGO 2/25/2024 14:22:47'!
TODOtypeCastIfTrueLevel2Nested

	|v1|
	v1:= OrderedCollection new.
	v1 := true.
	v1 := 5.
	v1 class = SmallInteger ifFalse: [
		v1 class = OrderedCollection ifFalse: 
			[
				v1 not.
			].
		].!

Date today!
!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/25/2024 14:23:58' prior: 50549453!
typeCastIfFalseNested

	|v1|
	v1:= OrderedCollection new.
	v1 := Date today.
	v1 := true.
	v1 := 5.
	v1 class = SmallInteger ifFalse: [
		v1 class = OrderedCollection ifFalse: 
			[
				v1 class = Date ifFalse:[
					v1 not.
				].
			].
		].! !
!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/25/2024 14:24:20' prior: 50549346!
typeCastIfFalseIfTrue
	|v1|
	v1:= OrderedCollection new.
	v1 := 5.
	v1 := 'true'.
	
	v1 class = SmallInteger ifFalse: [v1 isEmpty] ifTrue: [v1 factorial] .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/25/2024 14:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/25/2024 14:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/25/2024 14:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/25/2024 14:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/25/2024 14:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/25/2024 14:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/25/2024 14:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/25/2024 14:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/25/2024 14:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/25/2024 14:24:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/25/2024 14:24:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/25/2024 14:24:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/25/2024 14:24:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/25/2024 14:24:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:24:23'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 14:24:23'!
PASSED!
!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/25/2024 14:24:41' prior: 50549473!
typeCastIfFalseNested

	|v1|
	v1:= OrderedCollection new.
	v1 := Date today.
	v1 := 5.
	v1 := true.
	
	v1 class = SmallInteger ifFalse: [
		v1 class = OrderedCollection ifFalse: 
			[
				v1 class = Date ifFalse:[
					v1 not.
				].
			].
		].! !
!TypeCheckerDragonTestMethods methodsFor: 'with context filters' stamp: 'JFGO 2/25/2024 14:25:01' prior: 50549560!
typeCastIfFalseNested

	|v1|
	v1:= OrderedCollection new.
	v1 := Date today.
	v1 := 5.
	v1 := true.
	
	v1 class = SmallInteger ifFalse: [
		v1 class = OrderedCollection ifFalse: 		[
				v1 class = Date ifFalse:[
					v1 not.
				].
			].
		].! !
!TypeCheckerDragonTest methodsFor: 'tests for methods with branches' stamp: 'JFGO 2/25/2024 14:25:28' prior: 50549428!
test16TypeCastNestedRejectionsRejectsEachLevelCastedType

	self performMethodWithSelector: #typeCastIfFalseNested typeCheckAndAssert: [:typeChecker :methodChecked | 
		self deny: typeChecker hasIssues.
	].

	! !

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 14:25:30'!
FAILURE!
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/25/2024 14:27:31' prior: 50549188!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	"TODO. Si es if pero el bloque node no pertenece a ningun argumento, salir con general (do nothing)"
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject newContext |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not.
		contextApplier := newContext.
	].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/25/2024 14:27:56' prior: 50549599!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	"TODO. Si es if pero el bloque node no pertenece a ningun argumento, salir con general (do nothing)"
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject newContext |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: contextApplier.
		contextApplier := newContext.
	].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/25/2024 14:28:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/25/2024 14:28:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/25/2024 14:28:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/25/2024 14:28:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/25/2024 14:28:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/25/2024 14:28:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/25/2024 14:28:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/25/2024 14:28:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/25/2024 14:28:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/25/2024 14:28:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/25/2024 14:28:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/25/2024 14:28:06'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/25/2024 14:28:06'!
ERROR!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/25/2024 14:28:06'!
ERROR!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:28:06'!
ERROR!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 14:28:06'!
ERROR!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/25/2024 14:28:10'!
ERROR!
!EqualsTypeContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 2/25/2024 14:28:22'!
to: aRenameMe1 on: aRenameMe2 shouldCast: aRenameMe3 withPreviousContext: aContextApplier 
	self shouldBeImplemented.! !
!EqualsTypeContextApplier class methodsFor: 'as yet unclassified' stamp: 'JFGO 2/25/2024 14:28:42' prior: 50548852!
to: aType on: anObjectToCast shouldCast: shouldCast    

	^self new initializeToApply: aType on: anObjectToCast shouldCast: shouldCast ! !
!EqualsTypeContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 2/25/2024 14:29:15' prior: 50549730!
to: aType on: anObjectToCast shouldCast: shouldCast withPreviousContext: anotherContextApplier 
	self shouldBeImplemented.! !
!EqualsTypeContextApplier class methodsFor: 'instance creation' stamp: 'JFGO 2/25/2024 14:29:34' prior: 50549746!
to: aType on: anObjectToCast shouldCast: shouldCast withPreviousContext: anotherContextApplier 
	^self new initializeToApply: aType on: anObjectToCast shouldCast: shouldCast withPreviousContext: anotherContextApplier.! !

!methodRemoval: EqualsTypeContextApplier class #to:on:shouldCast: stamp: 'JFGO 2/25/2024 14:29:37'!
to: aType on: anObjectToCast shouldCast: shouldCast    

	^self new initializeToApply: aType on: anObjectToCast shouldCast: shouldCast !
!EqualsTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 2/25/2024 14:29:51'!
initializeToApply: aType on: anObjectToApply shouldCast: shouldCast withPreviousContext: anotherContextApplier
	type := aType.
	objectToApply := anObjectToApply.
	typeShouldCast:= shouldCast
	! !

!classDefinition: #EqualsTypeContextApplier category: #'LiveTypingTypeChecker-ContextAppliers' stamp: 'JFGO 2/25/2024 14:30:09'!
Object subclass: #EqualsTypeContextApplier
	instanceVariableNames: 'type objectToApply blockToCastType typeShouldCast previousContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'LiveTypingTypeChecker-ContextAppliers'!
!EqualsTypeContextApplier methodsFor: 'instance creation' stamp: 'JFGO 2/25/2024 14:30:06' prior: 50549772!
initializeToApply: aType on: anObjectToApply shouldCast: shouldCast withPreviousContext: anotherContextApplier
	type := aType.
	objectToApply := anObjectToApply.
	typeShouldCast:= shouldCast.
	previousContext := anotherContextApplier .
	! !

!methodRemoval: EqualsTypeContextApplier #initializeToApply:on:shouldCast: stamp: 'JFGO 2/25/2024 14:30:14'!
initializeToApply: aType on: anObjectToApply shouldCast: shouldCast   
	type := aType.
	objectToApply := anObjectToApply.
	typeShouldCast:= shouldCast
	!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/25/2024 14:30:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/25/2024 14:30:21'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/25/2024 14:30:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/25/2024 14:30:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/25/2024 14:30:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/25/2024 14:30:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/25/2024 14:30:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/25/2024 14:30:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/25/2024 14:30:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/25/2024 14:30:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/25/2024 14:30:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/25/2024 14:30:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/25/2024 14:30:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/25/2024 14:30:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:30:22'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 14:30:22'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 14:30:22'!
FAILURE!
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 2/25/2024 14:30:58' prior: 50548541!
receiverLiveTypesRejectingObjectFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := previousContext receiverLiveTypesIn:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/25/2024 14:31:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/25/2024 14:31:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/25/2024 14:31:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/25/2024 14:31:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/25/2024 14:31:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/25/2024 14:31:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/25/2024 14:31:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/25/2024 14:31:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/25/2024 14:31:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/25/2024 14:31:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/25/2024 14:31:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/25/2024 14:31:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/25/2024 14:31:07'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/25/2024 14:31:07'!
ERROR!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:31:07'!
ERROR!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 14:31:07'!
ERROR!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 14:31:13'!
ERROR!
!EqualsTypeContextApplier methodsFor: 'LiveTyping' stamp: 'JFGO 2/25/2024 14:32:35' prior: 50549883!
receiverLiveTypesRejectingObjectFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo
	


	| originalTypes filteredLiveTypes |
	originalTypes := previousContext receiverLiveTypesFor: aMessageNode In:  compiledMethod addingIncompleteTypeInfoTo: incompleteTypeInfo.
	
	filteredLiveTypes := originalTypes asArray reject: [:aLiveType | aLiveType typeName = type name].
	^RawToLiveTypesAdapter new adapt: filteredLiveTypes .! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/25/2024 14:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/25/2024 14:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/25/2024 14:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/25/2024 14:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/25/2024 14:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/25/2024 14:32:37'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/25/2024 14:32:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/25/2024 14:32:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/25/2024 14:32:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/25/2024 14:32:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/25/2024 14:32:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/25/2024 14:32:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/25/2024 14:32:38'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/25/2024 14:32:38'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:32:38'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 14:32:38'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/25/2024 14:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/25/2024 14:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/25/2024 14:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/25/2024 14:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/25/2024 14:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/25/2024 14:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/25/2024 14:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/25/2024 14:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/25/2024 14:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/25/2024 14:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/25/2024 14:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/25/2024 14:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/25/2024 14:33:18'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/25/2024 14:33:18'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:33:18'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 14:33:18'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 14:33:22'!
FAILURE!

----SNAPSHOT----(25 February 2024 14:35:18) CuisUniversity-6169.image priorSource: 6968740!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 14:36:39'!
FAILURE!

aMessageNode argumentsInEvaluationOrder !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/25/2024 14:40:46' prior: 50547453!
visitMessageNodeArguments: aMessageNode
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | 
		self updateContextApplierFor: aMessageNode visiting: argumentBlock.
		argumentBlock accept: self.
		self restorePreviousContext.
	].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/25/2024 14:41:18' prior: 50547402!
restorePreviousContext
	contextApplier := contextApplier previous.! !
!EqualsTypeContextApplier methodsFor: 'restoration' stamp: 'JFGO 2/25/2024 14:41:48'!
previous
	^previousContext.! !
!GeneralContextApplier methodsFor: 'restoration' stamp: 'JFGO 2/25/2024 14:42:38'!
previous
	"There's no more general context than this. Nothing to restore"
	^self.! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 14:42:43'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 14:42:43'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 14:42:43'!
FAILURE!

aMessageNode receiver!

aMessageNode receiver!

aMessageNode receiver!

aMessageNode receiver!

aMessageNode argumentsInEvaluationOrder!

aMessageNode argumentsInEvaluationOrder!
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/25/2024 15:07:24' prior: 50549629!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject newContext |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: contextApplier.
		contextApplier := newContext.
	].! !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/25/2024 15:11:50' prior: 50550238!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	"By default, the block will run with a generalContext (i.e no branches detected)."
	newContext := GeneralContextApplier for: aBlockNode.
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: contextApplier.
		
				
	].
	contextApplier := newContext.

	! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/25/2024 15:11:58'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 15:11:58'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/25/2024 15:11:58'!
FAILURE!

aMessageNode argumentsInEvaluationOrder!
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/25/2024 15:18:40' prior: 50550266!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	"By default, the block will run with a generalContext (i.e no branches detected)."
	"TODO. TOMAR EL BLOQUE A VISITAR Y DECIDIR SI RESTAURAR O NO"
	newContext := GeneralContextApplier for: aBlockNode. 
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: contextApplier.
		
				
	].
	contextApplier := newContext.

	! !

----QUIT----(25 February 2024 15:26:51) CuisUniversity-6169.image priorSource: 6991174!

----STARTUP---- (26 February 2024 17:57:31) as C:\Users\julian.gutierrez\OneDrive - HEXACTA S.A\Tesis\TESIS-LAST\windows64\CuisUniversity-6169.image!


!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/26/2024 18:04:30'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/26/2024 18:04:30'!
FAILURE!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/26/2024 18:04:30'!
FAILURE!
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/26/2024 18:07:18' prior: 50550371!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	
	| newContext |
	
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: contextApplier.
		contextApplier := newContext.
				
	].
	

	! !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/26/2024 19:16:07' prior: 50550484!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	
	| newContext contextUpdated|
	
	contextUpdated := false.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: contextApplier.
		contextApplier := newContext.
		contextUpdated := true.
				
	].
	

	! !
!TypeCheckerDragonMethodVisitor methodsFor: 'context appliers' stamp: 'JFGO 2/26/2024 19:16:21' prior: 50550513!
updateContextApplierFor: aMessageNode visiting: aBlockNode
	
	| newContext contextUpdated|
	
	contextUpdated := false.
	aMessageNode isIfWithMessageNodeAsCondition ifTrue: [ | shouldReject |
		"TODO. Esto puede ser un mensaje bonito que se llame self shouldReject: aBlockNode. Pero todavia estamos muy temprano en TDD"
		shouldReject := aMessageNode selectorSymbol = #ifFalse: and: [aBlockNode = aMessageNode arguments second].
		shouldReject := shouldReject or: [aMessageNode selectorSymbol = #ifTrue:ifFalse: and: [aBlockNode = aMessageNode arguments second]].
		
		newContext := EqualsTypeContextApplier 
			to: aMessageNode receiver arguments first key value
			on: aMessageNode receiver receiver receiver
			shouldCast: shouldReject not
			withPreviousContext: contextApplier.
		contextApplier := newContext.
		contextUpdated := true.
				
	].
	^contextUpdated .
	

	! !
!TypeCheckerDragonMethodVisitor methodsFor: 'visiting' stamp: 'JFGO 2/26/2024 19:18:19' prior: 50550134!
visitMessageNodeArguments: aMessageNode
	
	aMessageNode argumentsInEvaluationOrder do: [:argumentBlock | | shouldRestore | 
		shouldRestore := self updateContextApplierFor: aMessageNode visiting: argumentBlock.
		argumentBlock accept: self.
		shouldRestore ifTrue: [self restorePreviousContext].
	].! !

!testRun: #TypeCheckerDragonTest #test01MethodTypedCorrectlyDoesNotGenerateIssues stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test02MethodThatDontCheckTypesGeneratesIssue stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test03PrimitiveMethodsDontCheckTypes stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test04MethodWithMessageNotUnderstoodByReceiverGeneratesError stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test05MethodWithTypeErrorOnMessageReceiverGeneratesAlert stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test06MethodWithManyTypeErrorsOnMessageGeneratesManyAlerts stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test07MethodWithMessageWithNoReceiverTypeGeneratesAlert stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test08MethodWithMessageNotUnderstoodInArgumentsGeneratesAlerts stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test09MethodThatThrowsSpecificExceptionDoesNoGenerateAlerts stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test10MessageSentToMethodWithNoReturnTypeGeneratesIssue stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test11MethodWithCollectionItemsGeneratesAlertForBlockVariable stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test12MethodWithVariableManyTypesGeneratesAlertForEachUnsupportedType stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test13TypeCastIfTrueCorrectlyAppliesCastedType stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test14TypeCastIfFalseCorrectlyRejectsCastedType stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test15TypeCastIfTrueIfFalseCorrectlyAppliesAndRejectsCastedType stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!

!testRun: #TypeCheckerDragonTest #test16TypeCastNestedRejectionsRejectsEachLevelCastedType stamp: 'JFGO 2/26/2024 19:19:14'!
PASSED!